
Stm232h750_Externla_loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000494  20000004  20000004  00001004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  20000498  20000498  00001498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  200004a0  200004a0  000014a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  200004a4  200004a4  000014a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  200004a8  200004a8  000014a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001e0  2000051c  2000051c  0000151c  2**2
                  ALLOC
  6 .text         00018110  200006fc  200006fc  000016fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  2001880c  2001880c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       00000060  200188d4  200188d4  000198d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000600  20018934  20018934  00019934  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001a8d4  2**0
                  CONTENTS, READONLY
 11 .debug_info   000144ab  00000000  00000000  0001a902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000034e2  00000000  00000000  0002edad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000011e0  00000000  00000000  00032290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003936e  00000000  00000000  00033470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b78e  00000000  00000000  0006c7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001585ff  00000000  00000000  00087f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e056b  2**0
                  CONTENTS, READONLY
 18 .debug_rnglists 00000d49  00000000  00000000  001e05ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00004bfc  00000000  00000000  001e12f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000074  00000000  00000000  001e5ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200006fc <__do_global_dtors_aux>:
200006fc:	b510      	push	{r4, lr}
200006fe:	4c05      	ldr	r4, [pc, #20]	@ (20000714 <__do_global_dtors_aux+0x18>)
20000700:	7823      	ldrb	r3, [r4, #0]
20000702:	b933      	cbnz	r3, 20000712 <__do_global_dtors_aux+0x16>
20000704:	4b04      	ldr	r3, [pc, #16]	@ (20000718 <__do_global_dtors_aux+0x1c>)
20000706:	b113      	cbz	r3, 2000070e <__do_global_dtors_aux+0x12>
20000708:	4804      	ldr	r0, [pc, #16]	@ (2000071c <__do_global_dtors_aux+0x20>)
2000070a:	f3af 8000 	nop.w
2000070e:	2301      	movs	r3, #1
20000710:	7023      	strb	r3, [r4, #0]
20000712:	bd10      	pop	{r4, pc}
20000714:	2000051c 	.word	0x2000051c
20000718:	00000000 	.word	0x00000000
2000071c:	200187f0 	.word	0x200187f0

20000720 <frame_dummy>:
20000720:	b508      	push	{r3, lr}
20000722:	4b03      	ldr	r3, [pc, #12]	@ (20000730 <frame_dummy+0x10>)
20000724:	b11b      	cbz	r3, 2000072e <frame_dummy+0xe>
20000726:	4903      	ldr	r1, [pc, #12]	@ (20000734 <frame_dummy+0x14>)
20000728:	4803      	ldr	r0, [pc, #12]	@ (20000738 <frame_dummy+0x18>)
2000072a:	f3af 8000 	nop.w
2000072e:	bd08      	pop	{r3, pc}
20000730:	00000000 	.word	0x00000000
20000734:	20000520 	.word	0x20000520
20000738:	200187f0 	.word	0x200187f0

2000073c <_stack_init>:
2000073c:	f5a3 3a80 	sub.w	sl, r3, #65536	@ 0x10000
20000740:	4770      	bx	lr
20000742:	bf00      	nop

20000744 <_mainCRTStartup>:
20000744:	4b17      	ldr	r3, [pc, #92]	@ (200007a4 <_mainCRTStartup+0x60>)
20000746:	2b00      	cmp	r3, #0
20000748:	bf08      	it	eq
2000074a:	4b13      	ldreq	r3, [pc, #76]	@ (20000798 <_mainCRTStartup+0x54>)
2000074c:	469d      	mov	sp, r3
2000074e:	f7ff fff5 	bl	2000073c <_stack_init>
20000752:	2100      	movs	r1, #0
20000754:	468b      	mov	fp, r1
20000756:	460f      	mov	r7, r1
20000758:	4813      	ldr	r0, [pc, #76]	@ (200007a8 <_mainCRTStartup+0x64>)
2000075a:	4a14      	ldr	r2, [pc, #80]	@ (200007ac <_mainCRTStartup+0x68>)
2000075c:	1a12      	subs	r2, r2, r0
2000075e:	f017 fda4 	bl	200182aa <memset>
20000762:	4b0e      	ldr	r3, [pc, #56]	@ (2000079c <_mainCRTStartup+0x58>)
20000764:	2b00      	cmp	r3, #0
20000766:	d000      	beq.n	2000076a <_mainCRTStartup+0x26>
20000768:	4798      	blx	r3
2000076a:	4b0d      	ldr	r3, [pc, #52]	@ (200007a0 <_mainCRTStartup+0x5c>)
2000076c:	2b00      	cmp	r3, #0
2000076e:	d000      	beq.n	20000772 <_mainCRTStartup+0x2e>
20000770:	4798      	blx	r3
20000772:	2000      	movs	r0, #0
20000774:	2100      	movs	r1, #0
20000776:	0004      	movs	r4, r0
20000778:	000d      	movs	r5, r1
2000077a:	480d      	ldr	r0, [pc, #52]	@ (200007b0 <_mainCRTStartup+0x6c>)
2000077c:	2800      	cmp	r0, #0
2000077e:	d002      	beq.n	20000786 <_mainCRTStartup+0x42>
20000780:	480c      	ldr	r0, [pc, #48]	@ (200007b4 <_mainCRTStartup+0x70>)
20000782:	f3af 8000 	nop.w
20000786:	f017 fe3b 	bl	20018400 <__libc_init_array>
2000078a:	0020      	movs	r0, r4
2000078c:	0029      	movs	r1, r5
2000078e:	f000 fadd 	bl	20000d4c <main>
20000792:	f017 fbeb 	bl	20017f6c <exit>
20000796:	bf00      	nop
20000798:	00080000 	.word	0x00080000
	...
200007a8:	2000051c 	.word	0x2000051c
200007ac:	200006fc 	.word	0x200006fc
	...
200007b8:	200004a8 	.word	0x200004a8
200007bc:	200004a8 	.word	0x200004a8
200007c0:	2000051c 	.word	0x2000051c
200007c4:	2000051c 	.word	0x2000051c
200007c8:	200006fc 	.word	0x200006fc

200007cc <Init>:
 * @brief  System initialization.
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Init(void) {
200007cc:	b580      	push	{r7, lr}
200007ce:	b086      	sub	sp, #24
200007d0:	af00      	add	r7, sp, #0

    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
200007d2:	4b26      	ldr	r3, [pc, #152]	@ (2000086c <Init+0xa0>)
200007d4:	4a26      	ldr	r2, [pc, #152]	@ (20000870 <Init+0xa4>)
200007d6:	601a      	str	r2, [r3, #0]


    SystemInit();
200007d8:	f001 fa54 	bl	20001c84 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x24000000 | 0x200;
200007dc:	4b25      	ldr	r3, [pc, #148]	@ (20000874 <Init+0xa8>)
200007de:	4a26      	ldr	r2, [pc, #152]	@ (20000878 <Init+0xac>)
200007e0:	609a      	str	r2, [r3, #8]
200007e2:	2300      	movs	r3, #0
200007e4:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200007e6:	693b      	ldr	r3, [r7, #16]
200007e8:	f383 8810 	msr	PRIMASK, r3
}
200007ec:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
200007ee:	f001 fc75 	bl	200020dc <HAL_Init>

    SystemClock_Config();
200007f2:	f000 fab7 	bl	20000d64 <SystemClock_Config>

    MX_GPIO_Init();
200007f6:	f000 fa43 	bl	20000c80 <MX_GPIO_Init>

    __HAL_RCC_QSPI_FORCE_RESET();  //completely reset peripheral
200007fa:	4b20      	ldr	r3, [pc, #128]	@ (2000087c <Init+0xb0>)
200007fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
200007fe:	4a1f      	ldr	r2, [pc, #124]	@ (2000087c <Init+0xb0>)
20000800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20000804:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_QSPI_RELEASE_RESET();
20000806:	4b1d      	ldr	r3, [pc, #116]	@ (2000087c <Init+0xb0>)
20000808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
2000080a:	4a1c      	ldr	r2, [pc, #112]	@ (2000087c <Init+0xb0>)
2000080c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
20000810:	67d3      	str	r3, [r2, #124]	@ 0x7c

    if (CSP_QUADSPI_Init() != HAL_OK) {
20000812:	f000 fc97 	bl	20001144 <CSP_QUADSPI_Init>
20000816:	4603      	mov	r3, r0
20000818:	2b00      	cmp	r3, #0
2000081a:	d007      	beq.n	2000082c <Init+0x60>
2000081c:	2301      	movs	r3, #1
2000081e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000820:	68fb      	ldr	r3, [r7, #12]
20000822:	f383 8810 	msr	PRIMASK, r3
}
20000826:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000828:	2300      	movs	r3, #0
2000082a:	e01a      	b.n	20000862 <Init+0x96>
    }


    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
2000082c:	f000 ffa4 	bl	20001778 <CSP_QSPI_EnableMemoryMappedMode>
20000830:	4603      	mov	r3, r0
20000832:	2b00      	cmp	r3, #0
20000834:	d007      	beq.n	20000846 <Init+0x7a>
20000836:	2301      	movs	r3, #1
20000838:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000083a:	68bb      	ldr	r3, [r7, #8]
2000083c:	f383 8810 	msr	PRIMASK, r3
}
20000840:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000842:	2300      	movs	r3, #0
20000844:	e00d      	b.n	20000862 <Init+0x96>
    }

    /*Trigger read access before HAL_QSPI_Abort() otherwise abort functionality gets stuck*/
    uint32_t a = *(uint32_t*) 0x90000000;
20000846:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
2000084a:	681b      	ldr	r3, [r3, #0]
2000084c:	617b      	str	r3, [r7, #20]
    a++;
2000084e:	697b      	ldr	r3, [r7, #20]
20000850:	3301      	adds	r3, #1
20000852:	617b      	str	r3, [r7, #20]
20000854:	2301      	movs	r3, #1
20000856:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	f383 8810 	msr	PRIMASK, r3
}
2000085e:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
20000860:	2301      	movs	r3, #1
}
20000862:	4618      	mov	r0, r3
20000864:	3718      	adds	r7, #24
20000866:	46bd      	mov	sp, r7
20000868:	bd80      	pop	{r7, pc}
2000086a:	bf00      	nop
2000086c:	e000edf0 	.word	0xe000edf0
20000870:	a05f0000 	.word	0xa05f0000
20000874:	e000ed00 	.word	0xe000ed00
20000878:	24000200 	.word	0x24000200
2000087c:	58024400 	.word	0x58024400

20000880 <Write>:
 * @param   Size   : size of data
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer) {
20000880:	b580      	push	{r7, lr}
20000882:	b088      	sub	sp, #32
20000884:	af00      	add	r7, sp, #0
20000886:	60f8      	str	r0, [r7, #12]
20000888:	60b9      	str	r1, [r7, #8]
2000088a:	607a      	str	r2, [r7, #4]
2000088c:	2300      	movs	r3, #0
2000088e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000890:	69fb      	ldr	r3, [r7, #28]
20000892:	f383 8810 	msr	PRIMASK, r3
}
20000896:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
20000898:	4815      	ldr	r0, [pc, #84]	@ (200008f0 <Write+0x70>)
2000089a:	f012 fbce 	bl	2001303a <HAL_QSPI_Abort>
2000089e:	4603      	mov	r3, r0
200008a0:	2b00      	cmp	r3, #0
200008a2:	d007      	beq.n	200008b4 <Write+0x34>
200008a4:	2301      	movs	r3, #1
200008a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200008a8:	69bb      	ldr	r3, [r7, #24]
200008aa:	f383 8810 	msr	PRIMASK, r3
}
200008ae:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
200008b0:	2300      	movs	r3, #0
200008b2:	e019      	b.n	200008e8 <Write+0x68>
    }


    if (CSP_QSPI_WriteMemory((uint8_t*) buffer, (Address & (0x0fffffff)), Size) != HAL_OK) {
200008b4:	68fb      	ldr	r3, [r7, #12]
200008b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
200008ba:	68ba      	ldr	r2, [r7, #8]
200008bc:	4619      	mov	r1, r3
200008be:	6878      	ldr	r0, [r7, #4]
200008c0:	f000 fece 	bl	20001660 <CSP_QSPI_WriteMemory>
200008c4:	4603      	mov	r3, r0
200008c6:	2b00      	cmp	r3, #0
200008c8:	d007      	beq.n	200008da <Write+0x5a>
200008ca:	2301      	movs	r3, #1
200008cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200008ce:	697b      	ldr	r3, [r7, #20]
200008d0:	f383 8810 	msr	PRIMASK, r3
}
200008d4:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
200008d6:	2300      	movs	r3, #0
200008d8:	e006      	b.n	200008e8 <Write+0x68>
200008da:	2301      	movs	r3, #1
200008dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200008de:	693b      	ldr	r3, [r7, #16]
200008e0:	f383 8810 	msr	PRIMASK, r3
}
200008e4:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
200008e6:	2301      	movs	r3, #1
}
200008e8:	4618      	mov	r0, r3
200008ea:	3720      	adds	r7, #32
200008ec:	46bd      	mov	sp, r7
200008ee:	bd80      	pop	{r7, pc}
200008f0:	20000538 	.word	0x20000538

200008f4 <SectorErase>:
 * @param   EraseStartAddress :  erase start address
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
200008f4:	b580      	push	{r7, lr}
200008f6:	b086      	sub	sp, #24
200008f8:	af00      	add	r7, sp, #0
200008fa:	6078      	str	r0, [r7, #4]
200008fc:	6039      	str	r1, [r7, #0]
200008fe:	2300      	movs	r3, #0
20000900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000902:	697b      	ldr	r3, [r7, #20]
20000904:	f383 8810 	msr	PRIMASK, r3
}
20000908:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
2000090a:	4814      	ldr	r0, [pc, #80]	@ (2000095c <SectorErase+0x68>)
2000090c:	f012 fb95 	bl	2001303a <HAL_QSPI_Abort>
20000910:	4603      	mov	r3, r0
20000912:	2b00      	cmp	r3, #0
20000914:	d007      	beq.n	20000926 <SectorErase+0x32>
20000916:	2301      	movs	r3, #1
20000918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000091a:	693b      	ldr	r3, [r7, #16]
2000091c:	f383 8810 	msr	PRIMASK, r3
}
20000920:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000922:	2300      	movs	r3, #0
20000924:	e015      	b.n	20000952 <SectorErase+0x5e>
    }


    if (CSP_QSPI_EraseSector(EraseStartAddress, EraseEndAddress) != HAL_OK) {
20000926:	6839      	ldr	r1, [r7, #0]
20000928:	6878      	ldr	r0, [r7, #4]
2000092a:	f000 fe47 	bl	200015bc <CSP_QSPI_EraseSector>
2000092e:	4603      	mov	r3, r0
20000930:	2b00      	cmp	r3, #0
20000932:	d007      	beq.n	20000944 <SectorErase+0x50>
20000934:	2301      	movs	r3, #1
20000936:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000938:	68fb      	ldr	r3, [r7, #12]
2000093a:	f383 8810 	msr	PRIMASK, r3
}
2000093e:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000940:	2300      	movs	r3, #0
20000942:	e006      	b.n	20000952 <SectorErase+0x5e>
20000944:	2301      	movs	r3, #1
20000946:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000948:	68bb      	ldr	r3, [r7, #8]
2000094a:	f383 8810 	msr	PRIMASK, r3
}
2000094e:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
20000950:	2301      	movs	r3, #1
}
20000952:	4618      	mov	r0, r3
20000954:	3718      	adds	r7, #24
20000956:	46bd      	mov	sp, r7
20000958:	bd80      	pop	{r7, pc}
2000095a:	bf00      	nop
2000095c:	20000538 	.word	0x20000538

20000960 <MassErase>:
 *      none
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(uint32_t a) {
20000960:	b580      	push	{r7, lr}
20000962:	b086      	sub	sp, #24
20000964:	af00      	add	r7, sp, #0
20000966:	6078      	str	r0, [r7, #4]
20000968:	2300      	movs	r3, #0
2000096a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000096c:	697b      	ldr	r3, [r7, #20]
2000096e:	f383 8810 	msr	PRIMASK, r3
}
20000972:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
20000974:	4812      	ldr	r0, [pc, #72]	@ (200009c0 <MassErase+0x60>)
20000976:	f012 fb60 	bl	2001303a <HAL_QSPI_Abort>
2000097a:	4603      	mov	r3, r0
2000097c:	2b00      	cmp	r3, #0
2000097e:	d007      	beq.n	20000990 <MassErase+0x30>
20000980:	2301      	movs	r3, #1
20000982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000984:	693b      	ldr	r3, [r7, #16]
20000986:	f383 8810 	msr	PRIMASK, r3
}
2000098a:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2000098c:	2300      	movs	r3, #0
2000098e:	e013      	b.n	200009b8 <MassErase+0x58>
    }


    if (CSP_QSPI_Erase_Chip() != HAL_OK) {
20000990:	f000 fc0e 	bl	200011b0 <CSP_QSPI_Erase_Chip>
20000994:	4603      	mov	r3, r0
20000996:	2b00      	cmp	r3, #0
20000998:	d007      	beq.n	200009aa <MassErase+0x4a>
2000099a:	2301      	movs	r3, #1
2000099c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000099e:	68fb      	ldr	r3, [r7, #12]
200009a0:	f383 8810 	msr	PRIMASK, r3
}
200009a4:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
200009a6:	2300      	movs	r3, #0
200009a8:	e006      	b.n	200009b8 <MassErase+0x58>
200009aa:	2301      	movs	r3, #1
200009ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200009ae:	68bb      	ldr	r3, [r7, #8]
200009b0:	f383 8810 	msr	PRIMASK, r3
}
200009b4:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
200009b6:	2301      	movs	r3, #1
}
200009b8:	4618      	mov	r0, r3
200009ba:	3718      	adds	r7, #24
200009bc:	46bd      	mov	sp, r7
200009be:	bd80      	pop	{r7, pc}
200009c0:	20000538 	.word	0x20000538

200009c4 <CheckSum>:
 *      InitVal       : Initial CRC value
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
200009c4:	b480      	push	{r7}
200009c6:	b089      	sub	sp, #36	@ 0x24
200009c8:	af00      	add	r7, sp, #0
200009ca:	60f8      	str	r0, [r7, #12]
200009cc:	60b9      	str	r1, [r7, #8]
200009ce:	607a      	str	r2, [r7, #4]
    uint8_t missalignementAddress = StartAddress % 4;
200009d0:	68fb      	ldr	r3, [r7, #12]
200009d2:	b2db      	uxtb	r3, r3
200009d4:	f003 0303 	and.w	r3, r3, #3
200009d8:	77fb      	strb	r3, [r7, #31]
    uint8_t missalignementSize = Size;
200009da:	68bb      	ldr	r3, [r7, #8]
200009dc:	77bb      	strb	r3, [r7, #30]
    int cnt;
    uint32_t Val;

    StartAddress -= StartAddress % 4;
200009de:	68fb      	ldr	r3, [r7, #12]
200009e0:	f023 0303 	bic.w	r3, r3, #3
200009e4:	60fb      	str	r3, [r7, #12]
    Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
200009e6:	68bb      	ldr	r3, [r7, #8]
200009e8:	f003 0303 	and.w	r3, r3, #3
200009ec:	2b00      	cmp	r3, #0
200009ee:	d005      	beq.n	200009fc <CheckSum+0x38>
200009f0:	68bb      	ldr	r3, [r7, #8]
200009f2:	f003 0303 	and.w	r3, r3, #3
200009f6:	f1c3 0304 	rsb	r3, r3, #4
200009fa:	e000      	b.n	200009fe <CheckSum+0x3a>
200009fc:	2300      	movs	r3, #0
200009fe:	68ba      	ldr	r2, [r7, #8]
20000a00:	4413      	add	r3, r2
20000a02:	60bb      	str	r3, [r7, #8]

    for (cnt = 0; cnt < Size; cnt += 4) {
20000a04:	2300      	movs	r3, #0
20000a06:	61bb      	str	r3, [r7, #24]
20000a08:	e0b3      	b.n	20000b72 <CheckSum+0x1ae>
        Val = *(uint32_t*) StartAddress;
20000a0a:	68fb      	ldr	r3, [r7, #12]
20000a0c:	681b      	ldr	r3, [r3, #0]
20000a0e:	617b      	str	r3, [r7, #20]
        if (missalignementAddress) {
20000a10:	7ffb      	ldrb	r3, [r7, #31]
20000a12:	2b00      	cmp	r3, #0
20000a14:	d040      	beq.n	20000a98 <CheckSum+0xd4>
            switch (missalignementAddress) {
20000a16:	7ffb      	ldrb	r3, [r7, #31]
20000a18:	2b03      	cmp	r3, #3
20000a1a:	d032      	beq.n	20000a82 <CheckSum+0xbe>
20000a1c:	2b03      	cmp	r3, #3
20000a1e:	f300 80a2 	bgt.w	20000b66 <CheckSum+0x1a2>
20000a22:	2b01      	cmp	r3, #1
20000a24:	d002      	beq.n	20000a2c <CheckSum+0x68>
20000a26:	2b02      	cmp	r3, #2
20000a28:	d019      	beq.n	20000a5e <CheckSum+0x9a>
20000a2a:	e09c      	b.n	20000b66 <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
20000a2c:	697b      	ldr	r3, [r7, #20]
20000a2e:	0a1b      	lsrs	r3, r3, #8
20000a30:	b2db      	uxtb	r3, r3
20000a32:	461a      	mov	r2, r3
20000a34:	687b      	ldr	r3, [r7, #4]
20000a36:	4413      	add	r3, r2
20000a38:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
20000a3a:	697b      	ldr	r3, [r7, #20]
20000a3c:	0c1b      	lsrs	r3, r3, #16
20000a3e:	b2db      	uxtb	r3, r3
20000a40:	461a      	mov	r2, r3
20000a42:	687b      	ldr	r3, [r7, #4]
20000a44:	4413      	add	r3, r2
20000a46:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
20000a48:	697b      	ldr	r3, [r7, #20]
20000a4a:	0e1b      	lsrs	r3, r3, #24
20000a4c:	b2db      	uxtb	r3, r3
20000a4e:	461a      	mov	r2, r3
20000a50:	687b      	ldr	r3, [r7, #4]
20000a52:	4413      	add	r3, r2
20000a54:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 1;
20000a56:	7ffb      	ldrb	r3, [r7, #31]
20000a58:	3b01      	subs	r3, #1
20000a5a:	77fb      	strb	r3, [r7, #31]
                    break;
20000a5c:	e083      	b.n	20000b66 <CheckSum+0x1a2>
                case 2:
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
20000a5e:	697b      	ldr	r3, [r7, #20]
20000a60:	0c1b      	lsrs	r3, r3, #16
20000a62:	b2db      	uxtb	r3, r3
20000a64:	461a      	mov	r2, r3
20000a66:	687b      	ldr	r3, [r7, #4]
20000a68:	4413      	add	r3, r2
20000a6a:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
20000a6c:	697b      	ldr	r3, [r7, #20]
20000a6e:	0e1b      	lsrs	r3, r3, #24
20000a70:	b2db      	uxtb	r3, r3
20000a72:	461a      	mov	r2, r3
20000a74:	687b      	ldr	r3, [r7, #4]
20000a76:	4413      	add	r3, r2
20000a78:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 2;
20000a7a:	7ffb      	ldrb	r3, [r7, #31]
20000a7c:	3b02      	subs	r3, #2
20000a7e:	77fb      	strb	r3, [r7, #31]
                    break;
20000a80:	e071      	b.n	20000b66 <CheckSum+0x1a2>
                case 3:
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
20000a82:	697b      	ldr	r3, [r7, #20]
20000a84:	0e1b      	lsrs	r3, r3, #24
20000a86:	b2db      	uxtb	r3, r3
20000a88:	461a      	mov	r2, r3
20000a8a:	687b      	ldr	r3, [r7, #4]
20000a8c:	4413      	add	r3, r2
20000a8e:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 3;
20000a90:	7ffb      	ldrb	r3, [r7, #31]
20000a92:	3b03      	subs	r3, #3
20000a94:	77fb      	strb	r3, [r7, #31]
                    break;
20000a96:	e066      	b.n	20000b66 <CheckSum+0x1a2>
            }
        } else if ((Size - missalignementSize) % 4 && (Size - cnt) <= 4) {
20000a98:	7fbb      	ldrb	r3, [r7, #30]
20000a9a:	68ba      	ldr	r2, [r7, #8]
20000a9c:	1ad3      	subs	r3, r2, r3
20000a9e:	f003 0303 	and.w	r3, r3, #3
20000aa2:	2b00      	cmp	r3, #0
20000aa4:	d044      	beq.n	20000b30 <CheckSum+0x16c>
20000aa6:	69bb      	ldr	r3, [r7, #24]
20000aa8:	68ba      	ldr	r2, [r7, #8]
20000aaa:	1ad3      	subs	r3, r2, r3
20000aac:	2b04      	cmp	r3, #4
20000aae:	d83f      	bhi.n	20000b30 <CheckSum+0x16c>
            switch (Size - missalignementSize) {
20000ab0:	7fbb      	ldrb	r3, [r7, #30]
20000ab2:	68ba      	ldr	r2, [r7, #8]
20000ab4:	1ad3      	subs	r3, r2, r3
20000ab6:	2b03      	cmp	r3, #3
20000ab8:	d02f      	beq.n	20000b1a <CheckSum+0x156>
20000aba:	2b03      	cmp	r3, #3
20000abc:	d853      	bhi.n	20000b66 <CheckSum+0x1a2>
20000abe:	2b01      	cmp	r3, #1
20000ac0:	d002      	beq.n	20000ac8 <CheckSum+0x104>
20000ac2:	2b02      	cmp	r3, #2
20000ac4:	d018      	beq.n	20000af8 <CheckSum+0x134>
20000ac6:	e04e      	b.n	20000b66 <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) Val;
20000ac8:	697b      	ldr	r3, [r7, #20]
20000aca:	b2db      	uxtb	r3, r3
20000acc:	461a      	mov	r2, r3
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	4413      	add	r3, r2
20000ad2:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
20000ad4:	697b      	ldr	r3, [r7, #20]
20000ad6:	0a1b      	lsrs	r3, r3, #8
20000ad8:	b2db      	uxtb	r3, r3
20000ada:	461a      	mov	r2, r3
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	4413      	add	r3, r2
20000ae0:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
20000ae2:	697b      	ldr	r3, [r7, #20]
20000ae4:	0c1b      	lsrs	r3, r3, #16
20000ae6:	b2db      	uxtb	r3, r3
20000ae8:	461a      	mov	r2, r3
20000aea:	687b      	ldr	r3, [r7, #4]
20000aec:	4413      	add	r3, r2
20000aee:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 1;
20000af0:	7fbb      	ldrb	r3, [r7, #30]
20000af2:	3b01      	subs	r3, #1
20000af4:	77bb      	strb	r3, [r7, #30]
                    break;
20000af6:	e01a      	b.n	20000b2e <CheckSum+0x16a>
                case 2:
                    InitVal += (uint8_t) Val;
20000af8:	697b      	ldr	r3, [r7, #20]
20000afa:	b2db      	uxtb	r3, r3
20000afc:	461a      	mov	r2, r3
20000afe:	687b      	ldr	r3, [r7, #4]
20000b00:	4413      	add	r3, r2
20000b02:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
20000b04:	697b      	ldr	r3, [r7, #20]
20000b06:	0a1b      	lsrs	r3, r3, #8
20000b08:	b2db      	uxtb	r3, r3
20000b0a:	461a      	mov	r2, r3
20000b0c:	687b      	ldr	r3, [r7, #4]
20000b0e:	4413      	add	r3, r2
20000b10:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 2;
20000b12:	7fbb      	ldrb	r3, [r7, #30]
20000b14:	3b02      	subs	r3, #2
20000b16:	77bb      	strb	r3, [r7, #30]
                    break;
20000b18:	e009      	b.n	20000b2e <CheckSum+0x16a>
                case 3:
                    InitVal += (uint8_t) Val;
20000b1a:	697b      	ldr	r3, [r7, #20]
20000b1c:	b2db      	uxtb	r3, r3
20000b1e:	461a      	mov	r2, r3
20000b20:	687b      	ldr	r3, [r7, #4]
20000b22:	4413      	add	r3, r2
20000b24:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 3;
20000b26:	7fbb      	ldrb	r3, [r7, #30]
20000b28:	3b03      	subs	r3, #3
20000b2a:	77bb      	strb	r3, [r7, #30]
                    break;
20000b2c:	bf00      	nop
            switch (Size - missalignementSize) {
20000b2e:	e01a      	b.n	20000b66 <CheckSum+0x1a2>
            }
        } else {
            InitVal += (uint8_t) Val;
20000b30:	697b      	ldr	r3, [r7, #20]
20000b32:	b2db      	uxtb	r3, r3
20000b34:	461a      	mov	r2, r3
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	4413      	add	r3, r2
20000b3a:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 8 & 0xff);
20000b3c:	697b      	ldr	r3, [r7, #20]
20000b3e:	0a1b      	lsrs	r3, r3, #8
20000b40:	b2db      	uxtb	r3, r3
20000b42:	461a      	mov	r2, r3
20000b44:	687b      	ldr	r3, [r7, #4]
20000b46:	4413      	add	r3, r2
20000b48:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 16 & 0xff);
20000b4a:	697b      	ldr	r3, [r7, #20]
20000b4c:	0c1b      	lsrs	r3, r3, #16
20000b4e:	b2db      	uxtb	r3, r3
20000b50:	461a      	mov	r2, r3
20000b52:	687b      	ldr	r3, [r7, #4]
20000b54:	4413      	add	r3, r2
20000b56:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 24 & 0xff);
20000b58:	697b      	ldr	r3, [r7, #20]
20000b5a:	0e1b      	lsrs	r3, r3, #24
20000b5c:	b2db      	uxtb	r3, r3
20000b5e:	461a      	mov	r2, r3
20000b60:	687b      	ldr	r3, [r7, #4]
20000b62:	4413      	add	r3, r2
20000b64:	607b      	str	r3, [r7, #4]
        }
        StartAddress += 4;
20000b66:	68fb      	ldr	r3, [r7, #12]
20000b68:	3304      	adds	r3, #4
20000b6a:	60fb      	str	r3, [r7, #12]
    for (cnt = 0; cnt < Size; cnt += 4) {
20000b6c:	69bb      	ldr	r3, [r7, #24]
20000b6e:	3304      	adds	r3, #4
20000b70:	61bb      	str	r3, [r7, #24]
20000b72:	69bb      	ldr	r3, [r7, #24]
20000b74:	68ba      	ldr	r2, [r7, #8]
20000b76:	429a      	cmp	r2, r3
20000b78:	f63f af47 	bhi.w	20000a0a <CheckSum+0x46>
    }

    return (InitVal);
20000b7c:	687b      	ldr	r3, [r7, #4]
}
20000b7e:	4618      	mov	r0, r3
20000b80:	3724      	adds	r7, #36	@ 0x24
20000b82:	46bd      	mov	sp, r7
20000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
20000b88:	4770      	bx	lr

20000b8a <Verify>:
 * outputs   :
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement) {
20000b8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20000b8e:	b08c      	sub	sp, #48	@ 0x30
20000b90:	af00      	add	r7, sp, #0
20000b92:	60f8      	str	r0, [r7, #12]
20000b94:	60b9      	str	r1, [r7, #8]
20000b96:	607a      	str	r2, [r7, #4]
20000b98:	603b      	str	r3, [r7, #0]
20000b9a:	2300      	movs	r3, #0
20000b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b9e:	69fb      	ldr	r3, [r7, #28]
20000ba0:	f383 8810 	msr	PRIMASK, r3
}
20000ba4:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts
    uint32_t VerifiedData = 0, InitVal = 0;
20000ba6:	2300      	movs	r3, #0
20000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000baa:	2300      	movs	r3, #0
20000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint64_t checksum;
    Size *= 4;
20000bae:	687b      	ldr	r3, [r7, #4]
20000bb0:	009b      	lsls	r3, r3, #2
20000bb2:	607b      	str	r3, [r7, #4]

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
20000bb4:	f000 fde0 	bl	20001778 <CSP_QSPI_EnableMemoryMappedMode>
20000bb8:	4603      	mov	r3, r0
20000bba:	2b00      	cmp	r3, #0
20000bbc:	d00a      	beq.n	20000bd4 <Verify+0x4a>
20000bbe:	2301      	movs	r3, #1
20000bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000bc2:	69bb      	ldr	r3, [r7, #24]
20000bc4:	f383 8810 	msr	PRIMASK, r3
}
20000bc8:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000bca:	f04f 0400 	mov.w	r4, #0
20000bce:	f04f 0500 	mov.w	r5, #0
20000bd2:	e04d      	b.n	20000c70 <Verify+0xe6>
    }

    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
20000bd4:	683b      	ldr	r3, [r7, #0]
20000bd6:	f003 020f 	and.w	r2, r3, #15
20000bda:	68fb      	ldr	r3, [r7, #12]
20000bdc:	18d0      	adds	r0, r2, r3
                        Size - ((missalignement >> 16) & 0xF), InitVal);
20000bde:	683b      	ldr	r3, [r7, #0]
20000be0:	0c1b      	lsrs	r3, r3, #16
20000be2:	f003 030f 	and.w	r3, r3, #15
    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
20000be6:	687a      	ldr	r2, [r7, #4]
20000be8:	1ad3      	subs	r3, r2, r3
20000bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
20000bec:	4619      	mov	r1, r3
20000bee:	f7ff fee9 	bl	200009c4 <CheckSum>
20000bf2:	4603      	mov	r3, r0
20000bf4:	2200      	movs	r2, #0
20000bf6:	469a      	mov	sl, r3
20000bf8:	4693      	mov	fp, r2
20000bfa:	e9c7 ab08 	strd	sl, fp, [r7, #32]
    while (Size > VerifiedData) {
20000bfe:	e025      	b.n	20000c4c <Verify+0xc2>
        if (*(uint8_t*) MemoryAddr++
20000c00:	68fb      	ldr	r3, [r7, #12]
20000c02:	1c5a      	adds	r2, r3, #1
20000c04:	60fa      	str	r2, [r7, #12]
20000c06:	781a      	ldrb	r2, [r3, #0]
            != *((uint8_t*) RAMBufferAddr + VerifiedData)) {
20000c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
20000c0a:	68bb      	ldr	r3, [r7, #8]
20000c0c:	440b      	add	r3, r1
20000c0e:	781b      	ldrb	r3, [r3, #0]
        if (*(uint8_t*) MemoryAddr++
20000c10:	429a      	cmp	r2, r3
20000c12:	d018      	beq.n	20000c46 <Verify+0xbc>
20000c14:	2301      	movs	r3, #1
20000c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000c18:	697b      	ldr	r3, [r7, #20]
20000c1a:	f383 8810 	msr	PRIMASK, r3
}
20000c1e:	bf00      	nop
            __set_PRIMASK(1); //disable interrupts
            return ((checksum << 32) + (MemoryAddr + VerifiedData));
20000c20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
20000c24:	f04f 0200 	mov.w	r2, #0
20000c28:	f04f 0300 	mov.w	r3, #0
20000c2c:	0003      	movs	r3, r0
20000c2e:	2200      	movs	r2, #0
20000c30:	68f8      	ldr	r0, [r7, #12]
20000c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
20000c34:	4401      	add	r1, r0
20000c36:	2000      	movs	r0, #0
20000c38:	4688      	mov	r8, r1
20000c3a:	4681      	mov	r9, r0
20000c3c:	eb12 0408 	adds.w	r4, r2, r8
20000c40:	eb43 0509 	adc.w	r5, r3, r9
20000c44:	e014      	b.n	20000c70 <Verify+0xe6>
        }
        VerifiedData++;
20000c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000c48:	3301      	adds	r3, #1
20000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (Size > VerifiedData) {
20000c4c:	687a      	ldr	r2, [r7, #4]
20000c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000c50:	429a      	cmp	r2, r3
20000c52:	d8d5      	bhi.n	20000c00 <Verify+0x76>
20000c54:	2301      	movs	r3, #1
20000c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000c58:	693b      	ldr	r3, [r7, #16]
20000c5a:	f383 8810 	msr	PRIMASK, r3
}
20000c5e:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return (checksum << 32);
20000c60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
20000c64:	f04f 0400 	mov.w	r4, #0
20000c68:	f04f 0500 	mov.w	r5, #0
20000c6c:	0015      	movs	r5, r2
20000c6e:	2400      	movs	r4, #0
}
20000c70:	4622      	mov	r2, r4
20000c72:	462b      	mov	r3, r5
20000c74:	4610      	mov	r0, r2
20000c76:	4619      	mov	r1, r3
20000c78:	3730      	adds	r7, #48	@ 0x30
20000c7a:	46bd      	mov	sp, r7
20000c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

20000c80 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
20000c80:	b480      	push	{r7}
20000c82:	b087      	sub	sp, #28
20000c84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
20000c86:	4b30      	ldr	r3, [pc, #192]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000c8c:	4a2e      	ldr	r2, [pc, #184]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000c8e:	f043 0310 	orr.w	r3, r3, #16
20000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000c96:	4b2c      	ldr	r3, [pc, #176]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000c9c:	f003 0310 	and.w	r3, r3, #16
20000ca0:	617b      	str	r3, [r7, #20]
20000ca2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20000ca4:	4b28      	ldr	r3, [pc, #160]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000caa:	4a27      	ldr	r2, [pc, #156]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000cac:	f043 0304 	orr.w	r3, r3, #4
20000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000cb4:	4b24      	ldr	r3, [pc, #144]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000cba:	f003 0304 	and.w	r3, r3, #4
20000cbe:	613b      	str	r3, [r7, #16]
20000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
20000cc2:	4b21      	ldr	r3, [pc, #132]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000cc8:	4a1f      	ldr	r2, [pc, #124]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000cdc:	60fb      	str	r3, [r7, #12]
20000cde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20000ce0:	4b19      	ldr	r3, [pc, #100]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000ce6:	4a18      	ldr	r2, [pc, #96]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000ce8:	f043 0301 	orr.w	r3, r3, #1
20000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000cf0:	4b15      	ldr	r3, [pc, #84]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000cf6:	f003 0301 	and.w	r3, r3, #1
20000cfa:	60bb      	str	r3, [r7, #8]
20000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20000cfe:	4b12      	ldr	r3, [pc, #72]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000d04:	4a10      	ldr	r2, [pc, #64]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000d06:	f043 0302 	orr.w	r3, r3, #2
20000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000d14:	f003 0302 	and.w	r3, r3, #2
20000d18:	607b      	str	r3, [r7, #4]
20000d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
20000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000d22:	4a09      	ldr	r2, [pc, #36]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000d24:	f043 0308 	orr.w	r3, r3, #8
20000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000d2c:	4b06      	ldr	r3, [pc, #24]	@ (20000d48 <MX_GPIO_Init+0xc8>)
20000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000d32:	f003 0308 	and.w	r3, r3, #8
20000d36:	603b      	str	r3, [r7, #0]
20000d38:	683b      	ldr	r3, [r7, #0]

}
20000d3a:	bf00      	nop
20000d3c:	371c      	adds	r7, #28
20000d3e:	46bd      	mov	sp, r7
20000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
20000d44:	4770      	bx	lr
20000d46:	bf00      	nop
20000d48:	58024400 	.word	0x58024400

20000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20000d4c:	b580      	push	{r7, lr}
20000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20000d50:	f001 f9c4 	bl	200020dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20000d54:	f000 f806 	bl	20000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20000d58:	f7ff ff92 	bl	20000c80 <MX_GPIO_Init>
  MX_QUADSPI_Init();
20000d5c:	f000 f8b6 	bl	20000ecc <MX_QUADSPI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20000d60:	bf00      	nop
20000d62:	e7fd      	b.n	20000d60 <main+0x14>

20000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20000d64:	b580      	push	{r7, lr}
20000d66:	b09e      	sub	sp, #120	@ 0x78
20000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
20000d6e:	224c      	movs	r2, #76	@ 0x4c
20000d70:	2100      	movs	r1, #0
20000d72:	4618      	mov	r0, r3
20000d74:	f017 fa99 	bl	200182aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20000d78:	f107 030c 	add.w	r3, r7, #12
20000d7c:	2220      	movs	r2, #32
20000d7e:	2100      	movs	r1, #0
20000d80:	4618      	mov	r0, r3
20000d82:	f017 fa92 	bl	200182aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
20000d86:	2002      	movs	r0, #2
20000d88:	f010 fb4c 	bl	20011424 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000d8c:	2300      	movs	r3, #0
20000d8e:	60bb      	str	r3, [r7, #8]
20000d90:	4b48      	ldr	r3, [pc, #288]	@ (20000eb4 <SystemClock_Config+0x150>)
20000d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20000d94:	4a47      	ldr	r2, [pc, #284]	@ (20000eb4 <SystemClock_Config+0x150>)
20000d96:	f023 0301 	bic.w	r3, r3, #1
20000d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
20000d9c:	4b45      	ldr	r3, [pc, #276]	@ (20000eb4 <SystemClock_Config+0x150>)
20000d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20000da0:	f003 0301 	and.w	r3, r3, #1
20000da4:	60bb      	str	r3, [r7, #8]
20000da6:	4b44      	ldr	r3, [pc, #272]	@ (20000eb8 <SystemClock_Config+0x154>)
20000da8:	699b      	ldr	r3, [r3, #24]
20000daa:	4a43      	ldr	r2, [pc, #268]	@ (20000eb8 <SystemClock_Config+0x154>)
20000dac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
20000db0:	6193      	str	r3, [r2, #24]
20000db2:	4b41      	ldr	r3, [pc, #260]	@ (20000eb8 <SystemClock_Config+0x154>)
20000db4:	699b      	ldr	r3, [r3, #24]
20000db6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20000dba:	60bb      	str	r3, [r7, #8]
20000dbc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
20000dbe:	bf00      	nop
20000dc0:	4b3d      	ldr	r3, [pc, #244]	@ (20000eb8 <SystemClock_Config+0x154>)
20000dc2:	699b      	ldr	r3, [r3, #24]
20000dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20000dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20000dcc:	d1f8      	bne.n	20000dc0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20000dce:	4b3b      	ldr	r3, [pc, #236]	@ (20000ebc <SystemClock_Config+0x158>)
20000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
20000dd4:	4a39      	ldr	r2, [pc, #228]	@ (20000ebc <SystemClock_Config+0x158>)
20000dd6:	f043 0302 	orr.w	r3, r3, #2
20000dda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
20000dde:	4b37      	ldr	r3, [pc, #220]	@ (20000ebc <SystemClock_Config+0x158>)
20000de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
20000de4:	f003 0302 	and.w	r3, r3, #2
20000de8:	607b      	str	r3, [r7, #4]
20000dea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
20000dec:	2300      	movs	r3, #0
20000dee:	603b      	str	r3, [r7, #0]
20000df0:	4b31      	ldr	r3, [pc, #196]	@ (20000eb8 <SystemClock_Config+0x154>)
20000df2:	699b      	ldr	r3, [r3, #24]
20000df4:	4a30      	ldr	r2, [pc, #192]	@ (20000eb8 <SystemClock_Config+0x154>)
20000df6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
20000dfa:	6193      	str	r3, [r2, #24]
20000dfc:	4b2e      	ldr	r3, [pc, #184]	@ (20000eb8 <SystemClock_Config+0x154>)
20000dfe:	699b      	ldr	r3, [r3, #24]
20000e00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20000e04:	603b      	str	r3, [r7, #0]
20000e06:	4b2b      	ldr	r3, [pc, #172]	@ (20000eb4 <SystemClock_Config+0x150>)
20000e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20000e0a:	4a2a      	ldr	r2, [pc, #168]	@ (20000eb4 <SystemClock_Config+0x150>)
20000e0c:	f043 0301 	orr.w	r3, r3, #1
20000e10:	62d3      	str	r3, [r2, #44]	@ 0x2c
20000e12:	4b28      	ldr	r3, [pc, #160]	@ (20000eb4 <SystemClock_Config+0x150>)
20000e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20000e16:	f003 0301 	and.w	r3, r3, #1
20000e1a:	603b      	str	r3, [r7, #0]
20000e1c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
20000e1e:	bf00      	nop
20000e20:	4b25      	ldr	r3, [pc, #148]	@ (20000eb8 <SystemClock_Config+0x154>)
20000e22:	699b      	ldr	r3, [r3, #24]
20000e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20000e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20000e2c:	d1f8      	bne.n	20000e20 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20000e2e:	2301      	movs	r3, #1
20000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
20000e32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20000e36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000e38:	2302      	movs	r3, #2
20000e3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20000e3c:	2302      	movs	r3, #2
20000e3e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
20000e40:	2302      	movs	r3, #2
20000e42:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
20000e44:	23a0      	movs	r3, #160	@ 0xa0
20000e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
20000e48:	2302      	movs	r3, #2
20000e4a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
20000e4c:	2308      	movs	r3, #8
20000e4e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 6;
20000e50:	2306      	movs	r3, #6
20000e52:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
20000e54:	2308      	movs	r3, #8
20000e56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
20000e58:	2300      	movs	r3, #0
20000e5a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
20000e5c:	2300      	movs	r3, #0
20000e5e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20000e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
20000e64:	4618      	mov	r0, r3
20000e66:	f012 fdbf 	bl	200139e8 <HAL_RCC_OscConfig>
20000e6a:	4603      	mov	r3, r0
20000e6c:	2b00      	cmp	r3, #0
20000e6e:	d001      	beq.n	20000e74 <SystemClock_Config+0x110>
  {
    Error_Handler();
20000e70:	f000 f826 	bl	20000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20000e74:	233f      	movs	r3, #63	@ 0x3f
20000e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20000e78:	2303      	movs	r3, #3
20000e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
20000e7c:	2300      	movs	r3, #0
20000e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
20000e80:	2308      	movs	r3, #8
20000e82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
20000e84:	2340      	movs	r3, #64	@ 0x40
20000e86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
20000e88:	2340      	movs	r3, #64	@ 0x40
20000e8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
20000e8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
20000e92:	2340      	movs	r3, #64	@ 0x40
20000e94:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
20000e96:	f107 030c 	add.w	r3, r7, #12
20000e9a:	2104      	movs	r1, #4
20000e9c:	4618      	mov	r0, r3
20000e9e:	f013 f9fd 	bl	2001429c <HAL_RCC_ClockConfig>
20000ea2:	4603      	mov	r3, r0
20000ea4:	2b00      	cmp	r3, #0
20000ea6:	d001      	beq.n	20000eac <SystemClock_Config+0x148>
  {
    Error_Handler();
20000ea8:	f000 f80a 	bl	20000ec0 <Error_Handler>
  }
}
20000eac:	bf00      	nop
20000eae:	3778      	adds	r7, #120	@ 0x78
20000eb0:	46bd      	mov	sp, r7
20000eb2:	bd80      	pop	{r7, pc}
20000eb4:	58000400 	.word	0x58000400
20000eb8:	58024800 	.word	0x58024800
20000ebc:	58024400 	.word	0x58024400

20000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20000ec0:	b480      	push	{r7}
20000ec2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20000ec4:	b672      	cpsid	i
}
20000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20000ec8:	bf00      	nop
20000eca:	e7fd      	b.n	20000ec8 <Error_Handler+0x8>

20000ecc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
20000ecc:	b580      	push	{r7, lr}
20000ece:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
20000ed0:	4b12      	ldr	r3, [pc, #72]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000ed2:	4a13      	ldr	r2, [pc, #76]	@ (20000f20 <MX_QUADSPI_Init+0x54>)
20000ed4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
20000ed6:	4b11      	ldr	r3, [pc, #68]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000ed8:	2201      	movs	r2, #1
20000eda:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
20000edc:	4b0f      	ldr	r3, [pc, #60]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000ede:	2204      	movs	r2, #4
20000ee0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
20000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000ee4:	2210      	movs	r2, #16
20000ee6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
20000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000eea:	2217      	movs	r2, #23
20000eec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
20000eee:	4b0b      	ldr	r3, [pc, #44]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000ef0:	2200      	movs	r2, #0
20000ef2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
20000ef4:	4b09      	ldr	r3, [pc, #36]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000ef6:	2200      	movs	r2, #0
20000ef8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
20000efa:	4b08      	ldr	r3, [pc, #32]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000efc:	2200      	movs	r2, #0
20000efe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
20000f00:	4b06      	ldr	r3, [pc, #24]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000f02:	2200      	movs	r2, #0
20000f04:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
20000f06:	4805      	ldr	r0, [pc, #20]	@ (20000f1c <MX_QUADSPI_Init+0x50>)
20000f08:	f010 ffd0 	bl	20011eac <HAL_QSPI_Init>
20000f0c:	4603      	mov	r3, r0
20000f0e:	2b00      	cmp	r3, #0
20000f10:	d001      	beq.n	20000f16 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
20000f12:	f7ff ffd5 	bl	20000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
20000f16:	bf00      	nop
20000f18:	bd80      	pop	{r7, pc}
20000f1a:	bf00      	nop
20000f1c:	20000538 	.word	0x20000538
20000f20:	52005000 	.word	0x52005000

20000f24 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
20000f24:	b580      	push	{r7, lr}
20000f26:	b0be      	sub	sp, #248	@ 0xf8
20000f28:	af00      	add	r7, sp, #0
20000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000f2c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
20000f30:	2200      	movs	r2, #0
20000f32:	601a      	str	r2, [r3, #0]
20000f34:	605a      	str	r2, [r3, #4]
20000f36:	609a      	str	r2, [r3, #8]
20000f38:	60da      	str	r2, [r3, #12]
20000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
20000f3c:	f107 0320 	add.w	r3, r7, #32
20000f40:	22c0      	movs	r2, #192	@ 0xc0
20000f42:	2100      	movs	r1, #0
20000f44:	4618      	mov	r0, r3
20000f46:	f017 f9b0 	bl	200182aa <memset>
  if(qspiHandle->Instance==QUADSPI)
20000f4a:	687b      	ldr	r3, [r7, #4]
20000f4c:	681b      	ldr	r3, [r3, #0]
20000f4e:	4a5d      	ldr	r2, [pc, #372]	@ (200010c4 <HAL_QSPI_MspInit+0x1a0>)
20000f50:	4293      	cmp	r3, r2
20000f52:	f040 80b3 	bne.w	200010bc <HAL_QSPI_MspInit+0x198>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
20000f56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
20000f5a:	f04f 0300 	mov.w	r3, #0
20000f5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
20000f62:	2300      	movs	r3, #0
20000f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
20000f66:	f107 0320 	add.w	r3, r7, #32
20000f6a:	4618      	mov	r0, r3
20000f6c:	f013 fef8 	bl	20014d60 <HAL_RCCEx_PeriphCLKConfig>
20000f70:	4603      	mov	r3, r0
20000f72:	2b00      	cmp	r3, #0
20000f74:	d001      	beq.n	20000f7a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
20000f76:	f7ff ffa3 	bl	20000ec0 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
20000f7a:	4b53      	ldr	r3, [pc, #332]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000f7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
20000f80:	4a51      	ldr	r2, [pc, #324]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20000f86:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
20000f8a:	4b4f      	ldr	r3, [pc, #316]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000f8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
20000f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20000f94:	61fb      	str	r3, [r7, #28]
20000f96:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
20000f98:	4b4b      	ldr	r3, [pc, #300]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000f9e:	4a4a      	ldr	r2, [pc, #296]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000fa0:	f043 0310 	orr.w	r3, r3, #16
20000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000fa8:	4b47      	ldr	r3, [pc, #284]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000fae:	f003 0310 	and.w	r3, r3, #16
20000fb2:	61bb      	str	r3, [r7, #24]
20000fb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
20000fb6:	4b44      	ldr	r3, [pc, #272]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000fbc:	4a42      	ldr	r2, [pc, #264]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000fbe:	f043 0301 	orr.w	r3, r3, #1
20000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000fc6:	4b40      	ldr	r3, [pc, #256]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000fcc:	f003 0301 	and.w	r3, r3, #1
20000fd0:	617b      	str	r3, [r7, #20]
20000fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20000fd4:	4b3c      	ldr	r3, [pc, #240]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000fda:	4a3b      	ldr	r2, [pc, #236]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000fdc:	f043 0302 	orr.w	r3, r3, #2
20000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20000fe4:	4b38      	ldr	r3, [pc, #224]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000fea:	f003 0302 	and.w	r3, r3, #2
20000fee:	613b      	str	r3, [r7, #16]
20000ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
20000ff2:	4b35      	ldr	r3, [pc, #212]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20000ff8:	4a33      	ldr	r2, [pc, #204]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20000ffa:	f043 0308 	orr.w	r3, r3, #8
20000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20001002:	4b31      	ldr	r3, [pc, #196]	@ (200010c8 <HAL_QSPI_MspInit+0x1a4>)
20001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20001008:	f003 0308 	and.w	r3, r3, #8
2000100c:	60fb      	str	r3, [r7, #12]
2000100e:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
20001010:	2304      	movs	r3, #4
20001012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001016:	2302      	movs	r3, #2
20001018:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000101c:	2300      	movs	r3, #0
2000101e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001022:	2300      	movs	r3, #0
20001024:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
20001028:	2309      	movs	r3, #9
2000102a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2000102e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
20001032:	4619      	mov	r1, r3
20001034:	4825      	ldr	r0, [pc, #148]	@ (200010cc <HAL_QSPI_MspInit+0x1a8>)
20001036:	f008 fb73 	bl	20009720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
2000103a:	2302      	movs	r3, #2
2000103c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001040:	2302      	movs	r3, #2
20001042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001046:	2300      	movs	r3, #0
20001048:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2000104c:	2300      	movs	r3, #0
2000104e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
20001052:	2309      	movs	r3, #9
20001054:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20001058:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
2000105c:	4619      	mov	r1, r3
2000105e:	481c      	ldr	r0, [pc, #112]	@ (200010d0 <HAL_QSPI_MspInit+0x1ac>)
20001060:	f008 fb5e 	bl	20009720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
20001064:	f240 4304 	movw	r3, #1028	@ 0x404
20001068:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000106c:	2302      	movs	r3, #2
2000106e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001072:	2300      	movs	r3, #0
20001074:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001078:	2300      	movs	r3, #0
2000107a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
2000107e:	2309      	movs	r3, #9
20001080:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001084:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
20001088:	4619      	mov	r1, r3
2000108a:	4812      	ldr	r0, [pc, #72]	@ (200010d4 <HAL_QSPI_MspInit+0x1b0>)
2000108c:	f008 fb48 	bl	20009720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
20001090:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
20001094:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001098:	2302      	movs	r3, #2
2000109a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000109e:	2300      	movs	r3, #0
200010a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
200010a4:	2300      	movs	r3, #0
200010a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
200010aa:	2309      	movs	r3, #9
200010ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
200010b0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
200010b4:	4619      	mov	r1, r3
200010b6:	4808      	ldr	r0, [pc, #32]	@ (200010d8 <HAL_QSPI_MspInit+0x1b4>)
200010b8:	f008 fb32 	bl	20009720 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
200010bc:	bf00      	nop
200010be:	37f8      	adds	r7, #248	@ 0xf8
200010c0:	46bd      	mov	sp, r7
200010c2:	bd80      	pop	{r7, pc}
200010c4:	52005000 	.word	0x52005000
200010c8:	58024400 	.word	0x58024400
200010cc:	58021000 	.word	0x58021000
200010d0:	58020000 	.word	0x58020000
200010d4:	58020400 	.word	0x58020400
200010d8:	58020c00 	.word	0x58020c00

200010dc <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
200010dc:	b580      	push	{r7, lr}
200010de:	b082      	sub	sp, #8
200010e0:	af00      	add	r7, sp, #0
200010e2:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
200010e4:	687b      	ldr	r3, [r7, #4]
200010e6:	681b      	ldr	r3, [r3, #0]
200010e8:	4a10      	ldr	r2, [pc, #64]	@ (2000112c <HAL_QSPI_MspDeInit+0x50>)
200010ea:	4293      	cmp	r3, r2
200010ec:	d119      	bne.n	20001122 <HAL_QSPI_MspDeInit+0x46>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
200010ee:	4b10      	ldr	r3, [pc, #64]	@ (20001130 <HAL_QSPI_MspDeInit+0x54>)
200010f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
200010f4:	4a0e      	ldr	r2, [pc, #56]	@ (20001130 <HAL_QSPI_MspDeInit+0x54>)
200010f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
200010fa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
200010fe:	2104      	movs	r1, #4
20001100:	480c      	ldr	r0, [pc, #48]	@ (20001134 <HAL_QSPI_MspDeInit+0x58>)
20001102:	f008 fcbd 	bl	20009a80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
20001106:	2102      	movs	r1, #2
20001108:	480b      	ldr	r0, [pc, #44]	@ (20001138 <HAL_QSPI_MspDeInit+0x5c>)
2000110a:	f008 fcb9 	bl	20009a80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_10);
2000110e:	f240 4104 	movw	r1, #1028	@ 0x404
20001112:	480a      	ldr	r0, [pc, #40]	@ (2000113c <HAL_QSPI_MspDeInit+0x60>)
20001114:	f008 fcb4 	bl	20009a80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12);
20001118:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
2000111c:	4808      	ldr	r0, [pc, #32]	@ (20001140 <HAL_QSPI_MspDeInit+0x64>)
2000111e:	f008 fcaf 	bl	20009a80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
20001122:	bf00      	nop
20001124:	3708      	adds	r7, #8
20001126:	46bd      	mov	sp, r7
20001128:	bd80      	pop	{r7, pc}
2000112a:	bf00      	nop
2000112c:	52005000 	.word	0x52005000
20001130:	58024400 	.word	0x58024400
20001134:	58021000 	.word	0x58021000
20001138:	58020000 	.word	0x58020000
2000113c:	58020400 	.word	0x58020400
20001140:	58020c00 	.word	0x58020c00

20001144 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
20001144:	b580      	push	{r7, lr}
20001146:	af00      	add	r7, sp, #0

	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
20001148:	4b17      	ldr	r3, [pc, #92]	@ (200011a8 <CSP_QUADSPI_Init+0x64>)
2000114a:	4a18      	ldr	r2, [pc, #96]	@ (200011ac <CSP_QUADSPI_Init+0x68>)
2000114c:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
2000114e:	4816      	ldr	r0, [pc, #88]	@ (200011a8 <CSP_QUADSPI_Init+0x64>)
20001150:	f010 ff20 	bl	20011f94 <HAL_QSPI_DeInit>
20001154:	4603      	mov	r3, r0
20001156:	2b00      	cmp	r3, #0
20001158:	d001      	beq.n	2000115e <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
2000115a:	2301      	movs	r3, #1
2000115c:	e021      	b.n	200011a2 <CSP_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
2000115e:	f7ff feb5 	bl	20000ecc <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
20001162:	f000 fb47 	bl	200017f4 <QSPI_ResetChip>
20001166:	4603      	mov	r3, r0
20001168:	2b00      	cmp	r3, #0
2000116a:	d001      	beq.n	20001170 <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
2000116c:	2301      	movs	r3, #1
2000116e:	e018      	b.n	200011a2 <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
20001170:	f000 f904 	bl	2000137c <QSPI_Configuration>
20001174:	4603      	mov	r3, r0
20001176:	2b00      	cmp	r3, #0
20001178:	d001      	beq.n	2000117e <CSP_QUADSPI_Init+0x3a>
		return HAL_ERROR;
2000117a:	2301      	movs	r3, #1
2000117c:	e011      	b.n	200011a2 <CSP_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
2000117e:	2001      	movs	r0, #1
20001180:	f001 f8ea 	bl	20002358 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
20001184:	f000 f84c 	bl	20001220 <QSPI_AutoPollingMemReady>
20001188:	4603      	mov	r3, r0
2000118a:	2b00      	cmp	r3, #0
2000118c:	d001      	beq.n	20001192 <CSP_QUADSPI_Init+0x4e>
		return HAL_ERROR;
2000118e:	2301      	movs	r3, #1
20001190:	e007      	b.n	200011a2 <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
20001192:	f000 f891 	bl	200012b8 <QSPI_WriteEnable>
20001196:	4603      	mov	r3, r0
20001198:	2b00      	cmp	r3, #0
2000119a:	d001      	beq.n	200011a0 <CSP_QUADSPI_Init+0x5c>

		return HAL_ERROR;
2000119c:	2301      	movs	r3, #1
2000119e:	e000      	b.n	200011a2 <CSP_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
200011a0:	2300      	movs	r3, #0

}
200011a2:	4618      	mov	r0, r3
200011a4:	bd80      	pop	{r7, pc}
200011a6:	bf00      	nop
200011a8:	20000538 	.word	0x20000538
200011ac:	52005000 	.word	0x52005000

200011b0 <CSP_QSPI_Erase_Chip>:

uint8_t CSP_QSPI_Erase_Chip(void) {
200011b0:	b580      	push	{r7, lr}
200011b2:	b08e      	sub	sp, #56	@ 0x38
200011b4:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;

	if (QSPI_WriteEnable() != HAL_OK) {
200011b6:	f000 f87f 	bl	200012b8 <QSPI_WriteEnable>
200011ba:	4603      	mov	r3, r0
200011bc:	2b00      	cmp	r3, #0
200011be:	d001      	beq.n	200011c4 <CSP_QSPI_Erase_Chip+0x14>
		return HAL_ERROR;
200011c0:	2301      	movs	r3, #1
200011c2:	e026      	b.n	20001212 <CSP_QSPI_Erase_Chip+0x62>
	}

	/* Erasing Sequence --------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200011c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
200011c8:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = CHIP_ERASE_CMD;
200011ca:	23c7      	movs	r3, #199	@ 0xc7
200011cc:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
200011ce:	2300      	movs	r3, #0
200011d0:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
200011d2:	2300      	movs	r3, #0
200011d4:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
200011d6:	2300      	movs	r3, #0
200011d8:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
200011da:	2300      	movs	r3, #0
200011dc:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
200011de:	2300      	movs	r3, #0
200011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200011e2:	2300      	movs	r3, #0
200011e4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200011e6:	2300      	movs	r3, #0
200011e8:	637b      	str	r3, [r7, #52]	@ 0x34

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY) != HAL_OK) {
200011ea:	463b      	mov	r3, r7
200011ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
200011f0:	4619      	mov	r1, r3
200011f2:	480a      	ldr	r0, [pc, #40]	@ (2000121c <CSP_QSPI_Erase_Chip+0x6c>)
200011f4:	f011 f8bc 	bl	20012370 <HAL_QSPI_Command>
200011f8:	4603      	mov	r3, r0
200011fa:	2b00      	cmp	r3, #0
200011fc:	d001      	beq.n	20001202 <CSP_QSPI_Erase_Chip+0x52>
		return HAL_ERROR;
200011fe:	2301      	movs	r3, #1
20001200:	e007      	b.n	20001212 <CSP_QSPI_Erase_Chip+0x62>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
20001202:	f000 f80d 	bl	20001220 <QSPI_AutoPollingMemReady>
20001206:	4603      	mov	r3, r0
20001208:	2b00      	cmp	r3, #0
2000120a:	d001      	beq.n	20001210 <CSP_QSPI_Erase_Chip+0x60>
		return HAL_ERROR;
2000120c:	2301      	movs	r3, #1
2000120e:	e000      	b.n	20001212 <CSP_QSPI_Erase_Chip+0x62>
	}

	return HAL_OK;
20001210:	2300      	movs	r3, #0

}
20001212:	4618      	mov	r0, r3
20001214:	3738      	adds	r7, #56	@ 0x38
20001216:	46bd      	mov	sp, r7
20001218:	bd80      	pop	{r7, pc}
2000121a:	bf00      	nop
2000121c:	20000538 	.word	0x20000538

20001220 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void) {
20001220:	b580      	push	{r7, lr}
20001222:	b096      	sub	sp, #88	@ 0x58
20001224:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
20001226:	f107 031c 	add.w	r3, r7, #28
2000122a:	2238      	movs	r2, #56	@ 0x38
2000122c:	2100      	movs	r1, #0
2000122e:	4618      	mov	r0, r3
20001230:	f017 f83b 	bl	200182aa <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
20001234:	1d3b      	adds	r3, r7, #4
20001236:	2200      	movs	r2, #0
20001238:	601a      	str	r2, [r3, #0]
2000123a:	605a      	str	r2, [r3, #4]
2000123c:	609a      	str	r2, [r3, #8]
2000123e:	60da      	str	r2, [r3, #12]
20001240:	611a      	str	r2, [r3, #16]
20001242:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20001244:	f44f 7380 	mov.w	r3, #256	@ 0x100
20001248:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
2000124a:	2305      	movs	r3, #5
2000124c:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
2000124e:	2300      	movs	r3, #0
20001250:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20001252:	2300      	movs	r3, #0
20001254:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
20001256:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000125a:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
2000125c:	2300      	movs	r3, #0
2000125e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20001260:	2300      	movs	r3, #0
20001262:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001264:	2300      	movs	r3, #0
20001266:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
20001268:	2300      	movs	r3, #0
2000126a:	653b      	str	r3, [r7, #80]	@ 0x50

	sConfig.Match = 0x00;
2000126c:	2300      	movs	r3, #0
2000126e:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
20001270:	2301      	movs	r3, #1
20001272:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
20001274:	2300      	movs	r3, #0
20001276:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
20001278:	2301      	movs	r3, #1
2000127a:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
2000127c:	2310      	movs	r3, #16
2000127e:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
20001280:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20001284:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
20001286:	1d3a      	adds	r2, r7, #4
20001288:	f107 011c 	add.w	r1, r7, #28
2000128c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
20001290:	4808      	ldr	r0, [pc, #32]	@ (200012b4 <QSPI_AutoPollingMemReady+0x94>)
20001292:	f011 fd17 	bl	20012cc4 <HAL_QSPI_AutoPolling>
20001296:	4603      	mov	r3, r0
20001298:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
2000129c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
200012a0:	2b00      	cmp	r3, #0
200012a2:	d002      	beq.n	200012aa <QSPI_AutoPollingMemReady+0x8a>
	HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
200012a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
200012a8:	e000      	b.n	200012ac <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
200012aa:	2300      	movs	r3, #0
}
200012ac:	4618      	mov	r0, r3
200012ae:	3758      	adds	r7, #88	@ 0x58
200012b0:	46bd      	mov	sp, r7
200012b2:	bd80      	pop	{r7, pc}
200012b4:	20000538 	.word	0x20000538

200012b8 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
200012b8:	b580      	push	{r7, lr}
200012ba:	b096      	sub	sp, #88	@ 0x58
200012bc:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
200012be:	f107 031c 	add.w	r3, r7, #28
200012c2:	2238      	movs	r2, #56	@ 0x38
200012c4:	2100      	movs	r1, #0
200012c6:	4618      	mov	r0, r3
200012c8:	f016 ffef 	bl	200182aa <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
200012cc:	1d3b      	adds	r3, r7, #4
200012ce:	2200      	movs	r2, #0
200012d0:	601a      	str	r2, [r3, #0]
200012d2:	605a      	str	r2, [r3, #4]
200012d4:	609a      	str	r2, [r3, #8]
200012d6:	60da      	str	r2, [r3, #12]
200012d8:	611a      	str	r2, [r3, #16]
200012da:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200012dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
200012e0:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
200012e2:	2306      	movs	r3, #6
200012e4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
200012e6:	2300      	movs	r3, #0
200012e8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
200012ea:	2300      	movs	r3, #0
200012ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
200012ee:	2300      	movs	r3, #0
200012f0:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
200012f2:	2300      	movs	r3, #0
200012f4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
200012f6:	2300      	movs	r3, #0
200012f8:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200012fa:	2300      	movs	r3, #0
200012fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200012fe:	2300      	movs	r3, #0
20001300:	653b      	str	r3, [r7, #80]	@ 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
20001302:	f107 031c 	add.w	r3, r7, #28
20001306:	f241 3288 	movw	r2, #5000	@ 0x1388
2000130a:	4619      	mov	r1, r3
2000130c:	481a      	ldr	r0, [pc, #104]	@ (20001378 <QSPI_WriteEnable+0xc0>)
2000130e:	f011 f82f 	bl	20012370 <HAL_QSPI_Command>
20001312:	4603      	mov	r3, r0
20001314:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
20001318:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
2000131c:	2b00      	cmp	r3, #0
2000131e:	d002      	beq.n	20001326 <QSPI_WriteEnable+0x6e>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
20001320:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
20001324:	e024      	b.n	20001370 <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
20001326:	2302      	movs	r3, #2
20001328:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
2000132a:	2302      	movs	r3, #2
2000132c:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
2000132e:	2300      	movs	r3, #0
20001330:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
20001332:	2301      	movs	r3, #1
20001334:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
20001336:	2310      	movs	r3, #16
20001338:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
2000133a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
2000133e:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
20001340:	2305      	movs	r3, #5
20001342:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
20001344:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
20001348:	643b      	str	r3, [r7, #64]	@ 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
2000134a:	1d3a      	adds	r2, r7, #4
2000134c:	f107 011c 	add.w	r1, r7, #28
20001350:	f241 3388 	movw	r3, #5000	@ 0x1388
20001354:	4808      	ldr	r0, [pc, #32]	@ (20001378 <QSPI_WriteEnable+0xc0>)
20001356:	f011 fcb5 	bl	20012cc4 <HAL_QSPI_AutoPolling>
2000135a:	4603      	mov	r3, r0
2000135c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
20001360:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
20001364:	2b00      	cmp	r3, #0
20001366:	d002      	beq.n	2000136e <QSPI_WriteEnable+0xb6>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
20001368:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
2000136c:	e000      	b.n	20001370 <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
2000136e:	2300      	movs	r3, #0
}
20001370:	4618      	mov	r0, r3
20001372:	3758      	adds	r7, #88	@ 0x58
20001374:	46bd      	mov	sp, r7
20001376:	bd80      	pop	{r7, pc}
20001378:	20000538 	.word	0x20000538

2000137c <QSPI_Configuration>:
/*Enable quad mode*/
/* Las versiones acabadas en IQ lo llevan activado por defecto, como en mi caso. */

uint8_t QSPI_Configuration(void) {
2000137c:	b580      	push	{r7, lr}
2000137e:	b090      	sub	sp, #64	@ 0x40
20001380:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
20001382:	1d3b      	adds	r3, r7, #4
20001384:	2238      	movs	r2, #56	@ 0x38
20001386:	2100      	movs	r1, #0
20001388:	4618      	mov	r0, r3
2000138a:	f016 ff8e 	bl	200182aa <memset>
	uint8_t reg;
	HAL_StatusTypeDef ret;

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000138e:	f44f 7380 	mov.w	r3, #256	@ 0x100
20001392:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG2_CMD;
20001394:	2335      	movs	r3, #53	@ 0x35
20001396:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
20001398:	2300      	movs	r3, #0
2000139a:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000139c:	2300      	movs	r3, #0
2000139e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
200013a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
200013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
200013a6:	2300      	movs	r3, #0
200013a8:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
200013aa:	2300      	movs	r3, #0
200013ac:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200013ae:	2300      	movs	r3, #0
200013b0:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200013b2:	2300      	movs	r3, #0
200013b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = 1;
200013b6:	2301      	movs	r3, #1
200013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
200013ba:	1d3b      	adds	r3, r7, #4
200013bc:	f241 3288 	movw	r2, #5000	@ 0x1388
200013c0:	4619      	mov	r1, r3
200013c2:	4858      	ldr	r0, [pc, #352]	@ (20001524 <QSPI_Configuration+0x1a8>)
200013c4:	f010 ffd4 	bl	20012370 <HAL_QSPI_Command>
200013c8:	4603      	mov	r3, r0
200013ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
200013ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200013d2:	2b00      	cmp	r3, #0
200013d4:	d002      	beq.n	200013dc <QSPI_Configuration+0x60>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
200013d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200013da:	e09f      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
200013dc:	1cfb      	adds	r3, r7, #3
200013de:	f241 3288 	movw	r2, #5000	@ 0x1388
200013e2:	4619      	mov	r1, r3
200013e4:	484f      	ldr	r0, [pc, #316]	@ (20001524 <QSPI_Configuration+0x1a8>)
200013e6:	f011 f919 	bl	2001261c <HAL_QSPI_Receive>
200013ea:	4603      	mov	r3, r0
200013ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
200013f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200013f4:	2b00      	cmp	r3, #0
200013f6:	d002      	beq.n	200013fe <QSPI_Configuration+0x82>
			!= HAL_OK) {
		return ret;
200013f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200013fc:	e08e      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode = QSPI_DATA_NONE;
200013fe:	2300      	movs	r3, #0
20001400:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
20001402:	2350      	movs	r3, #80	@ 0x50
20001404:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001406:	1d3b      	adds	r3, r7, #4
20001408:	f241 3288 	movw	r2, #5000	@ 0x1388
2000140c:	4619      	mov	r1, r3
2000140e:	4845      	ldr	r0, [pc, #276]	@ (20001524 <QSPI_Configuration+0x1a8>)
20001410:	f010 ffae 	bl	20012370 <HAL_QSPI_Command>
20001414:	4603      	mov	r3, r0
20001416:	2b00      	cmp	r3, #0
20001418:	d002      	beq.n	20001420 <QSPI_Configuration+0xa4>
			!= HAL_OK) {
		return ret;
2000141a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
2000141e:	e07d      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode = QSPI_DATA_1_LINE;
20001420:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
20001424:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
20001426:	2331      	movs	r3, #49	@ 0x31
20001428:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
2000142a:	78fb      	ldrb	r3, [r7, #3]
2000142c:	f043 0302 	orr.w	r3, r3, #2
20001430:	b2db      	uxtb	r3, r3
20001432:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001434:	1d3b      	adds	r3, r7, #4
20001436:	f241 3288 	movw	r2, #5000	@ 0x1388
2000143a:	4619      	mov	r1, r3
2000143c:	4839      	ldr	r0, [pc, #228]	@ (20001524 <QSPI_Configuration+0x1a8>)
2000143e:	f010 ff97 	bl	20012370 <HAL_QSPI_Command>
20001442:	4603      	mov	r3, r0
20001444:	2b00      	cmp	r3, #0
20001446:	d002      	beq.n	2000144e <QSPI_Configuration+0xd2>
			!= HAL_OK) {
		return ret;
20001448:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
2000144c:	e066      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000144e:	1cfb      	adds	r3, r7, #3
20001450:	f241 3288 	movw	r2, #5000	@ 0x1388
20001454:	4619      	mov	r1, r3
20001456:	4833      	ldr	r0, [pc, #204]	@ (20001524 <QSPI_Configuration+0x1a8>)
20001458:	f011 f84e 	bl	200124f8 <HAL_QSPI_Transmit>
2000145c:	4603      	mov	r3, r0
2000145e:	2b00      	cmp	r3, #0
20001460:	d002      	beq.n	20001468 <QSPI_Configuration+0xec>
			!= HAL_OK) {
		return ret;
20001462:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
20001466:	e059      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20001468:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000146c:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG3_CMD;
2000146e:	2315      	movs	r3, #21
20001470:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
20001472:	2300      	movs	r3, #0
20001474:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20001476:	2300      	movs	r3, #0
20001478:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
2000147a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000147e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
20001480:	2300      	movs	r3, #0
20001482:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20001484:	2300      	movs	r3, #0
20001486:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001488:	2300      	movs	r3, #0
2000148a:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000148c:	2300      	movs	r3, #0
2000148e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = 1;
20001490:	2301      	movs	r3, #1
20001492:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
20001494:	1d3b      	adds	r3, r7, #4
20001496:	f241 3288 	movw	r2, #5000	@ 0x1388
2000149a:	4619      	mov	r1, r3
2000149c:	4821      	ldr	r0, [pc, #132]	@ (20001524 <QSPI_Configuration+0x1a8>)
2000149e:	f010 ff67 	bl	20012370 <HAL_QSPI_Command>
200014a2:	4603      	mov	r3, r0
200014a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
200014a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200014ac:	2b00      	cmp	r3, #0
200014ae:	d002      	beq.n	200014b6 <QSPI_Configuration+0x13a>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
200014b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200014b4:	e032      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
200014b6:	1cfb      	adds	r3, r7, #3
200014b8:	f241 3288 	movw	r2, #5000	@ 0x1388
200014bc:	4619      	mov	r1, r3
200014be:	4819      	ldr	r0, [pc, #100]	@ (20001524 <QSPI_Configuration+0x1a8>)
200014c0:	f011 f8ac 	bl	2001261c <HAL_QSPI_Receive>
200014c4:	4603      	mov	r3, r0
200014c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
200014ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200014ce:	2b00      	cmp	r3, #0
200014d0:	d002      	beq.n	200014d8 <QSPI_Configuration+0x15c>
			!= HAL_OK) {
		return ret;
200014d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200014d6:	e021      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
200014d8:	2311      	movs	r3, #17
200014da:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
200014dc:	78fb      	ldrb	r3, [r7, #3]
200014de:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
200014e2:	b2db      	uxtb	r3, r3
200014e4:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
200014e6:	1d3b      	adds	r3, r7, #4
200014e8:	f241 3288 	movw	r2, #5000	@ 0x1388
200014ec:	4619      	mov	r1, r3
200014ee:	480d      	ldr	r0, [pc, #52]	@ (20001524 <QSPI_Configuration+0x1a8>)
200014f0:	f010 ff3e 	bl	20012370 <HAL_QSPI_Command>
200014f4:	4603      	mov	r3, r0
200014f6:	2b00      	cmp	r3, #0
200014f8:	d002      	beq.n	20001500 <QSPI_Configuration+0x184>
			!= HAL_OK) {
		return ret;
200014fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
200014fe:	e00d      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001500:	1cfb      	adds	r3, r7, #3
20001502:	f241 3288 	movw	r2, #5000	@ 0x1388
20001506:	4619      	mov	r1, r3
20001508:	4806      	ldr	r0, [pc, #24]	@ (20001524 <QSPI_Configuration+0x1a8>)
2000150a:	f010 fff5 	bl	200124f8 <HAL_QSPI_Transmit>
2000150e:	4603      	mov	r3, r0
20001510:	2b00      	cmp	r3, #0
20001512:	d002      	beq.n	2000151a <QSPI_Configuration+0x19e>
			!= HAL_OK) {
		return ret;
20001514:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
20001518:	e000      	b.n	2000151c <QSPI_Configuration+0x1a0>
	}

	return HAL_OK;
2000151a:	2300      	movs	r3, #0
}
2000151c:	4618      	mov	r0, r3
2000151e:	3740      	adds	r7, #64	@ 0x40
20001520:	46bd      	mov	sp, r7
20001522:	bd80      	pop	{r7, pc}
20001524:	20000538 	.word	0x20000538

20001528 <CSP_QSPI_EraseBlock>:

uint8_t CSP_QSPI_EraseBlock(uint32_t flash_address) {
20001528:	b580      	push	{r7, lr}
2000152a:	b092      	sub	sp, #72	@ 0x48
2000152c:	af00      	add	r7, sp, #0
2000152e:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCommand = { 0 };
20001530:	f107 030c 	add.w	r3, r7, #12
20001534:	2238      	movs	r2, #56	@ 0x38
20001536:	2100      	movs	r1, #0
20001538:	4618      	mov	r0, r3
2000153a:	f016 feb6 	bl	200182aa <memset>
	HAL_StatusTypeDef ret;

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000153e:	f44f 7380 	mov.w	r3, #256	@ 0x100
20001542:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
20001544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20001548:	61bb      	str	r3, [r7, #24]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000154a:	2300      	movs	r3, #0
2000154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2000154e:	2300      	movs	r3, #0
20001550:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001552:	2300      	movs	r3, #0
20001554:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
20001556:	2300      	movs	r3, #0
20001558:	643b      	str	r3, [r7, #64]	@ 0x40

	/* Enable write operations ------------------------------------------- */
	if ((ret = QSPI_WriteEnable()) != HAL_OK) {
2000155a:	f7ff fead 	bl	200012b8 <QSPI_WriteEnable>
2000155e:	4603      	mov	r3, r0
20001560:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
20001564:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
20001568:	2b00      	cmp	r3, #0
2000156a:	d002      	beq.n	20001572 <CSP_QSPI_EraseBlock+0x4a>
		return ret;
2000156c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
20001570:	e01d      	b.n	200015ae <CSP_QSPI_EraseBlock+0x86>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = BLOCK_ERASE_CMD;
20001572:	23d8      	movs	r3, #216	@ 0xd8
20001574:	60fb      	str	r3, [r7, #12]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
20001576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
2000157a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Address = flash_address;
2000157c:	687b      	ldr	r3, [r7, #4]
2000157e:	613b      	str	r3, [r7, #16]
	sCommand.DataMode = QSPI_DATA_NONE;
20001580:	2300      	movs	r3, #0
20001582:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DummyCycles = 0;
20001584:	2300      	movs	r3, #0
20001586:	623b      	str	r3, [r7, #32]

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
20001588:	f107 030c 	add.w	r3, r7, #12
2000158c:	f241 3288 	movw	r2, #5000	@ 0x1388
20001590:	4619      	mov	r1, r3
20001592:	4809      	ldr	r0, [pc, #36]	@ (200015b8 <CSP_QSPI_EraseBlock+0x90>)
20001594:	f010 feec 	bl	20012370 <HAL_QSPI_Command>
20001598:	4603      	mov	r3, r0
2000159a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
2000159e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
200015a2:	2b00      	cmp	r3, #0
200015a4:	d002      	beq.n	200015ac <CSP_QSPI_EraseBlock+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
200015a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
200015aa:	e000      	b.n	200015ae <CSP_QSPI_EraseBlock+0x86>
	}
	return HAL_OK;
200015ac:	2300      	movs	r3, #0
}
200015ae:	4618      	mov	r0, r3
200015b0:	3748      	adds	r7, #72	@ 0x48
200015b2:	46bd      	mov	sp, r7
200015b4:	bd80      	pop	{r7, pc}
200015b6:	bf00      	nop
200015b8:	20000538 	.word	0x20000538

200015bc <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress,
		uint32_t EraseEndAddress) {
200015bc:	b580      	push	{r7, lr}
200015be:	b090      	sub	sp, #64	@ 0x40
200015c0:	af00      	add	r7, sp, #0
200015c2:	6078      	str	r0, [r7, #4]
200015c4:	6039      	str	r1, [r7, #0]

	QSPI_CommandTypeDef sCommand;

	EraseStartAddress = EraseStartAddress
200015c6:	687a      	ldr	r2, [r7, #4]
200015c8:	4b23      	ldr	r3, [pc, #140]	@ (20001658 <CSP_QSPI_EraseSector+0x9c>)
200015ca:	4013      	ands	r3, r2
200015cc:	607b      	str	r3, [r7, #4]
			- EraseStartAddress % MEMORY_SECTOR_SIZE;

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200015ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
200015d2:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = SECTOR_ERASE_CMD;
200015d4:	2320      	movs	r3, #32
200015d6:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
200015d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
200015dc:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
200015de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
200015e2:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
200015e4:	2300      	movs	r3, #0
200015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
200015e8:	2300      	movs	r3, #0
200015ea:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200015ec:	2300      	movs	r3, #0
200015ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200015f0:	2300      	movs	r3, #0
200015f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

	sCommand.DataMode = QSPI_DATA_NONE;
200015f4:	2300      	movs	r3, #0
200015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DummyCycles = 0;
200015f8:	2300      	movs	r3, #0
200015fa:	61fb      	str	r3, [r7, #28]

	while (EraseEndAddress >= EraseStartAddress) {
200015fc:	e022      	b.n	20001644 <CSP_QSPI_EraseSector+0x88>
		sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
200015fe:	687b      	ldr	r3, [r7, #4]
20001600:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20001604:	60fb      	str	r3, [r7, #12]

		if (QSPI_WriteEnable() != HAL_OK) {
20001606:	f7ff fe57 	bl	200012b8 <QSPI_WriteEnable>
2000160a:	4603      	mov	r3, r0
2000160c:	2b00      	cmp	r3, #0
2000160e:	d001      	beq.n	20001614 <CSP_QSPI_EraseSector+0x58>
			return HAL_ERROR;
20001610:	2301      	movs	r3, #1
20001612:	e01c      	b.n	2000164e <CSP_QSPI_EraseSector+0x92>
		}

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001614:	f107 0308 	add.w	r3, r7, #8
20001618:	f241 3288 	movw	r2, #5000	@ 0x1388
2000161c:	4619      	mov	r1, r3
2000161e:	480f      	ldr	r0, [pc, #60]	@ (2000165c <CSP_QSPI_EraseSector+0xa0>)
20001620:	f010 fea6 	bl	20012370 <HAL_QSPI_Command>
20001624:	4603      	mov	r3, r0
20001626:	2b00      	cmp	r3, #0
20001628:	d001      	beq.n	2000162e <CSP_QSPI_EraseSector+0x72>
				!= HAL_OK) {
			return HAL_ERROR;
2000162a:	2301      	movs	r3, #1
2000162c:	e00f      	b.n	2000164e <CSP_QSPI_EraseSector+0x92>
		}
		EraseStartAddress += MEMORY_SECTOR_SIZE;
2000162e:	687b      	ldr	r3, [r7, #4]
20001630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
20001634:	607b      	str	r3, [r7, #4]

		if (QSPI_AutoPollingMemReady() != HAL_OK) {
20001636:	f7ff fdf3 	bl	20001220 <QSPI_AutoPollingMemReady>
2000163a:	4603      	mov	r3, r0
2000163c:	2b00      	cmp	r3, #0
2000163e:	d001      	beq.n	20001644 <CSP_QSPI_EraseSector+0x88>
			return HAL_ERROR;
20001640:	2301      	movs	r3, #1
20001642:	e004      	b.n	2000164e <CSP_QSPI_EraseSector+0x92>
	while (EraseEndAddress >= EraseStartAddress) {
20001644:	683a      	ldr	r2, [r7, #0]
20001646:	687b      	ldr	r3, [r7, #4]
20001648:	429a      	cmp	r2, r3
2000164a:	d2d8      	bcs.n	200015fe <CSP_QSPI_EraseSector+0x42>
		}
	}

	return HAL_OK;
2000164c:	2300      	movs	r3, #0
}
2000164e:	4618      	mov	r0, r3
20001650:	3740      	adds	r7, #64	@ 0x40
20001652:	46bd      	mov	sp, r7
20001654:	bd80      	pop	{r7, pc}
20001656:	bf00      	nop
20001658:	fffff000 	.word	0xfffff000
2000165c:	20000538 	.word	0x20000538

20001660 <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t *buffer, uint32_t address,
		uint32_t buffer_size) {
20001660:	b580      	push	{r7, lr}
20001662:	b096      	sub	sp, #88	@ 0x58
20001664:	af00      	add	r7, sp, #0
20001666:	60f8      	str	r0, [r7, #12]
20001668:	60b9      	str	r1, [r7, #8]
2000166a:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
2000166c:	2300      	movs	r3, #0
2000166e:	653b      	str	r3, [r7, #80]	@ 0x50

	//
	while (current_addr <= address) {
20001670:	e003      	b.n	2000167a <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
20001672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20001674:	f503 7380 	add.w	r3, r3, #256	@ 0x100
20001678:	653b      	str	r3, [r7, #80]	@ 0x50
	while (current_addr <= address) {
2000167a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
2000167c:	68bb      	ldr	r3, [r7, #8]
2000167e:	429a      	cmp	r2, r3
20001680:	d9f7      	bls.n	20001672 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
20001682:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
20001684:	68bb      	ldr	r3, [r7, #8]
20001686:	1ad3      	subs	r3, r2, r3
20001688:	657b      	str	r3, [r7, #84]	@ 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
2000168a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
2000168c:	687b      	ldr	r3, [r7, #4]
2000168e:	429a      	cmp	r2, r3
20001690:	d901      	bls.n	20001696 <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
20001692:	687b      	ldr	r3, [r7, #4]
20001694:	657b      	str	r3, [r7, #84]	@ 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
20001696:	68bb      	ldr	r3, [r7, #8]
20001698:	653b      	str	r3, [r7, #80]	@ 0x50
	end_addr = address + buffer_size;
2000169a:	68ba      	ldr	r2, [r7, #8]
2000169c:	687b      	ldr	r3, [r7, #4]
2000169e:	4413      	add	r3, r2
200016a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200016a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
200016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
200016a8:	2332      	movs	r3, #50	@ 0x32
200016aa:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
200016ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
200016b0:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
200016b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
200016b6:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
200016b8:	2300      	movs	r3, #0
200016ba:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
200016bc:	2300      	movs	r3, #0
200016be:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200016c0:	2300      	movs	r3, #0
200016c2:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200016c4:	2300      	movs	r3, #0
200016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DataMode = QSPI_DATA_4_LINES;
200016c8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
200016cc:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = buffer_size;
200016ce:	687b      	ldr	r3, [r7, #4]
200016d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address = address;
200016d2:	68bb      	ldr	r3, [r7, #8]
200016d4:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
200016d6:	2300      	movs	r3, #0
200016d8:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
200016da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200016dc:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
200016de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200016e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (current_size == 0) {
200016e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200016e4:	2b00      	cmp	r3, #0
200016e6:	d101      	bne.n	200016ec <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
200016e8:	2300      	movs	r3, #0
200016ea:	e03f      	b.n	2000176c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
200016ec:	f7ff fde4 	bl	200012b8 <QSPI_WriteEnable>
200016f0:	4603      	mov	r3, r0
200016f2:	2b00      	cmp	r3, #0
200016f4:	d001      	beq.n	200016fa <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
200016f6:	2301      	movs	r3, #1
200016f8:	e038      	b.n	2000176c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
200016fa:	f107 0314 	add.w	r3, r7, #20
200016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
20001702:	4619      	mov	r1, r3
20001704:	481b      	ldr	r0, [pc, #108]	@ (20001774 <CSP_QSPI_WriteMemory+0x114>)
20001706:	f010 fe33 	bl	20012370 <HAL_QSPI_Command>
2000170a:	4603      	mov	r3, r0
2000170c:	2b00      	cmp	r3, #0
2000170e:	d001      	beq.n	20001714 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
20001710:	2301      	movs	r3, #1
20001712:	e02b      	b.n	2000176c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001714:	f241 3288 	movw	r2, #5000	@ 0x1388
20001718:	68f9      	ldr	r1, [r7, #12]
2000171a:	4816      	ldr	r0, [pc, #88]	@ (20001774 <CSP_QSPI_WriteMemory+0x114>)
2000171c:	f010 feec 	bl	200124f8 <HAL_QSPI_Transmit>
20001720:	4603      	mov	r3, r0
20001722:	2b00      	cmp	r3, #0
20001724:	d001      	beq.n	2000172a <CSP_QSPI_WriteMemory+0xca>
				!= HAL_OK) {

			return HAL_ERROR;
20001726:	2301      	movs	r3, #1
20001728:	e020      	b.n	2000176c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
2000172a:	f7ff fd79 	bl	20001220 <QSPI_AutoPollingMemReady>
2000172e:	4603      	mov	r3, r0
20001730:	2b00      	cmp	r3, #0
20001732:	d001      	beq.n	20001738 <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
20001734:	2301      	movs	r3, #1
20001736:	e019      	b.n	2000176c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
20001738:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
2000173a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000173c:	4413      	add	r3, r2
2000173e:	653b      	str	r3, [r7, #80]	@ 0x50
		buffer += current_size;
20001740:	68fa      	ldr	r2, [r7, #12]
20001742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20001744:	4413      	add	r3, r2
20001746:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
20001748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000174a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
2000174e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20001750:	429a      	cmp	r2, r3
20001752:	d203      	bcs.n	2000175c <CSP_QSPI_WriteMemory+0xfc>
20001754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
20001756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20001758:	1ad3      	subs	r3, r2, r3
2000175a:	e001      	b.n	20001760 <CSP_QSPI_WriteMemory+0x100>
2000175c:	f44f 7380 	mov.w	r3, #256	@ 0x100
		current_size =
20001760:	657b      	str	r3, [r7, #84]	@ 0x54
	} while (current_addr <= end_addr);
20001762:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
20001764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20001766:	429a      	cmp	r2, r3
20001768:	d9b7      	bls.n	200016da <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
2000176a:	2300      	movs	r3, #0

}
2000176c:	4618      	mov	r0, r3
2000176e:	3758      	adds	r7, #88	@ 0x58
20001770:	46bd      	mov	sp, r7
20001772:	bd80      	pop	{r7, pc}
20001774:	20000538 	.word	0x20000538

20001778 <CSP_QSPI_EnableMemoryMappedMode>:
//		return HAL_ERROR;
//	}
//	return HAL_OK;
//}

uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
20001778:	b580      	push	{r7, lr}
2000177a:	b090      	sub	sp, #64	@ 0x40
2000177c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000177e:	f44f 7380 	mov.w	r3, #256	@ 0x100
20001782:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
20001784:	23eb      	movs	r3, #235	@ 0xeb
20001786:	60bb      	str	r3, [r7, #8]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
20001788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
2000178c:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
2000178e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
20001792:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address = 0;
20001794:	2300      	movs	r3, #0
20001796:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
20001798:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
2000179c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.AlternateBytes = 0xFF;
2000179e:	23ff      	movs	r3, #255	@ 0xff
200017a0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateBytesSize = 1;
200017a2:	2301      	movs	r3, #1
200017a4:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
200017a6:	2300      	movs	r3, #0
200017a8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200017aa:	2300      	movs	r3, #0
200017ac:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200017ae:	2300      	movs	r3, #0
200017b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_4_LINES;
200017b2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
200017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 0;
200017b8:	2300      	movs	r3, #0
200017ba:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DummyCycles = 4;
200017bc:	2304      	movs	r3, #4
200017be:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
200017c0:	2300      	movs	r3, #0
200017c2:	607b      	str	r3, [r7, #4]
	sMemMappedCfg.TimeOutPeriod = 0;
200017c4:	2300      	movs	r3, #0
200017c6:	603b      	str	r3, [r7, #0]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
200017c8:	463a      	mov	r2, r7
200017ca:	f107 0308 	add.w	r3, r7, #8
200017ce:	4619      	mov	r1, r3
200017d0:	4807      	ldr	r0, [pc, #28]	@ (200017f0 <CSP_QSPI_EnableMemoryMappedMode+0x78>)
200017d2:	f011 fb66 	bl	20012ea2 <HAL_QSPI_MemoryMapped>
200017d6:	4603      	mov	r3, r0
200017d8:	2b00      	cmp	r3, #0
200017da:	d001      	beq.n	200017e0 <CSP_QSPI_EnableMemoryMappedMode+0x68>
		return HAL_ERROR;
200017dc:	2301      	movs	r3, #1
200017de:	e003      	b.n	200017e8 <CSP_QSPI_EnableMemoryMappedMode+0x70>
	}
	HAL_Delay(100);
200017e0:	2064      	movs	r0, #100	@ 0x64
200017e2:	f000 fdb9 	bl	20002358 <HAL_Delay>
	return HAL_OK;
200017e6:	2300      	movs	r3, #0
}
200017e8:	4618      	mov	r0, r3
200017ea:	3740      	adds	r7, #64	@ 0x40
200017ec:	46bd      	mov	sp, r7
200017ee:	bd80      	pop	{r7, pc}
200017f0:	20000538 	.word	0x20000538

200017f4 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip() {
200017f4:	b580      	push	{r7, lr}
200017f6:	b090      	sub	sp, #64	@ 0x40
200017f8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
200017fa:	463b      	mov	r3, r7
200017fc:	2238      	movs	r2, #56	@ 0x38
200017fe:	2100      	movs	r1, #0
20001800:	4618      	mov	r0, r3
20001802:	f016 fd52 	bl	200182aa <memset>
	uint32_t temp = 0;
20001806:	2300      	movs	r3, #0
20001808:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_StatusTypeDef ret;

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000180a:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000180e:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_ENABLE_CMD;
20001810:	2366      	movs	r3, #102	@ 0x66
20001812:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
20001814:	2300      	movs	r3, #0
20001816:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20001818:	2300      	movs	r3, #0
2000181a:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
2000181c:	2300      	movs	r3, #0
2000181e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
20001820:	2300      	movs	r3, #0
20001822:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20001824:	2300      	movs	r3, #0
20001826:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001828:	2300      	movs	r3, #0
2000182a:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000182c:	2300      	movs	r3, #0
2000182e:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
20001830:	463b      	mov	r3, r7
20001832:	f241 3288 	movw	r2, #5000	@ 0x1388
20001836:	4619      	mov	r1, r3
20001838:	4820      	ldr	r0, [pc, #128]	@ (200018bc <QSPI_ResetChip+0xc8>)
2000183a:	f010 fd99 	bl	20012370 <HAL_QSPI_Command>
2000183e:	4603      	mov	r3, r0
20001840:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
20001844:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
20001848:	2b00      	cmp	r3, #0
2000184a:	d002      	beq.n	20001852 <QSPI_ResetChip+0x5e>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
2000184c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
20001850:	e02f      	b.n	200018b2 <QSPI_ResetChip+0xbe>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20001852:	f44f 7380 	mov.w	r3, #256	@ 0x100
20001856:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_EXECUTE_CMD;
20001858:	2399      	movs	r3, #153	@ 0x99
2000185a:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
2000185c:	2300      	movs	r3, #0
2000185e:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20001860:	2300      	movs	r3, #0
20001862:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
20001864:	2300      	movs	r3, #0
20001866:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
20001868:	2300      	movs	r3, #0
2000186a:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2000186c:	2300      	movs	r3, #0
2000186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001870:	2300      	movs	r3, #0
20001872:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
20001874:	2300      	movs	r3, #0
20001876:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
20001878:	463b      	mov	r3, r7
2000187a:	f241 3288 	movw	r2, #5000	@ 0x1388
2000187e:	4619      	mov	r1, r3
20001880:	480e      	ldr	r0, [pc, #56]	@ (200018bc <QSPI_ResetChip+0xc8>)
20001882:	f010 fd75 	bl	20012370 <HAL_QSPI_Command>
20001886:	4603      	mov	r3, r0
20001888:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
2000188c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
20001890:	2b00      	cmp	r3, #0
20001892:	d002      	beq.n	2000189a <QSPI_ResetChip+0xa6>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
20001894:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
20001898:	e00b      	b.n	200018b2 <QSPI_ResetChip+0xbe>
	}

	for (temp = 0; temp < 500000; temp++) {
2000189a:	2300      	movs	r3, #0
2000189c:	63fb      	str	r3, [r7, #60]	@ 0x3c
2000189e:	e003      	b.n	200018a8 <QSPI_ResetChip+0xb4>
		__NOP();
200018a0:	bf00      	nop
	for (temp = 0; temp < 500000; temp++) {
200018a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200018a4:	3301      	adds	r3, #1
200018a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
200018a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
200018aa:	4a05      	ldr	r2, [pc, #20]	@ (200018c0 <QSPI_ResetChip+0xcc>)
200018ac:	4293      	cmp	r3, r2
200018ae:	d9f7      	bls.n	200018a0 <QSPI_ResetChip+0xac>
	}

	return HAL_OK;
200018b0:	2300      	movs	r3, #0
}
200018b2:	4618      	mov	r0, r3
200018b4:	3740      	adds	r7, #64	@ 0x40
200018b6:	46bd      	mov	sp, r7
200018b8:	bd80      	pop	{r7, pc}
200018ba:	bf00      	nop
200018bc:	20000538 	.word	0x20000538
200018c0:	0007a11f 	.word	0x0007a11f

200018c4 <CSP_QSPI_Read>:

uint8_t CSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
200018c4:	b580      	push	{r7, lr}
200018c6:	b092      	sub	sp, #72	@ 0x48
200018c8:	af00      	add	r7, sp, #0
200018ca:	60f8      	str	r0, [r7, #12]
200018cc:	60b9      	str	r1, [r7, #8]
200018ce:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the read command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200018d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
200018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
200018d6:	23eb      	movs	r3, #235	@ 0xeb
200018d8:	613b      	str	r3, [r7, #16]
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
200018da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
200018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
200018e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
200018e4:	61fb      	str	r3, [r7, #28]
	s_command.Address = ReadAddr;
200018e6:	68bb      	ldr	r3, [r7, #8]
200018e8:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
200018ea:	2300      	movs	r3, #0
200018ec:	633b      	str	r3, [r7, #48]	@ 0x30
	s_command.DataMode = QSPI_DATA_4_LINES;
200018ee:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
200018f2:	637b      	str	r3, [r7, #52]	@ 0x34
	s_command.DummyCycles = 6U;
200018f4:	2306      	movs	r3, #6
200018f6:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.NbData = Size;
200018f8:	687b      	ldr	r3, [r7, #4]
200018fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
200018fc:	2300      	movs	r3, #0
200018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001900:	2300      	movs	r3, #0
20001902:	643b      	str	r3, [r7, #64]	@ 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
20001904:	2300      	movs	r3, #0
20001906:	647b      	str	r3, [r7, #68]	@ 0x44

	/* Configure the command */
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001908:	f107 0310 	add.w	r3, r7, #16
2000190c:	f241 3288 	movw	r2, #5000	@ 0x1388
20001910:	4619      	mov	r1, r3
20001912:	4816      	ldr	r0, [pc, #88]	@ (2000196c <CSP_QSPI_Read+0xa8>)
20001914:	f010 fd2c 	bl	20012370 <HAL_QSPI_Command>
20001918:	4603      	mov	r3, r0
2000191a:	2b00      	cmp	r3, #0
2000191c:	d001      	beq.n	20001922 <CSP_QSPI_Read+0x5e>
			!= HAL_OK) {
		return HAL_ERROR;
2000191e:	2301      	movs	r3, #1
20001920:	e01f      	b.n	20001962 <CSP_QSPI_Read+0x9e>
	}

	/* Set S# timing for Read command */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
20001922:	4b12      	ldr	r3, [pc, #72]	@ (2000196c <CSP_QSPI_Read+0xa8>)
20001924:	681b      	ldr	r3, [r3, #0]
20001926:	685b      	ldr	r3, [r3, #4]
20001928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
2000192c:	4b0f      	ldr	r3, [pc, #60]	@ (2000196c <CSP_QSPI_Read+0xa8>)
2000192e:	681b      	ldr	r3, [r3, #0]
20001930:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
20001934:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_5_CYCLE);

	/* Reception of the data */
	if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001936:	f241 3288 	movw	r2, #5000	@ 0x1388
2000193a:	68f9      	ldr	r1, [r7, #12]
2000193c:	480b      	ldr	r0, [pc, #44]	@ (2000196c <CSP_QSPI_Read+0xa8>)
2000193e:	f010 fe6d 	bl	2001261c <HAL_QSPI_Receive>
20001942:	4603      	mov	r3, r0
20001944:	2b00      	cmp	r3, #0
20001946:	d001      	beq.n	2000194c <CSP_QSPI_Read+0x88>
			!= HAL_OK) {
		return HAL_ERROR;
20001948:	2301      	movs	r3, #1
2000194a:	e00a      	b.n	20001962 <CSP_QSPI_Read+0x9e>
	}

	/* Restore S# timing for nonRead commands */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
2000194c:	4b07      	ldr	r3, [pc, #28]	@ (2000196c <CSP_QSPI_Read+0xa8>)
2000194e:	681b      	ldr	r3, [r3, #0]
20001950:	685b      	ldr	r3, [r3, #4]
20001952:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
20001956:	4b05      	ldr	r3, [pc, #20]	@ (2000196c <CSP_QSPI_Read+0xa8>)
20001958:	681b      	ldr	r3, [r3, #0]
2000195a:	f442 62a0 	orr.w	r2, r2, #1280	@ 0x500
2000195e:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
20001960:	2300      	movs	r3, #0
}
20001962:	4618      	mov	r0, r3
20001964:	3748      	adds	r7, #72	@ 0x48
20001966:	46bd      	mov	sp, r7
20001968:	bd80      	pop	{r7, pc}
2000196a:	bf00      	nop
2000196c:	20000538 	.word	0x20000538

20001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20001970:	b480      	push	{r7}
20001972:	b083      	sub	sp, #12
20001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20001976:	4b0a      	ldr	r3, [pc, #40]	@ (200019a0 <HAL_MspInit+0x30>)
20001978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2000197c:	4a08      	ldr	r2, [pc, #32]	@ (200019a0 <HAL_MspInit+0x30>)
2000197e:	f043 0302 	orr.w	r3, r3, #2
20001982:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
20001986:	4b06      	ldr	r3, [pc, #24]	@ (200019a0 <HAL_MspInit+0x30>)
20001988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2000198c:	f003 0302 	and.w	r3, r3, #2
20001990:	607b      	str	r3, [r7, #4]
20001992:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20001994:	bf00      	nop
20001996:	370c      	adds	r7, #12
20001998:	46bd      	mov	sp, r7
2000199a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000199e:	4770      	bx	lr
200019a0:	58024400 	.word	0x58024400

200019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
200019a4:	b480      	push	{r7}
200019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
200019a8:	bf00      	nop
200019aa:	e7fd      	b.n	200019a8 <NMI_Handler+0x4>

200019ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
200019ac:	b480      	push	{r7}
200019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
200019b0:	bf00      	nop
200019b2:	e7fd      	b.n	200019b0 <HardFault_Handler+0x4>

200019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
200019b4:	b480      	push	{r7}
200019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
200019b8:	bf00      	nop
200019ba:	e7fd      	b.n	200019b8 <MemManage_Handler+0x4>

200019bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
200019bc:	b480      	push	{r7}
200019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
200019c0:	bf00      	nop
200019c2:	e7fd      	b.n	200019c0 <BusFault_Handler+0x4>

200019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
200019c4:	b480      	push	{r7}
200019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
200019c8:	bf00      	nop
200019ca:	e7fd      	b.n	200019c8 <UsageFault_Handler+0x4>

200019cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
200019cc:	b480      	push	{r7}
200019ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
200019d0:	bf00      	nop
200019d2:	46bd      	mov	sp, r7
200019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200019d8:	4770      	bx	lr

200019da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
200019da:	b480      	push	{r7}
200019dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
200019de:	bf00      	nop
200019e0:	46bd      	mov	sp, r7
200019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200019e6:	4770      	bx	lr

200019e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
200019e8:	b480      	push	{r7}
200019ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
200019ec:	bf00      	nop
200019ee:	46bd      	mov	sp, r7
200019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200019f4:	4770      	bx	lr

200019f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
200019f6:	b580      	push	{r7, lr}
200019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
200019fa:	f000 fc4d 	bl	20002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
200019fe:	bf00      	nop
20001a00:	bd80      	pop	{r7, pc}

20001a02 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
20001a02:	b480      	push	{r7}
20001a04:	af00      	add	r7, sp, #0
}
20001a06:	bf00      	nop
20001a08:	46bd      	mov	sp, r7
20001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a0e:	4770      	bx	lr

20001a10 <_getpid>:

int _getpid(void)
{
20001a10:	b480      	push	{r7}
20001a12:	af00      	add	r7, sp, #0
  return 1;
20001a14:	2301      	movs	r3, #1
}
20001a16:	4618      	mov	r0, r3
20001a18:	46bd      	mov	sp, r7
20001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a1e:	4770      	bx	lr

20001a20 <_kill>:

int _kill(int pid, int sig)
{
20001a20:	b580      	push	{r7, lr}
20001a22:	b082      	sub	sp, #8
20001a24:	af00      	add	r7, sp, #0
20001a26:	6078      	str	r0, [r7, #4]
20001a28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
20001a2a:	f016 fce3 	bl	200183f4 <__errno>
20001a2e:	4603      	mov	r3, r0
20001a30:	2216      	movs	r2, #22
20001a32:	601a      	str	r2, [r3, #0]
  return -1;
20001a34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001a38:	4618      	mov	r0, r3
20001a3a:	3708      	adds	r7, #8
20001a3c:	46bd      	mov	sp, r7
20001a3e:	bd80      	pop	{r7, pc}

20001a40 <_exit>:

void _exit (int status)
{
20001a40:	b580      	push	{r7, lr}
20001a42:	b082      	sub	sp, #8
20001a44:	af00      	add	r7, sp, #0
20001a46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
20001a48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
20001a4c:	6878      	ldr	r0, [r7, #4]
20001a4e:	f7ff ffe7 	bl	20001a20 <_kill>
  while (1) {}    /* Make sure we hang here */
20001a52:	bf00      	nop
20001a54:	e7fd      	b.n	20001a52 <_exit+0x12>

20001a56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
20001a56:	b580      	push	{r7, lr}
20001a58:	b086      	sub	sp, #24
20001a5a:	af00      	add	r7, sp, #0
20001a5c:	60f8      	str	r0, [r7, #12]
20001a5e:	60b9      	str	r1, [r7, #8]
20001a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
20001a62:	2300      	movs	r3, #0
20001a64:	617b      	str	r3, [r7, #20]
20001a66:	e00a      	b.n	20001a7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
20001a68:	f3af 8000 	nop.w
20001a6c:	4601      	mov	r1, r0
20001a6e:	68bb      	ldr	r3, [r7, #8]
20001a70:	1c5a      	adds	r2, r3, #1
20001a72:	60ba      	str	r2, [r7, #8]
20001a74:	b2ca      	uxtb	r2, r1
20001a76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
20001a78:	697b      	ldr	r3, [r7, #20]
20001a7a:	3301      	adds	r3, #1
20001a7c:	617b      	str	r3, [r7, #20]
20001a7e:	697a      	ldr	r2, [r7, #20]
20001a80:	687b      	ldr	r3, [r7, #4]
20001a82:	429a      	cmp	r2, r3
20001a84:	dbf0      	blt.n	20001a68 <_read+0x12>
  }

  return len;
20001a86:	687b      	ldr	r3, [r7, #4]
}
20001a88:	4618      	mov	r0, r3
20001a8a:	3718      	adds	r7, #24
20001a8c:	46bd      	mov	sp, r7
20001a8e:	bd80      	pop	{r7, pc}

20001a90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
20001a90:	b580      	push	{r7, lr}
20001a92:	b086      	sub	sp, #24
20001a94:	af00      	add	r7, sp, #0
20001a96:	60f8      	str	r0, [r7, #12]
20001a98:	60b9      	str	r1, [r7, #8]
20001a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
20001a9c:	2300      	movs	r3, #0
20001a9e:	617b      	str	r3, [r7, #20]
20001aa0:	e009      	b.n	20001ab6 <_write+0x26>
  {
    __io_putchar(*ptr++);
20001aa2:	68bb      	ldr	r3, [r7, #8]
20001aa4:	1c5a      	adds	r2, r3, #1
20001aa6:	60ba      	str	r2, [r7, #8]
20001aa8:	781b      	ldrb	r3, [r3, #0]
20001aaa:	4618      	mov	r0, r3
20001aac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
20001ab0:	697b      	ldr	r3, [r7, #20]
20001ab2:	3301      	adds	r3, #1
20001ab4:	617b      	str	r3, [r7, #20]
20001ab6:	697a      	ldr	r2, [r7, #20]
20001ab8:	687b      	ldr	r3, [r7, #4]
20001aba:	429a      	cmp	r2, r3
20001abc:	dbf1      	blt.n	20001aa2 <_write+0x12>
  }
  return len;
20001abe:	687b      	ldr	r3, [r7, #4]
}
20001ac0:	4618      	mov	r0, r3
20001ac2:	3718      	adds	r7, #24
20001ac4:	46bd      	mov	sp, r7
20001ac6:	bd80      	pop	{r7, pc}

20001ac8 <_close>:

int _close(int file)
{
20001ac8:	b480      	push	{r7}
20001aca:	b083      	sub	sp, #12
20001acc:	af00      	add	r7, sp, #0
20001ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
20001ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001ad4:	4618      	mov	r0, r3
20001ad6:	370c      	adds	r7, #12
20001ad8:	46bd      	mov	sp, r7
20001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ade:	4770      	bx	lr

20001ae0 <_fstat>:


int _fstat(int file, struct stat *st)
{
20001ae0:	b480      	push	{r7}
20001ae2:	b083      	sub	sp, #12
20001ae4:	af00      	add	r7, sp, #0
20001ae6:	6078      	str	r0, [r7, #4]
20001ae8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
20001aea:	683b      	ldr	r3, [r7, #0]
20001aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
20001af0:	605a      	str	r2, [r3, #4]
  return 0;
20001af2:	2300      	movs	r3, #0
}
20001af4:	4618      	mov	r0, r3
20001af6:	370c      	adds	r7, #12
20001af8:	46bd      	mov	sp, r7
20001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
20001afe:	4770      	bx	lr

20001b00 <_isatty>:

int _isatty(int file)
{
20001b00:	b480      	push	{r7}
20001b02:	b083      	sub	sp, #12
20001b04:	af00      	add	r7, sp, #0
20001b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
20001b08:	2301      	movs	r3, #1
}
20001b0a:	4618      	mov	r0, r3
20001b0c:	370c      	adds	r7, #12
20001b0e:	46bd      	mov	sp, r7
20001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b14:	4770      	bx	lr

20001b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
20001b16:	b480      	push	{r7}
20001b18:	b085      	sub	sp, #20
20001b1a:	af00      	add	r7, sp, #0
20001b1c:	60f8      	str	r0, [r7, #12]
20001b1e:	60b9      	str	r1, [r7, #8]
20001b20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
20001b22:	2300      	movs	r3, #0
}
20001b24:	4618      	mov	r0, r3
20001b26:	3714      	adds	r7, #20
20001b28:	46bd      	mov	sp, r7
20001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b2e:	4770      	bx	lr

20001b30 <_open>:

int _open(char *path, int flags, ...)
{
20001b30:	b40e      	push	{r1, r2, r3}
20001b32:	b480      	push	{r7}
20001b34:	b082      	sub	sp, #8
20001b36:	af00      	add	r7, sp, #0
20001b38:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
20001b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001b3e:	4618      	mov	r0, r3
20001b40:	3708      	adds	r7, #8
20001b42:	46bd      	mov	sp, r7
20001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b48:	b003      	add	sp, #12
20001b4a:	4770      	bx	lr

20001b4c <_wait>:

int _wait(int *status)
{
20001b4c:	b580      	push	{r7, lr}
20001b4e:	b082      	sub	sp, #8
20001b50:	af00      	add	r7, sp, #0
20001b52:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
20001b54:	f016 fc4e 	bl	200183f4 <__errno>
20001b58:	4603      	mov	r3, r0
20001b5a:	220a      	movs	r2, #10
20001b5c:	601a      	str	r2, [r3, #0]
  return -1;
20001b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001b62:	4618      	mov	r0, r3
20001b64:	3708      	adds	r7, #8
20001b66:	46bd      	mov	sp, r7
20001b68:	bd80      	pop	{r7, pc}

20001b6a <_unlink>:

int _unlink(char *name)
{
20001b6a:	b580      	push	{r7, lr}
20001b6c:	b082      	sub	sp, #8
20001b6e:	af00      	add	r7, sp, #0
20001b70:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
20001b72:	f016 fc3f 	bl	200183f4 <__errno>
20001b76:	4603      	mov	r3, r0
20001b78:	2202      	movs	r2, #2
20001b7a:	601a      	str	r2, [r3, #0]
  return -1;
20001b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001b80:	4618      	mov	r0, r3
20001b82:	3708      	adds	r7, #8
20001b84:	46bd      	mov	sp, r7
20001b86:	bd80      	pop	{r7, pc}

20001b88 <_times>:

int _times(struct tms *buf)
{
20001b88:	b480      	push	{r7}
20001b8a:	b083      	sub	sp, #12
20001b8c:	af00      	add	r7, sp, #0
20001b8e:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
20001b90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001b94:	4618      	mov	r0, r3
20001b96:	370c      	adds	r7, #12
20001b98:	46bd      	mov	sp, r7
20001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b9e:	4770      	bx	lr

20001ba0 <_stat>:

int _stat(char *file, struct stat *st)
{
20001ba0:	b480      	push	{r7}
20001ba2:	b083      	sub	sp, #12
20001ba4:	af00      	add	r7, sp, #0
20001ba6:	6078      	str	r0, [r7, #4]
20001ba8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
20001baa:	683b      	ldr	r3, [r7, #0]
20001bac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
20001bb0:	605a      	str	r2, [r3, #4]
  return 0;
20001bb2:	2300      	movs	r3, #0
}
20001bb4:	4618      	mov	r0, r3
20001bb6:	370c      	adds	r7, #12
20001bb8:	46bd      	mov	sp, r7
20001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bbe:	4770      	bx	lr

20001bc0 <_link>:

int _link(char *old, char *new)
{
20001bc0:	b580      	push	{r7, lr}
20001bc2:	b082      	sub	sp, #8
20001bc4:	af00      	add	r7, sp, #0
20001bc6:	6078      	str	r0, [r7, #4]
20001bc8:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
20001bca:	f016 fc13 	bl	200183f4 <__errno>
20001bce:	4603      	mov	r3, r0
20001bd0:	221f      	movs	r2, #31
20001bd2:	601a      	str	r2, [r3, #0]
  return -1;
20001bd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001bd8:	4618      	mov	r0, r3
20001bda:	3708      	adds	r7, #8
20001bdc:	46bd      	mov	sp, r7
20001bde:	bd80      	pop	{r7, pc}

20001be0 <_fork>:

int _fork(void)
{
20001be0:	b580      	push	{r7, lr}
20001be2:	af00      	add	r7, sp, #0
  errno = EAGAIN;
20001be4:	f016 fc06 	bl	200183f4 <__errno>
20001be8:	4603      	mov	r3, r0
20001bea:	220b      	movs	r2, #11
20001bec:	601a      	str	r2, [r3, #0]
  return -1;
20001bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001bf2:	4618      	mov	r0, r3
20001bf4:	bd80      	pop	{r7, pc}

20001bf6 <_execve>:

int _execve(char *name, char **argv, char **env)
{
20001bf6:	b580      	push	{r7, lr}
20001bf8:	b084      	sub	sp, #16
20001bfa:	af00      	add	r7, sp, #0
20001bfc:	60f8      	str	r0, [r7, #12]
20001bfe:	60b9      	str	r1, [r7, #8]
20001c00:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
20001c02:	f016 fbf7 	bl	200183f4 <__errno>
20001c06:	4603      	mov	r3, r0
20001c08:	220c      	movs	r2, #12
20001c0a:	601a      	str	r2, [r3, #0]
  return -1;
20001c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001c10:	4618      	mov	r0, r3
20001c12:	3710      	adds	r7, #16
20001c14:	46bd      	mov	sp, r7
20001c16:	bd80      	pop	{r7, pc}

20001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20001c18:	b580      	push	{r7, lr}
20001c1a:	b086      	sub	sp, #24
20001c1c:	af00      	add	r7, sp, #0
20001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
20001c20:	4a14      	ldr	r2, [pc, #80]	@ (20001c74 <_sbrk+0x5c>)
20001c22:	4b15      	ldr	r3, [pc, #84]	@ (20001c78 <_sbrk+0x60>)
20001c24:	1ad3      	subs	r3, r2, r3
20001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20001c28:	697b      	ldr	r3, [r7, #20]
20001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20001c2c:	4b13      	ldr	r3, [pc, #76]	@ (20001c7c <_sbrk+0x64>)
20001c2e:	681b      	ldr	r3, [r3, #0]
20001c30:	2b00      	cmp	r3, #0
20001c32:	d102      	bne.n	20001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20001c34:	4b11      	ldr	r3, [pc, #68]	@ (20001c7c <_sbrk+0x64>)
20001c36:	4a12      	ldr	r2, [pc, #72]	@ (20001c80 <_sbrk+0x68>)
20001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
20001c3a:	4b10      	ldr	r3, [pc, #64]	@ (20001c7c <_sbrk+0x64>)
20001c3c:	681a      	ldr	r2, [r3, #0]
20001c3e:	687b      	ldr	r3, [r7, #4]
20001c40:	4413      	add	r3, r2
20001c42:	693a      	ldr	r2, [r7, #16]
20001c44:	429a      	cmp	r2, r3
20001c46:	d207      	bcs.n	20001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
20001c48:	f016 fbd4 	bl	200183f4 <__errno>
20001c4c:	4603      	mov	r3, r0
20001c4e:	220c      	movs	r2, #12
20001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
20001c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
20001c56:	e009      	b.n	20001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20001c58:	4b08      	ldr	r3, [pc, #32]	@ (20001c7c <_sbrk+0x64>)
20001c5a:	681b      	ldr	r3, [r3, #0]
20001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
20001c5e:	4b07      	ldr	r3, [pc, #28]	@ (20001c7c <_sbrk+0x64>)
20001c60:	681a      	ldr	r2, [r3, #0]
20001c62:	687b      	ldr	r3, [r7, #4]
20001c64:	4413      	add	r3, r2
20001c66:	4a05      	ldr	r2, [pc, #20]	@ (20001c7c <_sbrk+0x64>)
20001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
20001c6a:	68fb      	ldr	r3, [r7, #12]
}
20001c6c:	4618      	mov	r0, r3
20001c6e:	3718      	adds	r7, #24
20001c70:	46bd      	mov	sp, r7
20001c72:	bd80      	pop	{r7, pc}
20001c74:	20020004 	.word	0x20020004
20001c78:	00000400 	.word	0x00000400
20001c7c:	20000588 	.word	0x20000588
20001c80:	20018934 	.word	0x20018934

20001c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
20001c84:	b480      	push	{r7}
20001c86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
20001c88:	4b37      	ldr	r3, [pc, #220]	@ (20001d68 <SystemInit+0xe4>)
20001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20001c8e:	4a36      	ldr	r2, [pc, #216]	@ (20001d68 <SystemInit+0xe4>)
20001c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
20001c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
20001c98:	4b34      	ldr	r3, [pc, #208]	@ (20001d6c <SystemInit+0xe8>)
20001c9a:	681b      	ldr	r3, [r3, #0]
20001c9c:	f003 030f 	and.w	r3, r3, #15
20001ca0:	2b06      	cmp	r3, #6
20001ca2:	d807      	bhi.n	20001cb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
20001ca4:	4b31      	ldr	r3, [pc, #196]	@ (20001d6c <SystemInit+0xe8>)
20001ca6:	681b      	ldr	r3, [r3, #0]
20001ca8:	f023 030f 	bic.w	r3, r3, #15
20001cac:	4a2f      	ldr	r2, [pc, #188]	@ (20001d6c <SystemInit+0xe8>)
20001cae:	f043 0307 	orr.w	r3, r3, #7
20001cb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
20001cb4:	4b2e      	ldr	r3, [pc, #184]	@ (20001d70 <SystemInit+0xec>)
20001cb6:	681b      	ldr	r3, [r3, #0]
20001cb8:	4a2d      	ldr	r2, [pc, #180]	@ (20001d70 <SystemInit+0xec>)
20001cba:	f043 0301 	orr.w	r3, r3, #1
20001cbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20001cc0:	4b2b      	ldr	r3, [pc, #172]	@ (20001d70 <SystemInit+0xec>)
20001cc2:	2200      	movs	r2, #0
20001cc4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
20001cc6:	4b2a      	ldr	r3, [pc, #168]	@ (20001d70 <SystemInit+0xec>)
20001cc8:	681a      	ldr	r2, [r3, #0]
20001cca:	4929      	ldr	r1, [pc, #164]	@ (20001d70 <SystemInit+0xec>)
20001ccc:	4b29      	ldr	r3, [pc, #164]	@ (20001d74 <SystemInit+0xf0>)
20001cce:	4013      	ands	r3, r2
20001cd0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
20001cd2:	4b26      	ldr	r3, [pc, #152]	@ (20001d6c <SystemInit+0xe8>)
20001cd4:	681b      	ldr	r3, [r3, #0]
20001cd6:	f003 0308 	and.w	r3, r3, #8
20001cda:	2b00      	cmp	r3, #0
20001cdc:	d007      	beq.n	20001cee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
20001cde:	4b23      	ldr	r3, [pc, #140]	@ (20001d6c <SystemInit+0xe8>)
20001ce0:	681b      	ldr	r3, [r3, #0]
20001ce2:	f023 030f 	bic.w	r3, r3, #15
20001ce6:	4a21      	ldr	r2, [pc, #132]	@ (20001d6c <SystemInit+0xe8>)
20001ce8:	f043 0307 	orr.w	r3, r3, #7
20001cec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
20001cee:	4b20      	ldr	r3, [pc, #128]	@ (20001d70 <SystemInit+0xec>)
20001cf0:	2200      	movs	r2, #0
20001cf2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
20001cf4:	4b1e      	ldr	r3, [pc, #120]	@ (20001d70 <SystemInit+0xec>)
20001cf6:	2200      	movs	r2, #0
20001cf8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
20001cfa:	4b1d      	ldr	r3, [pc, #116]	@ (20001d70 <SystemInit+0xec>)
20001cfc:	2200      	movs	r2, #0
20001cfe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
20001d00:	4b1b      	ldr	r3, [pc, #108]	@ (20001d70 <SystemInit+0xec>)
20001d02:	4a1d      	ldr	r2, [pc, #116]	@ (20001d78 <SystemInit+0xf4>)
20001d04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
20001d06:	4b1a      	ldr	r3, [pc, #104]	@ (20001d70 <SystemInit+0xec>)
20001d08:	4a1c      	ldr	r2, [pc, #112]	@ (20001d7c <SystemInit+0xf8>)
20001d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
20001d0c:	4b18      	ldr	r3, [pc, #96]	@ (20001d70 <SystemInit+0xec>)
20001d0e:	4a1c      	ldr	r2, [pc, #112]	@ (20001d80 <SystemInit+0xfc>)
20001d10:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
20001d12:	4b17      	ldr	r3, [pc, #92]	@ (20001d70 <SystemInit+0xec>)
20001d14:	2200      	movs	r2, #0
20001d16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
20001d18:	4b15      	ldr	r3, [pc, #84]	@ (20001d70 <SystemInit+0xec>)
20001d1a:	4a19      	ldr	r2, [pc, #100]	@ (20001d80 <SystemInit+0xfc>)
20001d1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
20001d1e:	4b14      	ldr	r3, [pc, #80]	@ (20001d70 <SystemInit+0xec>)
20001d20:	2200      	movs	r2, #0
20001d22:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
20001d24:	4b12      	ldr	r3, [pc, #72]	@ (20001d70 <SystemInit+0xec>)
20001d26:	4a16      	ldr	r2, [pc, #88]	@ (20001d80 <SystemInit+0xfc>)
20001d28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
20001d2a:	4b11      	ldr	r3, [pc, #68]	@ (20001d70 <SystemInit+0xec>)
20001d2c:	2200      	movs	r2, #0
20001d2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
20001d30:	4b0f      	ldr	r3, [pc, #60]	@ (20001d70 <SystemInit+0xec>)
20001d32:	681b      	ldr	r3, [r3, #0]
20001d34:	4a0e      	ldr	r2, [pc, #56]	@ (20001d70 <SystemInit+0xec>)
20001d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20001d3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
20001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (20001d70 <SystemInit+0xec>)
20001d3e:	2200      	movs	r2, #0
20001d40:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
20001d42:	4b10      	ldr	r3, [pc, #64]	@ (20001d84 <SystemInit+0x100>)
20001d44:	681a      	ldr	r2, [r3, #0]
20001d46:	4b10      	ldr	r3, [pc, #64]	@ (20001d88 <SystemInit+0x104>)
20001d48:	4013      	ands	r3, r2
20001d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20001d4e:	d202      	bcs.n	20001d56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
20001d50:	4b0e      	ldr	r3, [pc, #56]	@ (20001d8c <SystemInit+0x108>)
20001d52:	2201      	movs	r2, #1
20001d54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
20001d56:	4b0e      	ldr	r3, [pc, #56]	@ (20001d90 <SystemInit+0x10c>)
20001d58:	f243 02d2 	movw	r2, #12498	@ 0x30d2
20001d5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
20001d5e:	bf00      	nop
20001d60:	46bd      	mov	sp, r7
20001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d66:	4770      	bx	lr
20001d68:	e000ed00 	.word	0xe000ed00
20001d6c:	52002000 	.word	0x52002000
20001d70:	58024400 	.word	0x58024400
20001d74:	eaf6ed7f 	.word	0xeaf6ed7f
20001d78:	02020200 	.word	0x02020200
20001d7c:	01ff0000 	.word	0x01ff0000
20001d80:	01010280 	.word	0x01010280
20001d84:	5c001000 	.word	0x5c001000
20001d88:	ffff0000 	.word	0xffff0000
20001d8c:	51008108 	.word	0x51008108
20001d90:	52004000 	.word	0x52004000

20001d94 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
20001d94:	b480      	push	{r7}
20001d96:	b08b      	sub	sp, #44	@ 0x2c
20001d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
20001d9a:	4bb1      	ldr	r3, [pc, #708]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001d9c:	691b      	ldr	r3, [r3, #16]
20001d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20001da2:	2b18      	cmp	r3, #24
20001da4:	f200 812e 	bhi.w	20002004 <SystemCoreClockUpdate+0x270>
20001da8:	a201      	add	r2, pc, #4	@ (adr r2, 20001db0 <SystemCoreClockUpdate+0x1c>)
20001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001dae:	bf00      	nop
20001db0:	20001e15 	.word	0x20001e15
20001db4:	20002005 	.word	0x20002005
20001db8:	20002005 	.word	0x20002005
20001dbc:	20002005 	.word	0x20002005
20001dc0:	20002005 	.word	0x20002005
20001dc4:	20002005 	.word	0x20002005
20001dc8:	20002005 	.word	0x20002005
20001dcc:	20002005 	.word	0x20002005
20001dd0:	20001e29 	.word	0x20001e29
20001dd4:	20002005 	.word	0x20002005
20001dd8:	20002005 	.word	0x20002005
20001ddc:	20002005 	.word	0x20002005
20001de0:	20002005 	.word	0x20002005
20001de4:	20002005 	.word	0x20002005
20001de8:	20002005 	.word	0x20002005
20001dec:	20002005 	.word	0x20002005
20001df0:	20001e2f 	.word	0x20001e2f
20001df4:	20002005 	.word	0x20002005
20001df8:	20002005 	.word	0x20002005
20001dfc:	20002005 	.word	0x20002005
20001e00:	20002005 	.word	0x20002005
20001e04:	20002005 	.word	0x20002005
20001e08:	20002005 	.word	0x20002005
20001e0c:	20002005 	.word	0x20002005
20001e10:	20001e35 	.word	0x20001e35
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
20001e14:	4b92      	ldr	r3, [pc, #584]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001e16:	681b      	ldr	r3, [r3, #0]
20001e18:	08db      	lsrs	r3, r3, #3
20001e1a:	f003 0303 	and.w	r3, r3, #3
20001e1e:	4a91      	ldr	r2, [pc, #580]	@ (20002064 <SystemCoreClockUpdate+0x2d0>)
20001e20:	fa22 f303 	lsr.w	r3, r2, r3
20001e24:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
20001e26:	e0f7      	b.n	20002018 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
20001e28:	4b8f      	ldr	r3, [pc, #572]	@ (20002068 <SystemCoreClockUpdate+0x2d4>)
20001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
20001e2c:	e0f4      	b.n	20002018 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
20001e2e:	4b8f      	ldr	r3, [pc, #572]	@ (2000206c <SystemCoreClockUpdate+0x2d8>)
20001e30:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
20001e32:	e0f1      	b.n	20002018 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
20001e34:	4b8a      	ldr	r3, [pc, #552]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20001e38:	f003 0303 	and.w	r3, r3, #3
20001e3c:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
20001e3e:	4b88      	ldr	r3, [pc, #544]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20001e42:	091b      	lsrs	r3, r3, #4
20001e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20001e48:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
20001e4a:	4b85      	ldr	r3, [pc, #532]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20001e4e:	f003 0301 	and.w	r3, r3, #1
20001e52:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
20001e54:	4b82      	ldr	r3, [pc, #520]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20001e58:	08db      	lsrs	r3, r3, #3
20001e5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
20001e5e:	697a      	ldr	r2, [r7, #20]
20001e60:	fb02 f303 	mul.w	r3, r2, r3
20001e64:	ee07 3a90 	vmov	s15, r3
20001e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
20001e6c:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
20001e70:	69bb      	ldr	r3, [r7, #24]
20001e72:	2b00      	cmp	r3, #0
20001e74:	f000 80c3 	beq.w	20001ffe <SystemCoreClockUpdate+0x26a>
20001e78:	69fb      	ldr	r3, [r7, #28]
20001e7a:	2b02      	cmp	r3, #2
20001e7c:	d059      	beq.n	20001f32 <SystemCoreClockUpdate+0x19e>
20001e7e:	69fb      	ldr	r3, [r7, #28]
20001e80:	2b02      	cmp	r3, #2
20001e82:	d878      	bhi.n	20001f76 <SystemCoreClockUpdate+0x1e2>
20001e84:	69fb      	ldr	r3, [r7, #28]
20001e86:	2b00      	cmp	r3, #0
20001e88:	d003      	beq.n	20001e92 <SystemCoreClockUpdate+0xfe>
20001e8a:	69fb      	ldr	r3, [r7, #28]
20001e8c:	2b01      	cmp	r3, #1
20001e8e:	d02e      	beq.n	20001eee <SystemCoreClockUpdate+0x15a>
20001e90:	e071      	b.n	20001f76 <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
20001e92:	4b73      	ldr	r3, [pc, #460]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001e94:	681b      	ldr	r3, [r3, #0]
20001e96:	08db      	lsrs	r3, r3, #3
20001e98:	f003 0303 	and.w	r3, r3, #3
20001e9c:	4a71      	ldr	r2, [pc, #452]	@ (20002064 <SystemCoreClockUpdate+0x2d0>)
20001e9e:	fa22 f303 	lsr.w	r3, r2, r3
20001ea2:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
20001ea4:	68fb      	ldr	r3, [r7, #12]
20001ea6:	ee07 3a90 	vmov	s15, r3
20001eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
20001eae:	69bb      	ldr	r3, [r7, #24]
20001eb0:	ee07 3a90 	vmov	s15, r3
20001eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
20001eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20001ebc:	4b68      	ldr	r3, [pc, #416]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
20001ec4:	ee07 3a90 	vmov	s15, r3
20001ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
20001ecc:	ed97 6a04 	vldr	s12, [r7, #16]
20001ed0:	eddf 5a67 	vldr	s11, [pc, #412]	@ 20002070 <SystemCoreClockUpdate+0x2dc>
20001ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
20001ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
20001edc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20001ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
20001ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
20001ee8:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
20001eec:	e071      	b.n	20001fd2 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
20001eee:	69bb      	ldr	r3, [r7, #24]
20001ef0:	ee07 3a90 	vmov	s15, r3
20001ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
20001ef8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 20002074 <SystemCoreClockUpdate+0x2e0>
20001efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20001f00:	4b57      	ldr	r3, [pc, #348]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
20001f08:	ee07 3a90 	vmov	s15, r3
20001f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
20001f10:	ed97 6a04 	vldr	s12, [r7, #16]
20001f14:	eddf 5a56 	vldr	s11, [pc, #344]	@ 20002070 <SystemCoreClockUpdate+0x2dc>
20001f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
20001f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
20001f20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20001f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
20001f28:	ee67 7a27 	vmul.f32	s15, s14, s15
20001f2c:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
20001f30:	e04f      	b.n	20001fd2 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
20001f32:	69bb      	ldr	r3, [r7, #24]
20001f34:	ee07 3a90 	vmov	s15, r3
20001f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
20001f3c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 20002078 <SystemCoreClockUpdate+0x2e4>
20001f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20001f44:	4b46      	ldr	r3, [pc, #280]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
20001f4c:	ee07 3a90 	vmov	s15, r3
20001f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
20001f54:	ed97 6a04 	vldr	s12, [r7, #16]
20001f58:	eddf 5a45 	vldr	s11, [pc, #276]	@ 20002070 <SystemCoreClockUpdate+0x2dc>
20001f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
20001f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
20001f64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20001f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
20001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
20001f70:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
20001f74:	e02d      	b.n	20001fd2 <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
20001f76:	4b3a      	ldr	r3, [pc, #232]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001f78:	681b      	ldr	r3, [r3, #0]
20001f7a:	08db      	lsrs	r3, r3, #3
20001f7c:	f003 0303 	and.w	r3, r3, #3
20001f80:	4a38      	ldr	r2, [pc, #224]	@ (20002064 <SystemCoreClockUpdate+0x2d0>)
20001f82:	fa22 f303 	lsr.w	r3, r2, r3
20001f86:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
20001f88:	68fb      	ldr	r3, [r7, #12]
20001f8a:	ee07 3a90 	vmov	s15, r3
20001f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
20001f92:	69bb      	ldr	r3, [r7, #24]
20001f94:	ee07 3a90 	vmov	s15, r3
20001f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
20001f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20001fa0:	4b2f      	ldr	r3, [pc, #188]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
20001fa8:	ee07 3a90 	vmov	s15, r3
20001fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
20001fb0:	ed97 6a04 	vldr	s12, [r7, #16]
20001fb4:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 20002070 <SystemCoreClockUpdate+0x2dc>
20001fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
20001fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
20001fc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20001fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
20001fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
20001fcc:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
20001fd0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
20001fd2:	4b23      	ldr	r3, [pc, #140]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20001fd6:	0a5b      	lsrs	r3, r3, #9
20001fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20001fdc:	3301      	adds	r3, #1
20001fde:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
20001fe0:	68bb      	ldr	r3, [r7, #8]
20001fe2:	ee07 3a90 	vmov	s15, r3
20001fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
20001fea:	edd7 6a08 	vldr	s13, [r7, #32]
20001fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
20001ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
20001ff6:	ee17 3a90 	vmov	r3, s15
20001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
20001ffc:	e00c      	b.n	20002018 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
20001ffe:	2300      	movs	r3, #0
20002000:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
20002002:	e009      	b.n	20002018 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
20002004:	4b16      	ldr	r3, [pc, #88]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20002006:	681b      	ldr	r3, [r3, #0]
20002008:	08db      	lsrs	r3, r3, #3
2000200a:	f003 0303 	and.w	r3, r3, #3
2000200e:	4a15      	ldr	r2, [pc, #84]	@ (20002064 <SystemCoreClockUpdate+0x2d0>)
20002010:	fa22 f303 	lsr.w	r3, r2, r3
20002014:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
20002016:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
20002018:	4b11      	ldr	r3, [pc, #68]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
2000201a:	699b      	ldr	r3, [r3, #24]
2000201c:	0a1b      	lsrs	r3, r3, #8
2000201e:	f003 030f 	and.w	r3, r3, #15
20002022:	4a16      	ldr	r2, [pc, #88]	@ (2000207c <SystemCoreClockUpdate+0x2e8>)
20002024:	5cd3      	ldrb	r3, [r2, r3]
20002026:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
20002028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000202a:	687b      	ldr	r3, [r7, #4]
2000202c:	fa22 f303 	lsr.w	r3, r2, r3
20002030:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
20002032:	4b0b      	ldr	r3, [pc, #44]	@ (20002060 <SystemCoreClockUpdate+0x2cc>)
20002034:	699b      	ldr	r3, [r3, #24]
20002036:	f003 030f 	and.w	r3, r3, #15
2000203a:	4a10      	ldr	r2, [pc, #64]	@ (2000207c <SystemCoreClockUpdate+0x2e8>)
2000203c:	5cd3      	ldrb	r3, [r2, r3]
2000203e:	f003 031f 	and.w	r3, r3, #31
20002042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20002044:	fa22 f303 	lsr.w	r3, r2, r3
20002048:	4a0d      	ldr	r2, [pc, #52]	@ (20002080 <SystemCoreClockUpdate+0x2ec>)
2000204a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2000204c:	4a0d      	ldr	r2, [pc, #52]	@ (20002084 <SystemCoreClockUpdate+0x2f0>)
2000204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
20002052:	bf00      	nop
20002054:	372c      	adds	r7, #44	@ 0x2c
20002056:	46bd      	mov	sp, r7
20002058:	f85d 7b04 	ldr.w	r7, [sp], #4
2000205c:	4770      	bx	lr
2000205e:	bf00      	nop
20002060:	58024400 	.word	0x58024400
20002064:	03d09000 	.word	0x03d09000
20002068:	003d0900 	.word	0x003d0900
2000206c:	00b71b00 	.word	0x00b71b00
20002070:	46000000 	.word	0x46000000
20002074:	4a742400 	.word	0x4a742400
20002078:	4b371b00 	.word	0x4b371b00
2000207c:	2001891c 	.word	0x2001891c
20002080:	200004b4 	.word	0x200004b4
20002084:	200004b0 	.word	0x200004b0

20002088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
20002088:	f8df d034 	ldr.w	sp, [pc, #52]	@ 200020c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
2000208c:	f7ff fdfa 	bl	20001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
20002090:	480c      	ldr	r0, [pc, #48]	@ (200020c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
20002092:	490d      	ldr	r1, [pc, #52]	@ (200020c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
20002094:	4a0d      	ldr	r2, [pc, #52]	@ (200020cc <LoopFillZerobss+0x1a>)
  movs r3, #0
20002096:	2300      	movs	r3, #0
  b LoopCopyDataInit
20002098:	e002      	b.n	200020a0 <LoopCopyDataInit>

2000209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
2000209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
2000209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
2000209e:	3304      	adds	r3, #4

200020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
200020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
200020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
200020a4:	d3f9      	bcc.n	2000209a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
200020a6:	4a0a      	ldr	r2, [pc, #40]	@ (200020d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
200020a8:	4c0a      	ldr	r4, [pc, #40]	@ (200020d4 <LoopFillZerobss+0x22>)
  movs r3, #0
200020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
200020ac:	e001      	b.n	200020b2 <LoopFillZerobss>

200020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
200020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
200020b0:	3204      	adds	r2, #4

200020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
200020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
200020b4:	d3fb      	bcc.n	200020ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
200020b6:	f016 f9a3 	bl	20018400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
200020ba:	f7fe fe47 	bl	20000d4c <main>
  bx  lr
200020be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
200020c0:	20020004 	.word	0x20020004
  ldr r0, =_sdata
200020c4:	200004a8 	.word	0x200004a8
  ldr r1, =_edata
200020c8:	2000051c 	.word	0x2000051c
  ldr r2, =_sidata
200020cc:	200004a8 	.word	0x200004a8
  ldr r2, =_sbss
200020d0:	2000051c 	.word	0x2000051c
  ldr r4, =_ebss
200020d4:	200006fc 	.word	0x200006fc

200020d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
200020d8:	e7fe      	b.n	200020d8 <ADC3_IRQHandler>
	...

200020dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
200020dc:	b580      	push	{r7, lr}
200020de:	b082      	sub	sp, #8
200020e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
200020e2:	2003      	movs	r0, #3
200020e4:	f000 fefc 	bl	20002ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
200020e8:	f012 fb18 	bl	2001471c <HAL_RCC_GetSysClockFreq>
200020ec:	4602      	mov	r2, r0
200020ee:	4b15      	ldr	r3, [pc, #84]	@ (20002144 <HAL_Init+0x68>)
200020f0:	699b      	ldr	r3, [r3, #24]
200020f2:	0a1b      	lsrs	r3, r3, #8
200020f4:	f003 030f 	and.w	r3, r3, #15
200020f8:	4913      	ldr	r1, [pc, #76]	@ (20002148 <HAL_Init+0x6c>)
200020fa:	5ccb      	ldrb	r3, [r1, r3]
200020fc:	f003 031f 	and.w	r3, r3, #31
20002100:	fa22 f303 	lsr.w	r3, r2, r3
20002104:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
20002106:	4b0f      	ldr	r3, [pc, #60]	@ (20002144 <HAL_Init+0x68>)
20002108:	699b      	ldr	r3, [r3, #24]
2000210a:	f003 030f 	and.w	r3, r3, #15
2000210e:	4a0e      	ldr	r2, [pc, #56]	@ (20002148 <HAL_Init+0x6c>)
20002110:	5cd3      	ldrb	r3, [r2, r3]
20002112:	f003 031f 	and.w	r3, r3, #31
20002116:	687a      	ldr	r2, [r7, #4]
20002118:	fa22 f303 	lsr.w	r3, r2, r3
2000211c:	4a0b      	ldr	r2, [pc, #44]	@ (2000214c <HAL_Init+0x70>)
2000211e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
20002120:	4a0b      	ldr	r2, [pc, #44]	@ (20002150 <HAL_Init+0x74>)
20002122:	687b      	ldr	r3, [r7, #4]
20002124:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
20002126:	200f      	movs	r0, #15
20002128:	f000 f880 	bl	2000222c <HAL_InitTick>
2000212c:	4603      	mov	r3, r0
2000212e:	2b00      	cmp	r3, #0
20002130:	d001      	beq.n	20002136 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
20002132:	2301      	movs	r3, #1
20002134:	e002      	b.n	2000213c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
20002136:	f7ff fc1b 	bl	20001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000213a:	2300      	movs	r3, #0
}
2000213c:	4618      	mov	r0, r3
2000213e:	3708      	adds	r7, #8
20002140:	46bd      	mov	sp, r7
20002142:	bd80      	pop	{r7, pc}
20002144:	58024400 	.word	0x58024400
20002148:	2001891c 	.word	0x2001891c
2000214c:	200004b4 	.word	0x200004b4
20002150:	200004b0 	.word	0x200004b0

20002154 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
20002154:	b580      	push	{r7, lr}
20002156:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
20002158:	4b26      	ldr	r3, [pc, #152]	@ (200021f4 <HAL_DeInit+0xa0>)
2000215a:	4a27      	ldr	r2, [pc, #156]	@ (200021f8 <HAL_DeInit+0xa4>)
2000215c:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
2000215e:	4b25      	ldr	r3, [pc, #148]	@ (200021f4 <HAL_DeInit+0xa0>)
20002160:	2200      	movs	r2, #0
20002162:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
20002164:	4b23      	ldr	r3, [pc, #140]	@ (200021f4 <HAL_DeInit+0xa0>)
20002166:	4a25      	ldr	r2, [pc, #148]	@ (200021fc <HAL_DeInit+0xa8>)
20002168:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
2000216c:	4b21      	ldr	r3, [pc, #132]	@ (200021f4 <HAL_DeInit+0xa0>)
2000216e:	2200      	movs	r2, #0
20002170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
20002174:	4b1f      	ldr	r3, [pc, #124]	@ (200021f4 <HAL_DeInit+0xa0>)
20002176:	f240 2271 	movw	r2, #625	@ 0x271
2000217a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
2000217e:	4b1d      	ldr	r3, [pc, #116]	@ (200021f4 <HAL_DeInit+0xa0>)
20002180:	2200      	movs	r2, #0
20002182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
20002186:	4b1b      	ldr	r3, [pc, #108]	@ (200021f4 <HAL_DeInit+0xa0>)
20002188:	4a1d      	ldr	r2, [pc, #116]	@ (20002200 <HAL_DeInit+0xac>)
2000218a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
2000218e:	4b19      	ldr	r3, [pc, #100]	@ (200021f4 <HAL_DeInit+0xa0>)
20002190:	2200      	movs	r2, #0
20002192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
20002196:	4b17      	ldr	r3, [pc, #92]	@ (200021f4 <HAL_DeInit+0xa0>)
20002198:	2218      	movs	r2, #24
2000219a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
2000219e:	4b15      	ldr	r3, [pc, #84]	@ (200021f4 <HAL_DeInit+0xa0>)
200021a0:	2200      	movs	r2, #0
200021a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
200021a6:	4b13      	ldr	r3, [pc, #76]	@ (200021f4 <HAL_DeInit+0xa0>)
200021a8:	4a16      	ldr	r2, [pc, #88]	@ (20002204 <HAL_DeInit+0xb0>)
200021aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
200021ae:	4b11      	ldr	r3, [pc, #68]	@ (200021f4 <HAL_DeInit+0xa0>)
200021b0:	2200      	movs	r2, #0
200021b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
200021b6:	4b0f      	ldr	r3, [pc, #60]	@ (200021f4 <HAL_DeInit+0xa0>)
200021b8:	f44f 729b 	mov.w	r2, #310	@ 0x136
200021bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
200021c0:	4b0c      	ldr	r3, [pc, #48]	@ (200021f4 <HAL_DeInit+0xa0>)
200021c2:	2200      	movs	r2, #0
200021c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
200021c8:	4b0a      	ldr	r3, [pc, #40]	@ (200021f4 <HAL_DeInit+0xa0>)
200021ca:	4a0f      	ldr	r2, [pc, #60]	@ (20002208 <HAL_DeInit+0xb4>)
200021cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
200021d0:	4b08      	ldr	r3, [pc, #32]	@ (200021f4 <HAL_DeInit+0xa0>)
200021d2:	2200      	movs	r2, #0
200021d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
200021d8:	4b06      	ldr	r3, [pc, #24]	@ (200021f4 <HAL_DeInit+0xa0>)
200021da:	4a0c      	ldr	r2, [pc, #48]	@ (2000220c <HAL_DeInit+0xb8>)
200021dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
200021e0:	4b04      	ldr	r3, [pc, #16]	@ (200021f4 <HAL_DeInit+0xa0>)
200021e2:	2200      	movs	r2, #0
200021e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
200021e8:	f000 f819 	bl	2000221e <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
200021ec:	2300      	movs	r3, #0
}
200021ee:	4618      	mov	r0, r3
200021f0:	bd80      	pop	{r7, pc}
200021f2:	bf00      	nop
200021f4:	58024400 	.word	0x58024400
200021f8:	00015031 	.word	0x00015031
200021fc:	0a00c023 	.word	0x0a00c023
20002200:	032807ff 	.word	0x032807ff
20002204:	e8ffc3ff 	.word	0xe8ffc3ff
20002208:	31d73033 	.word	0x31d73033
2000220c:	0020deaa 	.word	0x0020deaa
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
20002210:	b480      	push	{r7}
20002212:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
20002214:	bf00      	nop
20002216:	46bd      	mov	sp, r7
20002218:	f85d 7b04 	ldr.w	r7, [sp], #4
2000221c:	4770      	bx	lr

2000221e <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
2000221e:	b480      	push	{r7}
20002220:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
20002222:	bf00      	nop
20002224:	46bd      	mov	sp, r7
20002226:	f85d 7b04 	ldr.w	r7, [sp], #4
2000222a:	4770      	bx	lr

2000222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
2000222c:	b580      	push	{r7, lr}
2000222e:	b082      	sub	sp, #8
20002230:	af00      	add	r7, sp, #0
20002232:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
20002234:	4b15      	ldr	r3, [pc, #84]	@ (2000228c <HAL_InitTick+0x60>)
20002236:	781b      	ldrb	r3, [r3, #0]
20002238:	2b00      	cmp	r3, #0
2000223a:	d101      	bne.n	20002240 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
2000223c:	2301      	movs	r3, #1
2000223e:	e021      	b.n	20002284 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
20002240:	4b13      	ldr	r3, [pc, #76]	@ (20002290 <HAL_InitTick+0x64>)
20002242:	681a      	ldr	r2, [r3, #0]
20002244:	4b11      	ldr	r3, [pc, #68]	@ (2000228c <HAL_InitTick+0x60>)
20002246:	781b      	ldrb	r3, [r3, #0]
20002248:	4619      	mov	r1, r3
2000224a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
2000224e:	fbb3 f3f1 	udiv	r3, r3, r1
20002252:	fbb2 f3f3 	udiv	r3, r2, r3
20002256:	4618      	mov	r0, r3
20002258:	f000 fe87 	bl	20002f6a <HAL_SYSTICK_Config>
2000225c:	4603      	mov	r3, r0
2000225e:	2b00      	cmp	r3, #0
20002260:	d001      	beq.n	20002266 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
20002262:	2301      	movs	r3, #1
20002264:	e00e      	b.n	20002284 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20002266:	687b      	ldr	r3, [r7, #4]
20002268:	2b0f      	cmp	r3, #15
2000226a:	d80a      	bhi.n	20002282 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000226c:	2200      	movs	r2, #0
2000226e:	6879      	ldr	r1, [r7, #4]
20002270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20002274:	f000 fe3f 	bl	20002ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20002278:	4a06      	ldr	r2, [pc, #24]	@ (20002294 <HAL_InitTick+0x68>)
2000227a:	687b      	ldr	r3, [r7, #4]
2000227c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000227e:	2300      	movs	r3, #0
20002280:	e000      	b.n	20002284 <HAL_InitTick+0x58>
    return HAL_ERROR;
20002282:	2301      	movs	r3, #1
}
20002284:	4618      	mov	r0, r3
20002286:	3708      	adds	r7, #8
20002288:	46bd      	mov	sp, r7
2000228a:	bd80      	pop	{r7, pc}
2000228c:	200004bc 	.word	0x200004bc
20002290:	200004b0 	.word	0x200004b0
20002294:	200004b8 	.word	0x200004b8

20002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20002298:	b480      	push	{r7}
2000229a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
2000229c:	4b06      	ldr	r3, [pc, #24]	@ (200022b8 <HAL_IncTick+0x20>)
2000229e:	781b      	ldrb	r3, [r3, #0]
200022a0:	461a      	mov	r2, r3
200022a2:	4b06      	ldr	r3, [pc, #24]	@ (200022bc <HAL_IncTick+0x24>)
200022a4:	681b      	ldr	r3, [r3, #0]
200022a6:	4413      	add	r3, r2
200022a8:	4a04      	ldr	r2, [pc, #16]	@ (200022bc <HAL_IncTick+0x24>)
200022aa:	6013      	str	r3, [r2, #0]
}
200022ac:	bf00      	nop
200022ae:	46bd      	mov	sp, r7
200022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200022b4:	4770      	bx	lr
200022b6:	bf00      	nop
200022b8:	200004bc 	.word	0x200004bc
200022bc:	2000058c 	.word	0x2000058c

200022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
200022c0:	b480      	push	{r7}
200022c2:	af00      	add	r7, sp, #0
  return uwTick;
200022c4:	4b03      	ldr	r3, [pc, #12]	@ (200022d4 <HAL_GetTick+0x14>)
200022c6:	681b      	ldr	r3, [r3, #0]
}
200022c8:	4618      	mov	r0, r3
200022ca:	46bd      	mov	sp, r7
200022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200022d0:	4770      	bx	lr
200022d2:	bf00      	nop
200022d4:	2000058c 	.word	0x2000058c

200022d8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
200022d8:	b480      	push	{r7}
200022da:	af00      	add	r7, sp, #0
  return uwTickPrio;
200022dc:	4b03      	ldr	r3, [pc, #12]	@ (200022ec <HAL_GetTickPrio+0x14>)
200022de:	681b      	ldr	r3, [r3, #0]
}
200022e0:	4618      	mov	r0, r3
200022e2:	46bd      	mov	sp, r7
200022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
200022e8:	4770      	bx	lr
200022ea:	bf00      	nop
200022ec:	200004b8 	.word	0x200004b8

200022f0 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
200022f0:	b580      	push	{r7, lr}
200022f2:	b084      	sub	sp, #16
200022f4:	af00      	add	r7, sp, #0
200022f6:	4603      	mov	r3, r0
200022f8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
200022fa:	2300      	movs	r3, #0
200022fc:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
200022fe:	4b0e      	ldr	r3, [pc, #56]	@ (20002338 <HAL_SetTickFreq+0x48>)
20002300:	781b      	ldrb	r3, [r3, #0]
20002302:	79fa      	ldrb	r2, [r7, #7]
20002304:	429a      	cmp	r2, r3
20002306:	d012      	beq.n	2000232e <HAL_SetTickFreq+0x3e>
  {

    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
20002308:	4b0b      	ldr	r3, [pc, #44]	@ (20002338 <HAL_SetTickFreq+0x48>)
2000230a:	781b      	ldrb	r3, [r3, #0]
2000230c:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
2000230e:	4a0a      	ldr	r2, [pc, #40]	@ (20002338 <HAL_SetTickFreq+0x48>)
20002310:	79fb      	ldrb	r3, [r7, #7]
20002312:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
20002314:	4b09      	ldr	r3, [pc, #36]	@ (2000233c <HAL_SetTickFreq+0x4c>)
20002316:	681b      	ldr	r3, [r3, #0]
20002318:	4618      	mov	r0, r3
2000231a:	f7ff ff87 	bl	2000222c <HAL_InitTick>
2000231e:	4603      	mov	r3, r0
20002320:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
20002322:	7bfb      	ldrb	r3, [r7, #15]
20002324:	2b00      	cmp	r3, #0
20002326:	d002      	beq.n	2000232e <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
20002328:	4a03      	ldr	r2, [pc, #12]	@ (20002338 <HAL_SetTickFreq+0x48>)
2000232a:	7bbb      	ldrb	r3, [r7, #14]
2000232c:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
2000232e:	7bfb      	ldrb	r3, [r7, #15]
}
20002330:	4618      	mov	r0, r3
20002332:	3710      	adds	r7, #16
20002334:	46bd      	mov	sp, r7
20002336:	bd80      	pop	{r7, pc}
20002338:	200004bc 	.word	0x200004bc
2000233c:	200004b8 	.word	0x200004b8

20002340 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
20002340:	b480      	push	{r7}
20002342:	af00      	add	r7, sp, #0
  return uwTickFreq;
20002344:	4b03      	ldr	r3, [pc, #12]	@ (20002354 <HAL_GetTickFreq+0x14>)
20002346:	781b      	ldrb	r3, [r3, #0]
}
20002348:	4618      	mov	r0, r3
2000234a:	46bd      	mov	sp, r7
2000234c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002350:	4770      	bx	lr
20002352:	bf00      	nop
20002354:	200004bc 	.word	0x200004bc

20002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20002358:	b580      	push	{r7, lr}
2000235a:	b084      	sub	sp, #16
2000235c:	af00      	add	r7, sp, #0
2000235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20002360:	f7ff ffae 	bl	200022c0 <HAL_GetTick>
20002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20002366:	687b      	ldr	r3, [r7, #4]
20002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000236a:	68fb      	ldr	r3, [r7, #12]
2000236c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
20002370:	d005      	beq.n	2000237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20002372:	4b0a      	ldr	r3, [pc, #40]	@ (2000239c <HAL_Delay+0x44>)
20002374:	781b      	ldrb	r3, [r3, #0]
20002376:	461a      	mov	r2, r3
20002378:	68fb      	ldr	r3, [r7, #12]
2000237a:	4413      	add	r3, r2
2000237c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
2000237e:	bf00      	nop
20002380:	f7ff ff9e 	bl	200022c0 <HAL_GetTick>
20002384:	4602      	mov	r2, r0
20002386:	68bb      	ldr	r3, [r7, #8]
20002388:	1ad3      	subs	r3, r2, r3
2000238a:	68fa      	ldr	r2, [r7, #12]
2000238c:	429a      	cmp	r2, r3
2000238e:	d8f7      	bhi.n	20002380 <HAL_Delay+0x28>
  {
  }
}
20002390:	bf00      	nop
20002392:	bf00      	nop
20002394:	3710      	adds	r7, #16
20002396:	46bd      	mov	sp, r7
20002398:	bd80      	pop	{r7, pc}
2000239a:	bf00      	nop
2000239c:	200004bc 	.word	0x200004bc

200023a0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
200023a0:	b480      	push	{r7}
200023a2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
200023a4:	4b05      	ldr	r3, [pc, #20]	@ (200023bc <HAL_SuspendTick+0x1c>)
200023a6:	681b      	ldr	r3, [r3, #0]
200023a8:	4a04      	ldr	r2, [pc, #16]	@ (200023bc <HAL_SuspendTick+0x1c>)
200023aa:	f023 0302 	bic.w	r3, r3, #2
200023ae:	6013      	str	r3, [r2, #0]
}
200023b0:	bf00      	nop
200023b2:	46bd      	mov	sp, r7
200023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200023b8:	4770      	bx	lr
200023ba:	bf00      	nop
200023bc:	e000e010 	.word	0xe000e010

200023c0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
200023c0:	b480      	push	{r7}
200023c2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
200023c4:	4b05      	ldr	r3, [pc, #20]	@ (200023dc <HAL_ResumeTick+0x1c>)
200023c6:	681b      	ldr	r3, [r3, #0]
200023c8:	4a04      	ldr	r2, [pc, #16]	@ (200023dc <HAL_ResumeTick+0x1c>)
200023ca:	f043 0302 	orr.w	r3, r3, #2
200023ce:	6013      	str	r3, [r2, #0]
}
200023d0:	bf00      	nop
200023d2:	46bd      	mov	sp, r7
200023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200023d8:	4770      	bx	lr
200023da:	bf00      	nop
200023dc:	e000e010 	.word	0xe000e010

200023e0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
200023e0:	b480      	push	{r7}
200023e2:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
200023e4:	4b02      	ldr	r3, [pc, #8]	@ (200023f0 <HAL_GetHalVersion+0x10>)
}
200023e6:	4618      	mov	r0, r3
200023e8:	46bd      	mov	sp, r7
200023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200023ee:	4770      	bx	lr
200023f0:	010b0300 	.word	0x010b0300

200023f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
200023f4:	b480      	push	{r7}
200023f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
200023f8:	4b03      	ldr	r3, [pc, #12]	@ (20002408 <HAL_GetREVID+0x14>)
200023fa:	681b      	ldr	r3, [r3, #0]
200023fc:	0c1b      	lsrs	r3, r3, #16
}
200023fe:	4618      	mov	r0, r3
20002400:	46bd      	mov	sp, r7
20002402:	f85d 7b04 	ldr.w	r7, [sp], #4
20002406:	4770      	bx	lr
20002408:	5c001000 	.word	0x5c001000

2000240c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
2000240c:	b480      	push	{r7}
2000240e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
20002410:	4b04      	ldr	r3, [pc, #16]	@ (20002424 <HAL_GetDEVID+0x18>)
20002412:	681b      	ldr	r3, [r3, #0]
20002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
20002418:	4618      	mov	r0, r3
2000241a:	46bd      	mov	sp, r7
2000241c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002420:	4770      	bx	lr
20002422:	bf00      	nop
20002424:	5c001000 	.word	0x5c001000

20002428 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
20002428:	b480      	push	{r7}
2000242a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
2000242c:	4b03      	ldr	r3, [pc, #12]	@ (2000243c <HAL_GetUIDw0+0x14>)
2000242e:	681b      	ldr	r3, [r3, #0]
}
20002430:	4618      	mov	r0, r3
20002432:	46bd      	mov	sp, r7
20002434:	f85d 7b04 	ldr.w	r7, [sp], #4
20002438:	4770      	bx	lr
2000243a:	bf00      	nop
2000243c:	1ff1e800 	.word	0x1ff1e800

20002440 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
20002440:	b480      	push	{r7}
20002442:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
20002444:	4b03      	ldr	r3, [pc, #12]	@ (20002454 <HAL_GetUIDw1+0x14>)
20002446:	681b      	ldr	r3, [r3, #0]
}
20002448:	4618      	mov	r0, r3
2000244a:	46bd      	mov	sp, r7
2000244c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002450:	4770      	bx	lr
20002452:	bf00      	nop
20002454:	1ff1e804 	.word	0x1ff1e804

20002458 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
20002458:	b480      	push	{r7}
2000245a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
2000245c:	4b03      	ldr	r3, [pc, #12]	@ (2000246c <HAL_GetUIDw2+0x14>)
2000245e:	681b      	ldr	r3, [r3, #0]
}
20002460:	4618      	mov	r0, r3
20002462:	46bd      	mov	sp, r7
20002464:	f85d 7b04 	ldr.w	r7, [sp], #4
20002468:	4770      	bx	lr
2000246a:	bf00      	nop
2000246c:	1ff1e808 	.word	0x1ff1e808

20002470 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
20002470:	b480      	push	{r7}
20002472:	b083      	sub	sp, #12
20002474:	af00      	add	r7, sp, #0
20002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
20002478:	4b06      	ldr	r3, [pc, #24]	@ (20002494 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
2000247a:	681b      	ldr	r3, [r3, #0]
2000247c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
20002480:	4904      	ldr	r1, [pc, #16]	@ (20002494 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
20002482:	687b      	ldr	r3, [r7, #4]
20002484:	4313      	orrs	r3, r2
20002486:	600b      	str	r3, [r1, #0]
}
20002488:	bf00      	nop
2000248a:	370c      	adds	r7, #12
2000248c:	46bd      	mov	sp, r7
2000248e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002492:	4770      	bx	lr
20002494:	58003c00 	.word	0x58003c00

20002498 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
20002498:	b480      	push	{r7}
2000249a:	b083      	sub	sp, #12
2000249c:	af00      	add	r7, sp, #0
2000249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
200024a0:	4b06      	ldr	r3, [pc, #24]	@ (200024bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
200024a2:	681b      	ldr	r3, [r3, #0]
200024a4:	f023 0202 	bic.w	r2, r3, #2
200024a8:	4904      	ldr	r1, [pc, #16]	@ (200024bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
200024aa:	687b      	ldr	r3, [r7, #4]
200024ac:	4313      	orrs	r3, r2
200024ae:	600b      	str	r3, [r1, #0]
}
200024b0:	bf00      	nop
200024b2:	370c      	adds	r7, #12
200024b4:	46bd      	mov	sp, r7
200024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200024ba:	4770      	bx	lr
200024bc:	58003c00 	.word	0x58003c00

200024c0 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
200024c0:	b480      	push	{r7}
200024c2:	b083      	sub	sp, #12
200024c4:	af00      	add	r7, sp, #0
200024c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
200024c8:	4b06      	ldr	r3, [pc, #24]	@ (200024e4 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
200024ca:	685b      	ldr	r3, [r3, #4]
200024cc:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
200024d0:	4904      	ldr	r1, [pc, #16]	@ (200024e4 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
200024d2:	687b      	ldr	r3, [r7, #4]
200024d4:	4313      	orrs	r3, r2
200024d6:	604b      	str	r3, [r1, #4]
}
200024d8:	bf00      	nop
200024da:	370c      	adds	r7, #12
200024dc:	46bd      	mov	sp, r7
200024de:	f85d 7b04 	ldr.w	r7, [sp], #4
200024e2:	4770      	bx	lr
200024e4:	58003c00 	.word	0x58003c00

200024e8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
200024e8:	b580      	push	{r7, lr}
200024ea:	b082      	sub	sp, #8
200024ec:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
200024ee:	4b0f      	ldr	r3, [pc, #60]	@ (2000252c <HAL_SYSCFG_EnableVREFBUF+0x44>)
200024f0:	681b      	ldr	r3, [r3, #0]
200024f2:	4a0e      	ldr	r2, [pc, #56]	@ (2000252c <HAL_SYSCFG_EnableVREFBUF+0x44>)
200024f4:	f043 0301 	orr.w	r3, r3, #1
200024f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
200024fa:	f7ff fee1 	bl	200022c0 <HAL_GetTick>
200024fe:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
20002500:	e008      	b.n	20002514 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
20002502:	f7ff fedd 	bl	200022c0 <HAL_GetTick>
20002506:	4602      	mov	r2, r0
20002508:	687b      	ldr	r3, [r7, #4]
2000250a:	1ad3      	subs	r3, r2, r3
2000250c:	2b0a      	cmp	r3, #10
2000250e:	d901      	bls.n	20002514 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
20002510:	2303      	movs	r3, #3
20002512:	e006      	b.n	20002522 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
20002514:	4b05      	ldr	r3, [pc, #20]	@ (2000252c <HAL_SYSCFG_EnableVREFBUF+0x44>)
20002516:	681b      	ldr	r3, [r3, #0]
20002518:	f003 0308 	and.w	r3, r3, #8
2000251c:	2b00      	cmp	r3, #0
2000251e:	d0f0      	beq.n	20002502 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
20002520:	2300      	movs	r3, #0
}
20002522:	4618      	mov	r0, r3
20002524:	3708      	adds	r7, #8
20002526:	46bd      	mov	sp, r7
20002528:	bd80      	pop	{r7, pc}
2000252a:	bf00      	nop
2000252c:	58003c00 	.word	0x58003c00

20002530 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
20002530:	b480      	push	{r7}
20002532:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
20002534:	4b05      	ldr	r3, [pc, #20]	@ (2000254c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
20002536:	681b      	ldr	r3, [r3, #0]
20002538:	4a04      	ldr	r2, [pc, #16]	@ (2000254c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
2000253a:	f023 0301 	bic.w	r3, r3, #1
2000253e:	6013      	str	r3, [r2, #0]
}
20002540:	bf00      	nop
20002542:	46bd      	mov	sp, r7
20002544:	f85d 7b04 	ldr.w	r7, [sp], #4
20002548:	4770      	bx	lr
2000254a:	bf00      	nop
2000254c:	58003c00 	.word	0x58003c00

20002550 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
20002550:	b480      	push	{r7}
20002552:	b083      	sub	sp, #12
20002554:	af00      	add	r7, sp, #0
20002556:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
20002558:	4b06      	ldr	r3, [pc, #24]	@ (20002574 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
2000255a:	685b      	ldr	r3, [r3, #4]
2000255c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
20002560:	4904      	ldr	r1, [pc, #16]	@ (20002574 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
20002562:	687b      	ldr	r3, [r7, #4]
20002564:	4313      	orrs	r3, r2
20002566:	604b      	str	r3, [r1, #4]
}
20002568:	bf00      	nop
2000256a:	370c      	adds	r7, #12
2000256c:	46bd      	mov	sp, r7
2000256e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002572:	4770      	bx	lr
20002574:	58000400 	.word	0x58000400

20002578 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
20002578:	b480      	push	{r7}
2000257a:	b083      	sub	sp, #12
2000257c:	af00      	add	r7, sp, #0
2000257e:	6078      	str	r0, [r7, #4]
20002580:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
20002582:	4b07      	ldr	r3, [pc, #28]	@ (200025a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
20002584:	685a      	ldr	r2, [r3, #4]
20002586:	687b      	ldr	r3, [r7, #4]
20002588:	43db      	mvns	r3, r3
2000258a:	401a      	ands	r2, r3
2000258c:	4904      	ldr	r1, [pc, #16]	@ (200025a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
2000258e:	683b      	ldr	r3, [r7, #0]
20002590:	4313      	orrs	r3, r2
20002592:	604b      	str	r3, [r1, #4]
}
20002594:	bf00      	nop
20002596:	370c      	adds	r7, #12
20002598:	46bd      	mov	sp, r7
2000259a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000259e:	4770      	bx	lr
200025a0:	58000400 	.word	0x58000400

200025a4 <HAL_SYSCFG_EnableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_EnableBOOST(void)
{
200025a4:	b480      	push	{r7}
200025a6:	af00      	add	r7, sp, #0
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
200025a8:	4b05      	ldr	r3, [pc, #20]	@ (200025c0 <HAL_SYSCFG_EnableBOOST+0x1c>)
200025aa:	685b      	ldr	r3, [r3, #4]
200025ac:	4a04      	ldr	r2, [pc, #16]	@ (200025c0 <HAL_SYSCFG_EnableBOOST+0x1c>)
200025ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
200025b2:	6053      	str	r3, [r2, #4]
}
200025b4:	bf00      	nop
200025b6:	46bd      	mov	sp, r7
200025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200025bc:	4770      	bx	lr
200025be:	bf00      	nop
200025c0:	58000400 	.word	0x58000400

200025c4 <HAL_SYSCFG_DisableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_DisableBOOST(void)
{
200025c4:	b480      	push	{r7}
200025c6:	af00      	add	r7, sp, #0
 CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
200025c8:	4b05      	ldr	r3, [pc, #20]	@ (200025e0 <HAL_SYSCFG_DisableBOOST+0x1c>)
200025ca:	685b      	ldr	r3, [r3, #4]
200025cc:	4a04      	ldr	r2, [pc, #16]	@ (200025e0 <HAL_SYSCFG_DisableBOOST+0x1c>)
200025ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
200025d2:	6053      	str	r3, [r2, #4]
}
200025d4:	bf00      	nop
200025d6:	46bd      	mov	sp, r7
200025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200025dc:	4770      	bx	lr
200025de:	bf00      	nop
200025e0:	58000400 	.word	0x58000400

200025e4 <HAL_SYSCFG_CM7BootAddConfig>:
  *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
  * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
  * @retval None
  */
void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
{
200025e4:	b480      	push	{r7}
200025e6:	b083      	sub	sp, #12
200025e8:	af00      	add	r7, sp, #0
200025ea:	6078      	str	r0, [r7, #4]
200025ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
200025ee:	687b      	ldr	r3, [r7, #4]
200025f0:	2b00      	cmp	r3, #0
200025f2:	d10b      	bne.n	2000260c <HAL_SYSCFG_CM7BootAddConfig+0x28>
  {
    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BCM7_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BCM7_ADD0_Pos));
#else
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BOOT_ADD0_Pos));
200025f4:	4b0e      	ldr	r3, [pc, #56]	@ (20002630 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
200025f6:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
200025fa:	b29a      	uxth	r2, r3
200025fc:	683b      	ldr	r3, [r7, #0]
200025fe:	0c1b      	lsrs	r3, r3, #16
20002600:	041b      	lsls	r3, r3, #16
20002602:	490b      	ldr	r1, [pc, #44]	@ (20002630 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
20002604:	4313      	orrs	r3, r2
20002606:	f8c1 3308 	str.w	r3, [r1, #776]	@ 0x308
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM7_ADD1, (BootAddress >> 16));
#else
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
#endif /*DUAL_CORE*/
  }
}
2000260a:	e00a      	b.n	20002622 <HAL_SYSCFG_CM7BootAddConfig+0x3e>
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
2000260c:	4b08      	ldr	r3, [pc, #32]	@ (20002630 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
2000260e:	f8d3 230c 	ldr.w	r2, [r3, #780]	@ 0x30c
20002612:	4b08      	ldr	r3, [pc, #32]	@ (20002634 <HAL_SYSCFG_CM7BootAddConfig+0x50>)
20002614:	4013      	ands	r3, r2
20002616:	683a      	ldr	r2, [r7, #0]
20002618:	0c12      	lsrs	r2, r2, #16
2000261a:	4905      	ldr	r1, [pc, #20]	@ (20002630 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
2000261c:	4313      	orrs	r3, r2
2000261e:	f8c1 330c 	str.w	r3, [r1, #780]	@ 0x30c
}
20002622:	bf00      	nop
20002624:	370c      	adds	r7, #12
20002626:	46bd      	mov	sp, r7
20002628:	f85d 7b04 	ldr.w	r7, [sp], #4
2000262c:	4770      	bx	lr
2000262e:	bf00      	nop
20002630:	58000400 	.word	0x58000400
20002634:	ffff0000 	.word	0xffff0000

20002638 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
20002638:	b480      	push	{r7}
2000263a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
2000263c:	4b05      	ldr	r3, [pc, #20]	@ (20002654 <HAL_EnableCompensationCell+0x1c>)
2000263e:	6a1b      	ldr	r3, [r3, #32]
20002640:	4a04      	ldr	r2, [pc, #16]	@ (20002654 <HAL_EnableCompensationCell+0x1c>)
20002642:	f043 0301 	orr.w	r3, r3, #1
20002646:	6213      	str	r3, [r2, #32]
}
20002648:	bf00      	nop
2000264a:	46bd      	mov	sp, r7
2000264c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002650:	4770      	bx	lr
20002652:	bf00      	nop
20002654:	58000400 	.word	0x58000400

20002658 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
20002658:	b480      	push	{r7}
2000265a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN);
2000265c:	4b05      	ldr	r3, [pc, #20]	@ (20002674 <HAL_DisableCompensationCell+0x1c>)
2000265e:	6a1b      	ldr	r3, [r3, #32]
20002660:	4a04      	ldr	r2, [pc, #16]	@ (20002674 <HAL_DisableCompensationCell+0x1c>)
20002662:	f023 0301 	bic.w	r3, r3, #1
20002666:	6213      	str	r3, [r2, #32]
}
20002668:	bf00      	nop
2000266a:	46bd      	mov	sp, r7
2000266c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002670:	4770      	bx	lr
20002672:	bf00      	nop
20002674:	58000400 	.word	0x58000400

20002678 <HAL_SYSCFG_EnableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_EnableIOSpeedOptimize(void)
{
20002678:	b480      	push	{r7}
2000267a:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
2000267c:	4b05      	ldr	r3, [pc, #20]	@ (20002694 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
2000267e:	6a1b      	ldr	r3, [r3, #32]
20002680:	4a04      	ldr	r2, [pc, #16]	@ (20002694 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
20002682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20002686:	6213      	str	r3, [r2, #32]
#else
  SET_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
20002688:	bf00      	nop
2000268a:	46bd      	mov	sp, r7
2000268c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002690:	4770      	bx	lr
20002692:	bf00      	nop
20002694:	58000400 	.word	0x58000400

20002698 <HAL_SYSCFG_DisableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_DisableIOSpeedOptimize(void)
{
20002698:	b480      	push	{r7}
2000269a:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
2000269c:	4b05      	ldr	r3, [pc, #20]	@ (200026b4 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
2000269e:	6a1b      	ldr	r3, [r3, #32]
200026a0:	4a04      	ldr	r2, [pc, #16]	@ (200026b4 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
200026a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
200026a6:	6213      	str	r3, [r2, #32]
#else
  CLEAR_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
200026a8:	bf00      	nop
200026aa:	46bd      	mov	sp, r7
200026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200026b0:	4770      	bx	lr
200026b2:	bf00      	nop
200026b4:	58000400 	.word	0x58000400

200026b8 <HAL_SYSCFG_CompensationCodeSelect>:
  *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
  *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCFG_CCCR)
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
{
200026b8:	b480      	push	{r7}
200026ba:	b083      	sub	sp, #12
200026bc:	af00      	add	r7, sp, #0
200026be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
  MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));
200026c0:	4b06      	ldr	r3, [pc, #24]	@ (200026dc <HAL_SYSCFG_CompensationCodeSelect+0x24>)
200026c2:	6a1b      	ldr	r3, [r3, #32]
200026c4:	f023 0202 	bic.w	r2, r3, #2
200026c8:	4904      	ldr	r1, [pc, #16]	@ (200026dc <HAL_SYSCFG_CompensationCodeSelect+0x24>)
200026ca:	687b      	ldr	r3, [r7, #4]
200026cc:	4313      	orrs	r3, r2
200026ce:	620b      	str	r3, [r1, #32]
}
200026d0:	bf00      	nop
200026d2:	370c      	adds	r7, #12
200026d4:	46bd      	mov	sp, r7
200026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200026da:	4770      	bx	lr
200026dc:	58000400 	.word	0x58000400

200026e0 <HAL_SYSCFG_CompensationCodeConfig>:
  *         This code is applied to the I/O compensation cell when the CS bit of the
  *          SYSCFG_CMPCR is set
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
{
200026e0:	b480      	push	{r7}
200026e2:	b083      	sub	sp, #12
200026e4:	af00      	add	r7, sp, #0
200026e6:	6078      	str	r0, [r7, #4]
200026e8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
  MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uint32_t)(SYSCFG_NMOSCode)) );
200026ea:	4b08      	ldr	r3, [pc, #32]	@ (2000270c <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
200026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200026ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
200026f2:	687b      	ldr	r3, [r7, #4]
200026f4:	0119      	lsls	r1, r3, #4
200026f6:	683b      	ldr	r3, [r7, #0]
200026f8:	430b      	orrs	r3, r1
200026fa:	4904      	ldr	r1, [pc, #16]	@ (2000270c <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
200026fc:	4313      	orrs	r3, r2
200026fe:	628b      	str	r3, [r1, #40]	@ 0x28
}
20002700:	bf00      	nop
20002702:	370c      	adds	r7, #12
20002704:	46bd      	mov	sp, r7
20002706:	f85d 7b04 	ldr.w	r7, [sp], #4
2000270a:	4770      	bx	lr
2000270c:	58000400 	.word	0x58000400

20002710 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
20002710:	b480      	push	{r7}
20002712:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
20002714:	4b05      	ldr	r3, [pc, #20]	@ (2000272c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20002716:	685b      	ldr	r3, [r3, #4]
20002718:	4a04      	ldr	r2, [pc, #16]	@ (2000272c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
2000271a:	f043 0301 	orr.w	r3, r3, #1
2000271e:	6053      	str	r3, [r2, #4]
}
20002720:	bf00      	nop
20002722:	46bd      	mov	sp, r7
20002724:	f85d 7b04 	ldr.w	r7, [sp], #4
20002728:	4770      	bx	lr
2000272a:	bf00      	nop
2000272c:	5c001000 	.word	0x5c001000

20002730 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
20002730:	b480      	push	{r7}
20002732:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
20002734:	4b05      	ldr	r3, [pc, #20]	@ (2000274c <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20002736:	685b      	ldr	r3, [r3, #4]
20002738:	4a04      	ldr	r2, [pc, #16]	@ (2000274c <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
2000273a:	f023 0301 	bic.w	r3, r3, #1
2000273e:	6053      	str	r3, [r2, #4]
}
20002740:	bf00      	nop
20002742:	46bd      	mov	sp, r7
20002744:	f85d 7b04 	ldr.w	r7, [sp], #4
20002748:	4770      	bx	lr
2000274a:	bf00      	nop
2000274c:	5c001000 	.word	0x5c001000

20002750 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
20002750:	b480      	push	{r7}
20002752:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
20002754:	4b05      	ldr	r3, [pc, #20]	@ (2000276c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20002756:	685b      	ldr	r3, [r3, #4]
20002758:	4a04      	ldr	r2, [pc, #16]	@ (2000276c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
2000275a:	f043 0302 	orr.w	r3, r3, #2
2000275e:	6053      	str	r3, [r2, #4]
}
20002760:	bf00      	nop
20002762:	46bd      	mov	sp, r7
20002764:	f85d 7b04 	ldr.w	r7, [sp], #4
20002768:	4770      	bx	lr
2000276a:	bf00      	nop
2000276c:	5c001000 	.word	0x5c001000

20002770 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
20002770:	b480      	push	{r7}
20002772:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
20002774:	4b05      	ldr	r3, [pc, #20]	@ (2000278c <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20002776:	685b      	ldr	r3, [r3, #4]
20002778:	4a04      	ldr	r2, [pc, #16]	@ (2000278c <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
2000277a:	f023 0302 	bic.w	r3, r3, #2
2000277e:	6053      	str	r3, [r2, #4]
}
20002780:	bf00      	nop
20002782:	46bd      	mov	sp, r7
20002784:	f85d 7b04 	ldr.w	r7, [sp], #4
20002788:	4770      	bx	lr
2000278a:	bf00      	nop
2000278c:	5c001000 	.word	0x5c001000

20002790 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
20002790:	b480      	push	{r7}
20002792:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
20002794:	4b05      	ldr	r3, [pc, #20]	@ (200027ac <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20002796:	685b      	ldr	r3, [r3, #4]
20002798:	4a04      	ldr	r2, [pc, #16]	@ (200027ac <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
2000279a:	f043 0304 	orr.w	r3, r3, #4
2000279e:	6053      	str	r3, [r2, #4]
}
200027a0:	bf00      	nop
200027a2:	46bd      	mov	sp, r7
200027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200027a8:	4770      	bx	lr
200027aa:	bf00      	nop
200027ac:	5c001000 	.word	0x5c001000

200027b0 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
200027b0:	b480      	push	{r7}
200027b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
200027b4:	4b05      	ldr	r3, [pc, #20]	@ (200027cc <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
200027b6:	685b      	ldr	r3, [r3, #4]
200027b8:	4a04      	ldr	r2, [pc, #16]	@ (200027cc <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
200027ba:	f023 0304 	bic.w	r3, r3, #4
200027be:	6053      	str	r3, [r2, #4]
}
200027c0:	bf00      	nop
200027c2:	46bd      	mov	sp, r7
200027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200027c8:	4770      	bx	lr
200027ca:	bf00      	nop
200027cc:	5c001000 	.word	0x5c001000

200027d0 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
200027d0:	b480      	push	{r7}
200027d2:	b083      	sub	sp, #12
200027d4:	af00      	add	r7, sp, #0
200027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
200027d8:	4b06      	ldr	r3, [pc, #24]	@ (200027f4 <HAL_SetFMCMemorySwappingConfig+0x24>)
200027da:	681b      	ldr	r3, [r3, #0]
200027dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
200027e0:	4904      	ldr	r1, [pc, #16]	@ (200027f4 <HAL_SetFMCMemorySwappingConfig+0x24>)
200027e2:	687b      	ldr	r3, [r7, #4]
200027e4:	4313      	orrs	r3, r2
200027e6:	600b      	str	r3, [r1, #0]
}
200027e8:	bf00      	nop
200027ea:	370c      	adds	r7, #12
200027ec:	46bd      	mov	sp, r7
200027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200027f2:	4770      	bx	lr
200027f4:	52004000 	.word	0x52004000

200027f8 <HAL_GetFMCMemorySwappingConfig>:
  * @brief  Get FMC Bank mapping mode.
  * @retval The FMC Bank mapping mode. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
*/
uint32_t HAL_GetFMCMemorySwappingConfig(void)
{
200027f8:	b480      	push	{r7}
200027fa:	af00      	add	r7, sp, #0
  return READ_BIT(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP);
200027fc:	4b04      	ldr	r3, [pc, #16]	@ (20002810 <HAL_GetFMCMemorySwappingConfig+0x18>)
200027fe:	681b      	ldr	r3, [r3, #0]
20002800:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
20002804:	4618      	mov	r0, r3
20002806:	46bd      	mov	sp, r7
20002808:	f85d 7b04 	ldr.w	r7, [sp], #4
2000280c:	4770      	bx	lr
2000280e:	bf00      	nop
20002810:	52004000 	.word	0x52004000

20002814 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
20002814:	b480      	push	{r7}
20002816:	b083      	sub	sp, #12
20002818:	af00      	add	r7, sp, #0
2000281a:	6078      	str	r0, [r7, #4]
2000281c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2000281e:	687b      	ldr	r3, [r7, #4]
20002820:	095b      	lsrs	r3, r3, #5
20002822:	015a      	lsls	r2, r3, #5
20002824:	4b2e      	ldr	r3, [pc, #184]	@ (200028e0 <HAL_EXTI_EdgeConfig+0xcc>)
20002826:	4413      	add	r3, r2
20002828:	6819      	ldr	r1, [r3, #0]
2000282a:	687b      	ldr	r3, [r7, #4]
2000282c:	f003 031f 	and.w	r3, r3, #31
20002830:	2201      	movs	r2, #1
20002832:	fa02 f303 	lsl.w	r3, r2, r3
20002836:	43da      	mvns	r2, r3
20002838:	687b      	ldr	r3, [r7, #4]
2000283a:	095b      	lsrs	r3, r3, #5
2000283c:	0158      	lsls	r0, r3, #5
2000283e:	4b28      	ldr	r3, [pc, #160]	@ (200028e0 <HAL_EXTI_EdgeConfig+0xcc>)
20002840:	4403      	add	r3, r0
20002842:	4618      	mov	r0, r3
20002844:	ea01 0302 	and.w	r3, r1, r2
20002848:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2000284a:	687b      	ldr	r3, [r7, #4]
2000284c:	095b      	lsrs	r3, r3, #5
2000284e:	f103 7330 	add.w	r3, r3, #46137344	@ 0x2c00000
20002852:	015b      	lsls	r3, r3, #5
20002854:	681a      	ldr	r2, [r3, #0]
20002856:	687b      	ldr	r3, [r7, #4]
20002858:	f003 031f 	and.w	r3, r3, #31
2000285c:	2101      	movs	r1, #1
2000285e:	fa01 f303 	lsl.w	r3, r1, r3
20002862:	43db      	mvns	r3, r3
20002864:	6879      	ldr	r1, [r7, #4]
20002866:	0949      	lsrs	r1, r1, #5
20002868:	f101 7130 	add.w	r1, r1, #46137344	@ 0x2c00000
2000286c:	0149      	lsls	r1, r1, #5
2000286e:	4013      	ands	r3, r2
20002870:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
20002872:	683b      	ldr	r3, [r7, #0]
20002874:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20002878:	2b00      	cmp	r3, #0
2000287a:	d012      	beq.n	200028a2 <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2000287c:	687b      	ldr	r3, [r7, #4]
2000287e:	095b      	lsrs	r3, r3, #5
20002880:	f103 7330 	add.w	r3, r3, #46137344	@ 0x2c00000
20002884:	015b      	lsls	r3, r3, #5
20002886:	681a      	ldr	r2, [r3, #0]
20002888:	687b      	ldr	r3, [r7, #4]
2000288a:	f003 031f 	and.w	r3, r3, #31
2000288e:	2101      	movs	r1, #1
20002890:	fa01 f303 	lsl.w	r3, r1, r3
20002894:	6879      	ldr	r1, [r7, #4]
20002896:	0949      	lsrs	r1, r1, #5
20002898:	f101 7130 	add.w	r1, r1, #46137344	@ 0x2c00000
2000289c:	0149      	lsls	r1, r1, #5
2000289e:	4313      	orrs	r3, r2
200028a0:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
200028a2:	683b      	ldr	r3, [r7, #0]
200028a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
200028a8:	2b00      	cmp	r3, #0
200028aa:	d013      	beq.n	200028d4 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
200028ac:	687b      	ldr	r3, [r7, #4]
200028ae:	095b      	lsrs	r3, r3, #5
200028b0:	015a      	lsls	r2, r3, #5
200028b2:	4b0b      	ldr	r3, [pc, #44]	@ (200028e0 <HAL_EXTI_EdgeConfig+0xcc>)
200028b4:	4413      	add	r3, r2
200028b6:	6819      	ldr	r1, [r3, #0]
200028b8:	687b      	ldr	r3, [r7, #4]
200028ba:	f003 031f 	and.w	r3, r3, #31
200028be:	2201      	movs	r2, #1
200028c0:	409a      	lsls	r2, r3
200028c2:	687b      	ldr	r3, [r7, #4]
200028c4:	095b      	lsrs	r3, r3, #5
200028c6:	0158      	lsls	r0, r3, #5
200028c8:	4b05      	ldr	r3, [pc, #20]	@ (200028e0 <HAL_EXTI_EdgeConfig+0xcc>)
200028ca:	4403      	add	r3, r0
200028cc:	4618      	mov	r0, r3
200028ce:	ea41 0302 	orr.w	r3, r1, r2
200028d2:	6003      	str	r3, [r0, #0]
  }
}
200028d4:	bf00      	nop
200028d6:	370c      	adds	r7, #12
200028d8:	46bd      	mov	sp, r7
200028da:	f85d 7b04 	ldr.w	r7, [sp], #4
200028de:	4770      	bx	lr
200028e0:	58000004 	.word	0x58000004

200028e4 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
200028e4:	b480      	push	{r7}
200028e6:	b083      	sub	sp, #12
200028e8:	af00      	add	r7, sp, #0
200028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
200028ec:	687b      	ldr	r3, [r7, #4]
200028ee:	095b      	lsrs	r3, r3, #5
200028f0:	015a      	lsls	r2, r3, #5
200028f2:	4b0b      	ldr	r3, [pc, #44]	@ (20002920 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
200028f4:	4413      	add	r3, r2
200028f6:	6819      	ldr	r1, [r3, #0]
200028f8:	687b      	ldr	r3, [r7, #4]
200028fa:	f003 031f 	and.w	r3, r3, #31
200028fe:	2201      	movs	r2, #1
20002900:	409a      	lsls	r2, r3
20002902:	687b      	ldr	r3, [r7, #4]
20002904:	095b      	lsrs	r3, r3, #5
20002906:	0158      	lsls	r0, r3, #5
20002908:	4b05      	ldr	r3, [pc, #20]	@ (20002920 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
2000290a:	4403      	add	r3, r0
2000290c:	4618      	mov	r0, r3
2000290e:	ea41 0302 	orr.w	r3, r1, r2
20002912:	6003      	str	r3, [r0, #0]
}
20002914:	bf00      	nop
20002916:	370c      	adds	r7, #12
20002918:	46bd      	mov	sp, r7
2000291a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000291e:	4770      	bx	lr
20002920:	58000008 	.word	0x58000008

20002924 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
20002924:	b480      	push	{r7}
20002926:	b083      	sub	sp, #12
20002928:	af00      	add	r7, sp, #0
2000292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2000292c:	687b      	ldr	r3, [r7, #4]
2000292e:	f003 021f 	and.w	r2, r3, #31
20002932:	687b      	ldr	r3, [r7, #4]
20002934:	095b      	lsrs	r3, r3, #5
20002936:	0119      	lsls	r1, r3, #4
20002938:	4b05      	ldr	r3, [pc, #20]	@ (20002950 <HAL_EXTI_D1_ClearFlag+0x2c>)
2000293a:	440b      	add	r3, r1
2000293c:	4619      	mov	r1, r3
2000293e:	2301      	movs	r3, #1
20002940:	4093      	lsls	r3, r2
20002942:	600b      	str	r3, [r1, #0]

}
20002944:	bf00      	nop
20002946:	370c      	adds	r7, #12
20002948:	46bd      	mov	sp, r7
2000294a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000294e:	4770      	bx	lr
20002950:	58000088 	.word	0x58000088

20002954 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
20002954:	b480      	push	{r7}
20002956:	b085      	sub	sp, #20
20002958:	af00      	add	r7, sp, #0
2000295a:	60f8      	str	r0, [r7, #12]
2000295c:	60b9      	str	r1, [r7, #8]
2000295e:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
20002960:	68bb      	ldr	r3, [r7, #8]
20002962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20002966:	2b00      	cmp	r3, #0
20002968:	d02d      	beq.n	200029c6 <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
2000296a:	687b      	ldr	r3, [r7, #4]
2000296c:	2b00      	cmp	r3, #0
2000296e:	d116      	bne.n	2000299e <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
20002970:	68fb      	ldr	r3, [r7, #12]
20002972:	095a      	lsrs	r2, r3, #5
20002974:	4b30      	ldr	r3, [pc, #192]	@ (20002a38 <HAL_EXTI_D1_EventInputConfig+0xe4>)
20002976:	4413      	add	r3, r2
20002978:	011b      	lsls	r3, r3, #4
2000297a:	6819      	ldr	r1, [r3, #0]
2000297c:	68fb      	ldr	r3, [r7, #12]
2000297e:	f003 031f 	and.w	r3, r3, #31
20002982:	2201      	movs	r2, #1
20002984:	fa02 f303 	lsl.w	r3, r2, r3
20002988:	43da      	mvns	r2, r3
2000298a:	68fb      	ldr	r3, [r7, #12]
2000298c:	0958      	lsrs	r0, r3, #5
2000298e:	4b2a      	ldr	r3, [pc, #168]	@ (20002a38 <HAL_EXTI_D1_EventInputConfig+0xe4>)
20002990:	4403      	add	r3, r0
20002992:	011b      	lsls	r3, r3, #4
20002994:	4618      	mov	r0, r3
20002996:	ea01 0302 	and.w	r3, r1, r2
2000299a:	6003      	str	r3, [r0, #0]
2000299c:	e013      	b.n	200029c6 <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2000299e:	68fb      	ldr	r3, [r7, #12]
200029a0:	095a      	lsrs	r2, r3, #5
200029a2:	4b25      	ldr	r3, [pc, #148]	@ (20002a38 <HAL_EXTI_D1_EventInputConfig+0xe4>)
200029a4:	4413      	add	r3, r2
200029a6:	011b      	lsls	r3, r3, #4
200029a8:	6819      	ldr	r1, [r3, #0]
200029aa:	68fb      	ldr	r3, [r7, #12]
200029ac:	f003 031f 	and.w	r3, r3, #31
200029b0:	2201      	movs	r2, #1
200029b2:	409a      	lsls	r2, r3
200029b4:	68fb      	ldr	r3, [r7, #12]
200029b6:	0958      	lsrs	r0, r3, #5
200029b8:	4b1f      	ldr	r3, [pc, #124]	@ (20002a38 <HAL_EXTI_D1_EventInputConfig+0xe4>)
200029ba:	4403      	add	r3, r0
200029bc:	011b      	lsls	r3, r3, #4
200029be:	4618      	mov	r0, r3
200029c0:	ea41 0302 	orr.w	r3, r1, r2
200029c4:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
200029c6:	68bb      	ldr	r3, [r7, #8]
200029c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200029cc:	2b00      	cmp	r3, #0
200029ce:	d02d      	beq.n	20002a2c <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
200029d0:	687b      	ldr	r3, [r7, #4]
200029d2:	2b00      	cmp	r3, #0
200029d4:	d116      	bne.n	20002a04 <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
200029d6:	68fb      	ldr	r3, [r7, #12]
200029d8:	095b      	lsrs	r3, r3, #5
200029da:	011a      	lsls	r2, r3, #4
200029dc:	4b17      	ldr	r3, [pc, #92]	@ (20002a3c <HAL_EXTI_D1_EventInputConfig+0xe8>)
200029de:	4413      	add	r3, r2
200029e0:	6819      	ldr	r1, [r3, #0]
200029e2:	68fb      	ldr	r3, [r7, #12]
200029e4:	f003 031f 	and.w	r3, r3, #31
200029e8:	2201      	movs	r2, #1
200029ea:	fa02 f303 	lsl.w	r3, r2, r3
200029ee:	43da      	mvns	r2, r3
200029f0:	68fb      	ldr	r3, [r7, #12]
200029f2:	095b      	lsrs	r3, r3, #5
200029f4:	0118      	lsls	r0, r3, #4
200029f6:	4b11      	ldr	r3, [pc, #68]	@ (20002a3c <HAL_EXTI_D1_EventInputConfig+0xe8>)
200029f8:	4403      	add	r3, r0
200029fa:	4618      	mov	r0, r3
200029fc:	ea01 0302 	and.w	r3, r1, r2
20002a00:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
20002a02:	e013      	b.n	20002a2c <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
20002a04:	68fb      	ldr	r3, [r7, #12]
20002a06:	095b      	lsrs	r3, r3, #5
20002a08:	011a      	lsls	r2, r3, #4
20002a0a:	4b0c      	ldr	r3, [pc, #48]	@ (20002a3c <HAL_EXTI_D1_EventInputConfig+0xe8>)
20002a0c:	4413      	add	r3, r2
20002a0e:	6819      	ldr	r1, [r3, #0]
20002a10:	68fb      	ldr	r3, [r7, #12]
20002a12:	f003 031f 	and.w	r3, r3, #31
20002a16:	2201      	movs	r2, #1
20002a18:	409a      	lsls	r2, r3
20002a1a:	68fb      	ldr	r3, [r7, #12]
20002a1c:	095b      	lsrs	r3, r3, #5
20002a1e:	0118      	lsls	r0, r3, #4
20002a20:	4b06      	ldr	r3, [pc, #24]	@ (20002a3c <HAL_EXTI_D1_EventInputConfig+0xe8>)
20002a22:	4403      	add	r3, r0
20002a24:	4618      	mov	r0, r3
20002a26:	ea41 0302 	orr.w	r3, r1, r2
20002a2a:	6003      	str	r3, [r0, #0]
}
20002a2c:	bf00      	nop
20002a2e:	3714      	adds	r7, #20
20002a30:	46bd      	mov	sp, r7
20002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
20002a36:	4770      	bx	lr
20002a38:	05800008 	.word	0x05800008
20002a3c:	58000084 	.word	0x58000084

20002a40 <HAL_EXTI_D3_EventInputConfig>:
  *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
  *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
  * @retval None
  */
void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc  )
{
20002a40:	b480      	push	{r7}
20002a42:	b087      	sub	sp, #28
20002a44:	af00      	add	r7, sp, #0
20002a46:	60f8      	str	r0, [r7, #12]
20002a48:	60b9      	str	r1, [r7, #8]
20002a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameter */
  assert_param(IS_EXTI_D3_LINE(EXTI_Line));
  assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));

  if( EXTI_LineCmd == 0UL)
20002a4c:	68bb      	ldr	r3, [r7, #8]
20002a4e:	2b00      	cmp	r3, #0
20002a50:	d116      	bne.n	20002a80 <HAL_EXTI_D3_EventInputConfig+0x40>
  {
    /* Clear EXTI line configuration */
    CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
20002a52:	68fb      	ldr	r3, [r7, #12]
20002a54:	095b      	lsrs	r3, r3, #5
20002a56:	015a      	lsls	r2, r3, #5
20002a58:	4b2a      	ldr	r3, [pc, #168]	@ (20002b04 <HAL_EXTI_D3_EventInputConfig+0xc4>)
20002a5a:	4413      	add	r3, r2
20002a5c:	6819      	ldr	r1, [r3, #0]
20002a5e:	68fb      	ldr	r3, [r7, #12]
20002a60:	f003 031f 	and.w	r3, r3, #31
20002a64:	2201      	movs	r2, #1
20002a66:	fa02 f303 	lsl.w	r3, r2, r3
20002a6a:	43da      	mvns	r2, r3
20002a6c:	68fb      	ldr	r3, [r7, #12]
20002a6e:	095b      	lsrs	r3, r3, #5
20002a70:	0158      	lsls	r0, r3, #5
20002a72:	4b24      	ldr	r3, [pc, #144]	@ (20002b04 <HAL_EXTI_D3_EventInputConfig+0xc4>)
20002a74:	4403      	add	r3, r0
20002a76:	4618      	mov	r0, r3
20002a78:	ea01 0302 	and.w	r3, r1, r2
20002a7c:	6003      	str	r3, [r0, #0]
20002a7e:	e013      	b.n	20002aa8 <HAL_EXTI_D3_EventInputConfig+0x68>
  }
  else
  {
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
20002a80:	68fb      	ldr	r3, [r7, #12]
20002a82:	095b      	lsrs	r3, r3, #5
20002a84:	015a      	lsls	r2, r3, #5
20002a86:	4b1f      	ldr	r3, [pc, #124]	@ (20002b04 <HAL_EXTI_D3_EventInputConfig+0xc4>)
20002a88:	4413      	add	r3, r2
20002a8a:	6819      	ldr	r1, [r3, #0]
20002a8c:	68fb      	ldr	r3, [r7, #12]
20002a8e:	f003 031f 	and.w	r3, r3, #31
20002a92:	2201      	movs	r2, #1
20002a94:	409a      	lsls	r2, r3
20002a96:	68fb      	ldr	r3, [r7, #12]
20002a98:	095b      	lsrs	r3, r3, #5
20002a9a:	0158      	lsls	r0, r3, #5
20002a9c:	4b19      	ldr	r3, [pc, #100]	@ (20002b04 <HAL_EXTI_D3_EventInputConfig+0xc4>)
20002a9e:	4403      	add	r3, r0
20002aa0:	4618      	mov	r0, r3
20002aa2:	ea41 0302 	orr.w	r3, r1, r2
20002aa6:	6003      	str	r3, [r0, #0]
  }

  if(((EXTI_Line>>4)%2UL) == 0UL)
20002aa8:	68fb      	ldr	r3, [r7, #12]
20002aaa:	f003 0310 	and.w	r3, r3, #16
20002aae:	2b00      	cmp	r3, #0
20002ab0:	d106      	bne.n	20002ac0 <HAL_EXTI_D3_EventInputConfig+0x80>
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20UL));
20002ab2:	68fb      	ldr	r3, [r7, #12]
20002ab4:	095b      	lsrs	r3, r3, #5
20002ab6:	015a      	lsls	r2, r3, #5
20002ab8:	4b13      	ldr	r3, [pc, #76]	@ (20002b08 <HAL_EXTI_D3_EventInputConfig+0xc8>)
20002aba:	4413      	add	r3, r2
20002abc:	617b      	str	r3, [r7, #20]
20002abe:	e005      	b.n	20002acc <HAL_EXTI_D3_EventInputConfig+0x8c>
  }
  else
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
20002ac0:	68fb      	ldr	r3, [r7, #12]
20002ac2:	095b      	lsrs	r3, r3, #5
20002ac4:	015a      	lsls	r2, r3, #5
20002ac6:	4b11      	ldr	r3, [pc, #68]	@ (20002b0c <HAL_EXTI_D3_EventInputConfig+0xcc>)
20002ac8:	4413      	add	r3, r2
20002aca:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(*pRegv, (uint32_t)(3UL << ((EXTI_Line*2UL) & 0x1FUL)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2UL) & 0x1FUL)));
20002acc:	697b      	ldr	r3, [r7, #20]
20002ace:	681a      	ldr	r2, [r3, #0]
20002ad0:	68fb      	ldr	r3, [r7, #12]
20002ad2:	005b      	lsls	r3, r3, #1
20002ad4:	f003 031e 	and.w	r3, r3, #30
20002ad8:	2103      	movs	r1, #3
20002ada:	fa01 f303 	lsl.w	r3, r1, r3
20002ade:	43db      	mvns	r3, r3
20002ae0:	401a      	ands	r2, r3
20002ae2:	68fb      	ldr	r3, [r7, #12]
20002ae4:	005b      	lsls	r3, r3, #1
20002ae6:	f003 031e 	and.w	r3, r3, #30
20002aea:	6879      	ldr	r1, [r7, #4]
20002aec:	fa01 f303 	lsl.w	r3, r1, r3
20002af0:	431a      	orrs	r2, r3
20002af2:	697b      	ldr	r3, [r7, #20]
20002af4:	601a      	str	r2, [r3, #0]

}
20002af6:	bf00      	nop
20002af8:	371c      	adds	r7, #28
20002afa:	46bd      	mov	sp, r7
20002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
20002b00:	4770      	bx	lr
20002b02:	bf00      	nop
20002b04:	5800000c 	.word	0x5800000c
20002b08:	58000010 	.word	0x58000010
20002b0c:	58000014 	.word	0x58000014

20002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20002b10:	b480      	push	{r7}
20002b12:	b085      	sub	sp, #20
20002b14:	af00      	add	r7, sp, #0
20002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20002b18:	687b      	ldr	r3, [r7, #4]
20002b1a:	f003 0307 	and.w	r3, r3, #7
20002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20002b20:	4b0b      	ldr	r3, [pc, #44]	@ (20002b50 <__NVIC_SetPriorityGrouping+0x40>)
20002b22:	68db      	ldr	r3, [r3, #12]
20002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20002b26:	68ba      	ldr	r2, [r7, #8]
20002b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
20002b2c:	4013      	ands	r3, r2
20002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20002b30:	68fb      	ldr	r3, [r7, #12]
20002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20002b34:	68bb      	ldr	r3, [r7, #8]
20002b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
20002b38:	4b06      	ldr	r3, [pc, #24]	@ (20002b54 <__NVIC_SetPriorityGrouping+0x44>)
20002b3a:	4313      	orrs	r3, r2
20002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20002b3e:	4a04      	ldr	r2, [pc, #16]	@ (20002b50 <__NVIC_SetPriorityGrouping+0x40>)
20002b40:	68bb      	ldr	r3, [r7, #8]
20002b42:	60d3      	str	r3, [r2, #12]
}
20002b44:	bf00      	nop
20002b46:	3714      	adds	r7, #20
20002b48:	46bd      	mov	sp, r7
20002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20002b4e:	4770      	bx	lr
20002b50:	e000ed00 	.word	0xe000ed00
20002b54:	05fa0000 	.word	0x05fa0000

20002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20002b58:	b480      	push	{r7}
20002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20002b5c:	4b04      	ldr	r3, [pc, #16]	@ (20002b70 <__NVIC_GetPriorityGrouping+0x18>)
20002b5e:	68db      	ldr	r3, [r3, #12]
20002b60:	0a1b      	lsrs	r3, r3, #8
20002b62:	f003 0307 	and.w	r3, r3, #7
}
20002b66:	4618      	mov	r0, r3
20002b68:	46bd      	mov	sp, r7
20002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
20002b6e:	4770      	bx	lr
20002b70:	e000ed00 	.word	0xe000ed00

20002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20002b74:	b480      	push	{r7}
20002b76:	b083      	sub	sp, #12
20002b78:	af00      	add	r7, sp, #0
20002b7a:	4603      	mov	r3, r0
20002b7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
20002b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002b82:	2b00      	cmp	r3, #0
20002b84:	db0b      	blt.n	20002b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002b86:	88fb      	ldrh	r3, [r7, #6]
20002b88:	f003 021f 	and.w	r2, r3, #31
20002b8c:	4907      	ldr	r1, [pc, #28]	@ (20002bac <__NVIC_EnableIRQ+0x38>)
20002b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002b92:	095b      	lsrs	r3, r3, #5
20002b94:	2001      	movs	r0, #1
20002b96:	fa00 f202 	lsl.w	r2, r0, r2
20002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
20002b9e:	bf00      	nop
20002ba0:	370c      	adds	r7, #12
20002ba2:	46bd      	mov	sp, r7
20002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
20002ba8:	4770      	bx	lr
20002baa:	bf00      	nop
20002bac:	e000e100 	.word	0xe000e100

20002bb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
20002bb0:	b480      	push	{r7}
20002bb2:	b083      	sub	sp, #12
20002bb4:	af00      	add	r7, sp, #0
20002bb6:	4603      	mov	r3, r0
20002bb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
20002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002bbe:	2b00      	cmp	r3, #0
20002bc0:	db12      	blt.n	20002be8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002bc2:	88fb      	ldrh	r3, [r7, #6]
20002bc4:	f003 021f 	and.w	r2, r3, #31
20002bc8:	490a      	ldr	r1, [pc, #40]	@ (20002bf4 <__NVIC_DisableIRQ+0x44>)
20002bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002bce:	095b      	lsrs	r3, r3, #5
20002bd0:	2001      	movs	r0, #1
20002bd2:	fa00 f202 	lsl.w	r2, r0, r2
20002bd6:	3320      	adds	r3, #32
20002bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
20002bdc:	f3bf 8f4f 	dsb	sy
}
20002be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
20002be2:	f3bf 8f6f 	isb	sy
}
20002be6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
20002be8:	bf00      	nop
20002bea:	370c      	adds	r7, #12
20002bec:	46bd      	mov	sp, r7
20002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
20002bf2:	4770      	bx	lr
20002bf4:	e000e100 	.word	0xe000e100

20002bf8 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20002bf8:	b480      	push	{r7}
20002bfa:	b083      	sub	sp, #12
20002bfc:	af00      	add	r7, sp, #0
20002bfe:	4603      	mov	r3, r0
20002c00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
20002c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002c06:	2b00      	cmp	r3, #0
20002c08:	db0e      	blt.n	20002c28 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20002c0a:	4a0b      	ldr	r2, [pc, #44]	@ (20002c38 <__NVIC_GetPendingIRQ+0x40>)
20002c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002c10:	095b      	lsrs	r3, r3, #5
20002c12:	3340      	adds	r3, #64	@ 0x40
20002c14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20002c18:	88fb      	ldrh	r3, [r7, #6]
20002c1a:	f003 031f 	and.w	r3, r3, #31
20002c1e:	fa22 f303 	lsr.w	r3, r2, r3
20002c22:	f003 0301 	and.w	r3, r3, #1
20002c26:	e000      	b.n	20002c2a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
20002c28:	2300      	movs	r3, #0
  }
}
20002c2a:	4618      	mov	r0, r3
20002c2c:	370c      	adds	r7, #12
20002c2e:	46bd      	mov	sp, r7
20002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
20002c34:	4770      	bx	lr
20002c36:	bf00      	nop
20002c38:	e000e100 	.word	0xe000e100

20002c3c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20002c3c:	b480      	push	{r7}
20002c3e:	b083      	sub	sp, #12
20002c40:	af00      	add	r7, sp, #0
20002c42:	4603      	mov	r3, r0
20002c44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
20002c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002c4a:	2b00      	cmp	r3, #0
20002c4c:	db0c      	blt.n	20002c68 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002c4e:	88fb      	ldrh	r3, [r7, #6]
20002c50:	f003 021f 	and.w	r2, r3, #31
20002c54:	4907      	ldr	r1, [pc, #28]	@ (20002c74 <__NVIC_SetPendingIRQ+0x38>)
20002c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002c5a:	095b      	lsrs	r3, r3, #5
20002c5c:	2001      	movs	r0, #1
20002c5e:	fa00 f202 	lsl.w	r2, r0, r2
20002c62:	3340      	adds	r3, #64	@ 0x40
20002c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20002c68:	bf00      	nop
20002c6a:	370c      	adds	r7, #12
20002c6c:	46bd      	mov	sp, r7
20002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002c72:	4770      	bx	lr
20002c74:	e000e100 	.word	0xe000e100

20002c78 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002c78:	b480      	push	{r7}
20002c7a:	b083      	sub	sp, #12
20002c7c:	af00      	add	r7, sp, #0
20002c7e:	4603      	mov	r3, r0
20002c80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
20002c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002c86:	2b00      	cmp	r3, #0
20002c88:	db0c      	blt.n	20002ca4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002c8a:	88fb      	ldrh	r3, [r7, #6]
20002c8c:	f003 021f 	and.w	r2, r3, #31
20002c90:	4907      	ldr	r1, [pc, #28]	@ (20002cb0 <__NVIC_ClearPendingIRQ+0x38>)
20002c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002c96:	095b      	lsrs	r3, r3, #5
20002c98:	2001      	movs	r0, #1
20002c9a:	fa00 f202 	lsl.w	r2, r0, r2
20002c9e:	3360      	adds	r3, #96	@ 0x60
20002ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20002ca4:	bf00      	nop
20002ca6:	370c      	adds	r7, #12
20002ca8:	46bd      	mov	sp, r7
20002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
20002cae:	4770      	bx	lr
20002cb0:	e000e100 	.word	0xe000e100

20002cb4 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
20002cb4:	b480      	push	{r7}
20002cb6:	b083      	sub	sp, #12
20002cb8:	af00      	add	r7, sp, #0
20002cba:	4603      	mov	r3, r0
20002cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
20002cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002cc2:	2b00      	cmp	r3, #0
20002cc4:	db0e      	blt.n	20002ce4 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20002cc6:	4a0b      	ldr	r2, [pc, #44]	@ (20002cf4 <__NVIC_GetActive+0x40>)
20002cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002ccc:	095b      	lsrs	r3, r3, #5
20002cce:	3380      	adds	r3, #128	@ 0x80
20002cd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20002cd4:	88fb      	ldrh	r3, [r7, #6]
20002cd6:	f003 031f 	and.w	r3, r3, #31
20002cda:	fa22 f303 	lsr.w	r3, r2, r3
20002cde:	f003 0301 	and.w	r3, r3, #1
20002ce2:	e000      	b.n	20002ce6 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
20002ce4:	2300      	movs	r3, #0
  }
}
20002ce6:	4618      	mov	r0, r3
20002ce8:	370c      	adds	r7, #12
20002cea:	46bd      	mov	sp, r7
20002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
20002cf0:	4770      	bx	lr
20002cf2:	bf00      	nop
20002cf4:	e000e100 	.word	0xe000e100

20002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20002cf8:	b480      	push	{r7}
20002cfa:	b083      	sub	sp, #12
20002cfc:	af00      	add	r7, sp, #0
20002cfe:	4603      	mov	r3, r0
20002d00:	6039      	str	r1, [r7, #0]
20002d02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
20002d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002d08:	2b00      	cmp	r3, #0
20002d0a:	db0a      	blt.n	20002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20002d0c:	683b      	ldr	r3, [r7, #0]
20002d0e:	b2da      	uxtb	r2, r3
20002d10:	490c      	ldr	r1, [pc, #48]	@ (20002d44 <__NVIC_SetPriority+0x4c>)
20002d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002d16:	0112      	lsls	r2, r2, #4
20002d18:	b2d2      	uxtb	r2, r2
20002d1a:	440b      	add	r3, r1
20002d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20002d20:	e00a      	b.n	20002d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20002d22:	683b      	ldr	r3, [r7, #0]
20002d24:	b2da      	uxtb	r2, r3
20002d26:	4908      	ldr	r1, [pc, #32]	@ (20002d48 <__NVIC_SetPriority+0x50>)
20002d28:	88fb      	ldrh	r3, [r7, #6]
20002d2a:	f003 030f 	and.w	r3, r3, #15
20002d2e:	3b04      	subs	r3, #4
20002d30:	0112      	lsls	r2, r2, #4
20002d32:	b2d2      	uxtb	r2, r2
20002d34:	440b      	add	r3, r1
20002d36:	761a      	strb	r2, [r3, #24]
}
20002d38:	bf00      	nop
20002d3a:	370c      	adds	r7, #12
20002d3c:	46bd      	mov	sp, r7
20002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002d42:	4770      	bx	lr
20002d44:	e000e100 	.word	0xe000e100
20002d48:	e000ed00 	.word	0xe000ed00

20002d4c <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
20002d4c:	b480      	push	{r7}
20002d4e:	b083      	sub	sp, #12
20002d50:	af00      	add	r7, sp, #0
20002d52:	4603      	mov	r3, r0
20002d54:	80fb      	strh	r3, [r7, #6]

  if ((int32_t)(IRQn) >= 0)
20002d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002d5a:	2b00      	cmp	r3, #0
20002d5c:	db09      	blt.n	20002d72 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
20002d5e:	4a0d      	ldr	r2, [pc, #52]	@ (20002d94 <__NVIC_GetPriority+0x48>)
20002d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002d64:	4413      	add	r3, r2
20002d66:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
20002d6a:	b2db      	uxtb	r3, r3
20002d6c:	091b      	lsrs	r3, r3, #4
20002d6e:	b2db      	uxtb	r3, r3
20002d70:	e009      	b.n	20002d86 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
20002d72:	4a09      	ldr	r2, [pc, #36]	@ (20002d98 <__NVIC_GetPriority+0x4c>)
20002d74:	88fb      	ldrh	r3, [r7, #6]
20002d76:	f003 030f 	and.w	r3, r3, #15
20002d7a:	3b04      	subs	r3, #4
20002d7c:	4413      	add	r3, r2
20002d7e:	7e1b      	ldrb	r3, [r3, #24]
20002d80:	b2db      	uxtb	r3, r3
20002d82:	091b      	lsrs	r3, r3, #4
20002d84:	b2db      	uxtb	r3, r3
  }
}
20002d86:	4618      	mov	r0, r3
20002d88:	370c      	adds	r7, #12
20002d8a:	46bd      	mov	sp, r7
20002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002d90:	4770      	bx	lr
20002d92:	bf00      	nop
20002d94:	e000e100 	.word	0xe000e100
20002d98:	e000ed00 	.word	0xe000ed00

20002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20002d9c:	b480      	push	{r7}
20002d9e:	b089      	sub	sp, #36	@ 0x24
20002da0:	af00      	add	r7, sp, #0
20002da2:	60f8      	str	r0, [r7, #12]
20002da4:	60b9      	str	r1, [r7, #8]
20002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20002da8:	68fb      	ldr	r3, [r7, #12]
20002daa:	f003 0307 	and.w	r3, r3, #7
20002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20002db0:	69fb      	ldr	r3, [r7, #28]
20002db2:	f1c3 0307 	rsb	r3, r3, #7
20002db6:	2b04      	cmp	r3, #4
20002db8:	bf28      	it	cs
20002dba:	2304      	movcs	r3, #4
20002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20002dbe:	69fb      	ldr	r3, [r7, #28]
20002dc0:	3304      	adds	r3, #4
20002dc2:	2b06      	cmp	r3, #6
20002dc4:	d902      	bls.n	20002dcc <NVIC_EncodePriority+0x30>
20002dc6:	69fb      	ldr	r3, [r7, #28]
20002dc8:	3b03      	subs	r3, #3
20002dca:	e000      	b.n	20002dce <NVIC_EncodePriority+0x32>
20002dcc:	2300      	movs	r3, #0
20002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20002dd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
20002dd4:	69bb      	ldr	r3, [r7, #24]
20002dd6:	fa02 f303 	lsl.w	r3, r2, r3
20002dda:	43da      	mvns	r2, r3
20002ddc:	68bb      	ldr	r3, [r7, #8]
20002dde:	401a      	ands	r2, r3
20002de0:	697b      	ldr	r3, [r7, #20]
20002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20002de4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
20002de8:	697b      	ldr	r3, [r7, #20]
20002dea:	fa01 f303 	lsl.w	r3, r1, r3
20002dee:	43d9      	mvns	r1, r3
20002df0:	687b      	ldr	r3, [r7, #4]
20002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20002df4:	4313      	orrs	r3, r2
         );
}
20002df6:	4618      	mov	r0, r3
20002df8:	3724      	adds	r7, #36	@ 0x24
20002dfa:	46bd      	mov	sp, r7
20002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20002e00:	4770      	bx	lr

20002e02 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
20002e02:	b480      	push	{r7}
20002e04:	b089      	sub	sp, #36	@ 0x24
20002e06:	af00      	add	r7, sp, #0
20002e08:	60f8      	str	r0, [r7, #12]
20002e0a:	60b9      	str	r1, [r7, #8]
20002e0c:	607a      	str	r2, [r7, #4]
20002e0e:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20002e10:	68bb      	ldr	r3, [r7, #8]
20002e12:	f003 0307 	and.w	r3, r3, #7
20002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20002e18:	69fb      	ldr	r3, [r7, #28]
20002e1a:	f1c3 0307 	rsb	r3, r3, #7
20002e1e:	2b04      	cmp	r3, #4
20002e20:	bf28      	it	cs
20002e22:	2304      	movcs	r3, #4
20002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20002e26:	69fb      	ldr	r3, [r7, #28]
20002e28:	3304      	adds	r3, #4
20002e2a:	2b06      	cmp	r3, #6
20002e2c:	d902      	bls.n	20002e34 <NVIC_DecodePriority+0x32>
20002e2e:	69fb      	ldr	r3, [r7, #28]
20002e30:	3b03      	subs	r3, #3
20002e32:	e000      	b.n	20002e36 <NVIC_DecodePriority+0x34>
20002e34:	2300      	movs	r3, #0
20002e36:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
20002e38:	68fa      	ldr	r2, [r7, #12]
20002e3a:	697b      	ldr	r3, [r7, #20]
20002e3c:	40da      	lsrs	r2, r3
20002e3e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
20002e42:	69bb      	ldr	r3, [r7, #24]
20002e44:	fa01 f303 	lsl.w	r3, r1, r3
20002e48:	43db      	mvns	r3, r3
20002e4a:	401a      	ands	r2, r3
20002e4c:	687b      	ldr	r3, [r7, #4]
20002e4e:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
20002e50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
20002e54:	697b      	ldr	r3, [r7, #20]
20002e56:	fa02 f303 	lsl.w	r3, r2, r3
20002e5a:	43da      	mvns	r2, r3
20002e5c:	68fb      	ldr	r3, [r7, #12]
20002e5e:	401a      	ands	r2, r3
20002e60:	683b      	ldr	r3, [r7, #0]
20002e62:	601a      	str	r2, [r3, #0]
}
20002e64:	bf00      	nop
20002e66:	3724      	adds	r7, #36	@ 0x24
20002e68:	46bd      	mov	sp, r7
20002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
20002e6e:	4770      	bx	lr

20002e70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
20002e70:	b480      	push	{r7}
20002e72:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
20002e74:	f3bf 8f4f 	dsb	sy
}
20002e78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20002e7a:	4b06      	ldr	r3, [pc, #24]	@ (20002e94 <__NVIC_SystemReset+0x24>)
20002e7c:	68db      	ldr	r3, [r3, #12]
20002e7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20002e82:	4904      	ldr	r1, [pc, #16]	@ (20002e94 <__NVIC_SystemReset+0x24>)
20002e84:	4b04      	ldr	r3, [pc, #16]	@ (20002e98 <__NVIC_SystemReset+0x28>)
20002e86:	4313      	orrs	r3, r2
20002e88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
20002e8a:	f3bf 8f4f 	dsb	sy
}
20002e8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
20002e90:	bf00      	nop
20002e92:	e7fd      	b.n	20002e90 <__NVIC_SystemReset+0x20>
20002e94:	e000ed00 	.word	0xe000ed00
20002e98:	05fa0004 	.word	0x05fa0004

20002e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20002e9c:	b580      	push	{r7, lr}
20002e9e:	b082      	sub	sp, #8
20002ea0:	af00      	add	r7, sp, #0
20002ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20002ea4:	687b      	ldr	r3, [r7, #4]
20002ea6:	3b01      	subs	r3, #1
20002ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
20002eac:	d301      	bcc.n	20002eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20002eae:	2301      	movs	r3, #1
20002eb0:	e00f      	b.n	20002ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20002eb2:	4a0a      	ldr	r2, [pc, #40]	@ (20002edc <SysTick_Config+0x40>)
20002eb4:	687b      	ldr	r3, [r7, #4]
20002eb6:	3b01      	subs	r3, #1
20002eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20002eba:	210f      	movs	r1, #15
20002ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20002ec0:	f7ff ff1a 	bl	20002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20002ec4:	4b05      	ldr	r3, [pc, #20]	@ (20002edc <SysTick_Config+0x40>)
20002ec6:	2200      	movs	r2, #0
20002ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20002eca:	4b04      	ldr	r3, [pc, #16]	@ (20002edc <SysTick_Config+0x40>)
20002ecc:	2207      	movs	r2, #7
20002ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20002ed0:	2300      	movs	r3, #0
}
20002ed2:	4618      	mov	r0, r3
20002ed4:	3708      	adds	r7, #8
20002ed6:	46bd      	mov	sp, r7
20002ed8:	bd80      	pop	{r7, pc}
20002eda:	bf00      	nop
20002edc:	e000e010 	.word	0xe000e010

20002ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20002ee0:	b580      	push	{r7, lr}
20002ee2:	b082      	sub	sp, #8
20002ee4:	af00      	add	r7, sp, #0
20002ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20002ee8:	6878      	ldr	r0, [r7, #4]
20002eea:	f7ff fe11 	bl	20002b10 <__NVIC_SetPriorityGrouping>
}
20002eee:	bf00      	nop
20002ef0:	3708      	adds	r7, #8
20002ef2:	46bd      	mov	sp, r7
20002ef4:	bd80      	pop	{r7, pc}

20002ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
20002ef6:	b580      	push	{r7, lr}
20002ef8:	b086      	sub	sp, #24
20002efa:	af00      	add	r7, sp, #0
20002efc:	4603      	mov	r3, r0
20002efe:	60b9      	str	r1, [r7, #8]
20002f00:	607a      	str	r2, [r7, #4]
20002f02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
20002f04:	f7ff fe28 	bl	20002b58 <__NVIC_GetPriorityGrouping>
20002f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20002f0a:	687a      	ldr	r2, [r7, #4]
20002f0c:	68b9      	ldr	r1, [r7, #8]
20002f0e:	6978      	ldr	r0, [r7, #20]
20002f10:	f7ff ff44 	bl	20002d9c <NVIC_EncodePriority>
20002f14:	4602      	mov	r2, r0
20002f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20002f1a:	4611      	mov	r1, r2
20002f1c:	4618      	mov	r0, r3
20002f1e:	f7ff feeb 	bl	20002cf8 <__NVIC_SetPriority>
}
20002f22:	bf00      	nop
20002f24:	3718      	adds	r7, #24
20002f26:	46bd      	mov	sp, r7
20002f28:	bd80      	pop	{r7, pc}

20002f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20002f2a:	b580      	push	{r7, lr}
20002f2c:	b082      	sub	sp, #8
20002f2e:	af00      	add	r7, sp, #0
20002f30:	4603      	mov	r3, r0
20002f32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20002f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002f38:	4618      	mov	r0, r3
20002f3a:	f7ff fe1b 	bl	20002b74 <__NVIC_EnableIRQ>
}
20002f3e:	bf00      	nop
20002f40:	3708      	adds	r7, #8
20002f42:	46bd      	mov	sp, r7
20002f44:	bd80      	pop	{r7, pc}

20002f46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
20002f46:	b580      	push	{r7, lr}
20002f48:	b082      	sub	sp, #8
20002f4a:	af00      	add	r7, sp, #0
20002f4c:	4603      	mov	r3, r0
20002f4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
20002f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20002f54:	4618      	mov	r0, r3
20002f56:	f7ff fe2b 	bl	20002bb0 <__NVIC_DisableIRQ>
}
20002f5a:	bf00      	nop
20002f5c:	3708      	adds	r7, #8
20002f5e:	46bd      	mov	sp, r7
20002f60:	bd80      	pop	{r7, pc}

20002f62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
20002f62:	b580      	push	{r7, lr}
20002f64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
20002f66:	f7ff ff83 	bl	20002e70 <__NVIC_SystemReset>

20002f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20002f6a:	b580      	push	{r7, lr}
20002f6c:	b082      	sub	sp, #8
20002f6e:	af00      	add	r7, sp, #0
20002f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20002f72:	6878      	ldr	r0, [r7, #4]
20002f74:	f7ff ff92 	bl	20002e9c <SysTick_Config>
20002f78:	4603      	mov	r3, r0
}
20002f7a:	4618      	mov	r0, r3
20002f7c:	3708      	adds	r7, #8
20002f7e:	46bd      	mov	sp, r7
20002f80:	bd80      	pop	{r7, pc}
	...

20002f84 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
20002f84:	b480      	push	{r7}
20002f86:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
20002f88:	f3bf 8f5f 	dmb	sy
}
20002f8c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
20002f8e:	4b07      	ldr	r3, [pc, #28]	@ (20002fac <HAL_MPU_Disable+0x28>)
20002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20002f92:	4a06      	ldr	r2, [pc, #24]	@ (20002fac <HAL_MPU_Disable+0x28>)
20002f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20002f98:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
20002f9a:	4b05      	ldr	r3, [pc, #20]	@ (20002fb0 <HAL_MPU_Disable+0x2c>)
20002f9c:	2200      	movs	r2, #0
20002f9e:	605a      	str	r2, [r3, #4]
}
20002fa0:	bf00      	nop
20002fa2:	46bd      	mov	sp, r7
20002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
20002fa8:	4770      	bx	lr
20002faa:	bf00      	nop
20002fac:	e000ed00 	.word	0xe000ed00
20002fb0:	e000ed90 	.word	0xe000ed90

20002fb4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
20002fb4:	b480      	push	{r7}
20002fb6:	b083      	sub	sp, #12
20002fb8:	af00      	add	r7, sp, #0
20002fba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
20002fbc:	4a0b      	ldr	r2, [pc, #44]	@ (20002fec <HAL_MPU_Enable+0x38>)
20002fbe:	687b      	ldr	r3, [r7, #4]
20002fc0:	f043 0301 	orr.w	r3, r3, #1
20002fc4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
20002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (20002ff0 <HAL_MPU_Enable+0x3c>)
20002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20002fca:	4a09      	ldr	r2, [pc, #36]	@ (20002ff0 <HAL_MPU_Enable+0x3c>)
20002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20002fd0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
20002fd2:	f3bf 8f4f 	dsb	sy
}
20002fd6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
20002fd8:	f3bf 8f6f 	isb	sy
}
20002fdc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
20002fde:	bf00      	nop
20002fe0:	370c      	adds	r7, #12
20002fe2:	46bd      	mov	sp, r7
20002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
20002fe8:	4770      	bx	lr
20002fea:	bf00      	nop
20002fec:	e000ed90 	.word	0xe000ed90
20002ff0:	e000ed00 	.word	0xe000ed00

20002ff4 <HAL_MPU_EnableRegion>:
/**
  * @brief  Enables the MPU Region.
  * @retval None
  */
void HAL_MPU_EnableRegion(uint32_t RegionNumber)
{
20002ff4:	b480      	push	{r7}
20002ff6:	b083      	sub	sp, #12
20002ff8:	af00      	add	r7, sp, #0
20002ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
20002ffc:	4a07      	ldr	r2, [pc, #28]	@ (2000301c <HAL_MPU_EnableRegion+0x28>)
20002ffe:	687b      	ldr	r3, [r7, #4]
20003000:	6093      	str	r3, [r2, #8]

  /* Enable the Region */
  SET_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
20003002:	4b06      	ldr	r3, [pc, #24]	@ (2000301c <HAL_MPU_EnableRegion+0x28>)
20003004:	691b      	ldr	r3, [r3, #16]
20003006:	4a05      	ldr	r2, [pc, #20]	@ (2000301c <HAL_MPU_EnableRegion+0x28>)
20003008:	f043 0301 	orr.w	r3, r3, #1
2000300c:	6113      	str	r3, [r2, #16]
}
2000300e:	bf00      	nop
20003010:	370c      	adds	r7, #12
20003012:	46bd      	mov	sp, r7
20003014:	f85d 7b04 	ldr.w	r7, [sp], #4
20003018:	4770      	bx	lr
2000301a:	bf00      	nop
2000301c:	e000ed90 	.word	0xe000ed90

20003020 <HAL_MPU_DisableRegion>:
/**
  * @brief  Disables the MPU Region.
  * @retval None
  */
void HAL_MPU_DisableRegion(uint32_t RegionNumber)
{
20003020:	b480      	push	{r7}
20003022:	b083      	sub	sp, #12
20003024:	af00      	add	r7, sp, #0
20003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
20003028:	4a07      	ldr	r2, [pc, #28]	@ (20003048 <HAL_MPU_DisableRegion+0x28>)
2000302a:	687b      	ldr	r3, [r7, #4]
2000302c:	6093      	str	r3, [r2, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
2000302e:	4b06      	ldr	r3, [pc, #24]	@ (20003048 <HAL_MPU_DisableRegion+0x28>)
20003030:	691b      	ldr	r3, [r3, #16]
20003032:	4a05      	ldr	r2, [pc, #20]	@ (20003048 <HAL_MPU_DisableRegion+0x28>)
20003034:	f023 0301 	bic.w	r3, r3, #1
20003038:	6113      	str	r3, [r2, #16]
}
2000303a:	bf00      	nop
2000303c:	370c      	adds	r7, #12
2000303e:	46bd      	mov	sp, r7
20003040:	f85d 7b04 	ldr.w	r7, [sp], #4
20003044:	4770      	bx	lr
20003046:	bf00      	nop
20003048:	e000ed90 	.word	0xe000ed90

2000304c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
2000304c:	b480      	push	{r7}
2000304e:	b083      	sub	sp, #12
20003050:	af00      	add	r7, sp, #0
20003052:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
20003054:	687b      	ldr	r3, [r7, #4]
20003056:	785a      	ldrb	r2, [r3, #1]
20003058:	4b1b      	ldr	r3, [pc, #108]	@ (200030c8 <HAL_MPU_ConfigRegion+0x7c>)
2000305a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
2000305c:	4b1a      	ldr	r3, [pc, #104]	@ (200030c8 <HAL_MPU_ConfigRegion+0x7c>)
2000305e:	691b      	ldr	r3, [r3, #16]
20003060:	4a19      	ldr	r2, [pc, #100]	@ (200030c8 <HAL_MPU_ConfigRegion+0x7c>)
20003062:	f023 0301 	bic.w	r3, r3, #1
20003066:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
20003068:	4a17      	ldr	r2, [pc, #92]	@ (200030c8 <HAL_MPU_ConfigRegion+0x7c>)
2000306a:	687b      	ldr	r3, [r7, #4]
2000306c:	685b      	ldr	r3, [r3, #4]
2000306e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20003070:	687b      	ldr	r3, [r7, #4]
20003072:	7b1b      	ldrb	r3, [r3, #12]
20003074:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
20003076:	687b      	ldr	r3, [r7, #4]
20003078:	7adb      	ldrb	r3, [r3, #11]
2000307a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2000307c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
2000307e:	687b      	ldr	r3, [r7, #4]
20003080:	7a9b      	ldrb	r3, [r3, #10]
20003082:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
20003084:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
20003086:	687b      	ldr	r3, [r7, #4]
20003088:	7b5b      	ldrb	r3, [r3, #13]
2000308a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
2000308c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
2000308e:	687b      	ldr	r3, [r7, #4]
20003090:	7b9b      	ldrb	r3, [r3, #14]
20003092:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
20003094:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
20003096:	687b      	ldr	r3, [r7, #4]
20003098:	7bdb      	ldrb	r3, [r3, #15]
2000309a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
2000309c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
2000309e:	687b      	ldr	r3, [r7, #4]
200030a0:	7a5b      	ldrb	r3, [r3, #9]
200030a2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200030a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200030a6:	687b      	ldr	r3, [r7, #4]
200030a8:	7a1b      	ldrb	r3, [r3, #8]
200030aa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200030ac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
200030ae:	687a      	ldr	r2, [r7, #4]
200030b0:	7812      	ldrb	r2, [r2, #0]
200030b2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200030b4:	4a04      	ldr	r2, [pc, #16]	@ (200030c8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200030b6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200030b8:	6113      	str	r3, [r2, #16]
}
200030ba:	bf00      	nop
200030bc:	370c      	adds	r7, #12
200030be:	46bd      	mov	sp, r7
200030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200030c4:	4770      	bx	lr
200030c6:	bf00      	nop
200030c8:	e000ed90 	.word	0xe000ed90

200030cc <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
200030cc:	b580      	push	{r7, lr}
200030ce:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
200030d0:	f7ff fd42 	bl	20002b58 <__NVIC_GetPriorityGrouping>
200030d4:	4603      	mov	r3, r0
}
200030d6:	4618      	mov	r0, r3
200030d8:	bd80      	pop	{r7, pc}

200030da <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
200030da:	b580      	push	{r7, lr}
200030dc:	b084      	sub	sp, #16
200030de:	af00      	add	r7, sp, #0
200030e0:	60b9      	str	r1, [r7, #8]
200030e2:	607a      	str	r2, [r7, #4]
200030e4:	603b      	str	r3, [r7, #0]
200030e6:	4603      	mov	r3, r0
200030e8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
200030ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
200030ee:	4618      	mov	r0, r3
200030f0:	f7ff fe2c 	bl	20002d4c <__NVIC_GetPriority>
200030f4:	683b      	ldr	r3, [r7, #0]
200030f6:	687a      	ldr	r2, [r7, #4]
200030f8:	68b9      	ldr	r1, [r7, #8]
200030fa:	f7ff fe82 	bl	20002e02 <NVIC_DecodePriority>
}
200030fe:	bf00      	nop
20003100:	3710      	adds	r7, #16
20003102:	46bd      	mov	sp, r7
20003104:	bd80      	pop	{r7, pc}

20003106 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20003106:	b580      	push	{r7, lr}
20003108:	b082      	sub	sp, #8
2000310a:	af00      	add	r7, sp, #0
2000310c:	4603      	mov	r3, r0
2000310e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
20003110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20003114:	4618      	mov	r0, r3
20003116:	f7ff fd91 	bl	20002c3c <__NVIC_SetPendingIRQ>
}
2000311a:	bf00      	nop
2000311c:	3708      	adds	r7, #8
2000311e:	46bd      	mov	sp, r7
20003120:	bd80      	pop	{r7, pc}

20003122 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20003122:	b580      	push	{r7, lr}
20003124:	b082      	sub	sp, #8
20003126:	af00      	add	r7, sp, #0
20003128:	4603      	mov	r3, r0
2000312a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
2000312c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20003130:	4618      	mov	r0, r3
20003132:	f7ff fd61 	bl	20002bf8 <__NVIC_GetPendingIRQ>
20003136:	4603      	mov	r3, r0
}
20003138:	4618      	mov	r0, r3
2000313a:	3708      	adds	r7, #8
2000313c:	46bd      	mov	sp, r7
2000313e:	bd80      	pop	{r7, pc}

20003140 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20003140:	b580      	push	{r7, lr}
20003142:	b082      	sub	sp, #8
20003144:	af00      	add	r7, sp, #0
20003146:	4603      	mov	r3, r0
20003148:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
2000314a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2000314e:	4618      	mov	r0, r3
20003150:	f7ff fd92 	bl	20002c78 <__NVIC_ClearPendingIRQ>
}
20003154:	bf00      	nop
20003156:	3708      	adds	r7, #8
20003158:	46bd      	mov	sp, r7
2000315a:	bd80      	pop	{r7, pc}

2000315c <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
2000315c:	b580      	push	{r7, lr}
2000315e:	b082      	sub	sp, #8
20003160:	af00      	add	r7, sp, #0
20003162:	4603      	mov	r3, r0
20003164:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
20003166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2000316a:	4618      	mov	r0, r3
2000316c:	f7ff fda2 	bl	20002cb4 <__NVIC_GetActive>
20003170:	4603      	mov	r3, r0
}
20003172:	4618      	mov	r0, r3
20003174:	3708      	adds	r7, #8
20003176:	46bd      	mov	sp, r7
20003178:	bd80      	pop	{r7, pc}
	...

2000317c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
2000317c:	b480      	push	{r7}
2000317e:	b083      	sub	sp, #12
20003180:	af00      	add	r7, sp, #0
20003182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
20003184:	687b      	ldr	r3, [r7, #4]
20003186:	2b04      	cmp	r3, #4
20003188:	d106      	bne.n	20003198 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
2000318a:	4b09      	ldr	r3, [pc, #36]	@ (200031b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
2000318c:	681b      	ldr	r3, [r3, #0]
2000318e:	4a08      	ldr	r2, [pc, #32]	@ (200031b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
20003190:	f043 0304 	orr.w	r3, r3, #4
20003194:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
20003196:	e005      	b.n	200031a4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
20003198:	4b05      	ldr	r3, [pc, #20]	@ (200031b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
2000319a:	681b      	ldr	r3, [r3, #0]
2000319c:	4a04      	ldr	r2, [pc, #16]	@ (200031b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
2000319e:	f023 0304 	bic.w	r3, r3, #4
200031a2:	6013      	str	r3, [r2, #0]
}
200031a4:	bf00      	nop
200031a6:	370c      	adds	r7, #12
200031a8:	46bd      	mov	sp, r7
200031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200031ae:	4770      	bx	lr
200031b0:	e000e010 	.word	0xe000e010

200031b4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
200031b4:	b580      	push	{r7, lr}
200031b6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
200031b8:	f000 f802 	bl	200031c0 <HAL_SYSTICK_Callback>
}
200031bc:	bf00      	nop
200031be:	bd80      	pop	{r7, pc}

200031c0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
200031c0:	b480      	push	{r7}
200031c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
200031c4:	bf00      	nop
200031c6:	46bd      	mov	sp, r7
200031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200031cc:	4770      	bx	lr

200031ce <HAL_GetCurrentCPUID>:
/**
* @brief  Returns the current CPU ID.
* @retval CPU identifier
*/
uint32_t HAL_GetCurrentCPUID(void)
{
200031ce:	b480      	push	{r7}
200031d0:	af00      	add	r7, sp, #0
  return  CM7_CPUID;
200031d2:	2303      	movs	r3, #3
}
200031d4:	4618      	mov	r0, r3
200031d6:	46bd      	mov	sp, r7
200031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200031dc:	4770      	bx	lr
	...

200031e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
200031e0:	b580      	push	{r7, lr}
200031e2:	b086      	sub	sp, #24
200031e4:	af00      	add	r7, sp, #0
200031e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
200031e8:	f7ff f86a 	bl	200022c0 <HAL_GetTick>
200031ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
200031ee:	687b      	ldr	r3, [r7, #4]
200031f0:	2b00      	cmp	r3, #0
200031f2:	d101      	bne.n	200031f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
200031f4:	2301      	movs	r3, #1
200031f6:	e316      	b.n	20003826 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
200031f8:	687b      	ldr	r3, [r7, #4]
200031fa:	681b      	ldr	r3, [r3, #0]
200031fc:	4a66      	ldr	r2, [pc, #408]	@ (20003398 <HAL_DMA_Init+0x1b8>)
200031fe:	4293      	cmp	r3, r2
20003200:	d04a      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003202:	687b      	ldr	r3, [r7, #4]
20003204:	681b      	ldr	r3, [r3, #0]
20003206:	4a65      	ldr	r2, [pc, #404]	@ (2000339c <HAL_DMA_Init+0x1bc>)
20003208:	4293      	cmp	r3, r2
2000320a:	d045      	beq.n	20003298 <HAL_DMA_Init+0xb8>
2000320c:	687b      	ldr	r3, [r7, #4]
2000320e:	681b      	ldr	r3, [r3, #0]
20003210:	4a63      	ldr	r2, [pc, #396]	@ (200033a0 <HAL_DMA_Init+0x1c0>)
20003212:	4293      	cmp	r3, r2
20003214:	d040      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003216:	687b      	ldr	r3, [r7, #4]
20003218:	681b      	ldr	r3, [r3, #0]
2000321a:	4a62      	ldr	r2, [pc, #392]	@ (200033a4 <HAL_DMA_Init+0x1c4>)
2000321c:	4293      	cmp	r3, r2
2000321e:	d03b      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003220:	687b      	ldr	r3, [r7, #4]
20003222:	681b      	ldr	r3, [r3, #0]
20003224:	4a60      	ldr	r2, [pc, #384]	@ (200033a8 <HAL_DMA_Init+0x1c8>)
20003226:	4293      	cmp	r3, r2
20003228:	d036      	beq.n	20003298 <HAL_DMA_Init+0xb8>
2000322a:	687b      	ldr	r3, [r7, #4]
2000322c:	681b      	ldr	r3, [r3, #0]
2000322e:	4a5f      	ldr	r2, [pc, #380]	@ (200033ac <HAL_DMA_Init+0x1cc>)
20003230:	4293      	cmp	r3, r2
20003232:	d031      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003234:	687b      	ldr	r3, [r7, #4]
20003236:	681b      	ldr	r3, [r3, #0]
20003238:	4a5d      	ldr	r2, [pc, #372]	@ (200033b0 <HAL_DMA_Init+0x1d0>)
2000323a:	4293      	cmp	r3, r2
2000323c:	d02c      	beq.n	20003298 <HAL_DMA_Init+0xb8>
2000323e:	687b      	ldr	r3, [r7, #4]
20003240:	681b      	ldr	r3, [r3, #0]
20003242:	4a5c      	ldr	r2, [pc, #368]	@ (200033b4 <HAL_DMA_Init+0x1d4>)
20003244:	4293      	cmp	r3, r2
20003246:	d027      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003248:	687b      	ldr	r3, [r7, #4]
2000324a:	681b      	ldr	r3, [r3, #0]
2000324c:	4a5a      	ldr	r2, [pc, #360]	@ (200033b8 <HAL_DMA_Init+0x1d8>)
2000324e:	4293      	cmp	r3, r2
20003250:	d022      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003252:	687b      	ldr	r3, [r7, #4]
20003254:	681b      	ldr	r3, [r3, #0]
20003256:	4a59      	ldr	r2, [pc, #356]	@ (200033bc <HAL_DMA_Init+0x1dc>)
20003258:	4293      	cmp	r3, r2
2000325a:	d01d      	beq.n	20003298 <HAL_DMA_Init+0xb8>
2000325c:	687b      	ldr	r3, [r7, #4]
2000325e:	681b      	ldr	r3, [r3, #0]
20003260:	4a57      	ldr	r2, [pc, #348]	@ (200033c0 <HAL_DMA_Init+0x1e0>)
20003262:	4293      	cmp	r3, r2
20003264:	d018      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003266:	687b      	ldr	r3, [r7, #4]
20003268:	681b      	ldr	r3, [r3, #0]
2000326a:	4a56      	ldr	r2, [pc, #344]	@ (200033c4 <HAL_DMA_Init+0x1e4>)
2000326c:	4293      	cmp	r3, r2
2000326e:	d013      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003270:	687b      	ldr	r3, [r7, #4]
20003272:	681b      	ldr	r3, [r3, #0]
20003274:	4a54      	ldr	r2, [pc, #336]	@ (200033c8 <HAL_DMA_Init+0x1e8>)
20003276:	4293      	cmp	r3, r2
20003278:	d00e      	beq.n	20003298 <HAL_DMA_Init+0xb8>
2000327a:	687b      	ldr	r3, [r7, #4]
2000327c:	681b      	ldr	r3, [r3, #0]
2000327e:	4a53      	ldr	r2, [pc, #332]	@ (200033cc <HAL_DMA_Init+0x1ec>)
20003280:	4293      	cmp	r3, r2
20003282:	d009      	beq.n	20003298 <HAL_DMA_Init+0xb8>
20003284:	687b      	ldr	r3, [r7, #4]
20003286:	681b      	ldr	r3, [r3, #0]
20003288:	4a51      	ldr	r2, [pc, #324]	@ (200033d0 <HAL_DMA_Init+0x1f0>)
2000328a:	4293      	cmp	r3, r2
2000328c:	d004      	beq.n	20003298 <HAL_DMA_Init+0xb8>
2000328e:	687b      	ldr	r3, [r7, #4]
20003290:	681b      	ldr	r3, [r3, #0]
20003292:	4a50      	ldr	r2, [pc, #320]	@ (200033d4 <HAL_DMA_Init+0x1f4>)
20003294:	4293      	cmp	r3, r2
20003296:	d101      	bne.n	2000329c <HAL_DMA_Init+0xbc>
20003298:	2301      	movs	r3, #1
2000329a:	e000      	b.n	2000329e <HAL_DMA_Init+0xbe>
2000329c:	2300      	movs	r3, #0
2000329e:	2b00      	cmp	r3, #0
200032a0:	f000 813b 	beq.w	2000351a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200032a4:	687b      	ldr	r3, [r7, #4]
200032a6:	2202      	movs	r2, #2
200032a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
200032ac:	687b      	ldr	r3, [r7, #4]
200032ae:	2200      	movs	r2, #0
200032b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
200032b4:	687b      	ldr	r3, [r7, #4]
200032b6:	681b      	ldr	r3, [r3, #0]
200032b8:	4a37      	ldr	r2, [pc, #220]	@ (20003398 <HAL_DMA_Init+0x1b8>)
200032ba:	4293      	cmp	r3, r2
200032bc:	d04a      	beq.n	20003354 <HAL_DMA_Init+0x174>
200032be:	687b      	ldr	r3, [r7, #4]
200032c0:	681b      	ldr	r3, [r3, #0]
200032c2:	4a36      	ldr	r2, [pc, #216]	@ (2000339c <HAL_DMA_Init+0x1bc>)
200032c4:	4293      	cmp	r3, r2
200032c6:	d045      	beq.n	20003354 <HAL_DMA_Init+0x174>
200032c8:	687b      	ldr	r3, [r7, #4]
200032ca:	681b      	ldr	r3, [r3, #0]
200032cc:	4a34      	ldr	r2, [pc, #208]	@ (200033a0 <HAL_DMA_Init+0x1c0>)
200032ce:	4293      	cmp	r3, r2
200032d0:	d040      	beq.n	20003354 <HAL_DMA_Init+0x174>
200032d2:	687b      	ldr	r3, [r7, #4]
200032d4:	681b      	ldr	r3, [r3, #0]
200032d6:	4a33      	ldr	r2, [pc, #204]	@ (200033a4 <HAL_DMA_Init+0x1c4>)
200032d8:	4293      	cmp	r3, r2
200032da:	d03b      	beq.n	20003354 <HAL_DMA_Init+0x174>
200032dc:	687b      	ldr	r3, [r7, #4]
200032de:	681b      	ldr	r3, [r3, #0]
200032e0:	4a31      	ldr	r2, [pc, #196]	@ (200033a8 <HAL_DMA_Init+0x1c8>)
200032e2:	4293      	cmp	r3, r2
200032e4:	d036      	beq.n	20003354 <HAL_DMA_Init+0x174>
200032e6:	687b      	ldr	r3, [r7, #4]
200032e8:	681b      	ldr	r3, [r3, #0]
200032ea:	4a30      	ldr	r2, [pc, #192]	@ (200033ac <HAL_DMA_Init+0x1cc>)
200032ec:	4293      	cmp	r3, r2
200032ee:	d031      	beq.n	20003354 <HAL_DMA_Init+0x174>
200032f0:	687b      	ldr	r3, [r7, #4]
200032f2:	681b      	ldr	r3, [r3, #0]
200032f4:	4a2e      	ldr	r2, [pc, #184]	@ (200033b0 <HAL_DMA_Init+0x1d0>)
200032f6:	4293      	cmp	r3, r2
200032f8:	d02c      	beq.n	20003354 <HAL_DMA_Init+0x174>
200032fa:	687b      	ldr	r3, [r7, #4]
200032fc:	681b      	ldr	r3, [r3, #0]
200032fe:	4a2d      	ldr	r2, [pc, #180]	@ (200033b4 <HAL_DMA_Init+0x1d4>)
20003300:	4293      	cmp	r3, r2
20003302:	d027      	beq.n	20003354 <HAL_DMA_Init+0x174>
20003304:	687b      	ldr	r3, [r7, #4]
20003306:	681b      	ldr	r3, [r3, #0]
20003308:	4a2b      	ldr	r2, [pc, #172]	@ (200033b8 <HAL_DMA_Init+0x1d8>)
2000330a:	4293      	cmp	r3, r2
2000330c:	d022      	beq.n	20003354 <HAL_DMA_Init+0x174>
2000330e:	687b      	ldr	r3, [r7, #4]
20003310:	681b      	ldr	r3, [r3, #0]
20003312:	4a2a      	ldr	r2, [pc, #168]	@ (200033bc <HAL_DMA_Init+0x1dc>)
20003314:	4293      	cmp	r3, r2
20003316:	d01d      	beq.n	20003354 <HAL_DMA_Init+0x174>
20003318:	687b      	ldr	r3, [r7, #4]
2000331a:	681b      	ldr	r3, [r3, #0]
2000331c:	4a28      	ldr	r2, [pc, #160]	@ (200033c0 <HAL_DMA_Init+0x1e0>)
2000331e:	4293      	cmp	r3, r2
20003320:	d018      	beq.n	20003354 <HAL_DMA_Init+0x174>
20003322:	687b      	ldr	r3, [r7, #4]
20003324:	681b      	ldr	r3, [r3, #0]
20003326:	4a27      	ldr	r2, [pc, #156]	@ (200033c4 <HAL_DMA_Init+0x1e4>)
20003328:	4293      	cmp	r3, r2
2000332a:	d013      	beq.n	20003354 <HAL_DMA_Init+0x174>
2000332c:	687b      	ldr	r3, [r7, #4]
2000332e:	681b      	ldr	r3, [r3, #0]
20003330:	4a25      	ldr	r2, [pc, #148]	@ (200033c8 <HAL_DMA_Init+0x1e8>)
20003332:	4293      	cmp	r3, r2
20003334:	d00e      	beq.n	20003354 <HAL_DMA_Init+0x174>
20003336:	687b      	ldr	r3, [r7, #4]
20003338:	681b      	ldr	r3, [r3, #0]
2000333a:	4a24      	ldr	r2, [pc, #144]	@ (200033cc <HAL_DMA_Init+0x1ec>)
2000333c:	4293      	cmp	r3, r2
2000333e:	d009      	beq.n	20003354 <HAL_DMA_Init+0x174>
20003340:	687b      	ldr	r3, [r7, #4]
20003342:	681b      	ldr	r3, [r3, #0]
20003344:	4a22      	ldr	r2, [pc, #136]	@ (200033d0 <HAL_DMA_Init+0x1f0>)
20003346:	4293      	cmp	r3, r2
20003348:	d004      	beq.n	20003354 <HAL_DMA_Init+0x174>
2000334a:	687b      	ldr	r3, [r7, #4]
2000334c:	681b      	ldr	r3, [r3, #0]
2000334e:	4a21      	ldr	r2, [pc, #132]	@ (200033d4 <HAL_DMA_Init+0x1f4>)
20003350:	4293      	cmp	r3, r2
20003352:	d108      	bne.n	20003366 <HAL_DMA_Init+0x186>
20003354:	687b      	ldr	r3, [r7, #4]
20003356:	681b      	ldr	r3, [r3, #0]
20003358:	681a      	ldr	r2, [r3, #0]
2000335a:	687b      	ldr	r3, [r7, #4]
2000335c:	681b      	ldr	r3, [r3, #0]
2000335e:	f022 0201 	bic.w	r2, r2, #1
20003362:	601a      	str	r2, [r3, #0]
20003364:	e007      	b.n	20003376 <HAL_DMA_Init+0x196>
20003366:	687b      	ldr	r3, [r7, #4]
20003368:	681b      	ldr	r3, [r3, #0]
2000336a:	681a      	ldr	r2, [r3, #0]
2000336c:	687b      	ldr	r3, [r7, #4]
2000336e:	681b      	ldr	r3, [r3, #0]
20003370:	f022 0201 	bic.w	r2, r2, #1
20003374:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
20003376:	e02f      	b.n	200033d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
20003378:	f7fe ffa2 	bl	200022c0 <HAL_GetTick>
2000337c:	4602      	mov	r2, r0
2000337e:	693b      	ldr	r3, [r7, #16]
20003380:	1ad3      	subs	r3, r2, r3
20003382:	2b05      	cmp	r3, #5
20003384:	d928      	bls.n	200033d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20003386:	687b      	ldr	r3, [r7, #4]
20003388:	2220      	movs	r2, #32
2000338a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
2000338c:	687b      	ldr	r3, [r7, #4]
2000338e:	2203      	movs	r2, #3
20003390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
20003394:	2301      	movs	r3, #1
20003396:	e246      	b.n	20003826 <HAL_DMA_Init+0x646>
20003398:	40020010 	.word	0x40020010
2000339c:	40020028 	.word	0x40020028
200033a0:	40020040 	.word	0x40020040
200033a4:	40020058 	.word	0x40020058
200033a8:	40020070 	.word	0x40020070
200033ac:	40020088 	.word	0x40020088
200033b0:	400200a0 	.word	0x400200a0
200033b4:	400200b8 	.word	0x400200b8
200033b8:	40020410 	.word	0x40020410
200033bc:	40020428 	.word	0x40020428
200033c0:	40020440 	.word	0x40020440
200033c4:	40020458 	.word	0x40020458
200033c8:	40020470 	.word	0x40020470
200033cc:	40020488 	.word	0x40020488
200033d0:	400204a0 	.word	0x400204a0
200033d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
200033d8:	687b      	ldr	r3, [r7, #4]
200033da:	681b      	ldr	r3, [r3, #0]
200033dc:	681b      	ldr	r3, [r3, #0]
200033de:	f003 0301 	and.w	r3, r3, #1
200033e2:	2b00      	cmp	r3, #0
200033e4:	d1c8      	bne.n	20003378 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
200033e6:	687b      	ldr	r3, [r7, #4]
200033e8:	681b      	ldr	r3, [r3, #0]
200033ea:	681b      	ldr	r3, [r3, #0]
200033ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
200033ee:	697a      	ldr	r2, [r7, #20]
200033f0:	4b83      	ldr	r3, [pc, #524]	@ (20003600 <HAL_DMA_Init+0x420>)
200033f2:	4013      	ands	r3, r2
200033f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
200033f6:	687b      	ldr	r3, [r7, #4]
200033f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200033fa:	687b      	ldr	r3, [r7, #4]
200033fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
200033fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20003400:	687b      	ldr	r3, [r7, #4]
20003402:	691b      	ldr	r3, [r3, #16]
20003404:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20003406:	687b      	ldr	r3, [r7, #4]
20003408:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2000340a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2000340c:	687b      	ldr	r3, [r7, #4]
2000340e:	699b      	ldr	r3, [r3, #24]
20003410:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
20003412:	687b      	ldr	r3, [r7, #4]
20003414:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20003416:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
20003418:	687b      	ldr	r3, [r7, #4]
2000341a:	6a1b      	ldr	r3, [r3, #32]
2000341c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
2000341e:	697a      	ldr	r2, [r7, #20]
20003420:	4313      	orrs	r3, r2
20003422:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
20003424:	687b      	ldr	r3, [r7, #4]
20003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20003428:	2b04      	cmp	r3, #4
2000342a:	d107      	bne.n	2000343c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
2000342c:	687b      	ldr	r3, [r7, #4]
2000342e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
20003430:	687b      	ldr	r3, [r7, #4]
20003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20003434:	4313      	orrs	r3, r2
20003436:	697a      	ldr	r2, [r7, #20]
20003438:	4313      	orrs	r3, r2
2000343a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
2000343c:	4b71      	ldr	r3, [pc, #452]	@ (20003604 <HAL_DMA_Init+0x424>)
2000343e:	681a      	ldr	r2, [r3, #0]
20003440:	4b71      	ldr	r3, [pc, #452]	@ (20003608 <HAL_DMA_Init+0x428>)
20003442:	4013      	ands	r3, r2
20003444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20003448:	d328      	bcc.n	2000349c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
2000344a:	687b      	ldr	r3, [r7, #4]
2000344c:	685b      	ldr	r3, [r3, #4]
2000344e:	2b28      	cmp	r3, #40	@ 0x28
20003450:	d903      	bls.n	2000345a <HAL_DMA_Init+0x27a>
20003452:	687b      	ldr	r3, [r7, #4]
20003454:	685b      	ldr	r3, [r3, #4]
20003456:	2b2e      	cmp	r3, #46	@ 0x2e
20003458:	d917      	bls.n	2000348a <HAL_DMA_Init+0x2aa>
2000345a:	687b      	ldr	r3, [r7, #4]
2000345c:	685b      	ldr	r3, [r3, #4]
2000345e:	2b3e      	cmp	r3, #62	@ 0x3e
20003460:	d903      	bls.n	2000346a <HAL_DMA_Init+0x28a>
20003462:	687b      	ldr	r3, [r7, #4]
20003464:	685b      	ldr	r3, [r3, #4]
20003466:	2b42      	cmp	r3, #66	@ 0x42
20003468:	d90f      	bls.n	2000348a <HAL_DMA_Init+0x2aa>
2000346a:	687b      	ldr	r3, [r7, #4]
2000346c:	685b      	ldr	r3, [r3, #4]
2000346e:	2b46      	cmp	r3, #70	@ 0x46
20003470:	d903      	bls.n	2000347a <HAL_DMA_Init+0x29a>
20003472:	687b      	ldr	r3, [r7, #4]
20003474:	685b      	ldr	r3, [r3, #4]
20003476:	2b48      	cmp	r3, #72	@ 0x48
20003478:	d907      	bls.n	2000348a <HAL_DMA_Init+0x2aa>
2000347a:	687b      	ldr	r3, [r7, #4]
2000347c:	685b      	ldr	r3, [r3, #4]
2000347e:	2b4e      	cmp	r3, #78	@ 0x4e
20003480:	d905      	bls.n	2000348e <HAL_DMA_Init+0x2ae>
20003482:	687b      	ldr	r3, [r7, #4]
20003484:	685b      	ldr	r3, [r3, #4]
20003486:	2b52      	cmp	r3, #82	@ 0x52
20003488:	d801      	bhi.n	2000348e <HAL_DMA_Init+0x2ae>
2000348a:	2301      	movs	r3, #1
2000348c:	e000      	b.n	20003490 <HAL_DMA_Init+0x2b0>
2000348e:	2300      	movs	r3, #0
20003490:	2b00      	cmp	r3, #0
20003492:	d003      	beq.n	2000349c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
20003494:	697b      	ldr	r3, [r7, #20]
20003496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
2000349a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
2000349c:	687b      	ldr	r3, [r7, #4]
2000349e:	681b      	ldr	r3, [r3, #0]
200034a0:	697a      	ldr	r2, [r7, #20]
200034a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
200034a4:	687b      	ldr	r3, [r7, #4]
200034a6:	681b      	ldr	r3, [r3, #0]
200034a8:	695b      	ldr	r3, [r3, #20]
200034aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
200034ac:	697b      	ldr	r3, [r7, #20]
200034ae:	f023 0307 	bic.w	r3, r3, #7
200034b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
200034b4:	687b      	ldr	r3, [r7, #4]
200034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200034b8:	697a      	ldr	r2, [r7, #20]
200034ba:	4313      	orrs	r3, r2
200034bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
200034be:	687b      	ldr	r3, [r7, #4]
200034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200034c2:	2b04      	cmp	r3, #4
200034c4:	d117      	bne.n	200034f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
200034c6:	687b      	ldr	r3, [r7, #4]
200034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200034ca:	697a      	ldr	r2, [r7, #20]
200034cc:	4313      	orrs	r3, r2
200034ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
200034d0:	687b      	ldr	r3, [r7, #4]
200034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200034d4:	2b00      	cmp	r3, #0
200034d6:	d00e      	beq.n	200034f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
200034d8:	6878      	ldr	r0, [r7, #4]
200034da:	f003 fa95 	bl	20006a08 <DMA_CheckFifoParam>
200034de:	4603      	mov	r3, r0
200034e0:	2b00      	cmp	r3, #0
200034e2:	d008      	beq.n	200034f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
200034e4:	687b      	ldr	r3, [r7, #4]
200034e6:	2240      	movs	r2, #64	@ 0x40
200034e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
200034ea:	687b      	ldr	r3, [r7, #4]
200034ec:	2201      	movs	r2, #1
200034ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
200034f2:	2301      	movs	r3, #1
200034f4:	e197      	b.n	20003826 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
200034f6:	687b      	ldr	r3, [r7, #4]
200034f8:	681b      	ldr	r3, [r3, #0]
200034fa:	697a      	ldr	r2, [r7, #20]
200034fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
200034fe:	6878      	ldr	r0, [r7, #4]
20003500:	f003 f9d0 	bl	200068a4 <DMA_CalcBaseAndBitshift>
20003504:	4603      	mov	r3, r0
20003506:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
20003508:	687b      	ldr	r3, [r7, #4]
2000350a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2000350c:	f003 031f 	and.w	r3, r3, #31
20003510:	223f      	movs	r2, #63	@ 0x3f
20003512:	409a      	lsls	r2, r3
20003514:	68bb      	ldr	r3, [r7, #8]
20003516:	609a      	str	r2, [r3, #8]
20003518:	e0cd      	b.n	200036b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2000351a:	687b      	ldr	r3, [r7, #4]
2000351c:	681b      	ldr	r3, [r3, #0]
2000351e:	4a3b      	ldr	r2, [pc, #236]	@ (2000360c <HAL_DMA_Init+0x42c>)
20003520:	4293      	cmp	r3, r2
20003522:	d022      	beq.n	2000356a <HAL_DMA_Init+0x38a>
20003524:	687b      	ldr	r3, [r7, #4]
20003526:	681b      	ldr	r3, [r3, #0]
20003528:	4a39      	ldr	r2, [pc, #228]	@ (20003610 <HAL_DMA_Init+0x430>)
2000352a:	4293      	cmp	r3, r2
2000352c:	d01d      	beq.n	2000356a <HAL_DMA_Init+0x38a>
2000352e:	687b      	ldr	r3, [r7, #4]
20003530:	681b      	ldr	r3, [r3, #0]
20003532:	4a38      	ldr	r2, [pc, #224]	@ (20003614 <HAL_DMA_Init+0x434>)
20003534:	4293      	cmp	r3, r2
20003536:	d018      	beq.n	2000356a <HAL_DMA_Init+0x38a>
20003538:	687b      	ldr	r3, [r7, #4]
2000353a:	681b      	ldr	r3, [r3, #0]
2000353c:	4a36      	ldr	r2, [pc, #216]	@ (20003618 <HAL_DMA_Init+0x438>)
2000353e:	4293      	cmp	r3, r2
20003540:	d013      	beq.n	2000356a <HAL_DMA_Init+0x38a>
20003542:	687b      	ldr	r3, [r7, #4]
20003544:	681b      	ldr	r3, [r3, #0]
20003546:	4a35      	ldr	r2, [pc, #212]	@ (2000361c <HAL_DMA_Init+0x43c>)
20003548:	4293      	cmp	r3, r2
2000354a:	d00e      	beq.n	2000356a <HAL_DMA_Init+0x38a>
2000354c:	687b      	ldr	r3, [r7, #4]
2000354e:	681b      	ldr	r3, [r3, #0]
20003550:	4a33      	ldr	r2, [pc, #204]	@ (20003620 <HAL_DMA_Init+0x440>)
20003552:	4293      	cmp	r3, r2
20003554:	d009      	beq.n	2000356a <HAL_DMA_Init+0x38a>
20003556:	687b      	ldr	r3, [r7, #4]
20003558:	681b      	ldr	r3, [r3, #0]
2000355a:	4a32      	ldr	r2, [pc, #200]	@ (20003624 <HAL_DMA_Init+0x444>)
2000355c:	4293      	cmp	r3, r2
2000355e:	d004      	beq.n	2000356a <HAL_DMA_Init+0x38a>
20003560:	687b      	ldr	r3, [r7, #4]
20003562:	681b      	ldr	r3, [r3, #0]
20003564:	4a30      	ldr	r2, [pc, #192]	@ (20003628 <HAL_DMA_Init+0x448>)
20003566:	4293      	cmp	r3, r2
20003568:	d101      	bne.n	2000356e <HAL_DMA_Init+0x38e>
2000356a:	2301      	movs	r3, #1
2000356c:	e000      	b.n	20003570 <HAL_DMA_Init+0x390>
2000356e:	2300      	movs	r3, #0
20003570:	2b00      	cmp	r3, #0
20003572:	f000 8097 	beq.w	200036a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
20003576:	687b      	ldr	r3, [r7, #4]
20003578:	681b      	ldr	r3, [r3, #0]
2000357a:	4a24      	ldr	r2, [pc, #144]	@ (2000360c <HAL_DMA_Init+0x42c>)
2000357c:	4293      	cmp	r3, r2
2000357e:	d021      	beq.n	200035c4 <HAL_DMA_Init+0x3e4>
20003580:	687b      	ldr	r3, [r7, #4]
20003582:	681b      	ldr	r3, [r3, #0]
20003584:	4a22      	ldr	r2, [pc, #136]	@ (20003610 <HAL_DMA_Init+0x430>)
20003586:	4293      	cmp	r3, r2
20003588:	d01c      	beq.n	200035c4 <HAL_DMA_Init+0x3e4>
2000358a:	687b      	ldr	r3, [r7, #4]
2000358c:	681b      	ldr	r3, [r3, #0]
2000358e:	4a21      	ldr	r2, [pc, #132]	@ (20003614 <HAL_DMA_Init+0x434>)
20003590:	4293      	cmp	r3, r2
20003592:	d017      	beq.n	200035c4 <HAL_DMA_Init+0x3e4>
20003594:	687b      	ldr	r3, [r7, #4]
20003596:	681b      	ldr	r3, [r3, #0]
20003598:	4a1f      	ldr	r2, [pc, #124]	@ (20003618 <HAL_DMA_Init+0x438>)
2000359a:	4293      	cmp	r3, r2
2000359c:	d012      	beq.n	200035c4 <HAL_DMA_Init+0x3e4>
2000359e:	687b      	ldr	r3, [r7, #4]
200035a0:	681b      	ldr	r3, [r3, #0]
200035a2:	4a1e      	ldr	r2, [pc, #120]	@ (2000361c <HAL_DMA_Init+0x43c>)
200035a4:	4293      	cmp	r3, r2
200035a6:	d00d      	beq.n	200035c4 <HAL_DMA_Init+0x3e4>
200035a8:	687b      	ldr	r3, [r7, #4]
200035aa:	681b      	ldr	r3, [r3, #0]
200035ac:	4a1c      	ldr	r2, [pc, #112]	@ (20003620 <HAL_DMA_Init+0x440>)
200035ae:	4293      	cmp	r3, r2
200035b0:	d008      	beq.n	200035c4 <HAL_DMA_Init+0x3e4>
200035b2:	687b      	ldr	r3, [r7, #4]
200035b4:	681b      	ldr	r3, [r3, #0]
200035b6:	4a1b      	ldr	r2, [pc, #108]	@ (20003624 <HAL_DMA_Init+0x444>)
200035b8:	4293      	cmp	r3, r2
200035ba:	d003      	beq.n	200035c4 <HAL_DMA_Init+0x3e4>
200035bc:	687b      	ldr	r3, [r7, #4]
200035be:	681b      	ldr	r3, [r3, #0]
200035c0:	4a19      	ldr	r2, [pc, #100]	@ (20003628 <HAL_DMA_Init+0x448>)
200035c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200035c4:	687b      	ldr	r3, [r7, #4]
200035c6:	2202      	movs	r2, #2
200035c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
200035cc:	687b      	ldr	r3, [r7, #4]
200035ce:	2200      	movs	r2, #0
200035d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
200035d4:	687b      	ldr	r3, [r7, #4]
200035d6:	681b      	ldr	r3, [r3, #0]
200035d8:	681b      	ldr	r3, [r3, #0]
200035da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
200035dc:	697a      	ldr	r2, [r7, #20]
200035de:	4b13      	ldr	r3, [pc, #76]	@ (2000362c <HAL_DMA_Init+0x44c>)
200035e0:	4013      	ands	r3, r2
200035e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
200035e4:	687b      	ldr	r3, [r7, #4]
200035e6:	689b      	ldr	r3, [r3, #8]
200035e8:	2b40      	cmp	r3, #64	@ 0x40
200035ea:	d021      	beq.n	20003630 <HAL_DMA_Init+0x450>
200035ec:	687b      	ldr	r3, [r7, #4]
200035ee:	689b      	ldr	r3, [r3, #8]
200035f0:	2b80      	cmp	r3, #128	@ 0x80
200035f2:	d102      	bne.n	200035fa <HAL_DMA_Init+0x41a>
200035f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
200035f8:	e01b      	b.n	20003632 <HAL_DMA_Init+0x452>
200035fa:	2300      	movs	r3, #0
200035fc:	e019      	b.n	20003632 <HAL_DMA_Init+0x452>
200035fe:	bf00      	nop
20003600:	fe10803f 	.word	0xfe10803f
20003604:	5c001000 	.word	0x5c001000
20003608:	ffff0000 	.word	0xffff0000
2000360c:	58025408 	.word	0x58025408
20003610:	5802541c 	.word	0x5802541c
20003614:	58025430 	.word	0x58025430
20003618:	58025444 	.word	0x58025444
2000361c:	58025458 	.word	0x58025458
20003620:	5802546c 	.word	0x5802546c
20003624:	58025480 	.word	0x58025480
20003628:	58025494 	.word	0x58025494
2000362c:	fffe000f 	.word	0xfffe000f
20003630:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
20003632:	687a      	ldr	r2, [r7, #4]
20003634:	68d2      	ldr	r2, [r2, #12]
20003636:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
20003638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
2000363a:	687b      	ldr	r3, [r7, #4]
2000363c:	691b      	ldr	r3, [r3, #16]
2000363e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
20003640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
20003642:	687b      	ldr	r3, [r7, #4]
20003644:	695b      	ldr	r3, [r3, #20]
20003646:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
20003648:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
2000364a:	687b      	ldr	r3, [r7, #4]
2000364c:	699b      	ldr	r3, [r3, #24]
2000364e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
20003650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
20003652:	687b      	ldr	r3, [r7, #4]
20003654:	69db      	ldr	r3, [r3, #28]
20003656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
20003658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
2000365a:	687b      	ldr	r3, [r7, #4]
2000365c:	6a1b      	ldr	r3, [r3, #32]
2000365e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
20003660:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
20003662:	697a      	ldr	r2, [r7, #20]
20003664:	4313      	orrs	r3, r2
20003666:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
20003668:	687b      	ldr	r3, [r7, #4]
2000366a:	681b      	ldr	r3, [r3, #0]
2000366c:	697a      	ldr	r2, [r7, #20]
2000366e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
20003670:	687b      	ldr	r3, [r7, #4]
20003672:	681b      	ldr	r3, [r3, #0]
20003674:	461a      	mov	r2, r3
20003676:	4b6e      	ldr	r3, [pc, #440]	@ (20003830 <HAL_DMA_Init+0x650>)
20003678:	4413      	add	r3, r2
2000367a:	4a6e      	ldr	r2, [pc, #440]	@ (20003834 <HAL_DMA_Init+0x654>)
2000367c:	fba2 2303 	umull	r2, r3, r2, r3
20003680:	091b      	lsrs	r3, r3, #4
20003682:	009a      	lsls	r2, r3, #2
20003684:	687b      	ldr	r3, [r7, #4]
20003686:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
20003688:	6878      	ldr	r0, [r7, #4]
2000368a:	f003 f90b 	bl	200068a4 <DMA_CalcBaseAndBitshift>
2000368e:	4603      	mov	r3, r0
20003690:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
20003692:	687b      	ldr	r3, [r7, #4]
20003694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20003696:	f003 031f 	and.w	r3, r3, #31
2000369a:	2201      	movs	r2, #1
2000369c:	409a      	lsls	r2, r3
2000369e:	68fb      	ldr	r3, [r7, #12]
200036a0:	605a      	str	r2, [r3, #4]
200036a2:	e008      	b.n	200036b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
200036a4:	687b      	ldr	r3, [r7, #4]
200036a6:	2240      	movs	r2, #64	@ 0x40
200036a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
200036aa:	687b      	ldr	r3, [r7, #4]
200036ac:	2203      	movs	r2, #3
200036ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
200036b2:	2301      	movs	r3, #1
200036b4:	e0b7      	b.n	20003826 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
200036b6:	687b      	ldr	r3, [r7, #4]
200036b8:	681b      	ldr	r3, [r3, #0]
200036ba:	4a5f      	ldr	r2, [pc, #380]	@ (20003838 <HAL_DMA_Init+0x658>)
200036bc:	4293      	cmp	r3, r2
200036be:	d072      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
200036c0:	687b      	ldr	r3, [r7, #4]
200036c2:	681b      	ldr	r3, [r3, #0]
200036c4:	4a5d      	ldr	r2, [pc, #372]	@ (2000383c <HAL_DMA_Init+0x65c>)
200036c6:	4293      	cmp	r3, r2
200036c8:	d06d      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
200036ca:	687b      	ldr	r3, [r7, #4]
200036cc:	681b      	ldr	r3, [r3, #0]
200036ce:	4a5c      	ldr	r2, [pc, #368]	@ (20003840 <HAL_DMA_Init+0x660>)
200036d0:	4293      	cmp	r3, r2
200036d2:	d068      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
200036d4:	687b      	ldr	r3, [r7, #4]
200036d6:	681b      	ldr	r3, [r3, #0]
200036d8:	4a5a      	ldr	r2, [pc, #360]	@ (20003844 <HAL_DMA_Init+0x664>)
200036da:	4293      	cmp	r3, r2
200036dc:	d063      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
200036de:	687b      	ldr	r3, [r7, #4]
200036e0:	681b      	ldr	r3, [r3, #0]
200036e2:	4a59      	ldr	r2, [pc, #356]	@ (20003848 <HAL_DMA_Init+0x668>)
200036e4:	4293      	cmp	r3, r2
200036e6:	d05e      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
200036e8:	687b      	ldr	r3, [r7, #4]
200036ea:	681b      	ldr	r3, [r3, #0]
200036ec:	4a57      	ldr	r2, [pc, #348]	@ (2000384c <HAL_DMA_Init+0x66c>)
200036ee:	4293      	cmp	r3, r2
200036f0:	d059      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
200036f2:	687b      	ldr	r3, [r7, #4]
200036f4:	681b      	ldr	r3, [r3, #0]
200036f6:	4a56      	ldr	r2, [pc, #344]	@ (20003850 <HAL_DMA_Init+0x670>)
200036f8:	4293      	cmp	r3, r2
200036fa:	d054      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
200036fc:	687b      	ldr	r3, [r7, #4]
200036fe:	681b      	ldr	r3, [r3, #0]
20003700:	4a54      	ldr	r2, [pc, #336]	@ (20003854 <HAL_DMA_Init+0x674>)
20003702:	4293      	cmp	r3, r2
20003704:	d04f      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003706:	687b      	ldr	r3, [r7, #4]
20003708:	681b      	ldr	r3, [r3, #0]
2000370a:	4a53      	ldr	r2, [pc, #332]	@ (20003858 <HAL_DMA_Init+0x678>)
2000370c:	4293      	cmp	r3, r2
2000370e:	d04a      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003710:	687b      	ldr	r3, [r7, #4]
20003712:	681b      	ldr	r3, [r3, #0]
20003714:	4a51      	ldr	r2, [pc, #324]	@ (2000385c <HAL_DMA_Init+0x67c>)
20003716:	4293      	cmp	r3, r2
20003718:	d045      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
2000371a:	687b      	ldr	r3, [r7, #4]
2000371c:	681b      	ldr	r3, [r3, #0]
2000371e:	4a50      	ldr	r2, [pc, #320]	@ (20003860 <HAL_DMA_Init+0x680>)
20003720:	4293      	cmp	r3, r2
20003722:	d040      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003724:	687b      	ldr	r3, [r7, #4]
20003726:	681b      	ldr	r3, [r3, #0]
20003728:	4a4e      	ldr	r2, [pc, #312]	@ (20003864 <HAL_DMA_Init+0x684>)
2000372a:	4293      	cmp	r3, r2
2000372c:	d03b      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
2000372e:	687b      	ldr	r3, [r7, #4]
20003730:	681b      	ldr	r3, [r3, #0]
20003732:	4a4d      	ldr	r2, [pc, #308]	@ (20003868 <HAL_DMA_Init+0x688>)
20003734:	4293      	cmp	r3, r2
20003736:	d036      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003738:	687b      	ldr	r3, [r7, #4]
2000373a:	681b      	ldr	r3, [r3, #0]
2000373c:	4a4b      	ldr	r2, [pc, #300]	@ (2000386c <HAL_DMA_Init+0x68c>)
2000373e:	4293      	cmp	r3, r2
20003740:	d031      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003742:	687b      	ldr	r3, [r7, #4]
20003744:	681b      	ldr	r3, [r3, #0]
20003746:	4a4a      	ldr	r2, [pc, #296]	@ (20003870 <HAL_DMA_Init+0x690>)
20003748:	4293      	cmp	r3, r2
2000374a:	d02c      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
2000374c:	687b      	ldr	r3, [r7, #4]
2000374e:	681b      	ldr	r3, [r3, #0]
20003750:	4a48      	ldr	r2, [pc, #288]	@ (20003874 <HAL_DMA_Init+0x694>)
20003752:	4293      	cmp	r3, r2
20003754:	d027      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003756:	687b      	ldr	r3, [r7, #4]
20003758:	681b      	ldr	r3, [r3, #0]
2000375a:	4a47      	ldr	r2, [pc, #284]	@ (20003878 <HAL_DMA_Init+0x698>)
2000375c:	4293      	cmp	r3, r2
2000375e:	d022      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003760:	687b      	ldr	r3, [r7, #4]
20003762:	681b      	ldr	r3, [r3, #0]
20003764:	4a45      	ldr	r2, [pc, #276]	@ (2000387c <HAL_DMA_Init+0x69c>)
20003766:	4293      	cmp	r3, r2
20003768:	d01d      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
2000376a:	687b      	ldr	r3, [r7, #4]
2000376c:	681b      	ldr	r3, [r3, #0]
2000376e:	4a44      	ldr	r2, [pc, #272]	@ (20003880 <HAL_DMA_Init+0x6a0>)
20003770:	4293      	cmp	r3, r2
20003772:	d018      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003774:	687b      	ldr	r3, [r7, #4]
20003776:	681b      	ldr	r3, [r3, #0]
20003778:	4a42      	ldr	r2, [pc, #264]	@ (20003884 <HAL_DMA_Init+0x6a4>)
2000377a:	4293      	cmp	r3, r2
2000377c:	d013      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
2000377e:	687b      	ldr	r3, [r7, #4]
20003780:	681b      	ldr	r3, [r3, #0]
20003782:	4a41      	ldr	r2, [pc, #260]	@ (20003888 <HAL_DMA_Init+0x6a8>)
20003784:	4293      	cmp	r3, r2
20003786:	d00e      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003788:	687b      	ldr	r3, [r7, #4]
2000378a:	681b      	ldr	r3, [r3, #0]
2000378c:	4a3f      	ldr	r2, [pc, #252]	@ (2000388c <HAL_DMA_Init+0x6ac>)
2000378e:	4293      	cmp	r3, r2
20003790:	d009      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
20003792:	687b      	ldr	r3, [r7, #4]
20003794:	681b      	ldr	r3, [r3, #0]
20003796:	4a3e      	ldr	r2, [pc, #248]	@ (20003890 <HAL_DMA_Init+0x6b0>)
20003798:	4293      	cmp	r3, r2
2000379a:	d004      	beq.n	200037a6 <HAL_DMA_Init+0x5c6>
2000379c:	687b      	ldr	r3, [r7, #4]
2000379e:	681b      	ldr	r3, [r3, #0]
200037a0:	4a3c      	ldr	r2, [pc, #240]	@ (20003894 <HAL_DMA_Init+0x6b4>)
200037a2:	4293      	cmp	r3, r2
200037a4:	d101      	bne.n	200037aa <HAL_DMA_Init+0x5ca>
200037a6:	2301      	movs	r3, #1
200037a8:	e000      	b.n	200037ac <HAL_DMA_Init+0x5cc>
200037aa:	2300      	movs	r3, #0
200037ac:	2b00      	cmp	r3, #0
200037ae:	d032      	beq.n	20003816 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
200037b0:	6878      	ldr	r0, [r7, #4]
200037b2:	f003 f9a5 	bl	20006b00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
200037b6:	687b      	ldr	r3, [r7, #4]
200037b8:	689b      	ldr	r3, [r3, #8]
200037ba:	2b80      	cmp	r3, #128	@ 0x80
200037bc:	d102      	bne.n	200037c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
200037be:	687b      	ldr	r3, [r7, #4]
200037c0:	2200      	movs	r2, #0
200037c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
200037c4:	687b      	ldr	r3, [r7, #4]
200037c6:	685a      	ldr	r2, [r3, #4]
200037c8:	687b      	ldr	r3, [r7, #4]
200037ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200037cc:	b2d2      	uxtb	r2, r2
200037ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
200037d0:	687b      	ldr	r3, [r7, #4]
200037d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200037d4:	687a      	ldr	r2, [r7, #4]
200037d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
200037d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
200037da:	687b      	ldr	r3, [r7, #4]
200037dc:	685b      	ldr	r3, [r3, #4]
200037de:	2b00      	cmp	r3, #0
200037e0:	d010      	beq.n	20003804 <HAL_DMA_Init+0x624>
200037e2:	687b      	ldr	r3, [r7, #4]
200037e4:	685b      	ldr	r3, [r3, #4]
200037e6:	2b08      	cmp	r3, #8
200037e8:	d80c      	bhi.n	20003804 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
200037ea:	6878      	ldr	r0, [r7, #4]
200037ec:	f003 fa22 	bl	20006c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
200037f0:	687b      	ldr	r3, [r7, #4]
200037f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200037f4:	2200      	movs	r2, #0
200037f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
200037f8:	687b      	ldr	r3, [r7, #4]
200037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200037fc:	687a      	ldr	r2, [r7, #4]
200037fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
20003800:	605a      	str	r2, [r3, #4]
20003802:	e008      	b.n	20003816 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
20003804:	687b      	ldr	r3, [r7, #4]
20003806:	2200      	movs	r2, #0
20003808:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
2000380a:	687b      	ldr	r3, [r7, #4]
2000380c:	2200      	movs	r2, #0
2000380e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
20003810:	687b      	ldr	r3, [r7, #4]
20003812:	2200      	movs	r2, #0
20003814:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20003816:	687b      	ldr	r3, [r7, #4]
20003818:	2200      	movs	r2, #0
2000381a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
2000381c:	687b      	ldr	r3, [r7, #4]
2000381e:	2201      	movs	r2, #1
20003820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
20003824:	2300      	movs	r3, #0
}
20003826:	4618      	mov	r0, r3
20003828:	3718      	adds	r7, #24
2000382a:	46bd      	mov	sp, r7
2000382c:	bd80      	pop	{r7, pc}
2000382e:	bf00      	nop
20003830:	a7fdabf8 	.word	0xa7fdabf8
20003834:	cccccccd 	.word	0xcccccccd
20003838:	40020010 	.word	0x40020010
2000383c:	40020028 	.word	0x40020028
20003840:	40020040 	.word	0x40020040
20003844:	40020058 	.word	0x40020058
20003848:	40020070 	.word	0x40020070
2000384c:	40020088 	.word	0x40020088
20003850:	400200a0 	.word	0x400200a0
20003854:	400200b8 	.word	0x400200b8
20003858:	40020410 	.word	0x40020410
2000385c:	40020428 	.word	0x40020428
20003860:	40020440 	.word	0x40020440
20003864:	40020458 	.word	0x40020458
20003868:	40020470 	.word	0x40020470
2000386c:	40020488 	.word	0x40020488
20003870:	400204a0 	.word	0x400204a0
20003874:	400204b8 	.word	0x400204b8
20003878:	58025408 	.word	0x58025408
2000387c:	5802541c 	.word	0x5802541c
20003880:	58025430 	.word	0x58025430
20003884:	58025444 	.word	0x58025444
20003888:	58025458 	.word	0x58025458
2000388c:	5802546c 	.word	0x5802546c
20003890:	58025480 	.word	0x58025480
20003894:	58025494 	.word	0x58025494

20003898 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
20003898:	b580      	push	{r7, lr}
2000389a:	b084      	sub	sp, #16
2000389c:	af00      	add	r7, sp, #0
2000389e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
200038a0:	687b      	ldr	r3, [r7, #4]
200038a2:	2b00      	cmp	r3, #0
200038a4:	d101      	bne.n	200038aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
200038a6:	2301      	movs	r3, #1
200038a8:	e1a8      	b.n	20003bfc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
200038aa:	687b      	ldr	r3, [r7, #4]
200038ac:	681b      	ldr	r3, [r3, #0]
200038ae:	4a82      	ldr	r2, [pc, #520]	@ (20003ab8 <HAL_DMA_DeInit+0x220>)
200038b0:	4293      	cmp	r3, r2
200038b2:	d04a      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
200038b4:	687b      	ldr	r3, [r7, #4]
200038b6:	681b      	ldr	r3, [r3, #0]
200038b8:	4a80      	ldr	r2, [pc, #512]	@ (20003abc <HAL_DMA_DeInit+0x224>)
200038ba:	4293      	cmp	r3, r2
200038bc:	d045      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
200038be:	687b      	ldr	r3, [r7, #4]
200038c0:	681b      	ldr	r3, [r3, #0]
200038c2:	4a7f      	ldr	r2, [pc, #508]	@ (20003ac0 <HAL_DMA_DeInit+0x228>)
200038c4:	4293      	cmp	r3, r2
200038c6:	d040      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
200038c8:	687b      	ldr	r3, [r7, #4]
200038ca:	681b      	ldr	r3, [r3, #0]
200038cc:	4a7d      	ldr	r2, [pc, #500]	@ (20003ac4 <HAL_DMA_DeInit+0x22c>)
200038ce:	4293      	cmp	r3, r2
200038d0:	d03b      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
200038d2:	687b      	ldr	r3, [r7, #4]
200038d4:	681b      	ldr	r3, [r3, #0]
200038d6:	4a7c      	ldr	r2, [pc, #496]	@ (20003ac8 <HAL_DMA_DeInit+0x230>)
200038d8:	4293      	cmp	r3, r2
200038da:	d036      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
200038dc:	687b      	ldr	r3, [r7, #4]
200038de:	681b      	ldr	r3, [r3, #0]
200038e0:	4a7a      	ldr	r2, [pc, #488]	@ (20003acc <HAL_DMA_DeInit+0x234>)
200038e2:	4293      	cmp	r3, r2
200038e4:	d031      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
200038e6:	687b      	ldr	r3, [r7, #4]
200038e8:	681b      	ldr	r3, [r3, #0]
200038ea:	4a79      	ldr	r2, [pc, #484]	@ (20003ad0 <HAL_DMA_DeInit+0x238>)
200038ec:	4293      	cmp	r3, r2
200038ee:	d02c      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
200038f0:	687b      	ldr	r3, [r7, #4]
200038f2:	681b      	ldr	r3, [r3, #0]
200038f4:	4a77      	ldr	r2, [pc, #476]	@ (20003ad4 <HAL_DMA_DeInit+0x23c>)
200038f6:	4293      	cmp	r3, r2
200038f8:	d027      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
200038fa:	687b      	ldr	r3, [r7, #4]
200038fc:	681b      	ldr	r3, [r3, #0]
200038fe:	4a76      	ldr	r2, [pc, #472]	@ (20003ad8 <HAL_DMA_DeInit+0x240>)
20003900:	4293      	cmp	r3, r2
20003902:	d022      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
20003904:	687b      	ldr	r3, [r7, #4]
20003906:	681b      	ldr	r3, [r3, #0]
20003908:	4a74      	ldr	r2, [pc, #464]	@ (20003adc <HAL_DMA_DeInit+0x244>)
2000390a:	4293      	cmp	r3, r2
2000390c:	d01d      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
2000390e:	687b      	ldr	r3, [r7, #4]
20003910:	681b      	ldr	r3, [r3, #0]
20003912:	4a73      	ldr	r2, [pc, #460]	@ (20003ae0 <HAL_DMA_DeInit+0x248>)
20003914:	4293      	cmp	r3, r2
20003916:	d018      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
20003918:	687b      	ldr	r3, [r7, #4]
2000391a:	681b      	ldr	r3, [r3, #0]
2000391c:	4a71      	ldr	r2, [pc, #452]	@ (20003ae4 <HAL_DMA_DeInit+0x24c>)
2000391e:	4293      	cmp	r3, r2
20003920:	d013      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
20003922:	687b      	ldr	r3, [r7, #4]
20003924:	681b      	ldr	r3, [r3, #0]
20003926:	4a70      	ldr	r2, [pc, #448]	@ (20003ae8 <HAL_DMA_DeInit+0x250>)
20003928:	4293      	cmp	r3, r2
2000392a:	d00e      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
2000392c:	687b      	ldr	r3, [r7, #4]
2000392e:	681b      	ldr	r3, [r3, #0]
20003930:	4a6e      	ldr	r2, [pc, #440]	@ (20003aec <HAL_DMA_DeInit+0x254>)
20003932:	4293      	cmp	r3, r2
20003934:	d009      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
20003936:	687b      	ldr	r3, [r7, #4]
20003938:	681b      	ldr	r3, [r3, #0]
2000393a:	4a6d      	ldr	r2, [pc, #436]	@ (20003af0 <HAL_DMA_DeInit+0x258>)
2000393c:	4293      	cmp	r3, r2
2000393e:	d004      	beq.n	2000394a <HAL_DMA_DeInit+0xb2>
20003940:	687b      	ldr	r3, [r7, #4]
20003942:	681b      	ldr	r3, [r3, #0]
20003944:	4a6b      	ldr	r2, [pc, #428]	@ (20003af4 <HAL_DMA_DeInit+0x25c>)
20003946:	4293      	cmp	r3, r2
20003948:	d108      	bne.n	2000395c <HAL_DMA_DeInit+0xc4>
2000394a:	687b      	ldr	r3, [r7, #4]
2000394c:	681b      	ldr	r3, [r3, #0]
2000394e:	681a      	ldr	r2, [r3, #0]
20003950:	687b      	ldr	r3, [r7, #4]
20003952:	681b      	ldr	r3, [r3, #0]
20003954:	f022 0201 	bic.w	r2, r2, #1
20003958:	601a      	str	r2, [r3, #0]
2000395a:	e007      	b.n	2000396c <HAL_DMA_DeInit+0xd4>
2000395c:	687b      	ldr	r3, [r7, #4]
2000395e:	681b      	ldr	r3, [r3, #0]
20003960:	681a      	ldr	r2, [r3, #0]
20003962:	687b      	ldr	r3, [r7, #4]
20003964:	681b      	ldr	r3, [r3, #0]
20003966:	f022 0201 	bic.w	r2, r2, #1
2000396a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2000396c:	687b      	ldr	r3, [r7, #4]
2000396e:	681b      	ldr	r3, [r3, #0]
20003970:	4a51      	ldr	r2, [pc, #324]	@ (20003ab8 <HAL_DMA_DeInit+0x220>)
20003972:	4293      	cmp	r3, r2
20003974:	d04a      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
20003976:	687b      	ldr	r3, [r7, #4]
20003978:	681b      	ldr	r3, [r3, #0]
2000397a:	4a50      	ldr	r2, [pc, #320]	@ (20003abc <HAL_DMA_DeInit+0x224>)
2000397c:	4293      	cmp	r3, r2
2000397e:	d045      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
20003980:	687b      	ldr	r3, [r7, #4]
20003982:	681b      	ldr	r3, [r3, #0]
20003984:	4a4e      	ldr	r2, [pc, #312]	@ (20003ac0 <HAL_DMA_DeInit+0x228>)
20003986:	4293      	cmp	r3, r2
20003988:	d040      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
2000398a:	687b      	ldr	r3, [r7, #4]
2000398c:	681b      	ldr	r3, [r3, #0]
2000398e:	4a4d      	ldr	r2, [pc, #308]	@ (20003ac4 <HAL_DMA_DeInit+0x22c>)
20003990:	4293      	cmp	r3, r2
20003992:	d03b      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
20003994:	687b      	ldr	r3, [r7, #4]
20003996:	681b      	ldr	r3, [r3, #0]
20003998:	4a4b      	ldr	r2, [pc, #300]	@ (20003ac8 <HAL_DMA_DeInit+0x230>)
2000399a:	4293      	cmp	r3, r2
2000399c:	d036      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
2000399e:	687b      	ldr	r3, [r7, #4]
200039a0:	681b      	ldr	r3, [r3, #0]
200039a2:	4a4a      	ldr	r2, [pc, #296]	@ (20003acc <HAL_DMA_DeInit+0x234>)
200039a4:	4293      	cmp	r3, r2
200039a6:	d031      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039a8:	687b      	ldr	r3, [r7, #4]
200039aa:	681b      	ldr	r3, [r3, #0]
200039ac:	4a48      	ldr	r2, [pc, #288]	@ (20003ad0 <HAL_DMA_DeInit+0x238>)
200039ae:	4293      	cmp	r3, r2
200039b0:	d02c      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039b2:	687b      	ldr	r3, [r7, #4]
200039b4:	681b      	ldr	r3, [r3, #0]
200039b6:	4a47      	ldr	r2, [pc, #284]	@ (20003ad4 <HAL_DMA_DeInit+0x23c>)
200039b8:	4293      	cmp	r3, r2
200039ba:	d027      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039bc:	687b      	ldr	r3, [r7, #4]
200039be:	681b      	ldr	r3, [r3, #0]
200039c0:	4a45      	ldr	r2, [pc, #276]	@ (20003ad8 <HAL_DMA_DeInit+0x240>)
200039c2:	4293      	cmp	r3, r2
200039c4:	d022      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039c6:	687b      	ldr	r3, [r7, #4]
200039c8:	681b      	ldr	r3, [r3, #0]
200039ca:	4a44      	ldr	r2, [pc, #272]	@ (20003adc <HAL_DMA_DeInit+0x244>)
200039cc:	4293      	cmp	r3, r2
200039ce:	d01d      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039d0:	687b      	ldr	r3, [r7, #4]
200039d2:	681b      	ldr	r3, [r3, #0]
200039d4:	4a42      	ldr	r2, [pc, #264]	@ (20003ae0 <HAL_DMA_DeInit+0x248>)
200039d6:	4293      	cmp	r3, r2
200039d8:	d018      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039da:	687b      	ldr	r3, [r7, #4]
200039dc:	681b      	ldr	r3, [r3, #0]
200039de:	4a41      	ldr	r2, [pc, #260]	@ (20003ae4 <HAL_DMA_DeInit+0x24c>)
200039e0:	4293      	cmp	r3, r2
200039e2:	d013      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039e4:	687b      	ldr	r3, [r7, #4]
200039e6:	681b      	ldr	r3, [r3, #0]
200039e8:	4a3f      	ldr	r2, [pc, #252]	@ (20003ae8 <HAL_DMA_DeInit+0x250>)
200039ea:	4293      	cmp	r3, r2
200039ec:	d00e      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039ee:	687b      	ldr	r3, [r7, #4]
200039f0:	681b      	ldr	r3, [r3, #0]
200039f2:	4a3e      	ldr	r2, [pc, #248]	@ (20003aec <HAL_DMA_DeInit+0x254>)
200039f4:	4293      	cmp	r3, r2
200039f6:	d009      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
200039f8:	687b      	ldr	r3, [r7, #4]
200039fa:	681b      	ldr	r3, [r3, #0]
200039fc:	4a3c      	ldr	r2, [pc, #240]	@ (20003af0 <HAL_DMA_DeInit+0x258>)
200039fe:	4293      	cmp	r3, r2
20003a00:	d004      	beq.n	20003a0c <HAL_DMA_DeInit+0x174>
20003a02:	687b      	ldr	r3, [r7, #4]
20003a04:	681b      	ldr	r3, [r3, #0]
20003a06:	4a3b      	ldr	r2, [pc, #236]	@ (20003af4 <HAL_DMA_DeInit+0x25c>)
20003a08:	4293      	cmp	r3, r2
20003a0a:	d101      	bne.n	20003a10 <HAL_DMA_DeInit+0x178>
20003a0c:	2301      	movs	r3, #1
20003a0e:	e000      	b.n	20003a12 <HAL_DMA_DeInit+0x17a>
20003a10:	2300      	movs	r3, #0
20003a12:	2b00      	cmp	r3, #0
20003a14:	d025      	beq.n	20003a62 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
20003a16:	687b      	ldr	r3, [r7, #4]
20003a18:	681b      	ldr	r3, [r3, #0]
20003a1a:	2200      	movs	r2, #0
20003a1c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
20003a1e:	687b      	ldr	r3, [r7, #4]
20003a20:	681b      	ldr	r3, [r3, #0]
20003a22:	2200      	movs	r2, #0
20003a24:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
20003a26:	687b      	ldr	r3, [r7, #4]
20003a28:	681b      	ldr	r3, [r3, #0]
20003a2a:	2200      	movs	r2, #0
20003a2c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
20003a2e:	687b      	ldr	r3, [r7, #4]
20003a30:	681b      	ldr	r3, [r3, #0]
20003a32:	2200      	movs	r2, #0
20003a34:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
20003a36:	687b      	ldr	r3, [r7, #4]
20003a38:	681b      	ldr	r3, [r3, #0]
20003a3a:	2200      	movs	r2, #0
20003a3c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
20003a3e:	687b      	ldr	r3, [r7, #4]
20003a40:	681b      	ldr	r3, [r3, #0]
20003a42:	2221      	movs	r2, #33	@ 0x21
20003a44:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
20003a46:	6878      	ldr	r0, [r7, #4]
20003a48:	f002 ff2c 	bl	200068a4 <DMA_CalcBaseAndBitshift>
20003a4c:	4603      	mov	r3, r0
20003a4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
20003a50:	687b      	ldr	r3, [r7, #4]
20003a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20003a54:	f003 031f 	and.w	r3, r3, #31
20003a58:	223f      	movs	r2, #63	@ 0x3f
20003a5a:	409a      	lsls	r2, r3
20003a5c:	68bb      	ldr	r3, [r7, #8]
20003a5e:	609a      	str	r2, [r3, #8]
20003a60:	e081      	b.n	20003b66 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
20003a62:	687b      	ldr	r3, [r7, #4]
20003a64:	681b      	ldr	r3, [r3, #0]
20003a66:	4a24      	ldr	r2, [pc, #144]	@ (20003af8 <HAL_DMA_DeInit+0x260>)
20003a68:	4293      	cmp	r3, r2
20003a6a:	d022      	beq.n	20003ab2 <HAL_DMA_DeInit+0x21a>
20003a6c:	687b      	ldr	r3, [r7, #4]
20003a6e:	681b      	ldr	r3, [r3, #0]
20003a70:	4a22      	ldr	r2, [pc, #136]	@ (20003afc <HAL_DMA_DeInit+0x264>)
20003a72:	4293      	cmp	r3, r2
20003a74:	d01d      	beq.n	20003ab2 <HAL_DMA_DeInit+0x21a>
20003a76:	687b      	ldr	r3, [r7, #4]
20003a78:	681b      	ldr	r3, [r3, #0]
20003a7a:	4a21      	ldr	r2, [pc, #132]	@ (20003b00 <HAL_DMA_DeInit+0x268>)
20003a7c:	4293      	cmp	r3, r2
20003a7e:	d018      	beq.n	20003ab2 <HAL_DMA_DeInit+0x21a>
20003a80:	687b      	ldr	r3, [r7, #4]
20003a82:	681b      	ldr	r3, [r3, #0]
20003a84:	4a1f      	ldr	r2, [pc, #124]	@ (20003b04 <HAL_DMA_DeInit+0x26c>)
20003a86:	4293      	cmp	r3, r2
20003a88:	d013      	beq.n	20003ab2 <HAL_DMA_DeInit+0x21a>
20003a8a:	687b      	ldr	r3, [r7, #4]
20003a8c:	681b      	ldr	r3, [r3, #0]
20003a8e:	4a1e      	ldr	r2, [pc, #120]	@ (20003b08 <HAL_DMA_DeInit+0x270>)
20003a90:	4293      	cmp	r3, r2
20003a92:	d00e      	beq.n	20003ab2 <HAL_DMA_DeInit+0x21a>
20003a94:	687b      	ldr	r3, [r7, #4]
20003a96:	681b      	ldr	r3, [r3, #0]
20003a98:	4a1c      	ldr	r2, [pc, #112]	@ (20003b0c <HAL_DMA_DeInit+0x274>)
20003a9a:	4293      	cmp	r3, r2
20003a9c:	d009      	beq.n	20003ab2 <HAL_DMA_DeInit+0x21a>
20003a9e:	687b      	ldr	r3, [r7, #4]
20003aa0:	681b      	ldr	r3, [r3, #0]
20003aa2:	4a1b      	ldr	r2, [pc, #108]	@ (20003b10 <HAL_DMA_DeInit+0x278>)
20003aa4:	4293      	cmp	r3, r2
20003aa6:	d004      	beq.n	20003ab2 <HAL_DMA_DeInit+0x21a>
20003aa8:	687b      	ldr	r3, [r7, #4]
20003aaa:	681b      	ldr	r3, [r3, #0]
20003aac:	4a19      	ldr	r2, [pc, #100]	@ (20003b14 <HAL_DMA_DeInit+0x27c>)
20003aae:	4293      	cmp	r3, r2
20003ab0:	d132      	bne.n	20003b18 <HAL_DMA_DeInit+0x280>
20003ab2:	2301      	movs	r3, #1
20003ab4:	e031      	b.n	20003b1a <HAL_DMA_DeInit+0x282>
20003ab6:	bf00      	nop
20003ab8:	40020010 	.word	0x40020010
20003abc:	40020028 	.word	0x40020028
20003ac0:	40020040 	.word	0x40020040
20003ac4:	40020058 	.word	0x40020058
20003ac8:	40020070 	.word	0x40020070
20003acc:	40020088 	.word	0x40020088
20003ad0:	400200a0 	.word	0x400200a0
20003ad4:	400200b8 	.word	0x400200b8
20003ad8:	40020410 	.word	0x40020410
20003adc:	40020428 	.word	0x40020428
20003ae0:	40020440 	.word	0x40020440
20003ae4:	40020458 	.word	0x40020458
20003ae8:	40020470 	.word	0x40020470
20003aec:	40020488 	.word	0x40020488
20003af0:	400204a0 	.word	0x400204a0
20003af4:	400204b8 	.word	0x400204b8
20003af8:	58025408 	.word	0x58025408
20003afc:	5802541c 	.word	0x5802541c
20003b00:	58025430 	.word	0x58025430
20003b04:	58025444 	.word	0x58025444
20003b08:	58025458 	.word	0x58025458
20003b0c:	5802546c 	.word	0x5802546c
20003b10:	58025480 	.word	0x58025480
20003b14:	58025494 	.word	0x58025494
20003b18:	2300      	movs	r3, #0
20003b1a:	2b00      	cmp	r3, #0
20003b1c:	d021      	beq.n	20003b62 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
20003b1e:	687b      	ldr	r3, [r7, #4]
20003b20:	681b      	ldr	r3, [r3, #0]
20003b22:	2200      	movs	r2, #0
20003b24:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
20003b26:	687b      	ldr	r3, [r7, #4]
20003b28:	681b      	ldr	r3, [r3, #0]
20003b2a:	2200      	movs	r2, #0
20003b2c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
20003b2e:	687b      	ldr	r3, [r7, #4]
20003b30:	681b      	ldr	r3, [r3, #0]
20003b32:	2200      	movs	r2, #0
20003b34:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
20003b36:	687b      	ldr	r3, [r7, #4]
20003b38:	681b      	ldr	r3, [r3, #0]
20003b3a:	2200      	movs	r2, #0
20003b3c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
20003b3e:	687b      	ldr	r3, [r7, #4]
20003b40:	681b      	ldr	r3, [r3, #0]
20003b42:	2200      	movs	r2, #0
20003b44:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
20003b46:	6878      	ldr	r0, [r7, #4]
20003b48:	f002 feac 	bl	200068a4 <DMA_CalcBaseAndBitshift>
20003b4c:	4603      	mov	r3, r0
20003b4e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
20003b50:	687b      	ldr	r3, [r7, #4]
20003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20003b54:	f003 031f 	and.w	r3, r3, #31
20003b58:	2201      	movs	r2, #1
20003b5a:	409a      	lsls	r2, r3
20003b5c:	68fb      	ldr	r3, [r7, #12]
20003b5e:	605a      	str	r2, [r3, #4]
20003b60:	e001      	b.n	20003b66 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
20003b62:	2301      	movs	r3, #1
20003b64:	e04a      	b.n	20003bfc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
20003b66:	6878      	ldr	r0, [r7, #4]
20003b68:	f002 ffca 	bl	20006b00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
20003b6c:	687b      	ldr	r3, [r7, #4]
20003b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20003b70:	2b00      	cmp	r3, #0
20003b72:	d008      	beq.n	20003b86 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
20003b74:	687b      	ldr	r3, [r7, #4]
20003b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20003b78:	2200      	movs	r2, #0
20003b7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
20003b7c:	687b      	ldr	r3, [r7, #4]
20003b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20003b80:	687a      	ldr	r2, [r7, #4]
20003b82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
20003b84:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
20003b86:	687b      	ldr	r3, [r7, #4]
20003b88:	685b      	ldr	r3, [r3, #4]
20003b8a:	2b00      	cmp	r3, #0
20003b8c:	d00f      	beq.n	20003bae <HAL_DMA_DeInit+0x316>
20003b8e:	687b      	ldr	r3, [r7, #4]
20003b90:	685b      	ldr	r3, [r3, #4]
20003b92:	2b08      	cmp	r3, #8
20003b94:	d80b      	bhi.n	20003bae <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
20003b96:	6878      	ldr	r0, [r7, #4]
20003b98:	f003 f84c 	bl	20006c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
20003b9c:	687b      	ldr	r3, [r7, #4]
20003b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20003ba0:	2200      	movs	r2, #0
20003ba2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
20003ba4:	687b      	ldr	r3, [r7, #4]
20003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20003ba8:	687a      	ldr	r2, [r7, #4]
20003baa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
20003bac:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
20003bae:	687b      	ldr	r3, [r7, #4]
20003bb0:	2200      	movs	r2, #0
20003bb2:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
20003bb4:	687b      	ldr	r3, [r7, #4]
20003bb6:	2200      	movs	r2, #0
20003bb8:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
20003bba:	687b      	ldr	r3, [r7, #4]
20003bbc:	2200      	movs	r2, #0
20003bbe:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
20003bc0:	687b      	ldr	r3, [r7, #4]
20003bc2:	2200      	movs	r2, #0
20003bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
20003bc6:	687b      	ldr	r3, [r7, #4]
20003bc8:	2200      	movs	r2, #0
20003bca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
20003bcc:	687b      	ldr	r3, [r7, #4]
20003bce:	2200      	movs	r2, #0
20003bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
20003bd2:	687b      	ldr	r3, [r7, #4]
20003bd4:	2200      	movs	r2, #0
20003bd6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
20003bd8:	687b      	ldr	r3, [r7, #4]
20003bda:	2200      	movs	r2, #0
20003bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
20003bde:	687b      	ldr	r3, [r7, #4]
20003be0:	2200      	movs	r2, #0
20003be2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20003be4:	687b      	ldr	r3, [r7, #4]
20003be6:	2200      	movs	r2, #0
20003be8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
20003bea:	687b      	ldr	r3, [r7, #4]
20003bec:	2200      	movs	r2, #0
20003bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20003bf2:	687b      	ldr	r3, [r7, #4]
20003bf4:	2200      	movs	r2, #0
20003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
20003bfa:	2300      	movs	r3, #0
}
20003bfc:	4618      	mov	r0, r3
20003bfe:	3710      	adds	r7, #16
20003c00:	46bd      	mov	sp, r7
20003c02:	bd80      	pop	{r7, pc}

20003c04 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20003c04:	b580      	push	{r7, lr}
20003c06:	b086      	sub	sp, #24
20003c08:	af00      	add	r7, sp, #0
20003c0a:	60f8      	str	r0, [r7, #12]
20003c0c:	60b9      	str	r1, [r7, #8]
20003c0e:	607a      	str	r2, [r7, #4]
20003c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20003c12:	2300      	movs	r3, #0
20003c14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
20003c16:	68fb      	ldr	r3, [r7, #12]
20003c18:	2b00      	cmp	r3, #0
20003c1a:	d101      	bne.n	20003c20 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
20003c1c:	2301      	movs	r3, #1
20003c1e:	e0ec      	b.n	20003dfa <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
20003c20:	68fb      	ldr	r3, [r7, #12]
20003c22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
20003c26:	2b01      	cmp	r3, #1
20003c28:	d101      	bne.n	20003c2e <HAL_DMA_Start+0x2a>
20003c2a:	2302      	movs	r3, #2
20003c2c:	e0e5      	b.n	20003dfa <HAL_DMA_Start+0x1f6>
20003c2e:	68fb      	ldr	r3, [r7, #12]
20003c30:	2201      	movs	r2, #1
20003c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20003c36:	68fb      	ldr	r3, [r7, #12]
20003c38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20003c3c:	b2db      	uxtb	r3, r3
20003c3e:	2b01      	cmp	r3, #1
20003c40:	f040 80d0 	bne.w	20003de4 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
20003c44:	68fb      	ldr	r3, [r7, #12]
20003c46:	2202      	movs	r2, #2
20003c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20003c4c:	68fb      	ldr	r3, [r7, #12]
20003c4e:	2200      	movs	r2, #0
20003c50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
20003c52:	68fb      	ldr	r3, [r7, #12]
20003c54:	681b      	ldr	r3, [r3, #0]
20003c56:	4a6b      	ldr	r2, [pc, #428]	@ (20003e04 <HAL_DMA_Start+0x200>)
20003c58:	4293      	cmp	r3, r2
20003c5a:	d04a      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003c5c:	68fb      	ldr	r3, [r7, #12]
20003c5e:	681b      	ldr	r3, [r3, #0]
20003c60:	4a69      	ldr	r2, [pc, #420]	@ (20003e08 <HAL_DMA_Start+0x204>)
20003c62:	4293      	cmp	r3, r2
20003c64:	d045      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003c66:	68fb      	ldr	r3, [r7, #12]
20003c68:	681b      	ldr	r3, [r3, #0]
20003c6a:	4a68      	ldr	r2, [pc, #416]	@ (20003e0c <HAL_DMA_Start+0x208>)
20003c6c:	4293      	cmp	r3, r2
20003c6e:	d040      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003c70:	68fb      	ldr	r3, [r7, #12]
20003c72:	681b      	ldr	r3, [r3, #0]
20003c74:	4a66      	ldr	r2, [pc, #408]	@ (20003e10 <HAL_DMA_Start+0x20c>)
20003c76:	4293      	cmp	r3, r2
20003c78:	d03b      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003c7a:	68fb      	ldr	r3, [r7, #12]
20003c7c:	681b      	ldr	r3, [r3, #0]
20003c7e:	4a65      	ldr	r2, [pc, #404]	@ (20003e14 <HAL_DMA_Start+0x210>)
20003c80:	4293      	cmp	r3, r2
20003c82:	d036      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003c84:	68fb      	ldr	r3, [r7, #12]
20003c86:	681b      	ldr	r3, [r3, #0]
20003c88:	4a63      	ldr	r2, [pc, #396]	@ (20003e18 <HAL_DMA_Start+0x214>)
20003c8a:	4293      	cmp	r3, r2
20003c8c:	d031      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003c8e:	68fb      	ldr	r3, [r7, #12]
20003c90:	681b      	ldr	r3, [r3, #0]
20003c92:	4a62      	ldr	r2, [pc, #392]	@ (20003e1c <HAL_DMA_Start+0x218>)
20003c94:	4293      	cmp	r3, r2
20003c96:	d02c      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003c98:	68fb      	ldr	r3, [r7, #12]
20003c9a:	681b      	ldr	r3, [r3, #0]
20003c9c:	4a60      	ldr	r2, [pc, #384]	@ (20003e20 <HAL_DMA_Start+0x21c>)
20003c9e:	4293      	cmp	r3, r2
20003ca0:	d027      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003ca2:	68fb      	ldr	r3, [r7, #12]
20003ca4:	681b      	ldr	r3, [r3, #0]
20003ca6:	4a5f      	ldr	r2, [pc, #380]	@ (20003e24 <HAL_DMA_Start+0x220>)
20003ca8:	4293      	cmp	r3, r2
20003caa:	d022      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003cac:	68fb      	ldr	r3, [r7, #12]
20003cae:	681b      	ldr	r3, [r3, #0]
20003cb0:	4a5d      	ldr	r2, [pc, #372]	@ (20003e28 <HAL_DMA_Start+0x224>)
20003cb2:	4293      	cmp	r3, r2
20003cb4:	d01d      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003cb6:	68fb      	ldr	r3, [r7, #12]
20003cb8:	681b      	ldr	r3, [r3, #0]
20003cba:	4a5c      	ldr	r2, [pc, #368]	@ (20003e2c <HAL_DMA_Start+0x228>)
20003cbc:	4293      	cmp	r3, r2
20003cbe:	d018      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003cc0:	68fb      	ldr	r3, [r7, #12]
20003cc2:	681b      	ldr	r3, [r3, #0]
20003cc4:	4a5a      	ldr	r2, [pc, #360]	@ (20003e30 <HAL_DMA_Start+0x22c>)
20003cc6:	4293      	cmp	r3, r2
20003cc8:	d013      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003cca:	68fb      	ldr	r3, [r7, #12]
20003ccc:	681b      	ldr	r3, [r3, #0]
20003cce:	4a59      	ldr	r2, [pc, #356]	@ (20003e34 <HAL_DMA_Start+0x230>)
20003cd0:	4293      	cmp	r3, r2
20003cd2:	d00e      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003cd4:	68fb      	ldr	r3, [r7, #12]
20003cd6:	681b      	ldr	r3, [r3, #0]
20003cd8:	4a57      	ldr	r2, [pc, #348]	@ (20003e38 <HAL_DMA_Start+0x234>)
20003cda:	4293      	cmp	r3, r2
20003cdc:	d009      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003cde:	68fb      	ldr	r3, [r7, #12]
20003ce0:	681b      	ldr	r3, [r3, #0]
20003ce2:	4a56      	ldr	r2, [pc, #344]	@ (20003e3c <HAL_DMA_Start+0x238>)
20003ce4:	4293      	cmp	r3, r2
20003ce6:	d004      	beq.n	20003cf2 <HAL_DMA_Start+0xee>
20003ce8:	68fb      	ldr	r3, [r7, #12]
20003cea:	681b      	ldr	r3, [r3, #0]
20003cec:	4a54      	ldr	r2, [pc, #336]	@ (20003e40 <HAL_DMA_Start+0x23c>)
20003cee:	4293      	cmp	r3, r2
20003cf0:	d108      	bne.n	20003d04 <HAL_DMA_Start+0x100>
20003cf2:	68fb      	ldr	r3, [r7, #12]
20003cf4:	681b      	ldr	r3, [r3, #0]
20003cf6:	681a      	ldr	r2, [r3, #0]
20003cf8:	68fb      	ldr	r3, [r7, #12]
20003cfa:	681b      	ldr	r3, [r3, #0]
20003cfc:	f022 0201 	bic.w	r2, r2, #1
20003d00:	601a      	str	r2, [r3, #0]
20003d02:	e007      	b.n	20003d14 <HAL_DMA_Start+0x110>
20003d04:	68fb      	ldr	r3, [r7, #12]
20003d06:	681b      	ldr	r3, [r3, #0]
20003d08:	681a      	ldr	r2, [r3, #0]
20003d0a:	68fb      	ldr	r3, [r7, #12]
20003d0c:	681b      	ldr	r3, [r3, #0]
20003d0e:	f022 0201 	bic.w	r2, r2, #1
20003d12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
20003d14:	683b      	ldr	r3, [r7, #0]
20003d16:	687a      	ldr	r2, [r7, #4]
20003d18:	68b9      	ldr	r1, [r7, #8]
20003d1a:	68f8      	ldr	r0, [r7, #12]
20003d1c:	f002 fc16 	bl	2000654c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20003d20:	68fb      	ldr	r3, [r7, #12]
20003d22:	681b      	ldr	r3, [r3, #0]
20003d24:	4a37      	ldr	r2, [pc, #220]	@ (20003e04 <HAL_DMA_Start+0x200>)
20003d26:	4293      	cmp	r3, r2
20003d28:	d04a      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d2a:	68fb      	ldr	r3, [r7, #12]
20003d2c:	681b      	ldr	r3, [r3, #0]
20003d2e:	4a36      	ldr	r2, [pc, #216]	@ (20003e08 <HAL_DMA_Start+0x204>)
20003d30:	4293      	cmp	r3, r2
20003d32:	d045      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d34:	68fb      	ldr	r3, [r7, #12]
20003d36:	681b      	ldr	r3, [r3, #0]
20003d38:	4a34      	ldr	r2, [pc, #208]	@ (20003e0c <HAL_DMA_Start+0x208>)
20003d3a:	4293      	cmp	r3, r2
20003d3c:	d040      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d3e:	68fb      	ldr	r3, [r7, #12]
20003d40:	681b      	ldr	r3, [r3, #0]
20003d42:	4a33      	ldr	r2, [pc, #204]	@ (20003e10 <HAL_DMA_Start+0x20c>)
20003d44:	4293      	cmp	r3, r2
20003d46:	d03b      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d48:	68fb      	ldr	r3, [r7, #12]
20003d4a:	681b      	ldr	r3, [r3, #0]
20003d4c:	4a31      	ldr	r2, [pc, #196]	@ (20003e14 <HAL_DMA_Start+0x210>)
20003d4e:	4293      	cmp	r3, r2
20003d50:	d036      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d52:	68fb      	ldr	r3, [r7, #12]
20003d54:	681b      	ldr	r3, [r3, #0]
20003d56:	4a30      	ldr	r2, [pc, #192]	@ (20003e18 <HAL_DMA_Start+0x214>)
20003d58:	4293      	cmp	r3, r2
20003d5a:	d031      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d5c:	68fb      	ldr	r3, [r7, #12]
20003d5e:	681b      	ldr	r3, [r3, #0]
20003d60:	4a2e      	ldr	r2, [pc, #184]	@ (20003e1c <HAL_DMA_Start+0x218>)
20003d62:	4293      	cmp	r3, r2
20003d64:	d02c      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d66:	68fb      	ldr	r3, [r7, #12]
20003d68:	681b      	ldr	r3, [r3, #0]
20003d6a:	4a2d      	ldr	r2, [pc, #180]	@ (20003e20 <HAL_DMA_Start+0x21c>)
20003d6c:	4293      	cmp	r3, r2
20003d6e:	d027      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d70:	68fb      	ldr	r3, [r7, #12]
20003d72:	681b      	ldr	r3, [r3, #0]
20003d74:	4a2b      	ldr	r2, [pc, #172]	@ (20003e24 <HAL_DMA_Start+0x220>)
20003d76:	4293      	cmp	r3, r2
20003d78:	d022      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d7a:	68fb      	ldr	r3, [r7, #12]
20003d7c:	681b      	ldr	r3, [r3, #0]
20003d7e:	4a2a      	ldr	r2, [pc, #168]	@ (20003e28 <HAL_DMA_Start+0x224>)
20003d80:	4293      	cmp	r3, r2
20003d82:	d01d      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d84:	68fb      	ldr	r3, [r7, #12]
20003d86:	681b      	ldr	r3, [r3, #0]
20003d88:	4a28      	ldr	r2, [pc, #160]	@ (20003e2c <HAL_DMA_Start+0x228>)
20003d8a:	4293      	cmp	r3, r2
20003d8c:	d018      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d8e:	68fb      	ldr	r3, [r7, #12]
20003d90:	681b      	ldr	r3, [r3, #0]
20003d92:	4a27      	ldr	r2, [pc, #156]	@ (20003e30 <HAL_DMA_Start+0x22c>)
20003d94:	4293      	cmp	r3, r2
20003d96:	d013      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003d98:	68fb      	ldr	r3, [r7, #12]
20003d9a:	681b      	ldr	r3, [r3, #0]
20003d9c:	4a25      	ldr	r2, [pc, #148]	@ (20003e34 <HAL_DMA_Start+0x230>)
20003d9e:	4293      	cmp	r3, r2
20003da0:	d00e      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003da2:	68fb      	ldr	r3, [r7, #12]
20003da4:	681b      	ldr	r3, [r3, #0]
20003da6:	4a24      	ldr	r2, [pc, #144]	@ (20003e38 <HAL_DMA_Start+0x234>)
20003da8:	4293      	cmp	r3, r2
20003daa:	d009      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003dac:	68fb      	ldr	r3, [r7, #12]
20003dae:	681b      	ldr	r3, [r3, #0]
20003db0:	4a22      	ldr	r2, [pc, #136]	@ (20003e3c <HAL_DMA_Start+0x238>)
20003db2:	4293      	cmp	r3, r2
20003db4:	d004      	beq.n	20003dc0 <HAL_DMA_Start+0x1bc>
20003db6:	68fb      	ldr	r3, [r7, #12]
20003db8:	681b      	ldr	r3, [r3, #0]
20003dba:	4a21      	ldr	r2, [pc, #132]	@ (20003e40 <HAL_DMA_Start+0x23c>)
20003dbc:	4293      	cmp	r3, r2
20003dbe:	d108      	bne.n	20003dd2 <HAL_DMA_Start+0x1ce>
20003dc0:	68fb      	ldr	r3, [r7, #12]
20003dc2:	681b      	ldr	r3, [r3, #0]
20003dc4:	681a      	ldr	r2, [r3, #0]
20003dc6:	68fb      	ldr	r3, [r7, #12]
20003dc8:	681b      	ldr	r3, [r3, #0]
20003dca:	f042 0201 	orr.w	r2, r2, #1
20003dce:	601a      	str	r2, [r3, #0]
20003dd0:	e012      	b.n	20003df8 <HAL_DMA_Start+0x1f4>
20003dd2:	68fb      	ldr	r3, [r7, #12]
20003dd4:	681b      	ldr	r3, [r3, #0]
20003dd6:	681a      	ldr	r2, [r3, #0]
20003dd8:	68fb      	ldr	r3, [r7, #12]
20003dda:	681b      	ldr	r3, [r3, #0]
20003ddc:	f042 0201 	orr.w	r2, r2, #1
20003de0:	601a      	str	r2, [r3, #0]
20003de2:	e009      	b.n	20003df8 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
20003de4:	68fb      	ldr	r3, [r7, #12]
20003de6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
20003dea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
20003dec:	68fb      	ldr	r3, [r7, #12]
20003dee:	2200      	movs	r2, #0
20003df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
20003df4:	2301      	movs	r3, #1
20003df6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
20003df8:	7dfb      	ldrb	r3, [r7, #23]
}
20003dfa:	4618      	mov	r0, r3
20003dfc:	3718      	adds	r7, #24
20003dfe:	46bd      	mov	sp, r7
20003e00:	bd80      	pop	{r7, pc}
20003e02:	bf00      	nop
20003e04:	40020010 	.word	0x40020010
20003e08:	40020028 	.word	0x40020028
20003e0c:	40020040 	.word	0x40020040
20003e10:	40020058 	.word	0x40020058
20003e14:	40020070 	.word	0x40020070
20003e18:	40020088 	.word	0x40020088
20003e1c:	400200a0 	.word	0x400200a0
20003e20:	400200b8 	.word	0x400200b8
20003e24:	40020410 	.word	0x40020410
20003e28:	40020428 	.word	0x40020428
20003e2c:	40020440 	.word	0x40020440
20003e30:	40020458 	.word	0x40020458
20003e34:	40020470 	.word	0x40020470
20003e38:	40020488 	.word	0x40020488
20003e3c:	400204a0 	.word	0x400204a0
20003e40:	400204b8 	.word	0x400204b8

20003e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20003e44:	b580      	push	{r7, lr}
20003e46:	b086      	sub	sp, #24
20003e48:	af00      	add	r7, sp, #0
20003e4a:	60f8      	str	r0, [r7, #12]
20003e4c:	60b9      	str	r1, [r7, #8]
20003e4e:	607a      	str	r2, [r7, #4]
20003e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20003e52:	2300      	movs	r3, #0
20003e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
20003e56:	68fb      	ldr	r3, [r7, #12]
20003e58:	2b00      	cmp	r3, #0
20003e5a:	d101      	bne.n	20003e60 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
20003e5c:	2301      	movs	r3, #1
20003e5e:	e226      	b.n	200042ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
20003e60:	68fb      	ldr	r3, [r7, #12]
20003e62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
20003e66:	2b01      	cmp	r3, #1
20003e68:	d101      	bne.n	20003e6e <HAL_DMA_Start_IT+0x2a>
20003e6a:	2302      	movs	r3, #2
20003e6c:	e21f      	b.n	200042ae <HAL_DMA_Start_IT+0x46a>
20003e6e:	68fb      	ldr	r3, [r7, #12]
20003e70:	2201      	movs	r2, #1
20003e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20003e76:	68fb      	ldr	r3, [r7, #12]
20003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20003e7c:	b2db      	uxtb	r3, r3
20003e7e:	2b01      	cmp	r3, #1
20003e80:	f040 820a 	bne.w	20004298 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
20003e84:	68fb      	ldr	r3, [r7, #12]
20003e86:	2202      	movs	r2, #2
20003e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20003e8c:	68fb      	ldr	r3, [r7, #12]
20003e8e:	2200      	movs	r2, #0
20003e90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
20003e92:	68fb      	ldr	r3, [r7, #12]
20003e94:	681b      	ldr	r3, [r3, #0]
20003e96:	4a68      	ldr	r2, [pc, #416]	@ (20004038 <HAL_DMA_Start_IT+0x1f4>)
20003e98:	4293      	cmp	r3, r2
20003e9a:	d04a      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003e9c:	68fb      	ldr	r3, [r7, #12]
20003e9e:	681b      	ldr	r3, [r3, #0]
20003ea0:	4a66      	ldr	r2, [pc, #408]	@ (2000403c <HAL_DMA_Start_IT+0x1f8>)
20003ea2:	4293      	cmp	r3, r2
20003ea4:	d045      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003ea6:	68fb      	ldr	r3, [r7, #12]
20003ea8:	681b      	ldr	r3, [r3, #0]
20003eaa:	4a65      	ldr	r2, [pc, #404]	@ (20004040 <HAL_DMA_Start_IT+0x1fc>)
20003eac:	4293      	cmp	r3, r2
20003eae:	d040      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003eb0:	68fb      	ldr	r3, [r7, #12]
20003eb2:	681b      	ldr	r3, [r3, #0]
20003eb4:	4a63      	ldr	r2, [pc, #396]	@ (20004044 <HAL_DMA_Start_IT+0x200>)
20003eb6:	4293      	cmp	r3, r2
20003eb8:	d03b      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003eba:	68fb      	ldr	r3, [r7, #12]
20003ebc:	681b      	ldr	r3, [r3, #0]
20003ebe:	4a62      	ldr	r2, [pc, #392]	@ (20004048 <HAL_DMA_Start_IT+0x204>)
20003ec0:	4293      	cmp	r3, r2
20003ec2:	d036      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003ec4:	68fb      	ldr	r3, [r7, #12]
20003ec6:	681b      	ldr	r3, [r3, #0]
20003ec8:	4a60      	ldr	r2, [pc, #384]	@ (2000404c <HAL_DMA_Start_IT+0x208>)
20003eca:	4293      	cmp	r3, r2
20003ecc:	d031      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003ece:	68fb      	ldr	r3, [r7, #12]
20003ed0:	681b      	ldr	r3, [r3, #0]
20003ed2:	4a5f      	ldr	r2, [pc, #380]	@ (20004050 <HAL_DMA_Start_IT+0x20c>)
20003ed4:	4293      	cmp	r3, r2
20003ed6:	d02c      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003ed8:	68fb      	ldr	r3, [r7, #12]
20003eda:	681b      	ldr	r3, [r3, #0]
20003edc:	4a5d      	ldr	r2, [pc, #372]	@ (20004054 <HAL_DMA_Start_IT+0x210>)
20003ede:	4293      	cmp	r3, r2
20003ee0:	d027      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003ee2:	68fb      	ldr	r3, [r7, #12]
20003ee4:	681b      	ldr	r3, [r3, #0]
20003ee6:	4a5c      	ldr	r2, [pc, #368]	@ (20004058 <HAL_DMA_Start_IT+0x214>)
20003ee8:	4293      	cmp	r3, r2
20003eea:	d022      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003eec:	68fb      	ldr	r3, [r7, #12]
20003eee:	681b      	ldr	r3, [r3, #0]
20003ef0:	4a5a      	ldr	r2, [pc, #360]	@ (2000405c <HAL_DMA_Start_IT+0x218>)
20003ef2:	4293      	cmp	r3, r2
20003ef4:	d01d      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003ef6:	68fb      	ldr	r3, [r7, #12]
20003ef8:	681b      	ldr	r3, [r3, #0]
20003efa:	4a59      	ldr	r2, [pc, #356]	@ (20004060 <HAL_DMA_Start_IT+0x21c>)
20003efc:	4293      	cmp	r3, r2
20003efe:	d018      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003f00:	68fb      	ldr	r3, [r7, #12]
20003f02:	681b      	ldr	r3, [r3, #0]
20003f04:	4a57      	ldr	r2, [pc, #348]	@ (20004064 <HAL_DMA_Start_IT+0x220>)
20003f06:	4293      	cmp	r3, r2
20003f08:	d013      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003f0a:	68fb      	ldr	r3, [r7, #12]
20003f0c:	681b      	ldr	r3, [r3, #0]
20003f0e:	4a56      	ldr	r2, [pc, #344]	@ (20004068 <HAL_DMA_Start_IT+0x224>)
20003f10:	4293      	cmp	r3, r2
20003f12:	d00e      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003f14:	68fb      	ldr	r3, [r7, #12]
20003f16:	681b      	ldr	r3, [r3, #0]
20003f18:	4a54      	ldr	r2, [pc, #336]	@ (2000406c <HAL_DMA_Start_IT+0x228>)
20003f1a:	4293      	cmp	r3, r2
20003f1c:	d009      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003f1e:	68fb      	ldr	r3, [r7, #12]
20003f20:	681b      	ldr	r3, [r3, #0]
20003f22:	4a53      	ldr	r2, [pc, #332]	@ (20004070 <HAL_DMA_Start_IT+0x22c>)
20003f24:	4293      	cmp	r3, r2
20003f26:	d004      	beq.n	20003f32 <HAL_DMA_Start_IT+0xee>
20003f28:	68fb      	ldr	r3, [r7, #12]
20003f2a:	681b      	ldr	r3, [r3, #0]
20003f2c:	4a51      	ldr	r2, [pc, #324]	@ (20004074 <HAL_DMA_Start_IT+0x230>)
20003f2e:	4293      	cmp	r3, r2
20003f30:	d108      	bne.n	20003f44 <HAL_DMA_Start_IT+0x100>
20003f32:	68fb      	ldr	r3, [r7, #12]
20003f34:	681b      	ldr	r3, [r3, #0]
20003f36:	681a      	ldr	r2, [r3, #0]
20003f38:	68fb      	ldr	r3, [r7, #12]
20003f3a:	681b      	ldr	r3, [r3, #0]
20003f3c:	f022 0201 	bic.w	r2, r2, #1
20003f40:	601a      	str	r2, [r3, #0]
20003f42:	e007      	b.n	20003f54 <HAL_DMA_Start_IT+0x110>
20003f44:	68fb      	ldr	r3, [r7, #12]
20003f46:	681b      	ldr	r3, [r3, #0]
20003f48:	681a      	ldr	r2, [r3, #0]
20003f4a:	68fb      	ldr	r3, [r7, #12]
20003f4c:	681b      	ldr	r3, [r3, #0]
20003f4e:	f022 0201 	bic.w	r2, r2, #1
20003f52:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
20003f54:	683b      	ldr	r3, [r7, #0]
20003f56:	687a      	ldr	r2, [r7, #4]
20003f58:	68b9      	ldr	r1, [r7, #8]
20003f5a:	68f8      	ldr	r0, [r7, #12]
20003f5c:	f002 faf6 	bl	2000654c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
20003f60:	68fb      	ldr	r3, [r7, #12]
20003f62:	681b      	ldr	r3, [r3, #0]
20003f64:	4a34      	ldr	r2, [pc, #208]	@ (20004038 <HAL_DMA_Start_IT+0x1f4>)
20003f66:	4293      	cmp	r3, r2
20003f68:	d04a      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003f6a:	68fb      	ldr	r3, [r7, #12]
20003f6c:	681b      	ldr	r3, [r3, #0]
20003f6e:	4a33      	ldr	r2, [pc, #204]	@ (2000403c <HAL_DMA_Start_IT+0x1f8>)
20003f70:	4293      	cmp	r3, r2
20003f72:	d045      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003f74:	68fb      	ldr	r3, [r7, #12]
20003f76:	681b      	ldr	r3, [r3, #0]
20003f78:	4a31      	ldr	r2, [pc, #196]	@ (20004040 <HAL_DMA_Start_IT+0x1fc>)
20003f7a:	4293      	cmp	r3, r2
20003f7c:	d040      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003f7e:	68fb      	ldr	r3, [r7, #12]
20003f80:	681b      	ldr	r3, [r3, #0]
20003f82:	4a30      	ldr	r2, [pc, #192]	@ (20004044 <HAL_DMA_Start_IT+0x200>)
20003f84:	4293      	cmp	r3, r2
20003f86:	d03b      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003f88:	68fb      	ldr	r3, [r7, #12]
20003f8a:	681b      	ldr	r3, [r3, #0]
20003f8c:	4a2e      	ldr	r2, [pc, #184]	@ (20004048 <HAL_DMA_Start_IT+0x204>)
20003f8e:	4293      	cmp	r3, r2
20003f90:	d036      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003f92:	68fb      	ldr	r3, [r7, #12]
20003f94:	681b      	ldr	r3, [r3, #0]
20003f96:	4a2d      	ldr	r2, [pc, #180]	@ (2000404c <HAL_DMA_Start_IT+0x208>)
20003f98:	4293      	cmp	r3, r2
20003f9a:	d031      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003f9c:	68fb      	ldr	r3, [r7, #12]
20003f9e:	681b      	ldr	r3, [r3, #0]
20003fa0:	4a2b      	ldr	r2, [pc, #172]	@ (20004050 <HAL_DMA_Start_IT+0x20c>)
20003fa2:	4293      	cmp	r3, r2
20003fa4:	d02c      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003fa6:	68fb      	ldr	r3, [r7, #12]
20003fa8:	681b      	ldr	r3, [r3, #0]
20003faa:	4a2a      	ldr	r2, [pc, #168]	@ (20004054 <HAL_DMA_Start_IT+0x210>)
20003fac:	4293      	cmp	r3, r2
20003fae:	d027      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003fb0:	68fb      	ldr	r3, [r7, #12]
20003fb2:	681b      	ldr	r3, [r3, #0]
20003fb4:	4a28      	ldr	r2, [pc, #160]	@ (20004058 <HAL_DMA_Start_IT+0x214>)
20003fb6:	4293      	cmp	r3, r2
20003fb8:	d022      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003fba:	68fb      	ldr	r3, [r7, #12]
20003fbc:	681b      	ldr	r3, [r3, #0]
20003fbe:	4a27      	ldr	r2, [pc, #156]	@ (2000405c <HAL_DMA_Start_IT+0x218>)
20003fc0:	4293      	cmp	r3, r2
20003fc2:	d01d      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003fc4:	68fb      	ldr	r3, [r7, #12]
20003fc6:	681b      	ldr	r3, [r3, #0]
20003fc8:	4a25      	ldr	r2, [pc, #148]	@ (20004060 <HAL_DMA_Start_IT+0x21c>)
20003fca:	4293      	cmp	r3, r2
20003fcc:	d018      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003fce:	68fb      	ldr	r3, [r7, #12]
20003fd0:	681b      	ldr	r3, [r3, #0]
20003fd2:	4a24      	ldr	r2, [pc, #144]	@ (20004064 <HAL_DMA_Start_IT+0x220>)
20003fd4:	4293      	cmp	r3, r2
20003fd6:	d013      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003fd8:	68fb      	ldr	r3, [r7, #12]
20003fda:	681b      	ldr	r3, [r3, #0]
20003fdc:	4a22      	ldr	r2, [pc, #136]	@ (20004068 <HAL_DMA_Start_IT+0x224>)
20003fde:	4293      	cmp	r3, r2
20003fe0:	d00e      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003fe2:	68fb      	ldr	r3, [r7, #12]
20003fe4:	681b      	ldr	r3, [r3, #0]
20003fe6:	4a21      	ldr	r2, [pc, #132]	@ (2000406c <HAL_DMA_Start_IT+0x228>)
20003fe8:	4293      	cmp	r3, r2
20003fea:	d009      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003fec:	68fb      	ldr	r3, [r7, #12]
20003fee:	681b      	ldr	r3, [r3, #0]
20003ff0:	4a1f      	ldr	r2, [pc, #124]	@ (20004070 <HAL_DMA_Start_IT+0x22c>)
20003ff2:	4293      	cmp	r3, r2
20003ff4:	d004      	beq.n	20004000 <HAL_DMA_Start_IT+0x1bc>
20003ff6:	68fb      	ldr	r3, [r7, #12]
20003ff8:	681b      	ldr	r3, [r3, #0]
20003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (20004074 <HAL_DMA_Start_IT+0x230>)
20003ffc:	4293      	cmp	r3, r2
20003ffe:	d101      	bne.n	20004004 <HAL_DMA_Start_IT+0x1c0>
20004000:	2301      	movs	r3, #1
20004002:	e000      	b.n	20004006 <HAL_DMA_Start_IT+0x1c2>
20004004:	2300      	movs	r3, #0
20004006:	2b00      	cmp	r3, #0
20004008:	d036      	beq.n	20004078 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
2000400a:	68fb      	ldr	r3, [r7, #12]
2000400c:	681b      	ldr	r3, [r3, #0]
2000400e:	681b      	ldr	r3, [r3, #0]
20004010:	f023 021e 	bic.w	r2, r3, #30
20004014:	68fb      	ldr	r3, [r7, #12]
20004016:	681b      	ldr	r3, [r3, #0]
20004018:	f042 0216 	orr.w	r2, r2, #22
2000401c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
2000401e:	68fb      	ldr	r3, [r7, #12]
20004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004022:	2b00      	cmp	r3, #0
20004024:	d03e      	beq.n	200040a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
20004026:	68fb      	ldr	r3, [r7, #12]
20004028:	681b      	ldr	r3, [r3, #0]
2000402a:	681a      	ldr	r2, [r3, #0]
2000402c:	68fb      	ldr	r3, [r7, #12]
2000402e:	681b      	ldr	r3, [r3, #0]
20004030:	f042 0208 	orr.w	r2, r2, #8
20004034:	601a      	str	r2, [r3, #0]
20004036:	e035      	b.n	200040a4 <HAL_DMA_Start_IT+0x260>
20004038:	40020010 	.word	0x40020010
2000403c:	40020028 	.word	0x40020028
20004040:	40020040 	.word	0x40020040
20004044:	40020058 	.word	0x40020058
20004048:	40020070 	.word	0x40020070
2000404c:	40020088 	.word	0x40020088
20004050:	400200a0 	.word	0x400200a0
20004054:	400200b8 	.word	0x400200b8
20004058:	40020410 	.word	0x40020410
2000405c:	40020428 	.word	0x40020428
20004060:	40020440 	.word	0x40020440
20004064:	40020458 	.word	0x40020458
20004068:	40020470 	.word	0x40020470
2000406c:	40020488 	.word	0x40020488
20004070:	400204a0 	.word	0x400204a0
20004074:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
20004078:	68fb      	ldr	r3, [r7, #12]
2000407a:	681b      	ldr	r3, [r3, #0]
2000407c:	681b      	ldr	r3, [r3, #0]
2000407e:	f023 020e 	bic.w	r2, r3, #14
20004082:	68fb      	ldr	r3, [r7, #12]
20004084:	681b      	ldr	r3, [r3, #0]
20004086:	f042 020a 	orr.w	r2, r2, #10
2000408a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
2000408c:	68fb      	ldr	r3, [r7, #12]
2000408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004090:	2b00      	cmp	r3, #0
20004092:	d007      	beq.n	200040a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
20004094:	68fb      	ldr	r3, [r7, #12]
20004096:	681b      	ldr	r3, [r3, #0]
20004098:	681a      	ldr	r2, [r3, #0]
2000409a:	68fb      	ldr	r3, [r7, #12]
2000409c:	681b      	ldr	r3, [r3, #0]
2000409e:	f042 0204 	orr.w	r2, r2, #4
200040a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
200040a4:	68fb      	ldr	r3, [r7, #12]
200040a6:	681b      	ldr	r3, [r3, #0]
200040a8:	4a83      	ldr	r2, [pc, #524]	@ (200042b8 <HAL_DMA_Start_IT+0x474>)
200040aa:	4293      	cmp	r3, r2
200040ac:	d072      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040ae:	68fb      	ldr	r3, [r7, #12]
200040b0:	681b      	ldr	r3, [r3, #0]
200040b2:	4a82      	ldr	r2, [pc, #520]	@ (200042bc <HAL_DMA_Start_IT+0x478>)
200040b4:	4293      	cmp	r3, r2
200040b6:	d06d      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040b8:	68fb      	ldr	r3, [r7, #12]
200040ba:	681b      	ldr	r3, [r3, #0]
200040bc:	4a80      	ldr	r2, [pc, #512]	@ (200042c0 <HAL_DMA_Start_IT+0x47c>)
200040be:	4293      	cmp	r3, r2
200040c0:	d068      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040c2:	68fb      	ldr	r3, [r7, #12]
200040c4:	681b      	ldr	r3, [r3, #0]
200040c6:	4a7f      	ldr	r2, [pc, #508]	@ (200042c4 <HAL_DMA_Start_IT+0x480>)
200040c8:	4293      	cmp	r3, r2
200040ca:	d063      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040cc:	68fb      	ldr	r3, [r7, #12]
200040ce:	681b      	ldr	r3, [r3, #0]
200040d0:	4a7d      	ldr	r2, [pc, #500]	@ (200042c8 <HAL_DMA_Start_IT+0x484>)
200040d2:	4293      	cmp	r3, r2
200040d4:	d05e      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040d6:	68fb      	ldr	r3, [r7, #12]
200040d8:	681b      	ldr	r3, [r3, #0]
200040da:	4a7c      	ldr	r2, [pc, #496]	@ (200042cc <HAL_DMA_Start_IT+0x488>)
200040dc:	4293      	cmp	r3, r2
200040de:	d059      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040e0:	68fb      	ldr	r3, [r7, #12]
200040e2:	681b      	ldr	r3, [r3, #0]
200040e4:	4a7a      	ldr	r2, [pc, #488]	@ (200042d0 <HAL_DMA_Start_IT+0x48c>)
200040e6:	4293      	cmp	r3, r2
200040e8:	d054      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040ea:	68fb      	ldr	r3, [r7, #12]
200040ec:	681b      	ldr	r3, [r3, #0]
200040ee:	4a79      	ldr	r2, [pc, #484]	@ (200042d4 <HAL_DMA_Start_IT+0x490>)
200040f0:	4293      	cmp	r3, r2
200040f2:	d04f      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040f4:	68fb      	ldr	r3, [r7, #12]
200040f6:	681b      	ldr	r3, [r3, #0]
200040f8:	4a77      	ldr	r2, [pc, #476]	@ (200042d8 <HAL_DMA_Start_IT+0x494>)
200040fa:	4293      	cmp	r3, r2
200040fc:	d04a      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
200040fe:	68fb      	ldr	r3, [r7, #12]
20004100:	681b      	ldr	r3, [r3, #0]
20004102:	4a76      	ldr	r2, [pc, #472]	@ (200042dc <HAL_DMA_Start_IT+0x498>)
20004104:	4293      	cmp	r3, r2
20004106:	d045      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004108:	68fb      	ldr	r3, [r7, #12]
2000410a:	681b      	ldr	r3, [r3, #0]
2000410c:	4a74      	ldr	r2, [pc, #464]	@ (200042e0 <HAL_DMA_Start_IT+0x49c>)
2000410e:	4293      	cmp	r3, r2
20004110:	d040      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004112:	68fb      	ldr	r3, [r7, #12]
20004114:	681b      	ldr	r3, [r3, #0]
20004116:	4a73      	ldr	r2, [pc, #460]	@ (200042e4 <HAL_DMA_Start_IT+0x4a0>)
20004118:	4293      	cmp	r3, r2
2000411a:	d03b      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
2000411c:	68fb      	ldr	r3, [r7, #12]
2000411e:	681b      	ldr	r3, [r3, #0]
20004120:	4a71      	ldr	r2, [pc, #452]	@ (200042e8 <HAL_DMA_Start_IT+0x4a4>)
20004122:	4293      	cmp	r3, r2
20004124:	d036      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004126:	68fb      	ldr	r3, [r7, #12]
20004128:	681b      	ldr	r3, [r3, #0]
2000412a:	4a70      	ldr	r2, [pc, #448]	@ (200042ec <HAL_DMA_Start_IT+0x4a8>)
2000412c:	4293      	cmp	r3, r2
2000412e:	d031      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004130:	68fb      	ldr	r3, [r7, #12]
20004132:	681b      	ldr	r3, [r3, #0]
20004134:	4a6e      	ldr	r2, [pc, #440]	@ (200042f0 <HAL_DMA_Start_IT+0x4ac>)
20004136:	4293      	cmp	r3, r2
20004138:	d02c      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
2000413a:	68fb      	ldr	r3, [r7, #12]
2000413c:	681b      	ldr	r3, [r3, #0]
2000413e:	4a6d      	ldr	r2, [pc, #436]	@ (200042f4 <HAL_DMA_Start_IT+0x4b0>)
20004140:	4293      	cmp	r3, r2
20004142:	d027      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004144:	68fb      	ldr	r3, [r7, #12]
20004146:	681b      	ldr	r3, [r3, #0]
20004148:	4a6b      	ldr	r2, [pc, #428]	@ (200042f8 <HAL_DMA_Start_IT+0x4b4>)
2000414a:	4293      	cmp	r3, r2
2000414c:	d022      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
2000414e:	68fb      	ldr	r3, [r7, #12]
20004150:	681b      	ldr	r3, [r3, #0]
20004152:	4a6a      	ldr	r2, [pc, #424]	@ (200042fc <HAL_DMA_Start_IT+0x4b8>)
20004154:	4293      	cmp	r3, r2
20004156:	d01d      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004158:	68fb      	ldr	r3, [r7, #12]
2000415a:	681b      	ldr	r3, [r3, #0]
2000415c:	4a68      	ldr	r2, [pc, #416]	@ (20004300 <HAL_DMA_Start_IT+0x4bc>)
2000415e:	4293      	cmp	r3, r2
20004160:	d018      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004162:	68fb      	ldr	r3, [r7, #12]
20004164:	681b      	ldr	r3, [r3, #0]
20004166:	4a67      	ldr	r2, [pc, #412]	@ (20004304 <HAL_DMA_Start_IT+0x4c0>)
20004168:	4293      	cmp	r3, r2
2000416a:	d013      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
2000416c:	68fb      	ldr	r3, [r7, #12]
2000416e:	681b      	ldr	r3, [r3, #0]
20004170:	4a65      	ldr	r2, [pc, #404]	@ (20004308 <HAL_DMA_Start_IT+0x4c4>)
20004172:	4293      	cmp	r3, r2
20004174:	d00e      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004176:	68fb      	ldr	r3, [r7, #12]
20004178:	681b      	ldr	r3, [r3, #0]
2000417a:	4a64      	ldr	r2, [pc, #400]	@ (2000430c <HAL_DMA_Start_IT+0x4c8>)
2000417c:	4293      	cmp	r3, r2
2000417e:	d009      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
20004180:	68fb      	ldr	r3, [r7, #12]
20004182:	681b      	ldr	r3, [r3, #0]
20004184:	4a62      	ldr	r2, [pc, #392]	@ (20004310 <HAL_DMA_Start_IT+0x4cc>)
20004186:	4293      	cmp	r3, r2
20004188:	d004      	beq.n	20004194 <HAL_DMA_Start_IT+0x350>
2000418a:	68fb      	ldr	r3, [r7, #12]
2000418c:	681b      	ldr	r3, [r3, #0]
2000418e:	4a61      	ldr	r2, [pc, #388]	@ (20004314 <HAL_DMA_Start_IT+0x4d0>)
20004190:	4293      	cmp	r3, r2
20004192:	d101      	bne.n	20004198 <HAL_DMA_Start_IT+0x354>
20004194:	2301      	movs	r3, #1
20004196:	e000      	b.n	2000419a <HAL_DMA_Start_IT+0x356>
20004198:	2300      	movs	r3, #0
2000419a:	2b00      	cmp	r3, #0
2000419c:	d01a      	beq.n	200041d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
2000419e:	68fb      	ldr	r3, [r7, #12]
200041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200041a2:	681b      	ldr	r3, [r3, #0]
200041a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200041a8:	2b00      	cmp	r3, #0
200041aa:	d007      	beq.n	200041bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
200041ac:	68fb      	ldr	r3, [r7, #12]
200041ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200041b0:	681a      	ldr	r2, [r3, #0]
200041b2:	68fb      	ldr	r3, [r7, #12]
200041b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200041b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
200041ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
200041bc:	68fb      	ldr	r3, [r7, #12]
200041be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200041c0:	2b00      	cmp	r3, #0
200041c2:	d007      	beq.n	200041d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
200041c4:	68fb      	ldr	r3, [r7, #12]
200041c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200041c8:	681a      	ldr	r2, [r3, #0]
200041ca:	68fb      	ldr	r3, [r7, #12]
200041cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200041ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
200041d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
200041d4:	68fb      	ldr	r3, [r7, #12]
200041d6:	681b      	ldr	r3, [r3, #0]
200041d8:	4a37      	ldr	r2, [pc, #220]	@ (200042b8 <HAL_DMA_Start_IT+0x474>)
200041da:	4293      	cmp	r3, r2
200041dc:	d04a      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
200041de:	68fb      	ldr	r3, [r7, #12]
200041e0:	681b      	ldr	r3, [r3, #0]
200041e2:	4a36      	ldr	r2, [pc, #216]	@ (200042bc <HAL_DMA_Start_IT+0x478>)
200041e4:	4293      	cmp	r3, r2
200041e6:	d045      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
200041e8:	68fb      	ldr	r3, [r7, #12]
200041ea:	681b      	ldr	r3, [r3, #0]
200041ec:	4a34      	ldr	r2, [pc, #208]	@ (200042c0 <HAL_DMA_Start_IT+0x47c>)
200041ee:	4293      	cmp	r3, r2
200041f0:	d040      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
200041f2:	68fb      	ldr	r3, [r7, #12]
200041f4:	681b      	ldr	r3, [r3, #0]
200041f6:	4a33      	ldr	r2, [pc, #204]	@ (200042c4 <HAL_DMA_Start_IT+0x480>)
200041f8:	4293      	cmp	r3, r2
200041fa:	d03b      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
200041fc:	68fb      	ldr	r3, [r7, #12]
200041fe:	681b      	ldr	r3, [r3, #0]
20004200:	4a31      	ldr	r2, [pc, #196]	@ (200042c8 <HAL_DMA_Start_IT+0x484>)
20004202:	4293      	cmp	r3, r2
20004204:	d036      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
20004206:	68fb      	ldr	r3, [r7, #12]
20004208:	681b      	ldr	r3, [r3, #0]
2000420a:	4a30      	ldr	r2, [pc, #192]	@ (200042cc <HAL_DMA_Start_IT+0x488>)
2000420c:	4293      	cmp	r3, r2
2000420e:	d031      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
20004210:	68fb      	ldr	r3, [r7, #12]
20004212:	681b      	ldr	r3, [r3, #0]
20004214:	4a2e      	ldr	r2, [pc, #184]	@ (200042d0 <HAL_DMA_Start_IT+0x48c>)
20004216:	4293      	cmp	r3, r2
20004218:	d02c      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
2000421a:	68fb      	ldr	r3, [r7, #12]
2000421c:	681b      	ldr	r3, [r3, #0]
2000421e:	4a2d      	ldr	r2, [pc, #180]	@ (200042d4 <HAL_DMA_Start_IT+0x490>)
20004220:	4293      	cmp	r3, r2
20004222:	d027      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
20004224:	68fb      	ldr	r3, [r7, #12]
20004226:	681b      	ldr	r3, [r3, #0]
20004228:	4a2b      	ldr	r2, [pc, #172]	@ (200042d8 <HAL_DMA_Start_IT+0x494>)
2000422a:	4293      	cmp	r3, r2
2000422c:	d022      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
2000422e:	68fb      	ldr	r3, [r7, #12]
20004230:	681b      	ldr	r3, [r3, #0]
20004232:	4a2a      	ldr	r2, [pc, #168]	@ (200042dc <HAL_DMA_Start_IT+0x498>)
20004234:	4293      	cmp	r3, r2
20004236:	d01d      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
20004238:	68fb      	ldr	r3, [r7, #12]
2000423a:	681b      	ldr	r3, [r3, #0]
2000423c:	4a28      	ldr	r2, [pc, #160]	@ (200042e0 <HAL_DMA_Start_IT+0x49c>)
2000423e:	4293      	cmp	r3, r2
20004240:	d018      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
20004242:	68fb      	ldr	r3, [r7, #12]
20004244:	681b      	ldr	r3, [r3, #0]
20004246:	4a27      	ldr	r2, [pc, #156]	@ (200042e4 <HAL_DMA_Start_IT+0x4a0>)
20004248:	4293      	cmp	r3, r2
2000424a:	d013      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
2000424c:	68fb      	ldr	r3, [r7, #12]
2000424e:	681b      	ldr	r3, [r3, #0]
20004250:	4a25      	ldr	r2, [pc, #148]	@ (200042e8 <HAL_DMA_Start_IT+0x4a4>)
20004252:	4293      	cmp	r3, r2
20004254:	d00e      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
20004256:	68fb      	ldr	r3, [r7, #12]
20004258:	681b      	ldr	r3, [r3, #0]
2000425a:	4a24      	ldr	r2, [pc, #144]	@ (200042ec <HAL_DMA_Start_IT+0x4a8>)
2000425c:	4293      	cmp	r3, r2
2000425e:	d009      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
20004260:	68fb      	ldr	r3, [r7, #12]
20004262:	681b      	ldr	r3, [r3, #0]
20004264:	4a22      	ldr	r2, [pc, #136]	@ (200042f0 <HAL_DMA_Start_IT+0x4ac>)
20004266:	4293      	cmp	r3, r2
20004268:	d004      	beq.n	20004274 <HAL_DMA_Start_IT+0x430>
2000426a:	68fb      	ldr	r3, [r7, #12]
2000426c:	681b      	ldr	r3, [r3, #0]
2000426e:	4a21      	ldr	r2, [pc, #132]	@ (200042f4 <HAL_DMA_Start_IT+0x4b0>)
20004270:	4293      	cmp	r3, r2
20004272:	d108      	bne.n	20004286 <HAL_DMA_Start_IT+0x442>
20004274:	68fb      	ldr	r3, [r7, #12]
20004276:	681b      	ldr	r3, [r3, #0]
20004278:	681a      	ldr	r2, [r3, #0]
2000427a:	68fb      	ldr	r3, [r7, #12]
2000427c:	681b      	ldr	r3, [r3, #0]
2000427e:	f042 0201 	orr.w	r2, r2, #1
20004282:	601a      	str	r2, [r3, #0]
20004284:	e012      	b.n	200042ac <HAL_DMA_Start_IT+0x468>
20004286:	68fb      	ldr	r3, [r7, #12]
20004288:	681b      	ldr	r3, [r3, #0]
2000428a:	681a      	ldr	r2, [r3, #0]
2000428c:	68fb      	ldr	r3, [r7, #12]
2000428e:	681b      	ldr	r3, [r3, #0]
20004290:	f042 0201 	orr.w	r2, r2, #1
20004294:	601a      	str	r2, [r3, #0]
20004296:	e009      	b.n	200042ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
20004298:	68fb      	ldr	r3, [r7, #12]
2000429a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
2000429e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
200042a0:	68fb      	ldr	r3, [r7, #12]
200042a2:	2200      	movs	r2, #0
200042a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
200042a8:	2301      	movs	r3, #1
200042aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
200042ac:	7dfb      	ldrb	r3, [r7, #23]
}
200042ae:	4618      	mov	r0, r3
200042b0:	3718      	adds	r7, #24
200042b2:	46bd      	mov	sp, r7
200042b4:	bd80      	pop	{r7, pc}
200042b6:	bf00      	nop
200042b8:	40020010 	.word	0x40020010
200042bc:	40020028 	.word	0x40020028
200042c0:	40020040 	.word	0x40020040
200042c4:	40020058 	.word	0x40020058
200042c8:	40020070 	.word	0x40020070
200042cc:	40020088 	.word	0x40020088
200042d0:	400200a0 	.word	0x400200a0
200042d4:	400200b8 	.word	0x400200b8
200042d8:	40020410 	.word	0x40020410
200042dc:	40020428 	.word	0x40020428
200042e0:	40020440 	.word	0x40020440
200042e4:	40020458 	.word	0x40020458
200042e8:	40020470 	.word	0x40020470
200042ec:	40020488 	.word	0x40020488
200042f0:	400204a0 	.word	0x400204a0
200042f4:	400204b8 	.word	0x400204b8
200042f8:	58025408 	.word	0x58025408
200042fc:	5802541c 	.word	0x5802541c
20004300:	58025430 	.word	0x58025430
20004304:	58025444 	.word	0x58025444
20004308:	58025458 	.word	0x58025458
2000430c:	5802546c 	.word	0x5802546c
20004310:	58025480 	.word	0x58025480
20004314:	58025494 	.word	0x58025494

20004318 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
20004318:	b580      	push	{r7, lr}
2000431a:	b086      	sub	sp, #24
2000431c:	af00      	add	r7, sp, #0
2000431e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
20004320:	f7fd ffce 	bl	200022c0 <HAL_GetTick>
20004324:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
20004326:	687b      	ldr	r3, [r7, #4]
20004328:	2b00      	cmp	r3, #0
2000432a:	d101      	bne.n	20004330 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
2000432c:	2301      	movs	r3, #1
2000432e:	e2dc      	b.n	200048ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
20004330:	687b      	ldr	r3, [r7, #4]
20004332:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20004336:	b2db      	uxtb	r3, r3
20004338:	2b02      	cmp	r3, #2
2000433a:	d008      	beq.n	2000434e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2000433c:	687b      	ldr	r3, [r7, #4]
2000433e:	2280      	movs	r2, #128	@ 0x80
20004340:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20004342:	687b      	ldr	r3, [r7, #4]
20004344:	2200      	movs	r2, #0
20004346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
2000434a:	2301      	movs	r3, #1
2000434c:	e2cd      	b.n	200048ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2000434e:	687b      	ldr	r3, [r7, #4]
20004350:	681b      	ldr	r3, [r3, #0]
20004352:	4a76      	ldr	r2, [pc, #472]	@ (2000452c <HAL_DMA_Abort+0x214>)
20004354:	4293      	cmp	r3, r2
20004356:	d04a      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
20004358:	687b      	ldr	r3, [r7, #4]
2000435a:	681b      	ldr	r3, [r3, #0]
2000435c:	4a74      	ldr	r2, [pc, #464]	@ (20004530 <HAL_DMA_Abort+0x218>)
2000435e:	4293      	cmp	r3, r2
20004360:	d045      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
20004362:	687b      	ldr	r3, [r7, #4]
20004364:	681b      	ldr	r3, [r3, #0]
20004366:	4a73      	ldr	r2, [pc, #460]	@ (20004534 <HAL_DMA_Abort+0x21c>)
20004368:	4293      	cmp	r3, r2
2000436a:	d040      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
2000436c:	687b      	ldr	r3, [r7, #4]
2000436e:	681b      	ldr	r3, [r3, #0]
20004370:	4a71      	ldr	r2, [pc, #452]	@ (20004538 <HAL_DMA_Abort+0x220>)
20004372:	4293      	cmp	r3, r2
20004374:	d03b      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
20004376:	687b      	ldr	r3, [r7, #4]
20004378:	681b      	ldr	r3, [r3, #0]
2000437a:	4a70      	ldr	r2, [pc, #448]	@ (2000453c <HAL_DMA_Abort+0x224>)
2000437c:	4293      	cmp	r3, r2
2000437e:	d036      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
20004380:	687b      	ldr	r3, [r7, #4]
20004382:	681b      	ldr	r3, [r3, #0]
20004384:	4a6e      	ldr	r2, [pc, #440]	@ (20004540 <HAL_DMA_Abort+0x228>)
20004386:	4293      	cmp	r3, r2
20004388:	d031      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
2000438a:	687b      	ldr	r3, [r7, #4]
2000438c:	681b      	ldr	r3, [r3, #0]
2000438e:	4a6d      	ldr	r2, [pc, #436]	@ (20004544 <HAL_DMA_Abort+0x22c>)
20004390:	4293      	cmp	r3, r2
20004392:	d02c      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
20004394:	687b      	ldr	r3, [r7, #4]
20004396:	681b      	ldr	r3, [r3, #0]
20004398:	4a6b      	ldr	r2, [pc, #428]	@ (20004548 <HAL_DMA_Abort+0x230>)
2000439a:	4293      	cmp	r3, r2
2000439c:	d027      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
2000439e:	687b      	ldr	r3, [r7, #4]
200043a0:	681b      	ldr	r3, [r3, #0]
200043a2:	4a6a      	ldr	r2, [pc, #424]	@ (2000454c <HAL_DMA_Abort+0x234>)
200043a4:	4293      	cmp	r3, r2
200043a6:	d022      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
200043a8:	687b      	ldr	r3, [r7, #4]
200043aa:	681b      	ldr	r3, [r3, #0]
200043ac:	4a68      	ldr	r2, [pc, #416]	@ (20004550 <HAL_DMA_Abort+0x238>)
200043ae:	4293      	cmp	r3, r2
200043b0:	d01d      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
200043b2:	687b      	ldr	r3, [r7, #4]
200043b4:	681b      	ldr	r3, [r3, #0]
200043b6:	4a67      	ldr	r2, [pc, #412]	@ (20004554 <HAL_DMA_Abort+0x23c>)
200043b8:	4293      	cmp	r3, r2
200043ba:	d018      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
200043bc:	687b      	ldr	r3, [r7, #4]
200043be:	681b      	ldr	r3, [r3, #0]
200043c0:	4a65      	ldr	r2, [pc, #404]	@ (20004558 <HAL_DMA_Abort+0x240>)
200043c2:	4293      	cmp	r3, r2
200043c4:	d013      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
200043c6:	687b      	ldr	r3, [r7, #4]
200043c8:	681b      	ldr	r3, [r3, #0]
200043ca:	4a64      	ldr	r2, [pc, #400]	@ (2000455c <HAL_DMA_Abort+0x244>)
200043cc:	4293      	cmp	r3, r2
200043ce:	d00e      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
200043d0:	687b      	ldr	r3, [r7, #4]
200043d2:	681b      	ldr	r3, [r3, #0]
200043d4:	4a62      	ldr	r2, [pc, #392]	@ (20004560 <HAL_DMA_Abort+0x248>)
200043d6:	4293      	cmp	r3, r2
200043d8:	d009      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
200043da:	687b      	ldr	r3, [r7, #4]
200043dc:	681b      	ldr	r3, [r3, #0]
200043de:	4a61      	ldr	r2, [pc, #388]	@ (20004564 <HAL_DMA_Abort+0x24c>)
200043e0:	4293      	cmp	r3, r2
200043e2:	d004      	beq.n	200043ee <HAL_DMA_Abort+0xd6>
200043e4:	687b      	ldr	r3, [r7, #4]
200043e6:	681b      	ldr	r3, [r3, #0]
200043e8:	4a5f      	ldr	r2, [pc, #380]	@ (20004568 <HAL_DMA_Abort+0x250>)
200043ea:	4293      	cmp	r3, r2
200043ec:	d101      	bne.n	200043f2 <HAL_DMA_Abort+0xda>
200043ee:	2301      	movs	r3, #1
200043f0:	e000      	b.n	200043f4 <HAL_DMA_Abort+0xdc>
200043f2:	2300      	movs	r3, #0
200043f4:	2b00      	cmp	r3, #0
200043f6:	d013      	beq.n	20004420 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
200043f8:	687b      	ldr	r3, [r7, #4]
200043fa:	681b      	ldr	r3, [r3, #0]
200043fc:	681a      	ldr	r2, [r3, #0]
200043fe:	687b      	ldr	r3, [r7, #4]
20004400:	681b      	ldr	r3, [r3, #0]
20004402:	f022 021e 	bic.w	r2, r2, #30
20004406:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
20004408:	687b      	ldr	r3, [r7, #4]
2000440a:	681b      	ldr	r3, [r3, #0]
2000440c:	695a      	ldr	r2, [r3, #20]
2000440e:	687b      	ldr	r3, [r7, #4]
20004410:	681b      	ldr	r3, [r3, #0]
20004412:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
20004416:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
20004418:	687b      	ldr	r3, [r7, #4]
2000441a:	681b      	ldr	r3, [r3, #0]
2000441c:	617b      	str	r3, [r7, #20]
2000441e:	e00a      	b.n	20004436 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
20004420:	687b      	ldr	r3, [r7, #4]
20004422:	681b      	ldr	r3, [r3, #0]
20004424:	681a      	ldr	r2, [r3, #0]
20004426:	687b      	ldr	r3, [r7, #4]
20004428:	681b      	ldr	r3, [r3, #0]
2000442a:	f022 020e 	bic.w	r2, r2, #14
2000442e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
20004430:	687b      	ldr	r3, [r7, #4]
20004432:	681b      	ldr	r3, [r3, #0]
20004434:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
20004436:	687b      	ldr	r3, [r7, #4]
20004438:	681b      	ldr	r3, [r3, #0]
2000443a:	4a3c      	ldr	r2, [pc, #240]	@ (2000452c <HAL_DMA_Abort+0x214>)
2000443c:	4293      	cmp	r3, r2
2000443e:	d072      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
20004440:	687b      	ldr	r3, [r7, #4]
20004442:	681b      	ldr	r3, [r3, #0]
20004444:	4a3a      	ldr	r2, [pc, #232]	@ (20004530 <HAL_DMA_Abort+0x218>)
20004446:	4293      	cmp	r3, r2
20004448:	d06d      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
2000444a:	687b      	ldr	r3, [r7, #4]
2000444c:	681b      	ldr	r3, [r3, #0]
2000444e:	4a39      	ldr	r2, [pc, #228]	@ (20004534 <HAL_DMA_Abort+0x21c>)
20004450:	4293      	cmp	r3, r2
20004452:	d068      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
20004454:	687b      	ldr	r3, [r7, #4]
20004456:	681b      	ldr	r3, [r3, #0]
20004458:	4a37      	ldr	r2, [pc, #220]	@ (20004538 <HAL_DMA_Abort+0x220>)
2000445a:	4293      	cmp	r3, r2
2000445c:	d063      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
2000445e:	687b      	ldr	r3, [r7, #4]
20004460:	681b      	ldr	r3, [r3, #0]
20004462:	4a36      	ldr	r2, [pc, #216]	@ (2000453c <HAL_DMA_Abort+0x224>)
20004464:	4293      	cmp	r3, r2
20004466:	d05e      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
20004468:	687b      	ldr	r3, [r7, #4]
2000446a:	681b      	ldr	r3, [r3, #0]
2000446c:	4a34      	ldr	r2, [pc, #208]	@ (20004540 <HAL_DMA_Abort+0x228>)
2000446e:	4293      	cmp	r3, r2
20004470:	d059      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
20004472:	687b      	ldr	r3, [r7, #4]
20004474:	681b      	ldr	r3, [r3, #0]
20004476:	4a33      	ldr	r2, [pc, #204]	@ (20004544 <HAL_DMA_Abort+0x22c>)
20004478:	4293      	cmp	r3, r2
2000447a:	d054      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
2000447c:	687b      	ldr	r3, [r7, #4]
2000447e:	681b      	ldr	r3, [r3, #0]
20004480:	4a31      	ldr	r2, [pc, #196]	@ (20004548 <HAL_DMA_Abort+0x230>)
20004482:	4293      	cmp	r3, r2
20004484:	d04f      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
20004486:	687b      	ldr	r3, [r7, #4]
20004488:	681b      	ldr	r3, [r3, #0]
2000448a:	4a30      	ldr	r2, [pc, #192]	@ (2000454c <HAL_DMA_Abort+0x234>)
2000448c:	4293      	cmp	r3, r2
2000448e:	d04a      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
20004490:	687b      	ldr	r3, [r7, #4]
20004492:	681b      	ldr	r3, [r3, #0]
20004494:	4a2e      	ldr	r2, [pc, #184]	@ (20004550 <HAL_DMA_Abort+0x238>)
20004496:	4293      	cmp	r3, r2
20004498:	d045      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
2000449a:	687b      	ldr	r3, [r7, #4]
2000449c:	681b      	ldr	r3, [r3, #0]
2000449e:	4a2d      	ldr	r2, [pc, #180]	@ (20004554 <HAL_DMA_Abort+0x23c>)
200044a0:	4293      	cmp	r3, r2
200044a2:	d040      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044a4:	687b      	ldr	r3, [r7, #4]
200044a6:	681b      	ldr	r3, [r3, #0]
200044a8:	4a2b      	ldr	r2, [pc, #172]	@ (20004558 <HAL_DMA_Abort+0x240>)
200044aa:	4293      	cmp	r3, r2
200044ac:	d03b      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044ae:	687b      	ldr	r3, [r7, #4]
200044b0:	681b      	ldr	r3, [r3, #0]
200044b2:	4a2a      	ldr	r2, [pc, #168]	@ (2000455c <HAL_DMA_Abort+0x244>)
200044b4:	4293      	cmp	r3, r2
200044b6:	d036      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044b8:	687b      	ldr	r3, [r7, #4]
200044ba:	681b      	ldr	r3, [r3, #0]
200044bc:	4a28      	ldr	r2, [pc, #160]	@ (20004560 <HAL_DMA_Abort+0x248>)
200044be:	4293      	cmp	r3, r2
200044c0:	d031      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044c2:	687b      	ldr	r3, [r7, #4]
200044c4:	681b      	ldr	r3, [r3, #0]
200044c6:	4a27      	ldr	r2, [pc, #156]	@ (20004564 <HAL_DMA_Abort+0x24c>)
200044c8:	4293      	cmp	r3, r2
200044ca:	d02c      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044cc:	687b      	ldr	r3, [r7, #4]
200044ce:	681b      	ldr	r3, [r3, #0]
200044d0:	4a25      	ldr	r2, [pc, #148]	@ (20004568 <HAL_DMA_Abort+0x250>)
200044d2:	4293      	cmp	r3, r2
200044d4:	d027      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044d6:	687b      	ldr	r3, [r7, #4]
200044d8:	681b      	ldr	r3, [r3, #0]
200044da:	4a24      	ldr	r2, [pc, #144]	@ (2000456c <HAL_DMA_Abort+0x254>)
200044dc:	4293      	cmp	r3, r2
200044de:	d022      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044e0:	687b      	ldr	r3, [r7, #4]
200044e2:	681b      	ldr	r3, [r3, #0]
200044e4:	4a22      	ldr	r2, [pc, #136]	@ (20004570 <HAL_DMA_Abort+0x258>)
200044e6:	4293      	cmp	r3, r2
200044e8:	d01d      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044ea:	687b      	ldr	r3, [r7, #4]
200044ec:	681b      	ldr	r3, [r3, #0]
200044ee:	4a21      	ldr	r2, [pc, #132]	@ (20004574 <HAL_DMA_Abort+0x25c>)
200044f0:	4293      	cmp	r3, r2
200044f2:	d018      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044f4:	687b      	ldr	r3, [r7, #4]
200044f6:	681b      	ldr	r3, [r3, #0]
200044f8:	4a1f      	ldr	r2, [pc, #124]	@ (20004578 <HAL_DMA_Abort+0x260>)
200044fa:	4293      	cmp	r3, r2
200044fc:	d013      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
200044fe:	687b      	ldr	r3, [r7, #4]
20004500:	681b      	ldr	r3, [r3, #0]
20004502:	4a1e      	ldr	r2, [pc, #120]	@ (2000457c <HAL_DMA_Abort+0x264>)
20004504:	4293      	cmp	r3, r2
20004506:	d00e      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
20004508:	687b      	ldr	r3, [r7, #4]
2000450a:	681b      	ldr	r3, [r3, #0]
2000450c:	4a1c      	ldr	r2, [pc, #112]	@ (20004580 <HAL_DMA_Abort+0x268>)
2000450e:	4293      	cmp	r3, r2
20004510:	d009      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
20004512:	687b      	ldr	r3, [r7, #4]
20004514:	681b      	ldr	r3, [r3, #0]
20004516:	4a1b      	ldr	r2, [pc, #108]	@ (20004584 <HAL_DMA_Abort+0x26c>)
20004518:	4293      	cmp	r3, r2
2000451a:	d004      	beq.n	20004526 <HAL_DMA_Abort+0x20e>
2000451c:	687b      	ldr	r3, [r7, #4]
2000451e:	681b      	ldr	r3, [r3, #0]
20004520:	4a19      	ldr	r2, [pc, #100]	@ (20004588 <HAL_DMA_Abort+0x270>)
20004522:	4293      	cmp	r3, r2
20004524:	d132      	bne.n	2000458c <HAL_DMA_Abort+0x274>
20004526:	2301      	movs	r3, #1
20004528:	e031      	b.n	2000458e <HAL_DMA_Abort+0x276>
2000452a:	bf00      	nop
2000452c:	40020010 	.word	0x40020010
20004530:	40020028 	.word	0x40020028
20004534:	40020040 	.word	0x40020040
20004538:	40020058 	.word	0x40020058
2000453c:	40020070 	.word	0x40020070
20004540:	40020088 	.word	0x40020088
20004544:	400200a0 	.word	0x400200a0
20004548:	400200b8 	.word	0x400200b8
2000454c:	40020410 	.word	0x40020410
20004550:	40020428 	.word	0x40020428
20004554:	40020440 	.word	0x40020440
20004558:	40020458 	.word	0x40020458
2000455c:	40020470 	.word	0x40020470
20004560:	40020488 	.word	0x40020488
20004564:	400204a0 	.word	0x400204a0
20004568:	400204b8 	.word	0x400204b8
2000456c:	58025408 	.word	0x58025408
20004570:	5802541c 	.word	0x5802541c
20004574:	58025430 	.word	0x58025430
20004578:	58025444 	.word	0x58025444
2000457c:	58025458 	.word	0x58025458
20004580:	5802546c 	.word	0x5802546c
20004584:	58025480 	.word	0x58025480
20004588:	58025494 	.word	0x58025494
2000458c:	2300      	movs	r3, #0
2000458e:	2b00      	cmp	r3, #0
20004590:	d007      	beq.n	200045a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
20004592:	687b      	ldr	r3, [r7, #4]
20004594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20004596:	681a      	ldr	r2, [r3, #0]
20004598:	687b      	ldr	r3, [r7, #4]
2000459a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2000459c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
200045a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
200045a2:	687b      	ldr	r3, [r7, #4]
200045a4:	681b      	ldr	r3, [r3, #0]
200045a6:	4a6d      	ldr	r2, [pc, #436]	@ (2000475c <HAL_DMA_Abort+0x444>)
200045a8:	4293      	cmp	r3, r2
200045aa:	d04a      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045ac:	687b      	ldr	r3, [r7, #4]
200045ae:	681b      	ldr	r3, [r3, #0]
200045b0:	4a6b      	ldr	r2, [pc, #428]	@ (20004760 <HAL_DMA_Abort+0x448>)
200045b2:	4293      	cmp	r3, r2
200045b4:	d045      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045b6:	687b      	ldr	r3, [r7, #4]
200045b8:	681b      	ldr	r3, [r3, #0]
200045ba:	4a6a      	ldr	r2, [pc, #424]	@ (20004764 <HAL_DMA_Abort+0x44c>)
200045bc:	4293      	cmp	r3, r2
200045be:	d040      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045c0:	687b      	ldr	r3, [r7, #4]
200045c2:	681b      	ldr	r3, [r3, #0]
200045c4:	4a68      	ldr	r2, [pc, #416]	@ (20004768 <HAL_DMA_Abort+0x450>)
200045c6:	4293      	cmp	r3, r2
200045c8:	d03b      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045ca:	687b      	ldr	r3, [r7, #4]
200045cc:	681b      	ldr	r3, [r3, #0]
200045ce:	4a67      	ldr	r2, [pc, #412]	@ (2000476c <HAL_DMA_Abort+0x454>)
200045d0:	4293      	cmp	r3, r2
200045d2:	d036      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045d4:	687b      	ldr	r3, [r7, #4]
200045d6:	681b      	ldr	r3, [r3, #0]
200045d8:	4a65      	ldr	r2, [pc, #404]	@ (20004770 <HAL_DMA_Abort+0x458>)
200045da:	4293      	cmp	r3, r2
200045dc:	d031      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045de:	687b      	ldr	r3, [r7, #4]
200045e0:	681b      	ldr	r3, [r3, #0]
200045e2:	4a64      	ldr	r2, [pc, #400]	@ (20004774 <HAL_DMA_Abort+0x45c>)
200045e4:	4293      	cmp	r3, r2
200045e6:	d02c      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045e8:	687b      	ldr	r3, [r7, #4]
200045ea:	681b      	ldr	r3, [r3, #0]
200045ec:	4a62      	ldr	r2, [pc, #392]	@ (20004778 <HAL_DMA_Abort+0x460>)
200045ee:	4293      	cmp	r3, r2
200045f0:	d027      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045f2:	687b      	ldr	r3, [r7, #4]
200045f4:	681b      	ldr	r3, [r3, #0]
200045f6:	4a61      	ldr	r2, [pc, #388]	@ (2000477c <HAL_DMA_Abort+0x464>)
200045f8:	4293      	cmp	r3, r2
200045fa:	d022      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
200045fc:	687b      	ldr	r3, [r7, #4]
200045fe:	681b      	ldr	r3, [r3, #0]
20004600:	4a5f      	ldr	r2, [pc, #380]	@ (20004780 <HAL_DMA_Abort+0x468>)
20004602:	4293      	cmp	r3, r2
20004604:	d01d      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
20004606:	687b      	ldr	r3, [r7, #4]
20004608:	681b      	ldr	r3, [r3, #0]
2000460a:	4a5e      	ldr	r2, [pc, #376]	@ (20004784 <HAL_DMA_Abort+0x46c>)
2000460c:	4293      	cmp	r3, r2
2000460e:	d018      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
20004610:	687b      	ldr	r3, [r7, #4]
20004612:	681b      	ldr	r3, [r3, #0]
20004614:	4a5c      	ldr	r2, [pc, #368]	@ (20004788 <HAL_DMA_Abort+0x470>)
20004616:	4293      	cmp	r3, r2
20004618:	d013      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
2000461a:	687b      	ldr	r3, [r7, #4]
2000461c:	681b      	ldr	r3, [r3, #0]
2000461e:	4a5b      	ldr	r2, [pc, #364]	@ (2000478c <HAL_DMA_Abort+0x474>)
20004620:	4293      	cmp	r3, r2
20004622:	d00e      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
20004624:	687b      	ldr	r3, [r7, #4]
20004626:	681b      	ldr	r3, [r3, #0]
20004628:	4a59      	ldr	r2, [pc, #356]	@ (20004790 <HAL_DMA_Abort+0x478>)
2000462a:	4293      	cmp	r3, r2
2000462c:	d009      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
2000462e:	687b      	ldr	r3, [r7, #4]
20004630:	681b      	ldr	r3, [r3, #0]
20004632:	4a58      	ldr	r2, [pc, #352]	@ (20004794 <HAL_DMA_Abort+0x47c>)
20004634:	4293      	cmp	r3, r2
20004636:	d004      	beq.n	20004642 <HAL_DMA_Abort+0x32a>
20004638:	687b      	ldr	r3, [r7, #4]
2000463a:	681b      	ldr	r3, [r3, #0]
2000463c:	4a56      	ldr	r2, [pc, #344]	@ (20004798 <HAL_DMA_Abort+0x480>)
2000463e:	4293      	cmp	r3, r2
20004640:	d108      	bne.n	20004654 <HAL_DMA_Abort+0x33c>
20004642:	687b      	ldr	r3, [r7, #4]
20004644:	681b      	ldr	r3, [r3, #0]
20004646:	681a      	ldr	r2, [r3, #0]
20004648:	687b      	ldr	r3, [r7, #4]
2000464a:	681b      	ldr	r3, [r3, #0]
2000464c:	f022 0201 	bic.w	r2, r2, #1
20004650:	601a      	str	r2, [r3, #0]
20004652:	e007      	b.n	20004664 <HAL_DMA_Abort+0x34c>
20004654:	687b      	ldr	r3, [r7, #4]
20004656:	681b      	ldr	r3, [r3, #0]
20004658:	681a      	ldr	r2, [r3, #0]
2000465a:	687b      	ldr	r3, [r7, #4]
2000465c:	681b      	ldr	r3, [r3, #0]
2000465e:	f022 0201 	bic.w	r2, r2, #1
20004662:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
20004664:	e013      	b.n	2000468e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
20004666:	f7fd fe2b 	bl	200022c0 <HAL_GetTick>
2000466a:	4602      	mov	r2, r0
2000466c:	693b      	ldr	r3, [r7, #16]
2000466e:	1ad3      	subs	r3, r2, r3
20004670:	2b05      	cmp	r3, #5
20004672:	d90c      	bls.n	2000468e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20004674:	687b      	ldr	r3, [r7, #4]
20004676:	2220      	movs	r2, #32
20004678:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
2000467a:	687b      	ldr	r3, [r7, #4]
2000467c:	2203      	movs	r2, #3
2000467e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20004682:	687b      	ldr	r3, [r7, #4]
20004684:	2200      	movs	r2, #0
20004686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
2000468a:	2301      	movs	r3, #1
2000468c:	e12d      	b.n	200048ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
2000468e:	697b      	ldr	r3, [r7, #20]
20004690:	681b      	ldr	r3, [r3, #0]
20004692:	f003 0301 	and.w	r3, r3, #1
20004696:	2b00      	cmp	r3, #0
20004698:	d1e5      	bne.n	20004666 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2000469a:	687b      	ldr	r3, [r7, #4]
2000469c:	681b      	ldr	r3, [r3, #0]
2000469e:	4a2f      	ldr	r2, [pc, #188]	@ (2000475c <HAL_DMA_Abort+0x444>)
200046a0:	4293      	cmp	r3, r2
200046a2:	d04a      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046a4:	687b      	ldr	r3, [r7, #4]
200046a6:	681b      	ldr	r3, [r3, #0]
200046a8:	4a2d      	ldr	r2, [pc, #180]	@ (20004760 <HAL_DMA_Abort+0x448>)
200046aa:	4293      	cmp	r3, r2
200046ac:	d045      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046ae:	687b      	ldr	r3, [r7, #4]
200046b0:	681b      	ldr	r3, [r3, #0]
200046b2:	4a2c      	ldr	r2, [pc, #176]	@ (20004764 <HAL_DMA_Abort+0x44c>)
200046b4:	4293      	cmp	r3, r2
200046b6:	d040      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046b8:	687b      	ldr	r3, [r7, #4]
200046ba:	681b      	ldr	r3, [r3, #0]
200046bc:	4a2a      	ldr	r2, [pc, #168]	@ (20004768 <HAL_DMA_Abort+0x450>)
200046be:	4293      	cmp	r3, r2
200046c0:	d03b      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046c2:	687b      	ldr	r3, [r7, #4]
200046c4:	681b      	ldr	r3, [r3, #0]
200046c6:	4a29      	ldr	r2, [pc, #164]	@ (2000476c <HAL_DMA_Abort+0x454>)
200046c8:	4293      	cmp	r3, r2
200046ca:	d036      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046cc:	687b      	ldr	r3, [r7, #4]
200046ce:	681b      	ldr	r3, [r3, #0]
200046d0:	4a27      	ldr	r2, [pc, #156]	@ (20004770 <HAL_DMA_Abort+0x458>)
200046d2:	4293      	cmp	r3, r2
200046d4:	d031      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046d6:	687b      	ldr	r3, [r7, #4]
200046d8:	681b      	ldr	r3, [r3, #0]
200046da:	4a26      	ldr	r2, [pc, #152]	@ (20004774 <HAL_DMA_Abort+0x45c>)
200046dc:	4293      	cmp	r3, r2
200046de:	d02c      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046e0:	687b      	ldr	r3, [r7, #4]
200046e2:	681b      	ldr	r3, [r3, #0]
200046e4:	4a24      	ldr	r2, [pc, #144]	@ (20004778 <HAL_DMA_Abort+0x460>)
200046e6:	4293      	cmp	r3, r2
200046e8:	d027      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046ea:	687b      	ldr	r3, [r7, #4]
200046ec:	681b      	ldr	r3, [r3, #0]
200046ee:	4a23      	ldr	r2, [pc, #140]	@ (2000477c <HAL_DMA_Abort+0x464>)
200046f0:	4293      	cmp	r3, r2
200046f2:	d022      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046f4:	687b      	ldr	r3, [r7, #4]
200046f6:	681b      	ldr	r3, [r3, #0]
200046f8:	4a21      	ldr	r2, [pc, #132]	@ (20004780 <HAL_DMA_Abort+0x468>)
200046fa:	4293      	cmp	r3, r2
200046fc:	d01d      	beq.n	2000473a <HAL_DMA_Abort+0x422>
200046fe:	687b      	ldr	r3, [r7, #4]
20004700:	681b      	ldr	r3, [r3, #0]
20004702:	4a20      	ldr	r2, [pc, #128]	@ (20004784 <HAL_DMA_Abort+0x46c>)
20004704:	4293      	cmp	r3, r2
20004706:	d018      	beq.n	2000473a <HAL_DMA_Abort+0x422>
20004708:	687b      	ldr	r3, [r7, #4]
2000470a:	681b      	ldr	r3, [r3, #0]
2000470c:	4a1e      	ldr	r2, [pc, #120]	@ (20004788 <HAL_DMA_Abort+0x470>)
2000470e:	4293      	cmp	r3, r2
20004710:	d013      	beq.n	2000473a <HAL_DMA_Abort+0x422>
20004712:	687b      	ldr	r3, [r7, #4]
20004714:	681b      	ldr	r3, [r3, #0]
20004716:	4a1d      	ldr	r2, [pc, #116]	@ (2000478c <HAL_DMA_Abort+0x474>)
20004718:	4293      	cmp	r3, r2
2000471a:	d00e      	beq.n	2000473a <HAL_DMA_Abort+0x422>
2000471c:	687b      	ldr	r3, [r7, #4]
2000471e:	681b      	ldr	r3, [r3, #0]
20004720:	4a1b      	ldr	r2, [pc, #108]	@ (20004790 <HAL_DMA_Abort+0x478>)
20004722:	4293      	cmp	r3, r2
20004724:	d009      	beq.n	2000473a <HAL_DMA_Abort+0x422>
20004726:	687b      	ldr	r3, [r7, #4]
20004728:	681b      	ldr	r3, [r3, #0]
2000472a:	4a1a      	ldr	r2, [pc, #104]	@ (20004794 <HAL_DMA_Abort+0x47c>)
2000472c:	4293      	cmp	r3, r2
2000472e:	d004      	beq.n	2000473a <HAL_DMA_Abort+0x422>
20004730:	687b      	ldr	r3, [r7, #4]
20004732:	681b      	ldr	r3, [r3, #0]
20004734:	4a18      	ldr	r2, [pc, #96]	@ (20004798 <HAL_DMA_Abort+0x480>)
20004736:	4293      	cmp	r3, r2
20004738:	d101      	bne.n	2000473e <HAL_DMA_Abort+0x426>
2000473a:	2301      	movs	r3, #1
2000473c:	e000      	b.n	20004740 <HAL_DMA_Abort+0x428>
2000473e:	2300      	movs	r3, #0
20004740:	2b00      	cmp	r3, #0
20004742:	d02b      	beq.n	2000479c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20004744:	687b      	ldr	r3, [r7, #4]
20004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20004748:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2000474a:	687b      	ldr	r3, [r7, #4]
2000474c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2000474e:	f003 031f 	and.w	r3, r3, #31
20004752:	223f      	movs	r2, #63	@ 0x3f
20004754:	409a      	lsls	r2, r3
20004756:	68bb      	ldr	r3, [r7, #8]
20004758:	609a      	str	r2, [r3, #8]
2000475a:	e02a      	b.n	200047b2 <HAL_DMA_Abort+0x49a>
2000475c:	40020010 	.word	0x40020010
20004760:	40020028 	.word	0x40020028
20004764:	40020040 	.word	0x40020040
20004768:	40020058 	.word	0x40020058
2000476c:	40020070 	.word	0x40020070
20004770:	40020088 	.word	0x40020088
20004774:	400200a0 	.word	0x400200a0
20004778:	400200b8 	.word	0x400200b8
2000477c:	40020410 	.word	0x40020410
20004780:	40020428 	.word	0x40020428
20004784:	40020440 	.word	0x40020440
20004788:	40020458 	.word	0x40020458
2000478c:	40020470 	.word	0x40020470
20004790:	40020488 	.word	0x40020488
20004794:	400204a0 	.word	0x400204a0
20004798:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2000479c:	687b      	ldr	r3, [r7, #4]
2000479e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200047a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
200047a2:	687b      	ldr	r3, [r7, #4]
200047a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200047a6:	f003 031f 	and.w	r3, r3, #31
200047aa:	2201      	movs	r2, #1
200047ac:	409a      	lsls	r2, r3
200047ae:	68fb      	ldr	r3, [r7, #12]
200047b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
200047b2:	687b      	ldr	r3, [r7, #4]
200047b4:	681b      	ldr	r3, [r3, #0]
200047b6:	4a4f      	ldr	r2, [pc, #316]	@ (200048f4 <HAL_DMA_Abort+0x5dc>)
200047b8:	4293      	cmp	r3, r2
200047ba:	d072      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
200047bc:	687b      	ldr	r3, [r7, #4]
200047be:	681b      	ldr	r3, [r3, #0]
200047c0:	4a4d      	ldr	r2, [pc, #308]	@ (200048f8 <HAL_DMA_Abort+0x5e0>)
200047c2:	4293      	cmp	r3, r2
200047c4:	d06d      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
200047c6:	687b      	ldr	r3, [r7, #4]
200047c8:	681b      	ldr	r3, [r3, #0]
200047ca:	4a4c      	ldr	r2, [pc, #304]	@ (200048fc <HAL_DMA_Abort+0x5e4>)
200047cc:	4293      	cmp	r3, r2
200047ce:	d068      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
200047d0:	687b      	ldr	r3, [r7, #4]
200047d2:	681b      	ldr	r3, [r3, #0]
200047d4:	4a4a      	ldr	r2, [pc, #296]	@ (20004900 <HAL_DMA_Abort+0x5e8>)
200047d6:	4293      	cmp	r3, r2
200047d8:	d063      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
200047da:	687b      	ldr	r3, [r7, #4]
200047dc:	681b      	ldr	r3, [r3, #0]
200047de:	4a49      	ldr	r2, [pc, #292]	@ (20004904 <HAL_DMA_Abort+0x5ec>)
200047e0:	4293      	cmp	r3, r2
200047e2:	d05e      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
200047e4:	687b      	ldr	r3, [r7, #4]
200047e6:	681b      	ldr	r3, [r3, #0]
200047e8:	4a47      	ldr	r2, [pc, #284]	@ (20004908 <HAL_DMA_Abort+0x5f0>)
200047ea:	4293      	cmp	r3, r2
200047ec:	d059      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
200047ee:	687b      	ldr	r3, [r7, #4]
200047f0:	681b      	ldr	r3, [r3, #0]
200047f2:	4a46      	ldr	r2, [pc, #280]	@ (2000490c <HAL_DMA_Abort+0x5f4>)
200047f4:	4293      	cmp	r3, r2
200047f6:	d054      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
200047f8:	687b      	ldr	r3, [r7, #4]
200047fa:	681b      	ldr	r3, [r3, #0]
200047fc:	4a44      	ldr	r2, [pc, #272]	@ (20004910 <HAL_DMA_Abort+0x5f8>)
200047fe:	4293      	cmp	r3, r2
20004800:	d04f      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004802:	687b      	ldr	r3, [r7, #4]
20004804:	681b      	ldr	r3, [r3, #0]
20004806:	4a43      	ldr	r2, [pc, #268]	@ (20004914 <HAL_DMA_Abort+0x5fc>)
20004808:	4293      	cmp	r3, r2
2000480a:	d04a      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
2000480c:	687b      	ldr	r3, [r7, #4]
2000480e:	681b      	ldr	r3, [r3, #0]
20004810:	4a41      	ldr	r2, [pc, #260]	@ (20004918 <HAL_DMA_Abort+0x600>)
20004812:	4293      	cmp	r3, r2
20004814:	d045      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004816:	687b      	ldr	r3, [r7, #4]
20004818:	681b      	ldr	r3, [r3, #0]
2000481a:	4a40      	ldr	r2, [pc, #256]	@ (2000491c <HAL_DMA_Abort+0x604>)
2000481c:	4293      	cmp	r3, r2
2000481e:	d040      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004820:	687b      	ldr	r3, [r7, #4]
20004822:	681b      	ldr	r3, [r3, #0]
20004824:	4a3e      	ldr	r2, [pc, #248]	@ (20004920 <HAL_DMA_Abort+0x608>)
20004826:	4293      	cmp	r3, r2
20004828:	d03b      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
2000482a:	687b      	ldr	r3, [r7, #4]
2000482c:	681b      	ldr	r3, [r3, #0]
2000482e:	4a3d      	ldr	r2, [pc, #244]	@ (20004924 <HAL_DMA_Abort+0x60c>)
20004830:	4293      	cmp	r3, r2
20004832:	d036      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004834:	687b      	ldr	r3, [r7, #4]
20004836:	681b      	ldr	r3, [r3, #0]
20004838:	4a3b      	ldr	r2, [pc, #236]	@ (20004928 <HAL_DMA_Abort+0x610>)
2000483a:	4293      	cmp	r3, r2
2000483c:	d031      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
2000483e:	687b      	ldr	r3, [r7, #4]
20004840:	681b      	ldr	r3, [r3, #0]
20004842:	4a3a      	ldr	r2, [pc, #232]	@ (2000492c <HAL_DMA_Abort+0x614>)
20004844:	4293      	cmp	r3, r2
20004846:	d02c      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004848:	687b      	ldr	r3, [r7, #4]
2000484a:	681b      	ldr	r3, [r3, #0]
2000484c:	4a38      	ldr	r2, [pc, #224]	@ (20004930 <HAL_DMA_Abort+0x618>)
2000484e:	4293      	cmp	r3, r2
20004850:	d027      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004852:	687b      	ldr	r3, [r7, #4]
20004854:	681b      	ldr	r3, [r3, #0]
20004856:	4a37      	ldr	r2, [pc, #220]	@ (20004934 <HAL_DMA_Abort+0x61c>)
20004858:	4293      	cmp	r3, r2
2000485a:	d022      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
2000485c:	687b      	ldr	r3, [r7, #4]
2000485e:	681b      	ldr	r3, [r3, #0]
20004860:	4a35      	ldr	r2, [pc, #212]	@ (20004938 <HAL_DMA_Abort+0x620>)
20004862:	4293      	cmp	r3, r2
20004864:	d01d      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004866:	687b      	ldr	r3, [r7, #4]
20004868:	681b      	ldr	r3, [r3, #0]
2000486a:	4a34      	ldr	r2, [pc, #208]	@ (2000493c <HAL_DMA_Abort+0x624>)
2000486c:	4293      	cmp	r3, r2
2000486e:	d018      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004870:	687b      	ldr	r3, [r7, #4]
20004872:	681b      	ldr	r3, [r3, #0]
20004874:	4a32      	ldr	r2, [pc, #200]	@ (20004940 <HAL_DMA_Abort+0x628>)
20004876:	4293      	cmp	r3, r2
20004878:	d013      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
2000487a:	687b      	ldr	r3, [r7, #4]
2000487c:	681b      	ldr	r3, [r3, #0]
2000487e:	4a31      	ldr	r2, [pc, #196]	@ (20004944 <HAL_DMA_Abort+0x62c>)
20004880:	4293      	cmp	r3, r2
20004882:	d00e      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004884:	687b      	ldr	r3, [r7, #4]
20004886:	681b      	ldr	r3, [r3, #0]
20004888:	4a2f      	ldr	r2, [pc, #188]	@ (20004948 <HAL_DMA_Abort+0x630>)
2000488a:	4293      	cmp	r3, r2
2000488c:	d009      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
2000488e:	687b      	ldr	r3, [r7, #4]
20004890:	681b      	ldr	r3, [r3, #0]
20004892:	4a2e      	ldr	r2, [pc, #184]	@ (2000494c <HAL_DMA_Abort+0x634>)
20004894:	4293      	cmp	r3, r2
20004896:	d004      	beq.n	200048a2 <HAL_DMA_Abort+0x58a>
20004898:	687b      	ldr	r3, [r7, #4]
2000489a:	681b      	ldr	r3, [r3, #0]
2000489c:	4a2c      	ldr	r2, [pc, #176]	@ (20004950 <HAL_DMA_Abort+0x638>)
2000489e:	4293      	cmp	r3, r2
200048a0:	d101      	bne.n	200048a6 <HAL_DMA_Abort+0x58e>
200048a2:	2301      	movs	r3, #1
200048a4:	e000      	b.n	200048a8 <HAL_DMA_Abort+0x590>
200048a6:	2300      	movs	r3, #0
200048a8:	2b00      	cmp	r3, #0
200048aa:	d015      	beq.n	200048d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
200048ac:	687b      	ldr	r3, [r7, #4]
200048ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200048b0:	687a      	ldr	r2, [r7, #4]
200048b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
200048b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
200048b6:	687b      	ldr	r3, [r7, #4]
200048b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200048ba:	2b00      	cmp	r3, #0
200048bc:	d00c      	beq.n	200048d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
200048be:	687b      	ldr	r3, [r7, #4]
200048c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200048c2:	681a      	ldr	r2, [r3, #0]
200048c4:	687b      	ldr	r3, [r7, #4]
200048c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200048c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
200048cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
200048ce:	687b      	ldr	r3, [r7, #4]
200048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200048d2:	687a      	ldr	r2, [r7, #4]
200048d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
200048d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
200048d8:	687b      	ldr	r3, [r7, #4]
200048da:	2201      	movs	r2, #1
200048dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
200048e0:	687b      	ldr	r3, [r7, #4]
200048e2:	2200      	movs	r2, #0
200048e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
200048e8:	2300      	movs	r3, #0
}
200048ea:	4618      	mov	r0, r3
200048ec:	3718      	adds	r7, #24
200048ee:	46bd      	mov	sp, r7
200048f0:	bd80      	pop	{r7, pc}
200048f2:	bf00      	nop
200048f4:	40020010 	.word	0x40020010
200048f8:	40020028 	.word	0x40020028
200048fc:	40020040 	.word	0x40020040
20004900:	40020058 	.word	0x40020058
20004904:	40020070 	.word	0x40020070
20004908:	40020088 	.word	0x40020088
2000490c:	400200a0 	.word	0x400200a0
20004910:	400200b8 	.word	0x400200b8
20004914:	40020410 	.word	0x40020410
20004918:	40020428 	.word	0x40020428
2000491c:	40020440 	.word	0x40020440
20004920:	40020458 	.word	0x40020458
20004924:	40020470 	.word	0x40020470
20004928:	40020488 	.word	0x40020488
2000492c:	400204a0 	.word	0x400204a0
20004930:	400204b8 	.word	0x400204b8
20004934:	58025408 	.word	0x58025408
20004938:	5802541c 	.word	0x5802541c
2000493c:	58025430 	.word	0x58025430
20004940:	58025444 	.word	0x58025444
20004944:	58025458 	.word	0x58025458
20004948:	5802546c 	.word	0x5802546c
2000494c:	58025480 	.word	0x58025480
20004950:	58025494 	.word	0x58025494

20004954 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
20004954:	b580      	push	{r7, lr}
20004956:	b084      	sub	sp, #16
20004958:	af00      	add	r7, sp, #0
2000495a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2000495c:	687b      	ldr	r3, [r7, #4]
2000495e:	2b00      	cmp	r3, #0
20004960:	d101      	bne.n	20004966 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
20004962:	2301      	movs	r3, #1
20004964:	e237      	b.n	20004dd6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
20004966:	687b      	ldr	r3, [r7, #4]
20004968:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
2000496c:	b2db      	uxtb	r3, r3
2000496e:	2b02      	cmp	r3, #2
20004970:	d004      	beq.n	2000497c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20004972:	687b      	ldr	r3, [r7, #4]
20004974:	2280      	movs	r2, #128	@ 0x80
20004976:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
20004978:	2301      	movs	r3, #1
2000497a:	e22c      	b.n	20004dd6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2000497c:	687b      	ldr	r3, [r7, #4]
2000497e:	681b      	ldr	r3, [r3, #0]
20004980:	4a5c      	ldr	r2, [pc, #368]	@ (20004af4 <HAL_DMA_Abort_IT+0x1a0>)
20004982:	4293      	cmp	r3, r2
20004984:	d04a      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
20004986:	687b      	ldr	r3, [r7, #4]
20004988:	681b      	ldr	r3, [r3, #0]
2000498a:	4a5b      	ldr	r2, [pc, #364]	@ (20004af8 <HAL_DMA_Abort_IT+0x1a4>)
2000498c:	4293      	cmp	r3, r2
2000498e:	d045      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
20004990:	687b      	ldr	r3, [r7, #4]
20004992:	681b      	ldr	r3, [r3, #0]
20004994:	4a59      	ldr	r2, [pc, #356]	@ (20004afc <HAL_DMA_Abort_IT+0x1a8>)
20004996:	4293      	cmp	r3, r2
20004998:	d040      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
2000499a:	687b      	ldr	r3, [r7, #4]
2000499c:	681b      	ldr	r3, [r3, #0]
2000499e:	4a58      	ldr	r2, [pc, #352]	@ (20004b00 <HAL_DMA_Abort_IT+0x1ac>)
200049a0:	4293      	cmp	r3, r2
200049a2:	d03b      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049a4:	687b      	ldr	r3, [r7, #4]
200049a6:	681b      	ldr	r3, [r3, #0]
200049a8:	4a56      	ldr	r2, [pc, #344]	@ (20004b04 <HAL_DMA_Abort_IT+0x1b0>)
200049aa:	4293      	cmp	r3, r2
200049ac:	d036      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049ae:	687b      	ldr	r3, [r7, #4]
200049b0:	681b      	ldr	r3, [r3, #0]
200049b2:	4a55      	ldr	r2, [pc, #340]	@ (20004b08 <HAL_DMA_Abort_IT+0x1b4>)
200049b4:	4293      	cmp	r3, r2
200049b6:	d031      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049b8:	687b      	ldr	r3, [r7, #4]
200049ba:	681b      	ldr	r3, [r3, #0]
200049bc:	4a53      	ldr	r2, [pc, #332]	@ (20004b0c <HAL_DMA_Abort_IT+0x1b8>)
200049be:	4293      	cmp	r3, r2
200049c0:	d02c      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049c2:	687b      	ldr	r3, [r7, #4]
200049c4:	681b      	ldr	r3, [r3, #0]
200049c6:	4a52      	ldr	r2, [pc, #328]	@ (20004b10 <HAL_DMA_Abort_IT+0x1bc>)
200049c8:	4293      	cmp	r3, r2
200049ca:	d027      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049cc:	687b      	ldr	r3, [r7, #4]
200049ce:	681b      	ldr	r3, [r3, #0]
200049d0:	4a50      	ldr	r2, [pc, #320]	@ (20004b14 <HAL_DMA_Abort_IT+0x1c0>)
200049d2:	4293      	cmp	r3, r2
200049d4:	d022      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049d6:	687b      	ldr	r3, [r7, #4]
200049d8:	681b      	ldr	r3, [r3, #0]
200049da:	4a4f      	ldr	r2, [pc, #316]	@ (20004b18 <HAL_DMA_Abort_IT+0x1c4>)
200049dc:	4293      	cmp	r3, r2
200049de:	d01d      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049e0:	687b      	ldr	r3, [r7, #4]
200049e2:	681b      	ldr	r3, [r3, #0]
200049e4:	4a4d      	ldr	r2, [pc, #308]	@ (20004b1c <HAL_DMA_Abort_IT+0x1c8>)
200049e6:	4293      	cmp	r3, r2
200049e8:	d018      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049ea:	687b      	ldr	r3, [r7, #4]
200049ec:	681b      	ldr	r3, [r3, #0]
200049ee:	4a4c      	ldr	r2, [pc, #304]	@ (20004b20 <HAL_DMA_Abort_IT+0x1cc>)
200049f0:	4293      	cmp	r3, r2
200049f2:	d013      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049f4:	687b      	ldr	r3, [r7, #4]
200049f6:	681b      	ldr	r3, [r3, #0]
200049f8:	4a4a      	ldr	r2, [pc, #296]	@ (20004b24 <HAL_DMA_Abort_IT+0x1d0>)
200049fa:	4293      	cmp	r3, r2
200049fc:	d00e      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
200049fe:	687b      	ldr	r3, [r7, #4]
20004a00:	681b      	ldr	r3, [r3, #0]
20004a02:	4a49      	ldr	r2, [pc, #292]	@ (20004b28 <HAL_DMA_Abort_IT+0x1d4>)
20004a04:	4293      	cmp	r3, r2
20004a06:	d009      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
20004a08:	687b      	ldr	r3, [r7, #4]
20004a0a:	681b      	ldr	r3, [r3, #0]
20004a0c:	4a47      	ldr	r2, [pc, #284]	@ (20004b2c <HAL_DMA_Abort_IT+0x1d8>)
20004a0e:	4293      	cmp	r3, r2
20004a10:	d004      	beq.n	20004a1c <HAL_DMA_Abort_IT+0xc8>
20004a12:	687b      	ldr	r3, [r7, #4]
20004a14:	681b      	ldr	r3, [r3, #0]
20004a16:	4a46      	ldr	r2, [pc, #280]	@ (20004b30 <HAL_DMA_Abort_IT+0x1dc>)
20004a18:	4293      	cmp	r3, r2
20004a1a:	d101      	bne.n	20004a20 <HAL_DMA_Abort_IT+0xcc>
20004a1c:	2301      	movs	r3, #1
20004a1e:	e000      	b.n	20004a22 <HAL_DMA_Abort_IT+0xce>
20004a20:	2300      	movs	r3, #0
20004a22:	2b00      	cmp	r3, #0
20004a24:	f000 8086 	beq.w	20004b34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
20004a28:	687b      	ldr	r3, [r7, #4]
20004a2a:	2204      	movs	r2, #4
20004a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
20004a30:	687b      	ldr	r3, [r7, #4]
20004a32:	681b      	ldr	r3, [r3, #0]
20004a34:	4a2f      	ldr	r2, [pc, #188]	@ (20004af4 <HAL_DMA_Abort_IT+0x1a0>)
20004a36:	4293      	cmp	r3, r2
20004a38:	d04a      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a3a:	687b      	ldr	r3, [r7, #4]
20004a3c:	681b      	ldr	r3, [r3, #0]
20004a3e:	4a2e      	ldr	r2, [pc, #184]	@ (20004af8 <HAL_DMA_Abort_IT+0x1a4>)
20004a40:	4293      	cmp	r3, r2
20004a42:	d045      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a44:	687b      	ldr	r3, [r7, #4]
20004a46:	681b      	ldr	r3, [r3, #0]
20004a48:	4a2c      	ldr	r2, [pc, #176]	@ (20004afc <HAL_DMA_Abort_IT+0x1a8>)
20004a4a:	4293      	cmp	r3, r2
20004a4c:	d040      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a4e:	687b      	ldr	r3, [r7, #4]
20004a50:	681b      	ldr	r3, [r3, #0]
20004a52:	4a2b      	ldr	r2, [pc, #172]	@ (20004b00 <HAL_DMA_Abort_IT+0x1ac>)
20004a54:	4293      	cmp	r3, r2
20004a56:	d03b      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a58:	687b      	ldr	r3, [r7, #4]
20004a5a:	681b      	ldr	r3, [r3, #0]
20004a5c:	4a29      	ldr	r2, [pc, #164]	@ (20004b04 <HAL_DMA_Abort_IT+0x1b0>)
20004a5e:	4293      	cmp	r3, r2
20004a60:	d036      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a62:	687b      	ldr	r3, [r7, #4]
20004a64:	681b      	ldr	r3, [r3, #0]
20004a66:	4a28      	ldr	r2, [pc, #160]	@ (20004b08 <HAL_DMA_Abort_IT+0x1b4>)
20004a68:	4293      	cmp	r3, r2
20004a6a:	d031      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a6c:	687b      	ldr	r3, [r7, #4]
20004a6e:	681b      	ldr	r3, [r3, #0]
20004a70:	4a26      	ldr	r2, [pc, #152]	@ (20004b0c <HAL_DMA_Abort_IT+0x1b8>)
20004a72:	4293      	cmp	r3, r2
20004a74:	d02c      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a76:	687b      	ldr	r3, [r7, #4]
20004a78:	681b      	ldr	r3, [r3, #0]
20004a7a:	4a25      	ldr	r2, [pc, #148]	@ (20004b10 <HAL_DMA_Abort_IT+0x1bc>)
20004a7c:	4293      	cmp	r3, r2
20004a7e:	d027      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a80:	687b      	ldr	r3, [r7, #4]
20004a82:	681b      	ldr	r3, [r3, #0]
20004a84:	4a23      	ldr	r2, [pc, #140]	@ (20004b14 <HAL_DMA_Abort_IT+0x1c0>)
20004a86:	4293      	cmp	r3, r2
20004a88:	d022      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a8a:	687b      	ldr	r3, [r7, #4]
20004a8c:	681b      	ldr	r3, [r3, #0]
20004a8e:	4a22      	ldr	r2, [pc, #136]	@ (20004b18 <HAL_DMA_Abort_IT+0x1c4>)
20004a90:	4293      	cmp	r3, r2
20004a92:	d01d      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a94:	687b      	ldr	r3, [r7, #4]
20004a96:	681b      	ldr	r3, [r3, #0]
20004a98:	4a20      	ldr	r2, [pc, #128]	@ (20004b1c <HAL_DMA_Abort_IT+0x1c8>)
20004a9a:	4293      	cmp	r3, r2
20004a9c:	d018      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004a9e:	687b      	ldr	r3, [r7, #4]
20004aa0:	681b      	ldr	r3, [r3, #0]
20004aa2:	4a1f      	ldr	r2, [pc, #124]	@ (20004b20 <HAL_DMA_Abort_IT+0x1cc>)
20004aa4:	4293      	cmp	r3, r2
20004aa6:	d013      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004aa8:	687b      	ldr	r3, [r7, #4]
20004aaa:	681b      	ldr	r3, [r3, #0]
20004aac:	4a1d      	ldr	r2, [pc, #116]	@ (20004b24 <HAL_DMA_Abort_IT+0x1d0>)
20004aae:	4293      	cmp	r3, r2
20004ab0:	d00e      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004ab2:	687b      	ldr	r3, [r7, #4]
20004ab4:	681b      	ldr	r3, [r3, #0]
20004ab6:	4a1c      	ldr	r2, [pc, #112]	@ (20004b28 <HAL_DMA_Abort_IT+0x1d4>)
20004ab8:	4293      	cmp	r3, r2
20004aba:	d009      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004abc:	687b      	ldr	r3, [r7, #4]
20004abe:	681b      	ldr	r3, [r3, #0]
20004ac0:	4a1a      	ldr	r2, [pc, #104]	@ (20004b2c <HAL_DMA_Abort_IT+0x1d8>)
20004ac2:	4293      	cmp	r3, r2
20004ac4:	d004      	beq.n	20004ad0 <HAL_DMA_Abort_IT+0x17c>
20004ac6:	687b      	ldr	r3, [r7, #4]
20004ac8:	681b      	ldr	r3, [r3, #0]
20004aca:	4a19      	ldr	r2, [pc, #100]	@ (20004b30 <HAL_DMA_Abort_IT+0x1dc>)
20004acc:	4293      	cmp	r3, r2
20004ace:	d108      	bne.n	20004ae2 <HAL_DMA_Abort_IT+0x18e>
20004ad0:	687b      	ldr	r3, [r7, #4]
20004ad2:	681b      	ldr	r3, [r3, #0]
20004ad4:	681a      	ldr	r2, [r3, #0]
20004ad6:	687b      	ldr	r3, [r7, #4]
20004ad8:	681b      	ldr	r3, [r3, #0]
20004ada:	f022 0201 	bic.w	r2, r2, #1
20004ade:	601a      	str	r2, [r3, #0]
20004ae0:	e178      	b.n	20004dd4 <HAL_DMA_Abort_IT+0x480>
20004ae2:	687b      	ldr	r3, [r7, #4]
20004ae4:	681b      	ldr	r3, [r3, #0]
20004ae6:	681a      	ldr	r2, [r3, #0]
20004ae8:	687b      	ldr	r3, [r7, #4]
20004aea:	681b      	ldr	r3, [r3, #0]
20004aec:	f022 0201 	bic.w	r2, r2, #1
20004af0:	601a      	str	r2, [r3, #0]
20004af2:	e16f      	b.n	20004dd4 <HAL_DMA_Abort_IT+0x480>
20004af4:	40020010 	.word	0x40020010
20004af8:	40020028 	.word	0x40020028
20004afc:	40020040 	.word	0x40020040
20004b00:	40020058 	.word	0x40020058
20004b04:	40020070 	.word	0x40020070
20004b08:	40020088 	.word	0x40020088
20004b0c:	400200a0 	.word	0x400200a0
20004b10:	400200b8 	.word	0x400200b8
20004b14:	40020410 	.word	0x40020410
20004b18:	40020428 	.word	0x40020428
20004b1c:	40020440 	.word	0x40020440
20004b20:	40020458 	.word	0x40020458
20004b24:	40020470 	.word	0x40020470
20004b28:	40020488 	.word	0x40020488
20004b2c:	400204a0 	.word	0x400204a0
20004b30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
20004b34:	687b      	ldr	r3, [r7, #4]
20004b36:	681b      	ldr	r3, [r3, #0]
20004b38:	681a      	ldr	r2, [r3, #0]
20004b3a:	687b      	ldr	r3, [r7, #4]
20004b3c:	681b      	ldr	r3, [r3, #0]
20004b3e:	f022 020e 	bic.w	r2, r2, #14
20004b42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
20004b44:	687b      	ldr	r3, [r7, #4]
20004b46:	681b      	ldr	r3, [r3, #0]
20004b48:	4a6c      	ldr	r2, [pc, #432]	@ (20004cfc <HAL_DMA_Abort_IT+0x3a8>)
20004b4a:	4293      	cmp	r3, r2
20004b4c:	d04a      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b4e:	687b      	ldr	r3, [r7, #4]
20004b50:	681b      	ldr	r3, [r3, #0]
20004b52:	4a6b      	ldr	r2, [pc, #428]	@ (20004d00 <HAL_DMA_Abort_IT+0x3ac>)
20004b54:	4293      	cmp	r3, r2
20004b56:	d045      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b58:	687b      	ldr	r3, [r7, #4]
20004b5a:	681b      	ldr	r3, [r3, #0]
20004b5c:	4a69      	ldr	r2, [pc, #420]	@ (20004d04 <HAL_DMA_Abort_IT+0x3b0>)
20004b5e:	4293      	cmp	r3, r2
20004b60:	d040      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b62:	687b      	ldr	r3, [r7, #4]
20004b64:	681b      	ldr	r3, [r3, #0]
20004b66:	4a68      	ldr	r2, [pc, #416]	@ (20004d08 <HAL_DMA_Abort_IT+0x3b4>)
20004b68:	4293      	cmp	r3, r2
20004b6a:	d03b      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b6c:	687b      	ldr	r3, [r7, #4]
20004b6e:	681b      	ldr	r3, [r3, #0]
20004b70:	4a66      	ldr	r2, [pc, #408]	@ (20004d0c <HAL_DMA_Abort_IT+0x3b8>)
20004b72:	4293      	cmp	r3, r2
20004b74:	d036      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b76:	687b      	ldr	r3, [r7, #4]
20004b78:	681b      	ldr	r3, [r3, #0]
20004b7a:	4a65      	ldr	r2, [pc, #404]	@ (20004d10 <HAL_DMA_Abort_IT+0x3bc>)
20004b7c:	4293      	cmp	r3, r2
20004b7e:	d031      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b80:	687b      	ldr	r3, [r7, #4]
20004b82:	681b      	ldr	r3, [r3, #0]
20004b84:	4a63      	ldr	r2, [pc, #396]	@ (20004d14 <HAL_DMA_Abort_IT+0x3c0>)
20004b86:	4293      	cmp	r3, r2
20004b88:	d02c      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b8a:	687b      	ldr	r3, [r7, #4]
20004b8c:	681b      	ldr	r3, [r3, #0]
20004b8e:	4a62      	ldr	r2, [pc, #392]	@ (20004d18 <HAL_DMA_Abort_IT+0x3c4>)
20004b90:	4293      	cmp	r3, r2
20004b92:	d027      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b94:	687b      	ldr	r3, [r7, #4]
20004b96:	681b      	ldr	r3, [r3, #0]
20004b98:	4a60      	ldr	r2, [pc, #384]	@ (20004d1c <HAL_DMA_Abort_IT+0x3c8>)
20004b9a:	4293      	cmp	r3, r2
20004b9c:	d022      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004b9e:	687b      	ldr	r3, [r7, #4]
20004ba0:	681b      	ldr	r3, [r3, #0]
20004ba2:	4a5f      	ldr	r2, [pc, #380]	@ (20004d20 <HAL_DMA_Abort_IT+0x3cc>)
20004ba4:	4293      	cmp	r3, r2
20004ba6:	d01d      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004ba8:	687b      	ldr	r3, [r7, #4]
20004baa:	681b      	ldr	r3, [r3, #0]
20004bac:	4a5d      	ldr	r2, [pc, #372]	@ (20004d24 <HAL_DMA_Abort_IT+0x3d0>)
20004bae:	4293      	cmp	r3, r2
20004bb0:	d018      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004bb2:	687b      	ldr	r3, [r7, #4]
20004bb4:	681b      	ldr	r3, [r3, #0]
20004bb6:	4a5c      	ldr	r2, [pc, #368]	@ (20004d28 <HAL_DMA_Abort_IT+0x3d4>)
20004bb8:	4293      	cmp	r3, r2
20004bba:	d013      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004bbc:	687b      	ldr	r3, [r7, #4]
20004bbe:	681b      	ldr	r3, [r3, #0]
20004bc0:	4a5a      	ldr	r2, [pc, #360]	@ (20004d2c <HAL_DMA_Abort_IT+0x3d8>)
20004bc2:	4293      	cmp	r3, r2
20004bc4:	d00e      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004bc6:	687b      	ldr	r3, [r7, #4]
20004bc8:	681b      	ldr	r3, [r3, #0]
20004bca:	4a59      	ldr	r2, [pc, #356]	@ (20004d30 <HAL_DMA_Abort_IT+0x3dc>)
20004bcc:	4293      	cmp	r3, r2
20004bce:	d009      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004bd0:	687b      	ldr	r3, [r7, #4]
20004bd2:	681b      	ldr	r3, [r3, #0]
20004bd4:	4a57      	ldr	r2, [pc, #348]	@ (20004d34 <HAL_DMA_Abort_IT+0x3e0>)
20004bd6:	4293      	cmp	r3, r2
20004bd8:	d004      	beq.n	20004be4 <HAL_DMA_Abort_IT+0x290>
20004bda:	687b      	ldr	r3, [r7, #4]
20004bdc:	681b      	ldr	r3, [r3, #0]
20004bde:	4a56      	ldr	r2, [pc, #344]	@ (20004d38 <HAL_DMA_Abort_IT+0x3e4>)
20004be0:	4293      	cmp	r3, r2
20004be2:	d108      	bne.n	20004bf6 <HAL_DMA_Abort_IT+0x2a2>
20004be4:	687b      	ldr	r3, [r7, #4]
20004be6:	681b      	ldr	r3, [r3, #0]
20004be8:	681a      	ldr	r2, [r3, #0]
20004bea:	687b      	ldr	r3, [r7, #4]
20004bec:	681b      	ldr	r3, [r3, #0]
20004bee:	f022 0201 	bic.w	r2, r2, #1
20004bf2:	601a      	str	r2, [r3, #0]
20004bf4:	e007      	b.n	20004c06 <HAL_DMA_Abort_IT+0x2b2>
20004bf6:	687b      	ldr	r3, [r7, #4]
20004bf8:	681b      	ldr	r3, [r3, #0]
20004bfa:	681a      	ldr	r2, [r3, #0]
20004bfc:	687b      	ldr	r3, [r7, #4]
20004bfe:	681b      	ldr	r3, [r3, #0]
20004c00:	f022 0201 	bic.w	r2, r2, #1
20004c04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
20004c06:	687b      	ldr	r3, [r7, #4]
20004c08:	681b      	ldr	r3, [r3, #0]
20004c0a:	4a3c      	ldr	r2, [pc, #240]	@ (20004cfc <HAL_DMA_Abort_IT+0x3a8>)
20004c0c:	4293      	cmp	r3, r2
20004c0e:	d072      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c10:	687b      	ldr	r3, [r7, #4]
20004c12:	681b      	ldr	r3, [r3, #0]
20004c14:	4a3a      	ldr	r2, [pc, #232]	@ (20004d00 <HAL_DMA_Abort_IT+0x3ac>)
20004c16:	4293      	cmp	r3, r2
20004c18:	d06d      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c1a:	687b      	ldr	r3, [r7, #4]
20004c1c:	681b      	ldr	r3, [r3, #0]
20004c1e:	4a39      	ldr	r2, [pc, #228]	@ (20004d04 <HAL_DMA_Abort_IT+0x3b0>)
20004c20:	4293      	cmp	r3, r2
20004c22:	d068      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c24:	687b      	ldr	r3, [r7, #4]
20004c26:	681b      	ldr	r3, [r3, #0]
20004c28:	4a37      	ldr	r2, [pc, #220]	@ (20004d08 <HAL_DMA_Abort_IT+0x3b4>)
20004c2a:	4293      	cmp	r3, r2
20004c2c:	d063      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c2e:	687b      	ldr	r3, [r7, #4]
20004c30:	681b      	ldr	r3, [r3, #0]
20004c32:	4a36      	ldr	r2, [pc, #216]	@ (20004d0c <HAL_DMA_Abort_IT+0x3b8>)
20004c34:	4293      	cmp	r3, r2
20004c36:	d05e      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c38:	687b      	ldr	r3, [r7, #4]
20004c3a:	681b      	ldr	r3, [r3, #0]
20004c3c:	4a34      	ldr	r2, [pc, #208]	@ (20004d10 <HAL_DMA_Abort_IT+0x3bc>)
20004c3e:	4293      	cmp	r3, r2
20004c40:	d059      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c42:	687b      	ldr	r3, [r7, #4]
20004c44:	681b      	ldr	r3, [r3, #0]
20004c46:	4a33      	ldr	r2, [pc, #204]	@ (20004d14 <HAL_DMA_Abort_IT+0x3c0>)
20004c48:	4293      	cmp	r3, r2
20004c4a:	d054      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c4c:	687b      	ldr	r3, [r7, #4]
20004c4e:	681b      	ldr	r3, [r3, #0]
20004c50:	4a31      	ldr	r2, [pc, #196]	@ (20004d18 <HAL_DMA_Abort_IT+0x3c4>)
20004c52:	4293      	cmp	r3, r2
20004c54:	d04f      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c56:	687b      	ldr	r3, [r7, #4]
20004c58:	681b      	ldr	r3, [r3, #0]
20004c5a:	4a30      	ldr	r2, [pc, #192]	@ (20004d1c <HAL_DMA_Abort_IT+0x3c8>)
20004c5c:	4293      	cmp	r3, r2
20004c5e:	d04a      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c60:	687b      	ldr	r3, [r7, #4]
20004c62:	681b      	ldr	r3, [r3, #0]
20004c64:	4a2e      	ldr	r2, [pc, #184]	@ (20004d20 <HAL_DMA_Abort_IT+0x3cc>)
20004c66:	4293      	cmp	r3, r2
20004c68:	d045      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c6a:	687b      	ldr	r3, [r7, #4]
20004c6c:	681b      	ldr	r3, [r3, #0]
20004c6e:	4a2d      	ldr	r2, [pc, #180]	@ (20004d24 <HAL_DMA_Abort_IT+0x3d0>)
20004c70:	4293      	cmp	r3, r2
20004c72:	d040      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c74:	687b      	ldr	r3, [r7, #4]
20004c76:	681b      	ldr	r3, [r3, #0]
20004c78:	4a2b      	ldr	r2, [pc, #172]	@ (20004d28 <HAL_DMA_Abort_IT+0x3d4>)
20004c7a:	4293      	cmp	r3, r2
20004c7c:	d03b      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c7e:	687b      	ldr	r3, [r7, #4]
20004c80:	681b      	ldr	r3, [r3, #0]
20004c82:	4a2a      	ldr	r2, [pc, #168]	@ (20004d2c <HAL_DMA_Abort_IT+0x3d8>)
20004c84:	4293      	cmp	r3, r2
20004c86:	d036      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c88:	687b      	ldr	r3, [r7, #4]
20004c8a:	681b      	ldr	r3, [r3, #0]
20004c8c:	4a28      	ldr	r2, [pc, #160]	@ (20004d30 <HAL_DMA_Abort_IT+0x3dc>)
20004c8e:	4293      	cmp	r3, r2
20004c90:	d031      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c92:	687b      	ldr	r3, [r7, #4]
20004c94:	681b      	ldr	r3, [r3, #0]
20004c96:	4a27      	ldr	r2, [pc, #156]	@ (20004d34 <HAL_DMA_Abort_IT+0x3e0>)
20004c98:	4293      	cmp	r3, r2
20004c9a:	d02c      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004c9c:	687b      	ldr	r3, [r7, #4]
20004c9e:	681b      	ldr	r3, [r3, #0]
20004ca0:	4a25      	ldr	r2, [pc, #148]	@ (20004d38 <HAL_DMA_Abort_IT+0x3e4>)
20004ca2:	4293      	cmp	r3, r2
20004ca4:	d027      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004ca6:	687b      	ldr	r3, [r7, #4]
20004ca8:	681b      	ldr	r3, [r3, #0]
20004caa:	4a24      	ldr	r2, [pc, #144]	@ (20004d3c <HAL_DMA_Abort_IT+0x3e8>)
20004cac:	4293      	cmp	r3, r2
20004cae:	d022      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004cb0:	687b      	ldr	r3, [r7, #4]
20004cb2:	681b      	ldr	r3, [r3, #0]
20004cb4:	4a22      	ldr	r2, [pc, #136]	@ (20004d40 <HAL_DMA_Abort_IT+0x3ec>)
20004cb6:	4293      	cmp	r3, r2
20004cb8:	d01d      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004cba:	687b      	ldr	r3, [r7, #4]
20004cbc:	681b      	ldr	r3, [r3, #0]
20004cbe:	4a21      	ldr	r2, [pc, #132]	@ (20004d44 <HAL_DMA_Abort_IT+0x3f0>)
20004cc0:	4293      	cmp	r3, r2
20004cc2:	d018      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004cc4:	687b      	ldr	r3, [r7, #4]
20004cc6:	681b      	ldr	r3, [r3, #0]
20004cc8:	4a1f      	ldr	r2, [pc, #124]	@ (20004d48 <HAL_DMA_Abort_IT+0x3f4>)
20004cca:	4293      	cmp	r3, r2
20004ccc:	d013      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004cce:	687b      	ldr	r3, [r7, #4]
20004cd0:	681b      	ldr	r3, [r3, #0]
20004cd2:	4a1e      	ldr	r2, [pc, #120]	@ (20004d4c <HAL_DMA_Abort_IT+0x3f8>)
20004cd4:	4293      	cmp	r3, r2
20004cd6:	d00e      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004cd8:	687b      	ldr	r3, [r7, #4]
20004cda:	681b      	ldr	r3, [r3, #0]
20004cdc:	4a1c      	ldr	r2, [pc, #112]	@ (20004d50 <HAL_DMA_Abort_IT+0x3fc>)
20004cde:	4293      	cmp	r3, r2
20004ce0:	d009      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004ce2:	687b      	ldr	r3, [r7, #4]
20004ce4:	681b      	ldr	r3, [r3, #0]
20004ce6:	4a1b      	ldr	r2, [pc, #108]	@ (20004d54 <HAL_DMA_Abort_IT+0x400>)
20004ce8:	4293      	cmp	r3, r2
20004cea:	d004      	beq.n	20004cf6 <HAL_DMA_Abort_IT+0x3a2>
20004cec:	687b      	ldr	r3, [r7, #4]
20004cee:	681b      	ldr	r3, [r3, #0]
20004cf0:	4a19      	ldr	r2, [pc, #100]	@ (20004d58 <HAL_DMA_Abort_IT+0x404>)
20004cf2:	4293      	cmp	r3, r2
20004cf4:	d132      	bne.n	20004d5c <HAL_DMA_Abort_IT+0x408>
20004cf6:	2301      	movs	r3, #1
20004cf8:	e031      	b.n	20004d5e <HAL_DMA_Abort_IT+0x40a>
20004cfa:	bf00      	nop
20004cfc:	40020010 	.word	0x40020010
20004d00:	40020028 	.word	0x40020028
20004d04:	40020040 	.word	0x40020040
20004d08:	40020058 	.word	0x40020058
20004d0c:	40020070 	.word	0x40020070
20004d10:	40020088 	.word	0x40020088
20004d14:	400200a0 	.word	0x400200a0
20004d18:	400200b8 	.word	0x400200b8
20004d1c:	40020410 	.word	0x40020410
20004d20:	40020428 	.word	0x40020428
20004d24:	40020440 	.word	0x40020440
20004d28:	40020458 	.word	0x40020458
20004d2c:	40020470 	.word	0x40020470
20004d30:	40020488 	.word	0x40020488
20004d34:	400204a0 	.word	0x400204a0
20004d38:	400204b8 	.word	0x400204b8
20004d3c:	58025408 	.word	0x58025408
20004d40:	5802541c 	.word	0x5802541c
20004d44:	58025430 	.word	0x58025430
20004d48:	58025444 	.word	0x58025444
20004d4c:	58025458 	.word	0x58025458
20004d50:	5802546c 	.word	0x5802546c
20004d54:	58025480 	.word	0x58025480
20004d58:	58025494 	.word	0x58025494
20004d5c:	2300      	movs	r3, #0
20004d5e:	2b00      	cmp	r3, #0
20004d60:	d028      	beq.n	20004db4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
20004d62:	687b      	ldr	r3, [r7, #4]
20004d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20004d66:	681a      	ldr	r2, [r3, #0]
20004d68:	687b      	ldr	r3, [r7, #4]
20004d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20004d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
20004d70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
20004d72:	687b      	ldr	r3, [r7, #4]
20004d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20004d76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
20004d78:	687b      	ldr	r3, [r7, #4]
20004d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20004d7c:	f003 031f 	and.w	r3, r3, #31
20004d80:	2201      	movs	r2, #1
20004d82:	409a      	lsls	r2, r3
20004d84:	68fb      	ldr	r3, [r7, #12]
20004d86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
20004d88:	687b      	ldr	r3, [r7, #4]
20004d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20004d8c:	687a      	ldr	r2, [r7, #4]
20004d8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
20004d90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
20004d92:	687b      	ldr	r3, [r7, #4]
20004d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20004d96:	2b00      	cmp	r3, #0
20004d98:	d00c      	beq.n	20004db4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
20004d9a:	687b      	ldr	r3, [r7, #4]
20004d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20004d9e:	681a      	ldr	r2, [r3, #0]
20004da0:	687b      	ldr	r3, [r7, #4]
20004da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20004da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
20004da8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
20004daa:	687b      	ldr	r3, [r7, #4]
20004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20004dae:	687a      	ldr	r2, [r7, #4]
20004db0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
20004db2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
20004db4:	687b      	ldr	r3, [r7, #4]
20004db6:	2201      	movs	r2, #1
20004db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20004dbc:	687b      	ldr	r3, [r7, #4]
20004dbe:	2200      	movs	r2, #0
20004dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
20004dc4:	687b      	ldr	r3, [r7, #4]
20004dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20004dc8:	2b00      	cmp	r3, #0
20004dca:	d003      	beq.n	20004dd4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
20004dcc:	687b      	ldr	r3, [r7, #4]
20004dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20004dd0:	6878      	ldr	r0, [r7, #4]
20004dd2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
20004dd4:	2300      	movs	r3, #0
}
20004dd6:	4618      	mov	r0, r3
20004dd8:	3710      	adds	r7, #16
20004dda:	46bd      	mov	sp, r7
20004ddc:	bd80      	pop	{r7, pc}
20004dde:	bf00      	nop

20004de0 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
20004de0:	b580      	push	{r7, lr}
20004de2:	b08a      	sub	sp, #40	@ 0x28
20004de4:	af00      	add	r7, sp, #0
20004de6:	60f8      	str	r0, [r7, #12]
20004de8:	460b      	mov	r3, r1
20004dea:	607a      	str	r2, [r7, #4]
20004dec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
20004dee:	2300      	movs	r3, #0
20004df0:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
20004df2:	f7fd fa65 	bl	200022c0 <HAL_GetTick>
20004df6:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
20004df8:	68fb      	ldr	r3, [r7, #12]
20004dfa:	2b00      	cmp	r3, #0
20004dfc:	d101      	bne.n	20004e02 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
20004dfe:	2301      	movs	r3, #1
20004e00:	e374      	b.n	200054ec <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
20004e02:	68fb      	ldr	r3, [r7, #12]
20004e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20004e08:	b2db      	uxtb	r3, r3
20004e0a:	2b02      	cmp	r3, #2
20004e0c:	d008      	beq.n	20004e20 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20004e0e:	68fb      	ldr	r3, [r7, #12]
20004e10:	2280      	movs	r2, #128	@ 0x80
20004e12:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
20004e14:	68fb      	ldr	r3, [r7, #12]
20004e16:	2200      	movs	r2, #0
20004e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
20004e1c:	2301      	movs	r3, #1
20004e1e:	e365      	b.n	200054ec <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
20004e20:	68fb      	ldr	r3, [r7, #12]
20004e22:	681b      	ldr	r3, [r3, #0]
20004e24:	4a7b      	ldr	r2, [pc, #492]	@ (20005014 <HAL_DMA_PollForTransfer+0x234>)
20004e26:	4293      	cmp	r3, r2
20004e28:	d04a      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e2a:	68fb      	ldr	r3, [r7, #12]
20004e2c:	681b      	ldr	r3, [r3, #0]
20004e2e:	4a7a      	ldr	r2, [pc, #488]	@ (20005018 <HAL_DMA_PollForTransfer+0x238>)
20004e30:	4293      	cmp	r3, r2
20004e32:	d045      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e34:	68fb      	ldr	r3, [r7, #12]
20004e36:	681b      	ldr	r3, [r3, #0]
20004e38:	4a78      	ldr	r2, [pc, #480]	@ (2000501c <HAL_DMA_PollForTransfer+0x23c>)
20004e3a:	4293      	cmp	r3, r2
20004e3c:	d040      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e3e:	68fb      	ldr	r3, [r7, #12]
20004e40:	681b      	ldr	r3, [r3, #0]
20004e42:	4a77      	ldr	r2, [pc, #476]	@ (20005020 <HAL_DMA_PollForTransfer+0x240>)
20004e44:	4293      	cmp	r3, r2
20004e46:	d03b      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e48:	68fb      	ldr	r3, [r7, #12]
20004e4a:	681b      	ldr	r3, [r3, #0]
20004e4c:	4a75      	ldr	r2, [pc, #468]	@ (20005024 <HAL_DMA_PollForTransfer+0x244>)
20004e4e:	4293      	cmp	r3, r2
20004e50:	d036      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e52:	68fb      	ldr	r3, [r7, #12]
20004e54:	681b      	ldr	r3, [r3, #0]
20004e56:	4a74      	ldr	r2, [pc, #464]	@ (20005028 <HAL_DMA_PollForTransfer+0x248>)
20004e58:	4293      	cmp	r3, r2
20004e5a:	d031      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e5c:	68fb      	ldr	r3, [r7, #12]
20004e5e:	681b      	ldr	r3, [r3, #0]
20004e60:	4a72      	ldr	r2, [pc, #456]	@ (2000502c <HAL_DMA_PollForTransfer+0x24c>)
20004e62:	4293      	cmp	r3, r2
20004e64:	d02c      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e66:	68fb      	ldr	r3, [r7, #12]
20004e68:	681b      	ldr	r3, [r3, #0]
20004e6a:	4a71      	ldr	r2, [pc, #452]	@ (20005030 <HAL_DMA_PollForTransfer+0x250>)
20004e6c:	4293      	cmp	r3, r2
20004e6e:	d027      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e70:	68fb      	ldr	r3, [r7, #12]
20004e72:	681b      	ldr	r3, [r3, #0]
20004e74:	4a6f      	ldr	r2, [pc, #444]	@ (20005034 <HAL_DMA_PollForTransfer+0x254>)
20004e76:	4293      	cmp	r3, r2
20004e78:	d022      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e7a:	68fb      	ldr	r3, [r7, #12]
20004e7c:	681b      	ldr	r3, [r3, #0]
20004e7e:	4a6e      	ldr	r2, [pc, #440]	@ (20005038 <HAL_DMA_PollForTransfer+0x258>)
20004e80:	4293      	cmp	r3, r2
20004e82:	d01d      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e84:	68fb      	ldr	r3, [r7, #12]
20004e86:	681b      	ldr	r3, [r3, #0]
20004e88:	4a6c      	ldr	r2, [pc, #432]	@ (2000503c <HAL_DMA_PollForTransfer+0x25c>)
20004e8a:	4293      	cmp	r3, r2
20004e8c:	d018      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e8e:	68fb      	ldr	r3, [r7, #12]
20004e90:	681b      	ldr	r3, [r3, #0]
20004e92:	4a6b      	ldr	r2, [pc, #428]	@ (20005040 <HAL_DMA_PollForTransfer+0x260>)
20004e94:	4293      	cmp	r3, r2
20004e96:	d013      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004e98:	68fb      	ldr	r3, [r7, #12]
20004e9a:	681b      	ldr	r3, [r3, #0]
20004e9c:	4a69      	ldr	r2, [pc, #420]	@ (20005044 <HAL_DMA_PollForTransfer+0x264>)
20004e9e:	4293      	cmp	r3, r2
20004ea0:	d00e      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004ea2:	68fb      	ldr	r3, [r7, #12]
20004ea4:	681b      	ldr	r3, [r3, #0]
20004ea6:	4a68      	ldr	r2, [pc, #416]	@ (20005048 <HAL_DMA_PollForTransfer+0x268>)
20004ea8:	4293      	cmp	r3, r2
20004eaa:	d009      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004eac:	68fb      	ldr	r3, [r7, #12]
20004eae:	681b      	ldr	r3, [r3, #0]
20004eb0:	4a66      	ldr	r2, [pc, #408]	@ (2000504c <HAL_DMA_PollForTransfer+0x26c>)
20004eb2:	4293      	cmp	r3, r2
20004eb4:	d004      	beq.n	20004ec0 <HAL_DMA_PollForTransfer+0xe0>
20004eb6:	68fb      	ldr	r3, [r7, #12]
20004eb8:	681b      	ldr	r3, [r3, #0]
20004eba:	4a65      	ldr	r2, [pc, #404]	@ (20005050 <HAL_DMA_PollForTransfer+0x270>)
20004ebc:	4293      	cmp	r3, r2
20004ebe:	d101      	bne.n	20004ec4 <HAL_DMA_PollForTransfer+0xe4>
20004ec0:	2301      	movs	r3, #1
20004ec2:	e000      	b.n	20004ec6 <HAL_DMA_PollForTransfer+0xe6>
20004ec4:	2300      	movs	r3, #0
20004ec6:	2b00      	cmp	r3, #0
20004ec8:	d028      	beq.n	20004f1c <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
20004eca:	68fb      	ldr	r3, [r7, #12]
20004ecc:	681b      	ldr	r3, [r3, #0]
20004ece:	681b      	ldr	r3, [r3, #0]
20004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20004ed4:	2b00      	cmp	r3, #0
20004ed6:	d005      	beq.n	20004ee4 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20004ed8:	68fb      	ldr	r3, [r7, #12]
20004eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
20004ede:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
20004ee0:	2301      	movs	r3, #1
20004ee2:	e303      	b.n	200054ec <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20004ee4:	7afb      	ldrb	r3, [r7, #11]
20004ee6:	2b00      	cmp	r3, #0
20004ee8:	d108      	bne.n	20004efc <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
20004eea:	68fb      	ldr	r3, [r7, #12]
20004eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20004eee:	f003 031f 	and.w	r3, r3, #31
20004ef2:	2220      	movs	r2, #32
20004ef4:	fa02 f303 	lsl.w	r3, r2, r3
20004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
20004efa:	e007      	b.n	20004f0c <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
20004efc:	68fb      	ldr	r3, [r7, #12]
20004efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20004f00:	f003 031f 	and.w	r3, r3, #31
20004f04:	2210      	movs	r2, #16
20004f06:	fa02 f303 	lsl.w	r3, r2, r3
20004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
20004f0c:	68fb      	ldr	r3, [r7, #12]
20004f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20004f10:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
20004f12:	68fb      	ldr	r3, [r7, #12]
20004f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20004f16:	3308      	adds	r3, #8
20004f18:	61fb      	str	r3, [r7, #28]
20004f1a:	e1d5      	b.n	200052c8 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
20004f1c:	68fb      	ldr	r3, [r7, #12]
20004f1e:	681b      	ldr	r3, [r3, #0]
20004f20:	681b      	ldr	r3, [r3, #0]
20004f22:	f003 0320 	and.w	r3, r3, #32
20004f26:	2b00      	cmp	r3, #0
20004f28:	d005      	beq.n	20004f36 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20004f2a:	68fb      	ldr	r3, [r7, #12]
20004f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
20004f30:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
20004f32:	2301      	movs	r3, #1
20004f34:	e2da      	b.n	200054ec <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20004f36:	7afb      	ldrb	r3, [r7, #11]
20004f38:	2b00      	cmp	r3, #0
20004f3a:	d108      	bne.n	20004f4e <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
20004f3c:	68fb      	ldr	r3, [r7, #12]
20004f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20004f40:	f003 031f 	and.w	r3, r3, #31
20004f44:	2202      	movs	r2, #2
20004f46:	fa02 f303 	lsl.w	r3, r2, r3
20004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
20004f4c:	e007      	b.n	20004f5e <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
20004f4e:	68fb      	ldr	r3, [r7, #12]
20004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20004f52:	f003 031f 	and.w	r3, r3, #31
20004f56:	2204      	movs	r2, #4
20004f58:	fa02 f303 	lsl.w	r3, r2, r3
20004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
20004f5e:	68fb      	ldr	r3, [r7, #12]
20004f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20004f62:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
20004f64:	68fb      	ldr	r3, [r7, #12]
20004f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20004f68:	3304      	adds	r3, #4
20004f6a:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
20004f6c:	e1ac      	b.n	200052c8 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
20004f6e:	68fb      	ldr	r3, [r7, #12]
20004f70:	681b      	ldr	r3, [r3, #0]
20004f72:	4a28      	ldr	r2, [pc, #160]	@ (20005014 <HAL_DMA_PollForTransfer+0x234>)
20004f74:	4293      	cmp	r3, r2
20004f76:	d04a      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004f78:	68fb      	ldr	r3, [r7, #12]
20004f7a:	681b      	ldr	r3, [r3, #0]
20004f7c:	4a26      	ldr	r2, [pc, #152]	@ (20005018 <HAL_DMA_PollForTransfer+0x238>)
20004f7e:	4293      	cmp	r3, r2
20004f80:	d045      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004f82:	68fb      	ldr	r3, [r7, #12]
20004f84:	681b      	ldr	r3, [r3, #0]
20004f86:	4a25      	ldr	r2, [pc, #148]	@ (2000501c <HAL_DMA_PollForTransfer+0x23c>)
20004f88:	4293      	cmp	r3, r2
20004f8a:	d040      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004f8c:	68fb      	ldr	r3, [r7, #12]
20004f8e:	681b      	ldr	r3, [r3, #0]
20004f90:	4a23      	ldr	r2, [pc, #140]	@ (20005020 <HAL_DMA_PollForTransfer+0x240>)
20004f92:	4293      	cmp	r3, r2
20004f94:	d03b      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004f96:	68fb      	ldr	r3, [r7, #12]
20004f98:	681b      	ldr	r3, [r3, #0]
20004f9a:	4a22      	ldr	r2, [pc, #136]	@ (20005024 <HAL_DMA_PollForTransfer+0x244>)
20004f9c:	4293      	cmp	r3, r2
20004f9e:	d036      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004fa0:	68fb      	ldr	r3, [r7, #12]
20004fa2:	681b      	ldr	r3, [r3, #0]
20004fa4:	4a20      	ldr	r2, [pc, #128]	@ (20005028 <HAL_DMA_PollForTransfer+0x248>)
20004fa6:	4293      	cmp	r3, r2
20004fa8:	d031      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004faa:	68fb      	ldr	r3, [r7, #12]
20004fac:	681b      	ldr	r3, [r3, #0]
20004fae:	4a1f      	ldr	r2, [pc, #124]	@ (2000502c <HAL_DMA_PollForTransfer+0x24c>)
20004fb0:	4293      	cmp	r3, r2
20004fb2:	d02c      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004fb4:	68fb      	ldr	r3, [r7, #12]
20004fb6:	681b      	ldr	r3, [r3, #0]
20004fb8:	4a1d      	ldr	r2, [pc, #116]	@ (20005030 <HAL_DMA_PollForTransfer+0x250>)
20004fba:	4293      	cmp	r3, r2
20004fbc:	d027      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004fbe:	68fb      	ldr	r3, [r7, #12]
20004fc0:	681b      	ldr	r3, [r3, #0]
20004fc2:	4a1c      	ldr	r2, [pc, #112]	@ (20005034 <HAL_DMA_PollForTransfer+0x254>)
20004fc4:	4293      	cmp	r3, r2
20004fc6:	d022      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004fc8:	68fb      	ldr	r3, [r7, #12]
20004fca:	681b      	ldr	r3, [r3, #0]
20004fcc:	4a1a      	ldr	r2, [pc, #104]	@ (20005038 <HAL_DMA_PollForTransfer+0x258>)
20004fce:	4293      	cmp	r3, r2
20004fd0:	d01d      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004fd2:	68fb      	ldr	r3, [r7, #12]
20004fd4:	681b      	ldr	r3, [r3, #0]
20004fd6:	4a19      	ldr	r2, [pc, #100]	@ (2000503c <HAL_DMA_PollForTransfer+0x25c>)
20004fd8:	4293      	cmp	r3, r2
20004fda:	d018      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004fdc:	68fb      	ldr	r3, [r7, #12]
20004fde:	681b      	ldr	r3, [r3, #0]
20004fe0:	4a17      	ldr	r2, [pc, #92]	@ (20005040 <HAL_DMA_PollForTransfer+0x260>)
20004fe2:	4293      	cmp	r3, r2
20004fe4:	d013      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004fe6:	68fb      	ldr	r3, [r7, #12]
20004fe8:	681b      	ldr	r3, [r3, #0]
20004fea:	4a16      	ldr	r2, [pc, #88]	@ (20005044 <HAL_DMA_PollForTransfer+0x264>)
20004fec:	4293      	cmp	r3, r2
20004fee:	d00e      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004ff0:	68fb      	ldr	r3, [r7, #12]
20004ff2:	681b      	ldr	r3, [r3, #0]
20004ff4:	4a14      	ldr	r2, [pc, #80]	@ (20005048 <HAL_DMA_PollForTransfer+0x268>)
20004ff6:	4293      	cmp	r3, r2
20004ff8:	d009      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20004ffa:	68fb      	ldr	r3, [r7, #12]
20004ffc:	681b      	ldr	r3, [r3, #0]
20004ffe:	4a13      	ldr	r2, [pc, #76]	@ (2000504c <HAL_DMA_PollForTransfer+0x26c>)
20005000:	4293      	cmp	r3, r2
20005002:	d004      	beq.n	2000500e <HAL_DMA_PollForTransfer+0x22e>
20005004:	68fb      	ldr	r3, [r7, #12]
20005006:	681b      	ldr	r3, [r3, #0]
20005008:	4a11      	ldr	r2, [pc, #68]	@ (20005050 <HAL_DMA_PollForTransfer+0x270>)
2000500a:	4293      	cmp	r3, r2
2000500c:	d122      	bne.n	20005054 <HAL_DMA_PollForTransfer+0x274>
2000500e:	2301      	movs	r3, #1
20005010:	e021      	b.n	20005056 <HAL_DMA_PollForTransfer+0x276>
20005012:	bf00      	nop
20005014:	40020010 	.word	0x40020010
20005018:	40020028 	.word	0x40020028
2000501c:	40020040 	.word	0x40020040
20005020:	40020058 	.word	0x40020058
20005024:	40020070 	.word	0x40020070
20005028:	40020088 	.word	0x40020088
2000502c:	400200a0 	.word	0x400200a0
20005030:	400200b8 	.word	0x400200b8
20005034:	40020410 	.word	0x40020410
20005038:	40020428 	.word	0x40020428
2000503c:	40020440 	.word	0x40020440
20005040:	40020458 	.word	0x40020458
20005044:	40020470 	.word	0x40020470
20005048:	40020488 	.word	0x40020488
2000504c:	400204a0 	.word	0x400204a0
20005050:	400204b8 	.word	0x400204b8
20005054:	2300      	movs	r3, #0
20005056:	2b00      	cmp	r3, #0
20005058:	d057      	beq.n	2000510a <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2000505a:	6a3b      	ldr	r3, [r7, #32]
2000505c:	681a      	ldr	r2, [r3, #0]
2000505e:	68fb      	ldr	r3, [r7, #12]
20005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005062:	f003 031f 	and.w	r3, r3, #31
20005066:	fa22 f303 	lsr.w	r3, r2, r3
2000506a:	f003 0301 	and.w	r3, r3, #1
2000506e:	2b00      	cmp	r3, #0
20005070:	d00d      	beq.n	2000508e <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20005072:	68fb      	ldr	r3, [r7, #12]
20005074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20005076:	f043 0202 	orr.w	r2, r3, #2
2000507a:	68fb      	ldr	r3, [r7, #12]
2000507c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
2000507e:	68fb      	ldr	r3, [r7, #12]
20005080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005082:	f003 031f 	and.w	r3, r3, #31
20005086:	2201      	movs	r2, #1
20005088:	409a      	lsls	r2, r3
2000508a:	69fb      	ldr	r3, [r7, #28]
2000508c:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2000508e:	6a3b      	ldr	r3, [r7, #32]
20005090:	681a      	ldr	r2, [r3, #0]
20005092:	68fb      	ldr	r3, [r7, #12]
20005094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005096:	f003 031f 	and.w	r3, r3, #31
2000509a:	2104      	movs	r1, #4
2000509c:	fa01 f303 	lsl.w	r3, r1, r3
200050a0:	4013      	ands	r3, r2
200050a2:	2b00      	cmp	r3, #0
200050a4:	d00d      	beq.n	200050c2 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
200050a6:	68fb      	ldr	r3, [r7, #12]
200050a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200050aa:	f043 0204 	orr.w	r2, r3, #4
200050ae:	68fb      	ldr	r3, [r7, #12]
200050b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
200050b2:	68fb      	ldr	r3, [r7, #12]
200050b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200050b6:	f003 031f 	and.w	r3, r3, #31
200050ba:	2204      	movs	r2, #4
200050bc:	409a      	lsls	r2, r3
200050be:	69fb      	ldr	r3, [r7, #28]
200050c0:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
200050c2:	6a3b      	ldr	r3, [r7, #32]
200050c4:	681a      	ldr	r2, [r3, #0]
200050c6:	68fb      	ldr	r3, [r7, #12]
200050c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200050ca:	f003 031f 	and.w	r3, r3, #31
200050ce:	2108      	movs	r1, #8
200050d0:	fa01 f303 	lsl.w	r3, r1, r3
200050d4:	4013      	ands	r3, r2
200050d6:	2b00      	cmp	r3, #0
200050d8:	d038      	beq.n	2000514c <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
200050da:	68fb      	ldr	r3, [r7, #12]
200050dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200050de:	f043 0201 	orr.w	r2, r3, #1
200050e2:	68fb      	ldr	r3, [r7, #12]
200050e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
200050e6:	68fb      	ldr	r3, [r7, #12]
200050e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200050ea:	f003 031f 	and.w	r3, r3, #31
200050ee:	2208      	movs	r2, #8
200050f0:	409a      	lsls	r2, r3
200050f2:	69fb      	ldr	r3, [r7, #28]
200050f4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
200050f6:	68fb      	ldr	r3, [r7, #12]
200050f8:	2201      	movs	r2, #1
200050fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
200050fe:	68fb      	ldr	r3, [r7, #12]
20005100:	2200      	movs	r2, #0
20005102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
20005106:	2301      	movs	r3, #1
20005108:	e1f0      	b.n	200054ec <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
2000510a:	6a3b      	ldr	r3, [r7, #32]
2000510c:	681a      	ldr	r2, [r3, #0]
2000510e:	68fb      	ldr	r3, [r7, #12]
20005110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005112:	f003 031f 	and.w	r3, r3, #31
20005116:	2108      	movs	r1, #8
20005118:	fa01 f303 	lsl.w	r3, r1, r3
2000511c:	4013      	ands	r3, r2
2000511e:	2b00      	cmp	r3, #0
20005120:	d014      	beq.n	2000514c <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
20005122:	68fb      	ldr	r3, [r7, #12]
20005124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005126:	f003 031f 	and.w	r3, r3, #31
2000512a:	2201      	movs	r2, #1
2000512c:	409a      	lsls	r2, r3
2000512e:	6a3b      	ldr	r3, [r7, #32]
20005130:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
20005132:	68fb      	ldr	r3, [r7, #12]
20005134:	2201      	movs	r2, #1
20005136:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20005138:	68fb      	ldr	r3, [r7, #12]
2000513a:	2201      	movs	r2, #1
2000513c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20005140:	68fb      	ldr	r3, [r7, #12]
20005142:	2200      	movs	r2, #0
20005144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
20005148:	2301      	movs	r3, #1
2000514a:	e1cf      	b.n	200054ec <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
2000514c:	687b      	ldr	r3, [r7, #4]
2000514e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
20005152:	d012      	beq.n	2000517a <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
20005154:	f7fd f8b4 	bl	200022c0 <HAL_GetTick>
20005158:	4602      	mov	r2, r0
2000515a:	697b      	ldr	r3, [r7, #20]
2000515c:	1ad3      	subs	r3, r2, r3
2000515e:	687a      	ldr	r2, [r7, #4]
20005160:	429a      	cmp	r2, r3
20005162:	d302      	bcc.n	2000516a <HAL_DMA_PollForTransfer+0x38a>
20005164:	687b      	ldr	r3, [r7, #4]
20005166:	2b00      	cmp	r3, #0
20005168:	d107      	bne.n	2000517a <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2000516a:	68fb      	ldr	r3, [r7, #12]
2000516c:	2220      	movs	r2, #32
2000516e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
20005170:	68f8      	ldr	r0, [r7, #12]
20005172:	f7ff f8d1 	bl	20004318 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
20005176:	2301      	movs	r3, #1
20005178:	e1b8      	b.n	200054ec <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2000517a:	68fb      	ldr	r3, [r7, #12]
2000517c:	681b      	ldr	r3, [r3, #0]
2000517e:	4a81      	ldr	r2, [pc, #516]	@ (20005384 <HAL_DMA_PollForTransfer+0x5a4>)
20005180:	4293      	cmp	r3, r2
20005182:	d072      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005184:	68fb      	ldr	r3, [r7, #12]
20005186:	681b      	ldr	r3, [r3, #0]
20005188:	4a7f      	ldr	r2, [pc, #508]	@ (20005388 <HAL_DMA_PollForTransfer+0x5a8>)
2000518a:	4293      	cmp	r3, r2
2000518c:	d06d      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
2000518e:	68fb      	ldr	r3, [r7, #12]
20005190:	681b      	ldr	r3, [r3, #0]
20005192:	4a7e      	ldr	r2, [pc, #504]	@ (2000538c <HAL_DMA_PollForTransfer+0x5ac>)
20005194:	4293      	cmp	r3, r2
20005196:	d068      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005198:	68fb      	ldr	r3, [r7, #12]
2000519a:	681b      	ldr	r3, [r3, #0]
2000519c:	4a7c      	ldr	r2, [pc, #496]	@ (20005390 <HAL_DMA_PollForTransfer+0x5b0>)
2000519e:	4293      	cmp	r3, r2
200051a0:	d063      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051a2:	68fb      	ldr	r3, [r7, #12]
200051a4:	681b      	ldr	r3, [r3, #0]
200051a6:	4a7b      	ldr	r2, [pc, #492]	@ (20005394 <HAL_DMA_PollForTransfer+0x5b4>)
200051a8:	4293      	cmp	r3, r2
200051aa:	d05e      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051ac:	68fb      	ldr	r3, [r7, #12]
200051ae:	681b      	ldr	r3, [r3, #0]
200051b0:	4a79      	ldr	r2, [pc, #484]	@ (20005398 <HAL_DMA_PollForTransfer+0x5b8>)
200051b2:	4293      	cmp	r3, r2
200051b4:	d059      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051b6:	68fb      	ldr	r3, [r7, #12]
200051b8:	681b      	ldr	r3, [r3, #0]
200051ba:	4a78      	ldr	r2, [pc, #480]	@ (2000539c <HAL_DMA_PollForTransfer+0x5bc>)
200051bc:	4293      	cmp	r3, r2
200051be:	d054      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051c0:	68fb      	ldr	r3, [r7, #12]
200051c2:	681b      	ldr	r3, [r3, #0]
200051c4:	4a76      	ldr	r2, [pc, #472]	@ (200053a0 <HAL_DMA_PollForTransfer+0x5c0>)
200051c6:	4293      	cmp	r3, r2
200051c8:	d04f      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051ca:	68fb      	ldr	r3, [r7, #12]
200051cc:	681b      	ldr	r3, [r3, #0]
200051ce:	4a75      	ldr	r2, [pc, #468]	@ (200053a4 <HAL_DMA_PollForTransfer+0x5c4>)
200051d0:	4293      	cmp	r3, r2
200051d2:	d04a      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051d4:	68fb      	ldr	r3, [r7, #12]
200051d6:	681b      	ldr	r3, [r3, #0]
200051d8:	4a73      	ldr	r2, [pc, #460]	@ (200053a8 <HAL_DMA_PollForTransfer+0x5c8>)
200051da:	4293      	cmp	r3, r2
200051dc:	d045      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051de:	68fb      	ldr	r3, [r7, #12]
200051e0:	681b      	ldr	r3, [r3, #0]
200051e2:	4a72      	ldr	r2, [pc, #456]	@ (200053ac <HAL_DMA_PollForTransfer+0x5cc>)
200051e4:	4293      	cmp	r3, r2
200051e6:	d040      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051e8:	68fb      	ldr	r3, [r7, #12]
200051ea:	681b      	ldr	r3, [r3, #0]
200051ec:	4a70      	ldr	r2, [pc, #448]	@ (200053b0 <HAL_DMA_PollForTransfer+0x5d0>)
200051ee:	4293      	cmp	r3, r2
200051f0:	d03b      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051f2:	68fb      	ldr	r3, [r7, #12]
200051f4:	681b      	ldr	r3, [r3, #0]
200051f6:	4a6f      	ldr	r2, [pc, #444]	@ (200053b4 <HAL_DMA_PollForTransfer+0x5d4>)
200051f8:	4293      	cmp	r3, r2
200051fa:	d036      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
200051fc:	68fb      	ldr	r3, [r7, #12]
200051fe:	681b      	ldr	r3, [r3, #0]
20005200:	4a6d      	ldr	r2, [pc, #436]	@ (200053b8 <HAL_DMA_PollForTransfer+0x5d8>)
20005202:	4293      	cmp	r3, r2
20005204:	d031      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005206:	68fb      	ldr	r3, [r7, #12]
20005208:	681b      	ldr	r3, [r3, #0]
2000520a:	4a6c      	ldr	r2, [pc, #432]	@ (200053bc <HAL_DMA_PollForTransfer+0x5dc>)
2000520c:	4293      	cmp	r3, r2
2000520e:	d02c      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005210:	68fb      	ldr	r3, [r7, #12]
20005212:	681b      	ldr	r3, [r3, #0]
20005214:	4a6a      	ldr	r2, [pc, #424]	@ (200053c0 <HAL_DMA_PollForTransfer+0x5e0>)
20005216:	4293      	cmp	r3, r2
20005218:	d027      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
2000521a:	68fb      	ldr	r3, [r7, #12]
2000521c:	681b      	ldr	r3, [r3, #0]
2000521e:	4a69      	ldr	r2, [pc, #420]	@ (200053c4 <HAL_DMA_PollForTransfer+0x5e4>)
20005220:	4293      	cmp	r3, r2
20005222:	d022      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005224:	68fb      	ldr	r3, [r7, #12]
20005226:	681b      	ldr	r3, [r3, #0]
20005228:	4a67      	ldr	r2, [pc, #412]	@ (200053c8 <HAL_DMA_PollForTransfer+0x5e8>)
2000522a:	4293      	cmp	r3, r2
2000522c:	d01d      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
2000522e:	68fb      	ldr	r3, [r7, #12]
20005230:	681b      	ldr	r3, [r3, #0]
20005232:	4a66      	ldr	r2, [pc, #408]	@ (200053cc <HAL_DMA_PollForTransfer+0x5ec>)
20005234:	4293      	cmp	r3, r2
20005236:	d018      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005238:	68fb      	ldr	r3, [r7, #12]
2000523a:	681b      	ldr	r3, [r3, #0]
2000523c:	4a64      	ldr	r2, [pc, #400]	@ (200053d0 <HAL_DMA_PollForTransfer+0x5f0>)
2000523e:	4293      	cmp	r3, r2
20005240:	d013      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005242:	68fb      	ldr	r3, [r7, #12]
20005244:	681b      	ldr	r3, [r3, #0]
20005246:	4a63      	ldr	r2, [pc, #396]	@ (200053d4 <HAL_DMA_PollForTransfer+0x5f4>)
20005248:	4293      	cmp	r3, r2
2000524a:	d00e      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
2000524c:	68fb      	ldr	r3, [r7, #12]
2000524e:	681b      	ldr	r3, [r3, #0]
20005250:	4a61      	ldr	r2, [pc, #388]	@ (200053d8 <HAL_DMA_PollForTransfer+0x5f8>)
20005252:	4293      	cmp	r3, r2
20005254:	d009      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005256:	68fb      	ldr	r3, [r7, #12]
20005258:	681b      	ldr	r3, [r3, #0]
2000525a:	4a60      	ldr	r2, [pc, #384]	@ (200053dc <HAL_DMA_PollForTransfer+0x5fc>)
2000525c:	4293      	cmp	r3, r2
2000525e:	d004      	beq.n	2000526a <HAL_DMA_PollForTransfer+0x48a>
20005260:	68fb      	ldr	r3, [r7, #12]
20005262:	681b      	ldr	r3, [r3, #0]
20005264:	4a5e      	ldr	r2, [pc, #376]	@ (200053e0 <HAL_DMA_PollForTransfer+0x600>)
20005266:	4293      	cmp	r3, r2
20005268:	d101      	bne.n	2000526e <HAL_DMA_PollForTransfer+0x48e>
2000526a:	2301      	movs	r3, #1
2000526c:	e000      	b.n	20005270 <HAL_DMA_PollForTransfer+0x490>
2000526e:	2300      	movs	r3, #0
20005270:	2b00      	cmp	r3, #0
20005272:	d029      	beq.n	200052c8 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
20005274:	68fb      	ldr	r3, [r7, #12]
20005276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20005278:	2b00      	cmp	r3, #0
2000527a:	d012      	beq.n	200052a2 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
2000527c:	68fb      	ldr	r3, [r7, #12]
2000527e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20005280:	681a      	ldr	r2, [r3, #0]
20005282:	68fb      	ldr	r3, [r7, #12]
20005284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20005286:	4013      	ands	r3, r2
20005288:	2b00      	cmp	r3, #0
2000528a:	d00a      	beq.n	200052a2 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2000528c:	68fb      	ldr	r3, [r7, #12]
2000528e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20005290:	68fa      	ldr	r2, [r7, #12]
20005292:	6f52      	ldr	r2, [r2, #116]	@ 0x74
20005294:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
20005296:	68fb      	ldr	r3, [r7, #12]
20005298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000529a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
2000529e:	68fb      	ldr	r3, [r7, #12]
200052a0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
200052a2:	68fb      	ldr	r3, [r7, #12]
200052a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200052a6:	681a      	ldr	r2, [r3, #0]
200052a8:	68fb      	ldr	r3, [r7, #12]
200052aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
200052ac:	4013      	ands	r3, r2
200052ae:	2b00      	cmp	r3, #0
200052b0:	d00a      	beq.n	200052c8 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
200052b2:	68fb      	ldr	r3, [r7, #12]
200052b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200052b6:	68fa      	ldr	r2, [r7, #12]
200052b8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
200052ba:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
200052bc:	68fb      	ldr	r3, [r7, #12]
200052be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200052c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
200052c4:	68fb      	ldr	r3, [r7, #12]
200052c6:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
200052c8:	6a3b      	ldr	r3, [r7, #32]
200052ca:	681a      	ldr	r2, [r3, #0]
200052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200052ce:	4013      	ands	r3, r2
200052d0:	2b00      	cmp	r3, #0
200052d2:	f43f ae4c 	beq.w	20004f6e <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
200052d6:	7afb      	ldrb	r3, [r7, #11]
200052d8:	2b00      	cmp	r3, #0
200052da:	f040 80a0 	bne.w	2000541e <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
200052de:	68fb      	ldr	r3, [r7, #12]
200052e0:	681b      	ldr	r3, [r3, #0]
200052e2:	4a28      	ldr	r2, [pc, #160]	@ (20005384 <HAL_DMA_PollForTransfer+0x5a4>)
200052e4:	4293      	cmp	r3, r2
200052e6:	d04a      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
200052e8:	68fb      	ldr	r3, [r7, #12]
200052ea:	681b      	ldr	r3, [r3, #0]
200052ec:	4a26      	ldr	r2, [pc, #152]	@ (20005388 <HAL_DMA_PollForTransfer+0x5a8>)
200052ee:	4293      	cmp	r3, r2
200052f0:	d045      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
200052f2:	68fb      	ldr	r3, [r7, #12]
200052f4:	681b      	ldr	r3, [r3, #0]
200052f6:	4a25      	ldr	r2, [pc, #148]	@ (2000538c <HAL_DMA_PollForTransfer+0x5ac>)
200052f8:	4293      	cmp	r3, r2
200052fa:	d040      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
200052fc:	68fb      	ldr	r3, [r7, #12]
200052fe:	681b      	ldr	r3, [r3, #0]
20005300:	4a23      	ldr	r2, [pc, #140]	@ (20005390 <HAL_DMA_PollForTransfer+0x5b0>)
20005302:	4293      	cmp	r3, r2
20005304:	d03b      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
20005306:	68fb      	ldr	r3, [r7, #12]
20005308:	681b      	ldr	r3, [r3, #0]
2000530a:	4a22      	ldr	r2, [pc, #136]	@ (20005394 <HAL_DMA_PollForTransfer+0x5b4>)
2000530c:	4293      	cmp	r3, r2
2000530e:	d036      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
20005310:	68fb      	ldr	r3, [r7, #12]
20005312:	681b      	ldr	r3, [r3, #0]
20005314:	4a20      	ldr	r2, [pc, #128]	@ (20005398 <HAL_DMA_PollForTransfer+0x5b8>)
20005316:	4293      	cmp	r3, r2
20005318:	d031      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
2000531a:	68fb      	ldr	r3, [r7, #12]
2000531c:	681b      	ldr	r3, [r3, #0]
2000531e:	4a1f      	ldr	r2, [pc, #124]	@ (2000539c <HAL_DMA_PollForTransfer+0x5bc>)
20005320:	4293      	cmp	r3, r2
20005322:	d02c      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
20005324:	68fb      	ldr	r3, [r7, #12]
20005326:	681b      	ldr	r3, [r3, #0]
20005328:	4a1d      	ldr	r2, [pc, #116]	@ (200053a0 <HAL_DMA_PollForTransfer+0x5c0>)
2000532a:	4293      	cmp	r3, r2
2000532c:	d027      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
2000532e:	68fb      	ldr	r3, [r7, #12]
20005330:	681b      	ldr	r3, [r3, #0]
20005332:	4a1c      	ldr	r2, [pc, #112]	@ (200053a4 <HAL_DMA_PollForTransfer+0x5c4>)
20005334:	4293      	cmp	r3, r2
20005336:	d022      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
20005338:	68fb      	ldr	r3, [r7, #12]
2000533a:	681b      	ldr	r3, [r3, #0]
2000533c:	4a1a      	ldr	r2, [pc, #104]	@ (200053a8 <HAL_DMA_PollForTransfer+0x5c8>)
2000533e:	4293      	cmp	r3, r2
20005340:	d01d      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
20005342:	68fb      	ldr	r3, [r7, #12]
20005344:	681b      	ldr	r3, [r3, #0]
20005346:	4a19      	ldr	r2, [pc, #100]	@ (200053ac <HAL_DMA_PollForTransfer+0x5cc>)
20005348:	4293      	cmp	r3, r2
2000534a:	d018      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
2000534c:	68fb      	ldr	r3, [r7, #12]
2000534e:	681b      	ldr	r3, [r3, #0]
20005350:	4a17      	ldr	r2, [pc, #92]	@ (200053b0 <HAL_DMA_PollForTransfer+0x5d0>)
20005352:	4293      	cmp	r3, r2
20005354:	d013      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
20005356:	68fb      	ldr	r3, [r7, #12]
20005358:	681b      	ldr	r3, [r3, #0]
2000535a:	4a16      	ldr	r2, [pc, #88]	@ (200053b4 <HAL_DMA_PollForTransfer+0x5d4>)
2000535c:	4293      	cmp	r3, r2
2000535e:	d00e      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
20005360:	68fb      	ldr	r3, [r7, #12]
20005362:	681b      	ldr	r3, [r3, #0]
20005364:	4a14      	ldr	r2, [pc, #80]	@ (200053b8 <HAL_DMA_PollForTransfer+0x5d8>)
20005366:	4293      	cmp	r3, r2
20005368:	d009      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
2000536a:	68fb      	ldr	r3, [r7, #12]
2000536c:	681b      	ldr	r3, [r3, #0]
2000536e:	4a13      	ldr	r2, [pc, #76]	@ (200053bc <HAL_DMA_PollForTransfer+0x5dc>)
20005370:	4293      	cmp	r3, r2
20005372:	d004      	beq.n	2000537e <HAL_DMA_PollForTransfer+0x59e>
20005374:	68fb      	ldr	r3, [r7, #12]
20005376:	681b      	ldr	r3, [r3, #0]
20005378:	4a11      	ldr	r2, [pc, #68]	@ (200053c0 <HAL_DMA_PollForTransfer+0x5e0>)
2000537a:	4293      	cmp	r3, r2
2000537c:	d132      	bne.n	200053e4 <HAL_DMA_PollForTransfer+0x604>
2000537e:	2301      	movs	r3, #1
20005380:	e031      	b.n	200053e6 <HAL_DMA_PollForTransfer+0x606>
20005382:	bf00      	nop
20005384:	40020010 	.word	0x40020010
20005388:	40020028 	.word	0x40020028
2000538c:	40020040 	.word	0x40020040
20005390:	40020058 	.word	0x40020058
20005394:	40020070 	.word	0x40020070
20005398:	40020088 	.word	0x40020088
2000539c:	400200a0 	.word	0x400200a0
200053a0:	400200b8 	.word	0x400200b8
200053a4:	40020410 	.word	0x40020410
200053a8:	40020428 	.word	0x40020428
200053ac:	40020440 	.word	0x40020440
200053b0:	40020458 	.word	0x40020458
200053b4:	40020470 	.word	0x40020470
200053b8:	40020488 	.word	0x40020488
200053bc:	400204a0 	.word	0x400204a0
200053c0:	400204b8 	.word	0x400204b8
200053c4:	58025408 	.word	0x58025408
200053c8:	5802541c 	.word	0x5802541c
200053cc:	58025430 	.word	0x58025430
200053d0:	58025444 	.word	0x58025444
200053d4:	58025458 	.word	0x58025458
200053d8:	5802546c 	.word	0x5802546c
200053dc:	58025480 	.word	0x58025480
200053e0:	58025494 	.word	0x58025494
200053e4:	2300      	movs	r3, #0
200053e6:	2b00      	cmp	r3, #0
200053e8:	d008      	beq.n	200053fc <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
200053ea:	68fb      	ldr	r3, [r7, #12]
200053ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200053ee:	f003 031f 	and.w	r3, r3, #31
200053f2:	2230      	movs	r2, #48	@ 0x30
200053f4:	409a      	lsls	r2, r3
200053f6:	69fb      	ldr	r3, [r7, #28]
200053f8:	601a      	str	r2, [r3, #0]
200053fa:	e007      	b.n	2000540c <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
200053fc:	68fb      	ldr	r3, [r7, #12]
200053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005400:	f003 031f 	and.w	r3, r3, #31
20005404:	2202      	movs	r2, #2
20005406:	409a      	lsls	r2, r3
20005408:	69fb      	ldr	r3, [r7, #28]
2000540a:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
2000540c:	68fb      	ldr	r3, [r7, #12]
2000540e:	2201      	movs	r2, #1
20005410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20005414:	68fb      	ldr	r3, [r7, #12]
20005416:	2200      	movs	r2, #0
20005418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
2000541c:	e065      	b.n	200054ea <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2000541e:	68fb      	ldr	r3, [r7, #12]
20005420:	681b      	ldr	r3, [r3, #0]
20005422:	4a34      	ldr	r2, [pc, #208]	@ (200054f4 <HAL_DMA_PollForTransfer+0x714>)
20005424:	4293      	cmp	r3, r2
20005426:	d04a      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
20005428:	68fb      	ldr	r3, [r7, #12]
2000542a:	681b      	ldr	r3, [r3, #0]
2000542c:	4a32      	ldr	r2, [pc, #200]	@ (200054f8 <HAL_DMA_PollForTransfer+0x718>)
2000542e:	4293      	cmp	r3, r2
20005430:	d045      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
20005432:	68fb      	ldr	r3, [r7, #12]
20005434:	681b      	ldr	r3, [r3, #0]
20005436:	4a31      	ldr	r2, [pc, #196]	@ (200054fc <HAL_DMA_PollForTransfer+0x71c>)
20005438:	4293      	cmp	r3, r2
2000543a:	d040      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
2000543c:	68fb      	ldr	r3, [r7, #12]
2000543e:	681b      	ldr	r3, [r3, #0]
20005440:	4a2f      	ldr	r2, [pc, #188]	@ (20005500 <HAL_DMA_PollForTransfer+0x720>)
20005442:	4293      	cmp	r3, r2
20005444:	d03b      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
20005446:	68fb      	ldr	r3, [r7, #12]
20005448:	681b      	ldr	r3, [r3, #0]
2000544a:	4a2e      	ldr	r2, [pc, #184]	@ (20005504 <HAL_DMA_PollForTransfer+0x724>)
2000544c:	4293      	cmp	r3, r2
2000544e:	d036      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
20005450:	68fb      	ldr	r3, [r7, #12]
20005452:	681b      	ldr	r3, [r3, #0]
20005454:	4a2c      	ldr	r2, [pc, #176]	@ (20005508 <HAL_DMA_PollForTransfer+0x728>)
20005456:	4293      	cmp	r3, r2
20005458:	d031      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
2000545a:	68fb      	ldr	r3, [r7, #12]
2000545c:	681b      	ldr	r3, [r3, #0]
2000545e:	4a2b      	ldr	r2, [pc, #172]	@ (2000550c <HAL_DMA_PollForTransfer+0x72c>)
20005460:	4293      	cmp	r3, r2
20005462:	d02c      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
20005464:	68fb      	ldr	r3, [r7, #12]
20005466:	681b      	ldr	r3, [r3, #0]
20005468:	4a29      	ldr	r2, [pc, #164]	@ (20005510 <HAL_DMA_PollForTransfer+0x730>)
2000546a:	4293      	cmp	r3, r2
2000546c:	d027      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
2000546e:	68fb      	ldr	r3, [r7, #12]
20005470:	681b      	ldr	r3, [r3, #0]
20005472:	4a28      	ldr	r2, [pc, #160]	@ (20005514 <HAL_DMA_PollForTransfer+0x734>)
20005474:	4293      	cmp	r3, r2
20005476:	d022      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
20005478:	68fb      	ldr	r3, [r7, #12]
2000547a:	681b      	ldr	r3, [r3, #0]
2000547c:	4a26      	ldr	r2, [pc, #152]	@ (20005518 <HAL_DMA_PollForTransfer+0x738>)
2000547e:	4293      	cmp	r3, r2
20005480:	d01d      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
20005482:	68fb      	ldr	r3, [r7, #12]
20005484:	681b      	ldr	r3, [r3, #0]
20005486:	4a25      	ldr	r2, [pc, #148]	@ (2000551c <HAL_DMA_PollForTransfer+0x73c>)
20005488:	4293      	cmp	r3, r2
2000548a:	d018      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
2000548c:	68fb      	ldr	r3, [r7, #12]
2000548e:	681b      	ldr	r3, [r3, #0]
20005490:	4a23      	ldr	r2, [pc, #140]	@ (20005520 <HAL_DMA_PollForTransfer+0x740>)
20005492:	4293      	cmp	r3, r2
20005494:	d013      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
20005496:	68fb      	ldr	r3, [r7, #12]
20005498:	681b      	ldr	r3, [r3, #0]
2000549a:	4a22      	ldr	r2, [pc, #136]	@ (20005524 <HAL_DMA_PollForTransfer+0x744>)
2000549c:	4293      	cmp	r3, r2
2000549e:	d00e      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
200054a0:	68fb      	ldr	r3, [r7, #12]
200054a2:	681b      	ldr	r3, [r3, #0]
200054a4:	4a20      	ldr	r2, [pc, #128]	@ (20005528 <HAL_DMA_PollForTransfer+0x748>)
200054a6:	4293      	cmp	r3, r2
200054a8:	d009      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
200054aa:	68fb      	ldr	r3, [r7, #12]
200054ac:	681b      	ldr	r3, [r3, #0]
200054ae:	4a1f      	ldr	r2, [pc, #124]	@ (2000552c <HAL_DMA_PollForTransfer+0x74c>)
200054b0:	4293      	cmp	r3, r2
200054b2:	d004      	beq.n	200054be <HAL_DMA_PollForTransfer+0x6de>
200054b4:	68fb      	ldr	r3, [r7, #12]
200054b6:	681b      	ldr	r3, [r3, #0]
200054b8:	4a1d      	ldr	r2, [pc, #116]	@ (20005530 <HAL_DMA_PollForTransfer+0x750>)
200054ba:	4293      	cmp	r3, r2
200054bc:	d101      	bne.n	200054c2 <HAL_DMA_PollForTransfer+0x6e2>
200054be:	2301      	movs	r3, #1
200054c0:	e000      	b.n	200054c4 <HAL_DMA_PollForTransfer+0x6e4>
200054c2:	2300      	movs	r3, #0
200054c4:	2b00      	cmp	r3, #0
200054c6:	d008      	beq.n	200054da <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
200054c8:	68fb      	ldr	r3, [r7, #12]
200054ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200054cc:	f003 031f 	and.w	r3, r3, #31
200054d0:	2210      	movs	r2, #16
200054d2:	409a      	lsls	r2, r3
200054d4:	69fb      	ldr	r3, [r7, #28]
200054d6:	601a      	str	r2, [r3, #0]
200054d8:	e007      	b.n	200054ea <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
200054da:	68fb      	ldr	r3, [r7, #12]
200054dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200054de:	f003 031f 	and.w	r3, r3, #31
200054e2:	2204      	movs	r2, #4
200054e4:	409a      	lsls	r2, r3
200054e6:	69fb      	ldr	r3, [r7, #28]
200054e8:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
200054ea:	7efb      	ldrb	r3, [r7, #27]
}
200054ec:	4618      	mov	r0, r3
200054ee:	3728      	adds	r7, #40	@ 0x28
200054f0:	46bd      	mov	sp, r7
200054f2:	bd80      	pop	{r7, pc}
200054f4:	40020010 	.word	0x40020010
200054f8:	40020028 	.word	0x40020028
200054fc:	40020040 	.word	0x40020040
20005500:	40020058 	.word	0x40020058
20005504:	40020070 	.word	0x40020070
20005508:	40020088 	.word	0x40020088
2000550c:	400200a0 	.word	0x400200a0
20005510:	400200b8 	.word	0x400200b8
20005514:	40020410 	.word	0x40020410
20005518:	40020428 	.word	0x40020428
2000551c:	40020440 	.word	0x40020440
20005520:	40020458 	.word	0x40020458
20005524:	40020470 	.word	0x40020470
20005528:	40020488 	.word	0x40020488
2000552c:	400204a0 	.word	0x400204a0
20005530:	400204b8 	.word	0x400204b8

20005534 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
20005534:	b580      	push	{r7, lr}
20005536:	b08a      	sub	sp, #40	@ 0x28
20005538:	af00      	add	r7, sp, #0
2000553a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
2000553c:	2300      	movs	r3, #0
2000553e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
20005540:	4b67      	ldr	r3, [pc, #412]	@ (200056e0 <HAL_DMA_IRQHandler+0x1ac>)
20005542:	681b      	ldr	r3, [r3, #0]
20005544:	4a67      	ldr	r2, [pc, #412]	@ (200056e4 <HAL_DMA_IRQHandler+0x1b0>)
20005546:	fba2 2303 	umull	r2, r3, r2, r3
2000554a:	0a9b      	lsrs	r3, r3, #10
2000554c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2000554e:	687b      	ldr	r3, [r7, #4]
20005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20005552:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
20005554:	687b      	ldr	r3, [r7, #4]
20005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20005558:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
2000555a:	6a3b      	ldr	r3, [r7, #32]
2000555c:	681b      	ldr	r3, [r3, #0]
2000555e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
20005560:	69fb      	ldr	r3, [r7, #28]
20005562:	681b      	ldr	r3, [r3, #0]
20005564:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
20005566:	687b      	ldr	r3, [r7, #4]
20005568:	681b      	ldr	r3, [r3, #0]
2000556a:	4a5f      	ldr	r2, [pc, #380]	@ (200056e8 <HAL_DMA_IRQHandler+0x1b4>)
2000556c:	4293      	cmp	r3, r2
2000556e:	d04a      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
20005570:	687b      	ldr	r3, [r7, #4]
20005572:	681b      	ldr	r3, [r3, #0]
20005574:	4a5d      	ldr	r2, [pc, #372]	@ (200056ec <HAL_DMA_IRQHandler+0x1b8>)
20005576:	4293      	cmp	r3, r2
20005578:	d045      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
2000557a:	687b      	ldr	r3, [r7, #4]
2000557c:	681b      	ldr	r3, [r3, #0]
2000557e:	4a5c      	ldr	r2, [pc, #368]	@ (200056f0 <HAL_DMA_IRQHandler+0x1bc>)
20005580:	4293      	cmp	r3, r2
20005582:	d040      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
20005584:	687b      	ldr	r3, [r7, #4]
20005586:	681b      	ldr	r3, [r3, #0]
20005588:	4a5a      	ldr	r2, [pc, #360]	@ (200056f4 <HAL_DMA_IRQHandler+0x1c0>)
2000558a:	4293      	cmp	r3, r2
2000558c:	d03b      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
2000558e:	687b      	ldr	r3, [r7, #4]
20005590:	681b      	ldr	r3, [r3, #0]
20005592:	4a59      	ldr	r2, [pc, #356]	@ (200056f8 <HAL_DMA_IRQHandler+0x1c4>)
20005594:	4293      	cmp	r3, r2
20005596:	d036      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
20005598:	687b      	ldr	r3, [r7, #4]
2000559a:	681b      	ldr	r3, [r3, #0]
2000559c:	4a57      	ldr	r2, [pc, #348]	@ (200056fc <HAL_DMA_IRQHandler+0x1c8>)
2000559e:	4293      	cmp	r3, r2
200055a0:	d031      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055a2:	687b      	ldr	r3, [r7, #4]
200055a4:	681b      	ldr	r3, [r3, #0]
200055a6:	4a56      	ldr	r2, [pc, #344]	@ (20005700 <HAL_DMA_IRQHandler+0x1cc>)
200055a8:	4293      	cmp	r3, r2
200055aa:	d02c      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055ac:	687b      	ldr	r3, [r7, #4]
200055ae:	681b      	ldr	r3, [r3, #0]
200055b0:	4a54      	ldr	r2, [pc, #336]	@ (20005704 <HAL_DMA_IRQHandler+0x1d0>)
200055b2:	4293      	cmp	r3, r2
200055b4:	d027      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055b6:	687b      	ldr	r3, [r7, #4]
200055b8:	681b      	ldr	r3, [r3, #0]
200055ba:	4a53      	ldr	r2, [pc, #332]	@ (20005708 <HAL_DMA_IRQHandler+0x1d4>)
200055bc:	4293      	cmp	r3, r2
200055be:	d022      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055c0:	687b      	ldr	r3, [r7, #4]
200055c2:	681b      	ldr	r3, [r3, #0]
200055c4:	4a51      	ldr	r2, [pc, #324]	@ (2000570c <HAL_DMA_IRQHandler+0x1d8>)
200055c6:	4293      	cmp	r3, r2
200055c8:	d01d      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055ca:	687b      	ldr	r3, [r7, #4]
200055cc:	681b      	ldr	r3, [r3, #0]
200055ce:	4a50      	ldr	r2, [pc, #320]	@ (20005710 <HAL_DMA_IRQHandler+0x1dc>)
200055d0:	4293      	cmp	r3, r2
200055d2:	d018      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055d4:	687b      	ldr	r3, [r7, #4]
200055d6:	681b      	ldr	r3, [r3, #0]
200055d8:	4a4e      	ldr	r2, [pc, #312]	@ (20005714 <HAL_DMA_IRQHandler+0x1e0>)
200055da:	4293      	cmp	r3, r2
200055dc:	d013      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055de:	687b      	ldr	r3, [r7, #4]
200055e0:	681b      	ldr	r3, [r3, #0]
200055e2:	4a4d      	ldr	r2, [pc, #308]	@ (20005718 <HAL_DMA_IRQHandler+0x1e4>)
200055e4:	4293      	cmp	r3, r2
200055e6:	d00e      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055e8:	687b      	ldr	r3, [r7, #4]
200055ea:	681b      	ldr	r3, [r3, #0]
200055ec:	4a4b      	ldr	r2, [pc, #300]	@ (2000571c <HAL_DMA_IRQHandler+0x1e8>)
200055ee:	4293      	cmp	r3, r2
200055f0:	d009      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055f2:	687b      	ldr	r3, [r7, #4]
200055f4:	681b      	ldr	r3, [r3, #0]
200055f6:	4a4a      	ldr	r2, [pc, #296]	@ (20005720 <HAL_DMA_IRQHandler+0x1ec>)
200055f8:	4293      	cmp	r3, r2
200055fa:	d004      	beq.n	20005606 <HAL_DMA_IRQHandler+0xd2>
200055fc:	687b      	ldr	r3, [r7, #4]
200055fe:	681b      	ldr	r3, [r3, #0]
20005600:	4a48      	ldr	r2, [pc, #288]	@ (20005724 <HAL_DMA_IRQHandler+0x1f0>)
20005602:	4293      	cmp	r3, r2
20005604:	d101      	bne.n	2000560a <HAL_DMA_IRQHandler+0xd6>
20005606:	2301      	movs	r3, #1
20005608:	e000      	b.n	2000560c <HAL_DMA_IRQHandler+0xd8>
2000560a:	2300      	movs	r3, #0
2000560c:	2b00      	cmp	r3, #0
2000560e:	f000 842b 	beq.w	20005e68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
20005612:	687b      	ldr	r3, [r7, #4]
20005614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005616:	f003 031f 	and.w	r3, r3, #31
2000561a:	2208      	movs	r2, #8
2000561c:	409a      	lsls	r2, r3
2000561e:	69bb      	ldr	r3, [r7, #24]
20005620:	4013      	ands	r3, r2
20005622:	2b00      	cmp	r3, #0
20005624:	f000 80a2 	beq.w	2000576c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
20005628:	687b      	ldr	r3, [r7, #4]
2000562a:	681b      	ldr	r3, [r3, #0]
2000562c:	4a2e      	ldr	r2, [pc, #184]	@ (200056e8 <HAL_DMA_IRQHandler+0x1b4>)
2000562e:	4293      	cmp	r3, r2
20005630:	d04a      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
20005632:	687b      	ldr	r3, [r7, #4]
20005634:	681b      	ldr	r3, [r3, #0]
20005636:	4a2d      	ldr	r2, [pc, #180]	@ (200056ec <HAL_DMA_IRQHandler+0x1b8>)
20005638:	4293      	cmp	r3, r2
2000563a:	d045      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
2000563c:	687b      	ldr	r3, [r7, #4]
2000563e:	681b      	ldr	r3, [r3, #0]
20005640:	4a2b      	ldr	r2, [pc, #172]	@ (200056f0 <HAL_DMA_IRQHandler+0x1bc>)
20005642:	4293      	cmp	r3, r2
20005644:	d040      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
20005646:	687b      	ldr	r3, [r7, #4]
20005648:	681b      	ldr	r3, [r3, #0]
2000564a:	4a2a      	ldr	r2, [pc, #168]	@ (200056f4 <HAL_DMA_IRQHandler+0x1c0>)
2000564c:	4293      	cmp	r3, r2
2000564e:	d03b      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
20005650:	687b      	ldr	r3, [r7, #4]
20005652:	681b      	ldr	r3, [r3, #0]
20005654:	4a28      	ldr	r2, [pc, #160]	@ (200056f8 <HAL_DMA_IRQHandler+0x1c4>)
20005656:	4293      	cmp	r3, r2
20005658:	d036      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
2000565a:	687b      	ldr	r3, [r7, #4]
2000565c:	681b      	ldr	r3, [r3, #0]
2000565e:	4a27      	ldr	r2, [pc, #156]	@ (200056fc <HAL_DMA_IRQHandler+0x1c8>)
20005660:	4293      	cmp	r3, r2
20005662:	d031      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
20005664:	687b      	ldr	r3, [r7, #4]
20005666:	681b      	ldr	r3, [r3, #0]
20005668:	4a25      	ldr	r2, [pc, #148]	@ (20005700 <HAL_DMA_IRQHandler+0x1cc>)
2000566a:	4293      	cmp	r3, r2
2000566c:	d02c      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
2000566e:	687b      	ldr	r3, [r7, #4]
20005670:	681b      	ldr	r3, [r3, #0]
20005672:	4a24      	ldr	r2, [pc, #144]	@ (20005704 <HAL_DMA_IRQHandler+0x1d0>)
20005674:	4293      	cmp	r3, r2
20005676:	d027      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
20005678:	687b      	ldr	r3, [r7, #4]
2000567a:	681b      	ldr	r3, [r3, #0]
2000567c:	4a22      	ldr	r2, [pc, #136]	@ (20005708 <HAL_DMA_IRQHandler+0x1d4>)
2000567e:	4293      	cmp	r3, r2
20005680:	d022      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
20005682:	687b      	ldr	r3, [r7, #4]
20005684:	681b      	ldr	r3, [r3, #0]
20005686:	4a21      	ldr	r2, [pc, #132]	@ (2000570c <HAL_DMA_IRQHandler+0x1d8>)
20005688:	4293      	cmp	r3, r2
2000568a:	d01d      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
2000568c:	687b      	ldr	r3, [r7, #4]
2000568e:	681b      	ldr	r3, [r3, #0]
20005690:	4a1f      	ldr	r2, [pc, #124]	@ (20005710 <HAL_DMA_IRQHandler+0x1dc>)
20005692:	4293      	cmp	r3, r2
20005694:	d018      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
20005696:	687b      	ldr	r3, [r7, #4]
20005698:	681b      	ldr	r3, [r3, #0]
2000569a:	4a1e      	ldr	r2, [pc, #120]	@ (20005714 <HAL_DMA_IRQHandler+0x1e0>)
2000569c:	4293      	cmp	r3, r2
2000569e:	d013      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
200056a0:	687b      	ldr	r3, [r7, #4]
200056a2:	681b      	ldr	r3, [r3, #0]
200056a4:	4a1c      	ldr	r2, [pc, #112]	@ (20005718 <HAL_DMA_IRQHandler+0x1e4>)
200056a6:	4293      	cmp	r3, r2
200056a8:	d00e      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
200056aa:	687b      	ldr	r3, [r7, #4]
200056ac:	681b      	ldr	r3, [r3, #0]
200056ae:	4a1b      	ldr	r2, [pc, #108]	@ (2000571c <HAL_DMA_IRQHandler+0x1e8>)
200056b0:	4293      	cmp	r3, r2
200056b2:	d009      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
200056b4:	687b      	ldr	r3, [r7, #4]
200056b6:	681b      	ldr	r3, [r3, #0]
200056b8:	4a19      	ldr	r2, [pc, #100]	@ (20005720 <HAL_DMA_IRQHandler+0x1ec>)
200056ba:	4293      	cmp	r3, r2
200056bc:	d004      	beq.n	200056c8 <HAL_DMA_IRQHandler+0x194>
200056be:	687b      	ldr	r3, [r7, #4]
200056c0:	681b      	ldr	r3, [r3, #0]
200056c2:	4a18      	ldr	r2, [pc, #96]	@ (20005724 <HAL_DMA_IRQHandler+0x1f0>)
200056c4:	4293      	cmp	r3, r2
200056c6:	d12f      	bne.n	20005728 <HAL_DMA_IRQHandler+0x1f4>
200056c8:	687b      	ldr	r3, [r7, #4]
200056ca:	681b      	ldr	r3, [r3, #0]
200056cc:	681b      	ldr	r3, [r3, #0]
200056ce:	f003 0304 	and.w	r3, r3, #4
200056d2:	2b00      	cmp	r3, #0
200056d4:	bf14      	ite	ne
200056d6:	2301      	movne	r3, #1
200056d8:	2300      	moveq	r3, #0
200056da:	b2db      	uxtb	r3, r3
200056dc:	e02e      	b.n	2000573c <HAL_DMA_IRQHandler+0x208>
200056de:	bf00      	nop
200056e0:	200004b0 	.word	0x200004b0
200056e4:	1b4e81b5 	.word	0x1b4e81b5
200056e8:	40020010 	.word	0x40020010
200056ec:	40020028 	.word	0x40020028
200056f0:	40020040 	.word	0x40020040
200056f4:	40020058 	.word	0x40020058
200056f8:	40020070 	.word	0x40020070
200056fc:	40020088 	.word	0x40020088
20005700:	400200a0 	.word	0x400200a0
20005704:	400200b8 	.word	0x400200b8
20005708:	40020410 	.word	0x40020410
2000570c:	40020428 	.word	0x40020428
20005710:	40020440 	.word	0x40020440
20005714:	40020458 	.word	0x40020458
20005718:	40020470 	.word	0x40020470
2000571c:	40020488 	.word	0x40020488
20005720:	400204a0 	.word	0x400204a0
20005724:	400204b8 	.word	0x400204b8
20005728:	687b      	ldr	r3, [r7, #4]
2000572a:	681b      	ldr	r3, [r3, #0]
2000572c:	681b      	ldr	r3, [r3, #0]
2000572e:	f003 0308 	and.w	r3, r3, #8
20005732:	2b00      	cmp	r3, #0
20005734:	bf14      	ite	ne
20005736:	2301      	movne	r3, #1
20005738:	2300      	moveq	r3, #0
2000573a:	b2db      	uxtb	r3, r3
2000573c:	2b00      	cmp	r3, #0
2000573e:	d015      	beq.n	2000576c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
20005740:	687b      	ldr	r3, [r7, #4]
20005742:	681b      	ldr	r3, [r3, #0]
20005744:	681a      	ldr	r2, [r3, #0]
20005746:	687b      	ldr	r3, [r7, #4]
20005748:	681b      	ldr	r3, [r3, #0]
2000574a:	f022 0204 	bic.w	r2, r2, #4
2000574e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
20005750:	687b      	ldr	r3, [r7, #4]
20005752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005754:	f003 031f 	and.w	r3, r3, #31
20005758:	2208      	movs	r2, #8
2000575a:	409a      	lsls	r2, r3
2000575c:	6a3b      	ldr	r3, [r7, #32]
2000575e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20005760:	687b      	ldr	r3, [r7, #4]
20005762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20005764:	f043 0201 	orr.w	r2, r3, #1
20005768:	687b      	ldr	r3, [r7, #4]
2000576a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2000576c:	687b      	ldr	r3, [r7, #4]
2000576e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005770:	f003 031f 	and.w	r3, r3, #31
20005774:	69ba      	ldr	r2, [r7, #24]
20005776:	fa22 f303 	lsr.w	r3, r2, r3
2000577a:	f003 0301 	and.w	r3, r3, #1
2000577e:	2b00      	cmp	r3, #0
20005780:	d06e      	beq.n	20005860 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
20005782:	687b      	ldr	r3, [r7, #4]
20005784:	681b      	ldr	r3, [r3, #0]
20005786:	4a69      	ldr	r2, [pc, #420]	@ (2000592c <HAL_DMA_IRQHandler+0x3f8>)
20005788:	4293      	cmp	r3, r2
2000578a:	d04a      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
2000578c:	687b      	ldr	r3, [r7, #4]
2000578e:	681b      	ldr	r3, [r3, #0]
20005790:	4a67      	ldr	r2, [pc, #412]	@ (20005930 <HAL_DMA_IRQHandler+0x3fc>)
20005792:	4293      	cmp	r3, r2
20005794:	d045      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
20005796:	687b      	ldr	r3, [r7, #4]
20005798:	681b      	ldr	r3, [r3, #0]
2000579a:	4a66      	ldr	r2, [pc, #408]	@ (20005934 <HAL_DMA_IRQHandler+0x400>)
2000579c:	4293      	cmp	r3, r2
2000579e:	d040      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057a0:	687b      	ldr	r3, [r7, #4]
200057a2:	681b      	ldr	r3, [r3, #0]
200057a4:	4a64      	ldr	r2, [pc, #400]	@ (20005938 <HAL_DMA_IRQHandler+0x404>)
200057a6:	4293      	cmp	r3, r2
200057a8:	d03b      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057aa:	687b      	ldr	r3, [r7, #4]
200057ac:	681b      	ldr	r3, [r3, #0]
200057ae:	4a63      	ldr	r2, [pc, #396]	@ (2000593c <HAL_DMA_IRQHandler+0x408>)
200057b0:	4293      	cmp	r3, r2
200057b2:	d036      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057b4:	687b      	ldr	r3, [r7, #4]
200057b6:	681b      	ldr	r3, [r3, #0]
200057b8:	4a61      	ldr	r2, [pc, #388]	@ (20005940 <HAL_DMA_IRQHandler+0x40c>)
200057ba:	4293      	cmp	r3, r2
200057bc:	d031      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057be:	687b      	ldr	r3, [r7, #4]
200057c0:	681b      	ldr	r3, [r3, #0]
200057c2:	4a60      	ldr	r2, [pc, #384]	@ (20005944 <HAL_DMA_IRQHandler+0x410>)
200057c4:	4293      	cmp	r3, r2
200057c6:	d02c      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057c8:	687b      	ldr	r3, [r7, #4]
200057ca:	681b      	ldr	r3, [r3, #0]
200057cc:	4a5e      	ldr	r2, [pc, #376]	@ (20005948 <HAL_DMA_IRQHandler+0x414>)
200057ce:	4293      	cmp	r3, r2
200057d0:	d027      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057d2:	687b      	ldr	r3, [r7, #4]
200057d4:	681b      	ldr	r3, [r3, #0]
200057d6:	4a5d      	ldr	r2, [pc, #372]	@ (2000594c <HAL_DMA_IRQHandler+0x418>)
200057d8:	4293      	cmp	r3, r2
200057da:	d022      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057dc:	687b      	ldr	r3, [r7, #4]
200057de:	681b      	ldr	r3, [r3, #0]
200057e0:	4a5b      	ldr	r2, [pc, #364]	@ (20005950 <HAL_DMA_IRQHandler+0x41c>)
200057e2:	4293      	cmp	r3, r2
200057e4:	d01d      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057e6:	687b      	ldr	r3, [r7, #4]
200057e8:	681b      	ldr	r3, [r3, #0]
200057ea:	4a5a      	ldr	r2, [pc, #360]	@ (20005954 <HAL_DMA_IRQHandler+0x420>)
200057ec:	4293      	cmp	r3, r2
200057ee:	d018      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057f0:	687b      	ldr	r3, [r7, #4]
200057f2:	681b      	ldr	r3, [r3, #0]
200057f4:	4a58      	ldr	r2, [pc, #352]	@ (20005958 <HAL_DMA_IRQHandler+0x424>)
200057f6:	4293      	cmp	r3, r2
200057f8:	d013      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
200057fa:	687b      	ldr	r3, [r7, #4]
200057fc:	681b      	ldr	r3, [r3, #0]
200057fe:	4a57      	ldr	r2, [pc, #348]	@ (2000595c <HAL_DMA_IRQHandler+0x428>)
20005800:	4293      	cmp	r3, r2
20005802:	d00e      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
20005804:	687b      	ldr	r3, [r7, #4]
20005806:	681b      	ldr	r3, [r3, #0]
20005808:	4a55      	ldr	r2, [pc, #340]	@ (20005960 <HAL_DMA_IRQHandler+0x42c>)
2000580a:	4293      	cmp	r3, r2
2000580c:	d009      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
2000580e:	687b      	ldr	r3, [r7, #4]
20005810:	681b      	ldr	r3, [r3, #0]
20005812:	4a54      	ldr	r2, [pc, #336]	@ (20005964 <HAL_DMA_IRQHandler+0x430>)
20005814:	4293      	cmp	r3, r2
20005816:	d004      	beq.n	20005822 <HAL_DMA_IRQHandler+0x2ee>
20005818:	687b      	ldr	r3, [r7, #4]
2000581a:	681b      	ldr	r3, [r3, #0]
2000581c:	4a52      	ldr	r2, [pc, #328]	@ (20005968 <HAL_DMA_IRQHandler+0x434>)
2000581e:	4293      	cmp	r3, r2
20005820:	d10a      	bne.n	20005838 <HAL_DMA_IRQHandler+0x304>
20005822:	687b      	ldr	r3, [r7, #4]
20005824:	681b      	ldr	r3, [r3, #0]
20005826:	695b      	ldr	r3, [r3, #20]
20005828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000582c:	2b00      	cmp	r3, #0
2000582e:	bf14      	ite	ne
20005830:	2301      	movne	r3, #1
20005832:	2300      	moveq	r3, #0
20005834:	b2db      	uxtb	r3, r3
20005836:	e003      	b.n	20005840 <HAL_DMA_IRQHandler+0x30c>
20005838:	687b      	ldr	r3, [r7, #4]
2000583a:	681b      	ldr	r3, [r3, #0]
2000583c:	681b      	ldr	r3, [r3, #0]
2000583e:	2300      	movs	r3, #0
20005840:	2b00      	cmp	r3, #0
20005842:	d00d      	beq.n	20005860 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
20005844:	687b      	ldr	r3, [r7, #4]
20005846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005848:	f003 031f 	and.w	r3, r3, #31
2000584c:	2201      	movs	r2, #1
2000584e:	409a      	lsls	r2, r3
20005850:	6a3b      	ldr	r3, [r7, #32]
20005852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20005854:	687b      	ldr	r3, [r7, #4]
20005856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20005858:	f043 0202 	orr.w	r2, r3, #2
2000585c:	687b      	ldr	r3, [r7, #4]
2000585e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
20005860:	687b      	ldr	r3, [r7, #4]
20005862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005864:	f003 031f 	and.w	r3, r3, #31
20005868:	2204      	movs	r2, #4
2000586a:	409a      	lsls	r2, r3
2000586c:	69bb      	ldr	r3, [r7, #24]
2000586e:	4013      	ands	r3, r2
20005870:	2b00      	cmp	r3, #0
20005872:	f000 808f 	beq.w	20005994 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
20005876:	687b      	ldr	r3, [r7, #4]
20005878:	681b      	ldr	r3, [r3, #0]
2000587a:	4a2c      	ldr	r2, [pc, #176]	@ (2000592c <HAL_DMA_IRQHandler+0x3f8>)
2000587c:	4293      	cmp	r3, r2
2000587e:	d04a      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
20005880:	687b      	ldr	r3, [r7, #4]
20005882:	681b      	ldr	r3, [r3, #0]
20005884:	4a2a      	ldr	r2, [pc, #168]	@ (20005930 <HAL_DMA_IRQHandler+0x3fc>)
20005886:	4293      	cmp	r3, r2
20005888:	d045      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
2000588a:	687b      	ldr	r3, [r7, #4]
2000588c:	681b      	ldr	r3, [r3, #0]
2000588e:	4a29      	ldr	r2, [pc, #164]	@ (20005934 <HAL_DMA_IRQHandler+0x400>)
20005890:	4293      	cmp	r3, r2
20005892:	d040      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
20005894:	687b      	ldr	r3, [r7, #4]
20005896:	681b      	ldr	r3, [r3, #0]
20005898:	4a27      	ldr	r2, [pc, #156]	@ (20005938 <HAL_DMA_IRQHandler+0x404>)
2000589a:	4293      	cmp	r3, r2
2000589c:	d03b      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
2000589e:	687b      	ldr	r3, [r7, #4]
200058a0:	681b      	ldr	r3, [r3, #0]
200058a2:	4a26      	ldr	r2, [pc, #152]	@ (2000593c <HAL_DMA_IRQHandler+0x408>)
200058a4:	4293      	cmp	r3, r2
200058a6:	d036      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058a8:	687b      	ldr	r3, [r7, #4]
200058aa:	681b      	ldr	r3, [r3, #0]
200058ac:	4a24      	ldr	r2, [pc, #144]	@ (20005940 <HAL_DMA_IRQHandler+0x40c>)
200058ae:	4293      	cmp	r3, r2
200058b0:	d031      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058b2:	687b      	ldr	r3, [r7, #4]
200058b4:	681b      	ldr	r3, [r3, #0]
200058b6:	4a23      	ldr	r2, [pc, #140]	@ (20005944 <HAL_DMA_IRQHandler+0x410>)
200058b8:	4293      	cmp	r3, r2
200058ba:	d02c      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058bc:	687b      	ldr	r3, [r7, #4]
200058be:	681b      	ldr	r3, [r3, #0]
200058c0:	4a21      	ldr	r2, [pc, #132]	@ (20005948 <HAL_DMA_IRQHandler+0x414>)
200058c2:	4293      	cmp	r3, r2
200058c4:	d027      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058c6:	687b      	ldr	r3, [r7, #4]
200058c8:	681b      	ldr	r3, [r3, #0]
200058ca:	4a20      	ldr	r2, [pc, #128]	@ (2000594c <HAL_DMA_IRQHandler+0x418>)
200058cc:	4293      	cmp	r3, r2
200058ce:	d022      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058d0:	687b      	ldr	r3, [r7, #4]
200058d2:	681b      	ldr	r3, [r3, #0]
200058d4:	4a1e      	ldr	r2, [pc, #120]	@ (20005950 <HAL_DMA_IRQHandler+0x41c>)
200058d6:	4293      	cmp	r3, r2
200058d8:	d01d      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058da:	687b      	ldr	r3, [r7, #4]
200058dc:	681b      	ldr	r3, [r3, #0]
200058de:	4a1d      	ldr	r2, [pc, #116]	@ (20005954 <HAL_DMA_IRQHandler+0x420>)
200058e0:	4293      	cmp	r3, r2
200058e2:	d018      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058e4:	687b      	ldr	r3, [r7, #4]
200058e6:	681b      	ldr	r3, [r3, #0]
200058e8:	4a1b      	ldr	r2, [pc, #108]	@ (20005958 <HAL_DMA_IRQHandler+0x424>)
200058ea:	4293      	cmp	r3, r2
200058ec:	d013      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058ee:	687b      	ldr	r3, [r7, #4]
200058f0:	681b      	ldr	r3, [r3, #0]
200058f2:	4a1a      	ldr	r2, [pc, #104]	@ (2000595c <HAL_DMA_IRQHandler+0x428>)
200058f4:	4293      	cmp	r3, r2
200058f6:	d00e      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
200058f8:	687b      	ldr	r3, [r7, #4]
200058fa:	681b      	ldr	r3, [r3, #0]
200058fc:	4a18      	ldr	r2, [pc, #96]	@ (20005960 <HAL_DMA_IRQHandler+0x42c>)
200058fe:	4293      	cmp	r3, r2
20005900:	d009      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
20005902:	687b      	ldr	r3, [r7, #4]
20005904:	681b      	ldr	r3, [r3, #0]
20005906:	4a17      	ldr	r2, [pc, #92]	@ (20005964 <HAL_DMA_IRQHandler+0x430>)
20005908:	4293      	cmp	r3, r2
2000590a:	d004      	beq.n	20005916 <HAL_DMA_IRQHandler+0x3e2>
2000590c:	687b      	ldr	r3, [r7, #4]
2000590e:	681b      	ldr	r3, [r3, #0]
20005910:	4a15      	ldr	r2, [pc, #84]	@ (20005968 <HAL_DMA_IRQHandler+0x434>)
20005912:	4293      	cmp	r3, r2
20005914:	d12a      	bne.n	2000596c <HAL_DMA_IRQHandler+0x438>
20005916:	687b      	ldr	r3, [r7, #4]
20005918:	681b      	ldr	r3, [r3, #0]
2000591a:	681b      	ldr	r3, [r3, #0]
2000591c:	f003 0302 	and.w	r3, r3, #2
20005920:	2b00      	cmp	r3, #0
20005922:	bf14      	ite	ne
20005924:	2301      	movne	r3, #1
20005926:	2300      	moveq	r3, #0
20005928:	b2db      	uxtb	r3, r3
2000592a:	e023      	b.n	20005974 <HAL_DMA_IRQHandler+0x440>
2000592c:	40020010 	.word	0x40020010
20005930:	40020028 	.word	0x40020028
20005934:	40020040 	.word	0x40020040
20005938:	40020058 	.word	0x40020058
2000593c:	40020070 	.word	0x40020070
20005940:	40020088 	.word	0x40020088
20005944:	400200a0 	.word	0x400200a0
20005948:	400200b8 	.word	0x400200b8
2000594c:	40020410 	.word	0x40020410
20005950:	40020428 	.word	0x40020428
20005954:	40020440 	.word	0x40020440
20005958:	40020458 	.word	0x40020458
2000595c:	40020470 	.word	0x40020470
20005960:	40020488 	.word	0x40020488
20005964:	400204a0 	.word	0x400204a0
20005968:	400204b8 	.word	0x400204b8
2000596c:	687b      	ldr	r3, [r7, #4]
2000596e:	681b      	ldr	r3, [r3, #0]
20005970:	681b      	ldr	r3, [r3, #0]
20005972:	2300      	movs	r3, #0
20005974:	2b00      	cmp	r3, #0
20005976:	d00d      	beq.n	20005994 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
20005978:	687b      	ldr	r3, [r7, #4]
2000597a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2000597c:	f003 031f 	and.w	r3, r3, #31
20005980:	2204      	movs	r2, #4
20005982:	409a      	lsls	r2, r3
20005984:	6a3b      	ldr	r3, [r7, #32]
20005986:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20005988:	687b      	ldr	r3, [r7, #4]
2000598a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000598c:	f043 0204 	orr.w	r2, r3, #4
20005990:	687b      	ldr	r3, [r7, #4]
20005992:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
20005994:	687b      	ldr	r3, [r7, #4]
20005996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005998:	f003 031f 	and.w	r3, r3, #31
2000599c:	2210      	movs	r2, #16
2000599e:	409a      	lsls	r2, r3
200059a0:	69bb      	ldr	r3, [r7, #24]
200059a2:	4013      	ands	r3, r2
200059a4:	2b00      	cmp	r3, #0
200059a6:	f000 80a6 	beq.w	20005af6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
200059aa:	687b      	ldr	r3, [r7, #4]
200059ac:	681b      	ldr	r3, [r3, #0]
200059ae:	4a85      	ldr	r2, [pc, #532]	@ (20005bc4 <HAL_DMA_IRQHandler+0x690>)
200059b0:	4293      	cmp	r3, r2
200059b2:	d04a      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
200059b4:	687b      	ldr	r3, [r7, #4]
200059b6:	681b      	ldr	r3, [r3, #0]
200059b8:	4a83      	ldr	r2, [pc, #524]	@ (20005bc8 <HAL_DMA_IRQHandler+0x694>)
200059ba:	4293      	cmp	r3, r2
200059bc:	d045      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
200059be:	687b      	ldr	r3, [r7, #4]
200059c0:	681b      	ldr	r3, [r3, #0]
200059c2:	4a82      	ldr	r2, [pc, #520]	@ (20005bcc <HAL_DMA_IRQHandler+0x698>)
200059c4:	4293      	cmp	r3, r2
200059c6:	d040      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
200059c8:	687b      	ldr	r3, [r7, #4]
200059ca:	681b      	ldr	r3, [r3, #0]
200059cc:	4a80      	ldr	r2, [pc, #512]	@ (20005bd0 <HAL_DMA_IRQHandler+0x69c>)
200059ce:	4293      	cmp	r3, r2
200059d0:	d03b      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
200059d2:	687b      	ldr	r3, [r7, #4]
200059d4:	681b      	ldr	r3, [r3, #0]
200059d6:	4a7f      	ldr	r2, [pc, #508]	@ (20005bd4 <HAL_DMA_IRQHandler+0x6a0>)
200059d8:	4293      	cmp	r3, r2
200059da:	d036      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
200059dc:	687b      	ldr	r3, [r7, #4]
200059de:	681b      	ldr	r3, [r3, #0]
200059e0:	4a7d      	ldr	r2, [pc, #500]	@ (20005bd8 <HAL_DMA_IRQHandler+0x6a4>)
200059e2:	4293      	cmp	r3, r2
200059e4:	d031      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
200059e6:	687b      	ldr	r3, [r7, #4]
200059e8:	681b      	ldr	r3, [r3, #0]
200059ea:	4a7c      	ldr	r2, [pc, #496]	@ (20005bdc <HAL_DMA_IRQHandler+0x6a8>)
200059ec:	4293      	cmp	r3, r2
200059ee:	d02c      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
200059f0:	687b      	ldr	r3, [r7, #4]
200059f2:	681b      	ldr	r3, [r3, #0]
200059f4:	4a7a      	ldr	r2, [pc, #488]	@ (20005be0 <HAL_DMA_IRQHandler+0x6ac>)
200059f6:	4293      	cmp	r3, r2
200059f8:	d027      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
200059fa:	687b      	ldr	r3, [r7, #4]
200059fc:	681b      	ldr	r3, [r3, #0]
200059fe:	4a79      	ldr	r2, [pc, #484]	@ (20005be4 <HAL_DMA_IRQHandler+0x6b0>)
20005a00:	4293      	cmp	r3, r2
20005a02:	d022      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
20005a04:	687b      	ldr	r3, [r7, #4]
20005a06:	681b      	ldr	r3, [r3, #0]
20005a08:	4a77      	ldr	r2, [pc, #476]	@ (20005be8 <HAL_DMA_IRQHandler+0x6b4>)
20005a0a:	4293      	cmp	r3, r2
20005a0c:	d01d      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
20005a0e:	687b      	ldr	r3, [r7, #4]
20005a10:	681b      	ldr	r3, [r3, #0]
20005a12:	4a76      	ldr	r2, [pc, #472]	@ (20005bec <HAL_DMA_IRQHandler+0x6b8>)
20005a14:	4293      	cmp	r3, r2
20005a16:	d018      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
20005a18:	687b      	ldr	r3, [r7, #4]
20005a1a:	681b      	ldr	r3, [r3, #0]
20005a1c:	4a74      	ldr	r2, [pc, #464]	@ (20005bf0 <HAL_DMA_IRQHandler+0x6bc>)
20005a1e:	4293      	cmp	r3, r2
20005a20:	d013      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
20005a22:	687b      	ldr	r3, [r7, #4]
20005a24:	681b      	ldr	r3, [r3, #0]
20005a26:	4a73      	ldr	r2, [pc, #460]	@ (20005bf4 <HAL_DMA_IRQHandler+0x6c0>)
20005a28:	4293      	cmp	r3, r2
20005a2a:	d00e      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
20005a2c:	687b      	ldr	r3, [r7, #4]
20005a2e:	681b      	ldr	r3, [r3, #0]
20005a30:	4a71      	ldr	r2, [pc, #452]	@ (20005bf8 <HAL_DMA_IRQHandler+0x6c4>)
20005a32:	4293      	cmp	r3, r2
20005a34:	d009      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
20005a36:	687b      	ldr	r3, [r7, #4]
20005a38:	681b      	ldr	r3, [r3, #0]
20005a3a:	4a70      	ldr	r2, [pc, #448]	@ (20005bfc <HAL_DMA_IRQHandler+0x6c8>)
20005a3c:	4293      	cmp	r3, r2
20005a3e:	d004      	beq.n	20005a4a <HAL_DMA_IRQHandler+0x516>
20005a40:	687b      	ldr	r3, [r7, #4]
20005a42:	681b      	ldr	r3, [r3, #0]
20005a44:	4a6e      	ldr	r2, [pc, #440]	@ (20005c00 <HAL_DMA_IRQHandler+0x6cc>)
20005a46:	4293      	cmp	r3, r2
20005a48:	d10a      	bne.n	20005a60 <HAL_DMA_IRQHandler+0x52c>
20005a4a:	687b      	ldr	r3, [r7, #4]
20005a4c:	681b      	ldr	r3, [r3, #0]
20005a4e:	681b      	ldr	r3, [r3, #0]
20005a50:	f003 0308 	and.w	r3, r3, #8
20005a54:	2b00      	cmp	r3, #0
20005a56:	bf14      	ite	ne
20005a58:	2301      	movne	r3, #1
20005a5a:	2300      	moveq	r3, #0
20005a5c:	b2db      	uxtb	r3, r3
20005a5e:	e009      	b.n	20005a74 <HAL_DMA_IRQHandler+0x540>
20005a60:	687b      	ldr	r3, [r7, #4]
20005a62:	681b      	ldr	r3, [r3, #0]
20005a64:	681b      	ldr	r3, [r3, #0]
20005a66:	f003 0304 	and.w	r3, r3, #4
20005a6a:	2b00      	cmp	r3, #0
20005a6c:	bf14      	ite	ne
20005a6e:	2301      	movne	r3, #1
20005a70:	2300      	moveq	r3, #0
20005a72:	b2db      	uxtb	r3, r3
20005a74:	2b00      	cmp	r3, #0
20005a76:	d03e      	beq.n	20005af6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
20005a78:	687b      	ldr	r3, [r7, #4]
20005a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005a7c:	f003 031f 	and.w	r3, r3, #31
20005a80:	2210      	movs	r2, #16
20005a82:	409a      	lsls	r2, r3
20005a84:	6a3b      	ldr	r3, [r7, #32]
20005a86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
20005a88:	687b      	ldr	r3, [r7, #4]
20005a8a:	681b      	ldr	r3, [r3, #0]
20005a8c:	681b      	ldr	r3, [r3, #0]
20005a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20005a92:	2b00      	cmp	r3, #0
20005a94:	d018      	beq.n	20005ac8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
20005a96:	687b      	ldr	r3, [r7, #4]
20005a98:	681b      	ldr	r3, [r3, #0]
20005a9a:	681b      	ldr	r3, [r3, #0]
20005a9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20005aa0:	2b00      	cmp	r3, #0
20005aa2:	d108      	bne.n	20005ab6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
20005aa4:	687b      	ldr	r3, [r7, #4]
20005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005aa8:	2b00      	cmp	r3, #0
20005aaa:	d024      	beq.n	20005af6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
20005aac:	687b      	ldr	r3, [r7, #4]
20005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005ab0:	6878      	ldr	r0, [r7, #4]
20005ab2:	4798      	blx	r3
20005ab4:	e01f      	b.n	20005af6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
20005ab6:	687b      	ldr	r3, [r7, #4]
20005ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20005aba:	2b00      	cmp	r3, #0
20005abc:	d01b      	beq.n	20005af6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
20005abe:	687b      	ldr	r3, [r7, #4]
20005ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20005ac2:	6878      	ldr	r0, [r7, #4]
20005ac4:	4798      	blx	r3
20005ac6:	e016      	b.n	20005af6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
20005ac8:	687b      	ldr	r3, [r7, #4]
20005aca:	681b      	ldr	r3, [r3, #0]
20005acc:	681b      	ldr	r3, [r3, #0]
20005ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20005ad2:	2b00      	cmp	r3, #0
20005ad4:	d107      	bne.n	20005ae6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
20005ad6:	687b      	ldr	r3, [r7, #4]
20005ad8:	681b      	ldr	r3, [r3, #0]
20005ada:	681a      	ldr	r2, [r3, #0]
20005adc:	687b      	ldr	r3, [r7, #4]
20005ade:	681b      	ldr	r3, [r3, #0]
20005ae0:	f022 0208 	bic.w	r2, r2, #8
20005ae4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
20005ae6:	687b      	ldr	r3, [r7, #4]
20005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005aea:	2b00      	cmp	r3, #0
20005aec:	d003      	beq.n	20005af6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
20005aee:	687b      	ldr	r3, [r7, #4]
20005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005af2:	6878      	ldr	r0, [r7, #4]
20005af4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
20005af6:	687b      	ldr	r3, [r7, #4]
20005af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005afa:	f003 031f 	and.w	r3, r3, #31
20005afe:	2220      	movs	r2, #32
20005b00:	409a      	lsls	r2, r3
20005b02:	69bb      	ldr	r3, [r7, #24]
20005b04:	4013      	ands	r3, r2
20005b06:	2b00      	cmp	r3, #0
20005b08:	f000 8110 	beq.w	20005d2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
20005b0c:	687b      	ldr	r3, [r7, #4]
20005b0e:	681b      	ldr	r3, [r3, #0]
20005b10:	4a2c      	ldr	r2, [pc, #176]	@ (20005bc4 <HAL_DMA_IRQHandler+0x690>)
20005b12:	4293      	cmp	r3, r2
20005b14:	d04a      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b16:	687b      	ldr	r3, [r7, #4]
20005b18:	681b      	ldr	r3, [r3, #0]
20005b1a:	4a2b      	ldr	r2, [pc, #172]	@ (20005bc8 <HAL_DMA_IRQHandler+0x694>)
20005b1c:	4293      	cmp	r3, r2
20005b1e:	d045      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b20:	687b      	ldr	r3, [r7, #4]
20005b22:	681b      	ldr	r3, [r3, #0]
20005b24:	4a29      	ldr	r2, [pc, #164]	@ (20005bcc <HAL_DMA_IRQHandler+0x698>)
20005b26:	4293      	cmp	r3, r2
20005b28:	d040      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b2a:	687b      	ldr	r3, [r7, #4]
20005b2c:	681b      	ldr	r3, [r3, #0]
20005b2e:	4a28      	ldr	r2, [pc, #160]	@ (20005bd0 <HAL_DMA_IRQHandler+0x69c>)
20005b30:	4293      	cmp	r3, r2
20005b32:	d03b      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b34:	687b      	ldr	r3, [r7, #4]
20005b36:	681b      	ldr	r3, [r3, #0]
20005b38:	4a26      	ldr	r2, [pc, #152]	@ (20005bd4 <HAL_DMA_IRQHandler+0x6a0>)
20005b3a:	4293      	cmp	r3, r2
20005b3c:	d036      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b3e:	687b      	ldr	r3, [r7, #4]
20005b40:	681b      	ldr	r3, [r3, #0]
20005b42:	4a25      	ldr	r2, [pc, #148]	@ (20005bd8 <HAL_DMA_IRQHandler+0x6a4>)
20005b44:	4293      	cmp	r3, r2
20005b46:	d031      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b48:	687b      	ldr	r3, [r7, #4]
20005b4a:	681b      	ldr	r3, [r3, #0]
20005b4c:	4a23      	ldr	r2, [pc, #140]	@ (20005bdc <HAL_DMA_IRQHandler+0x6a8>)
20005b4e:	4293      	cmp	r3, r2
20005b50:	d02c      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b52:	687b      	ldr	r3, [r7, #4]
20005b54:	681b      	ldr	r3, [r3, #0]
20005b56:	4a22      	ldr	r2, [pc, #136]	@ (20005be0 <HAL_DMA_IRQHandler+0x6ac>)
20005b58:	4293      	cmp	r3, r2
20005b5a:	d027      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b5c:	687b      	ldr	r3, [r7, #4]
20005b5e:	681b      	ldr	r3, [r3, #0]
20005b60:	4a20      	ldr	r2, [pc, #128]	@ (20005be4 <HAL_DMA_IRQHandler+0x6b0>)
20005b62:	4293      	cmp	r3, r2
20005b64:	d022      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b66:	687b      	ldr	r3, [r7, #4]
20005b68:	681b      	ldr	r3, [r3, #0]
20005b6a:	4a1f      	ldr	r2, [pc, #124]	@ (20005be8 <HAL_DMA_IRQHandler+0x6b4>)
20005b6c:	4293      	cmp	r3, r2
20005b6e:	d01d      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b70:	687b      	ldr	r3, [r7, #4]
20005b72:	681b      	ldr	r3, [r3, #0]
20005b74:	4a1d      	ldr	r2, [pc, #116]	@ (20005bec <HAL_DMA_IRQHandler+0x6b8>)
20005b76:	4293      	cmp	r3, r2
20005b78:	d018      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b7a:	687b      	ldr	r3, [r7, #4]
20005b7c:	681b      	ldr	r3, [r3, #0]
20005b7e:	4a1c      	ldr	r2, [pc, #112]	@ (20005bf0 <HAL_DMA_IRQHandler+0x6bc>)
20005b80:	4293      	cmp	r3, r2
20005b82:	d013      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b84:	687b      	ldr	r3, [r7, #4]
20005b86:	681b      	ldr	r3, [r3, #0]
20005b88:	4a1a      	ldr	r2, [pc, #104]	@ (20005bf4 <HAL_DMA_IRQHandler+0x6c0>)
20005b8a:	4293      	cmp	r3, r2
20005b8c:	d00e      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b8e:	687b      	ldr	r3, [r7, #4]
20005b90:	681b      	ldr	r3, [r3, #0]
20005b92:	4a19      	ldr	r2, [pc, #100]	@ (20005bf8 <HAL_DMA_IRQHandler+0x6c4>)
20005b94:	4293      	cmp	r3, r2
20005b96:	d009      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005b98:	687b      	ldr	r3, [r7, #4]
20005b9a:	681b      	ldr	r3, [r3, #0]
20005b9c:	4a17      	ldr	r2, [pc, #92]	@ (20005bfc <HAL_DMA_IRQHandler+0x6c8>)
20005b9e:	4293      	cmp	r3, r2
20005ba0:	d004      	beq.n	20005bac <HAL_DMA_IRQHandler+0x678>
20005ba2:	687b      	ldr	r3, [r7, #4]
20005ba4:	681b      	ldr	r3, [r3, #0]
20005ba6:	4a16      	ldr	r2, [pc, #88]	@ (20005c00 <HAL_DMA_IRQHandler+0x6cc>)
20005ba8:	4293      	cmp	r3, r2
20005baa:	d12b      	bne.n	20005c04 <HAL_DMA_IRQHandler+0x6d0>
20005bac:	687b      	ldr	r3, [r7, #4]
20005bae:	681b      	ldr	r3, [r3, #0]
20005bb0:	681b      	ldr	r3, [r3, #0]
20005bb2:	f003 0310 	and.w	r3, r3, #16
20005bb6:	2b00      	cmp	r3, #0
20005bb8:	bf14      	ite	ne
20005bba:	2301      	movne	r3, #1
20005bbc:	2300      	moveq	r3, #0
20005bbe:	b2db      	uxtb	r3, r3
20005bc0:	e02a      	b.n	20005c18 <HAL_DMA_IRQHandler+0x6e4>
20005bc2:	bf00      	nop
20005bc4:	40020010 	.word	0x40020010
20005bc8:	40020028 	.word	0x40020028
20005bcc:	40020040 	.word	0x40020040
20005bd0:	40020058 	.word	0x40020058
20005bd4:	40020070 	.word	0x40020070
20005bd8:	40020088 	.word	0x40020088
20005bdc:	400200a0 	.word	0x400200a0
20005be0:	400200b8 	.word	0x400200b8
20005be4:	40020410 	.word	0x40020410
20005be8:	40020428 	.word	0x40020428
20005bec:	40020440 	.word	0x40020440
20005bf0:	40020458 	.word	0x40020458
20005bf4:	40020470 	.word	0x40020470
20005bf8:	40020488 	.word	0x40020488
20005bfc:	400204a0 	.word	0x400204a0
20005c00:	400204b8 	.word	0x400204b8
20005c04:	687b      	ldr	r3, [r7, #4]
20005c06:	681b      	ldr	r3, [r3, #0]
20005c08:	681b      	ldr	r3, [r3, #0]
20005c0a:	f003 0302 	and.w	r3, r3, #2
20005c0e:	2b00      	cmp	r3, #0
20005c10:	bf14      	ite	ne
20005c12:	2301      	movne	r3, #1
20005c14:	2300      	moveq	r3, #0
20005c16:	b2db      	uxtb	r3, r3
20005c18:	2b00      	cmp	r3, #0
20005c1a:	f000 8087 	beq.w	20005d2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
20005c1e:	687b      	ldr	r3, [r7, #4]
20005c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005c22:	f003 031f 	and.w	r3, r3, #31
20005c26:	2220      	movs	r2, #32
20005c28:	409a      	lsls	r2, r3
20005c2a:	6a3b      	ldr	r3, [r7, #32]
20005c2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
20005c2e:	687b      	ldr	r3, [r7, #4]
20005c30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20005c34:	b2db      	uxtb	r3, r3
20005c36:	2b04      	cmp	r3, #4
20005c38:	d139      	bne.n	20005cae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20005c3a:	687b      	ldr	r3, [r7, #4]
20005c3c:	681b      	ldr	r3, [r3, #0]
20005c3e:	681a      	ldr	r2, [r3, #0]
20005c40:	687b      	ldr	r3, [r7, #4]
20005c42:	681b      	ldr	r3, [r3, #0]
20005c44:	f022 0216 	bic.w	r2, r2, #22
20005c48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
20005c4a:	687b      	ldr	r3, [r7, #4]
20005c4c:	681b      	ldr	r3, [r3, #0]
20005c4e:	695a      	ldr	r2, [r3, #20]
20005c50:	687b      	ldr	r3, [r7, #4]
20005c52:	681b      	ldr	r3, [r3, #0]
20005c54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
20005c58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20005c5a:	687b      	ldr	r3, [r7, #4]
20005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005c5e:	2b00      	cmp	r3, #0
20005c60:	d103      	bne.n	20005c6a <HAL_DMA_IRQHandler+0x736>
20005c62:	687b      	ldr	r3, [r7, #4]
20005c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20005c66:	2b00      	cmp	r3, #0
20005c68:	d007      	beq.n	20005c7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
20005c6a:	687b      	ldr	r3, [r7, #4]
20005c6c:	681b      	ldr	r3, [r3, #0]
20005c6e:	681a      	ldr	r2, [r3, #0]
20005c70:	687b      	ldr	r3, [r7, #4]
20005c72:	681b      	ldr	r3, [r3, #0]
20005c74:	f022 0208 	bic.w	r2, r2, #8
20005c78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
20005c7a:	687b      	ldr	r3, [r7, #4]
20005c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005c7e:	f003 031f 	and.w	r3, r3, #31
20005c82:	223f      	movs	r2, #63	@ 0x3f
20005c84:	409a      	lsls	r2, r3
20005c86:	6a3b      	ldr	r3, [r7, #32]
20005c88:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
20005c8a:	687b      	ldr	r3, [r7, #4]
20005c8c:	2201      	movs	r2, #1
20005c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
20005c92:	687b      	ldr	r3, [r7, #4]
20005c94:	2200      	movs	r2, #0
20005c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
20005c9a:	687b      	ldr	r3, [r7, #4]
20005c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20005c9e:	2b00      	cmp	r3, #0
20005ca0:	f000 834a 	beq.w	20006338 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
20005ca4:	687b      	ldr	r3, [r7, #4]
20005ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20005ca8:	6878      	ldr	r0, [r7, #4]
20005caa:	4798      	blx	r3
          }
          return;
20005cac:	e344      	b.n	20006338 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
20005cae:	687b      	ldr	r3, [r7, #4]
20005cb0:	681b      	ldr	r3, [r3, #0]
20005cb2:	681b      	ldr	r3, [r3, #0]
20005cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20005cb8:	2b00      	cmp	r3, #0
20005cba:	d018      	beq.n	20005cee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
20005cbc:	687b      	ldr	r3, [r7, #4]
20005cbe:	681b      	ldr	r3, [r3, #0]
20005cc0:	681b      	ldr	r3, [r3, #0]
20005cc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20005cc6:	2b00      	cmp	r3, #0
20005cc8:	d108      	bne.n	20005cdc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
20005cca:	687b      	ldr	r3, [r7, #4]
20005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005cce:	2b00      	cmp	r3, #0
20005cd0:	d02c      	beq.n	20005d2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
20005cd2:	687b      	ldr	r3, [r7, #4]
20005cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005cd6:	6878      	ldr	r0, [r7, #4]
20005cd8:	4798      	blx	r3
20005cda:	e027      	b.n	20005d2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
20005cdc:	687b      	ldr	r3, [r7, #4]
20005cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20005ce0:	2b00      	cmp	r3, #0
20005ce2:	d023      	beq.n	20005d2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
20005ce4:	687b      	ldr	r3, [r7, #4]
20005ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20005ce8:	6878      	ldr	r0, [r7, #4]
20005cea:	4798      	blx	r3
20005cec:	e01e      	b.n	20005d2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
20005cee:	687b      	ldr	r3, [r7, #4]
20005cf0:	681b      	ldr	r3, [r3, #0]
20005cf2:	681b      	ldr	r3, [r3, #0]
20005cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20005cf8:	2b00      	cmp	r3, #0
20005cfa:	d10f      	bne.n	20005d1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
20005cfc:	687b      	ldr	r3, [r7, #4]
20005cfe:	681b      	ldr	r3, [r3, #0]
20005d00:	681a      	ldr	r2, [r3, #0]
20005d02:	687b      	ldr	r3, [r7, #4]
20005d04:	681b      	ldr	r3, [r3, #0]
20005d06:	f022 0210 	bic.w	r2, r2, #16
20005d0a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
20005d0c:	687b      	ldr	r3, [r7, #4]
20005d0e:	2201      	movs	r2, #1
20005d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
20005d14:	687b      	ldr	r3, [r7, #4]
20005d16:	2200      	movs	r2, #0
20005d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
20005d1c:	687b      	ldr	r3, [r7, #4]
20005d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20005d20:	2b00      	cmp	r3, #0
20005d22:	d003      	beq.n	20005d2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
20005d24:	687b      	ldr	r3, [r7, #4]
20005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20005d28:	6878      	ldr	r0, [r7, #4]
20005d2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20005d2c:	687b      	ldr	r3, [r7, #4]
20005d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20005d30:	2b00      	cmp	r3, #0
20005d32:	f000 8306 	beq.w	20006342 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
20005d36:	687b      	ldr	r3, [r7, #4]
20005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20005d3a:	f003 0301 	and.w	r3, r3, #1
20005d3e:	2b00      	cmp	r3, #0
20005d40:	f000 8088 	beq.w	20005e54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
20005d44:	687b      	ldr	r3, [r7, #4]
20005d46:	2204      	movs	r2, #4
20005d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
20005d4c:	687b      	ldr	r3, [r7, #4]
20005d4e:	681b      	ldr	r3, [r3, #0]
20005d50:	4a7a      	ldr	r2, [pc, #488]	@ (20005f3c <HAL_DMA_IRQHandler+0xa08>)
20005d52:	4293      	cmp	r3, r2
20005d54:	d04a      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005d56:	687b      	ldr	r3, [r7, #4]
20005d58:	681b      	ldr	r3, [r3, #0]
20005d5a:	4a79      	ldr	r2, [pc, #484]	@ (20005f40 <HAL_DMA_IRQHandler+0xa0c>)
20005d5c:	4293      	cmp	r3, r2
20005d5e:	d045      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005d60:	687b      	ldr	r3, [r7, #4]
20005d62:	681b      	ldr	r3, [r3, #0]
20005d64:	4a77      	ldr	r2, [pc, #476]	@ (20005f44 <HAL_DMA_IRQHandler+0xa10>)
20005d66:	4293      	cmp	r3, r2
20005d68:	d040      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005d6a:	687b      	ldr	r3, [r7, #4]
20005d6c:	681b      	ldr	r3, [r3, #0]
20005d6e:	4a76      	ldr	r2, [pc, #472]	@ (20005f48 <HAL_DMA_IRQHandler+0xa14>)
20005d70:	4293      	cmp	r3, r2
20005d72:	d03b      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005d74:	687b      	ldr	r3, [r7, #4]
20005d76:	681b      	ldr	r3, [r3, #0]
20005d78:	4a74      	ldr	r2, [pc, #464]	@ (20005f4c <HAL_DMA_IRQHandler+0xa18>)
20005d7a:	4293      	cmp	r3, r2
20005d7c:	d036      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005d7e:	687b      	ldr	r3, [r7, #4]
20005d80:	681b      	ldr	r3, [r3, #0]
20005d82:	4a73      	ldr	r2, [pc, #460]	@ (20005f50 <HAL_DMA_IRQHandler+0xa1c>)
20005d84:	4293      	cmp	r3, r2
20005d86:	d031      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005d88:	687b      	ldr	r3, [r7, #4]
20005d8a:	681b      	ldr	r3, [r3, #0]
20005d8c:	4a71      	ldr	r2, [pc, #452]	@ (20005f54 <HAL_DMA_IRQHandler+0xa20>)
20005d8e:	4293      	cmp	r3, r2
20005d90:	d02c      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005d92:	687b      	ldr	r3, [r7, #4]
20005d94:	681b      	ldr	r3, [r3, #0]
20005d96:	4a70      	ldr	r2, [pc, #448]	@ (20005f58 <HAL_DMA_IRQHandler+0xa24>)
20005d98:	4293      	cmp	r3, r2
20005d9a:	d027      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005d9c:	687b      	ldr	r3, [r7, #4]
20005d9e:	681b      	ldr	r3, [r3, #0]
20005da0:	4a6e      	ldr	r2, [pc, #440]	@ (20005f5c <HAL_DMA_IRQHandler+0xa28>)
20005da2:	4293      	cmp	r3, r2
20005da4:	d022      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005da6:	687b      	ldr	r3, [r7, #4]
20005da8:	681b      	ldr	r3, [r3, #0]
20005daa:	4a6d      	ldr	r2, [pc, #436]	@ (20005f60 <HAL_DMA_IRQHandler+0xa2c>)
20005dac:	4293      	cmp	r3, r2
20005dae:	d01d      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005db0:	687b      	ldr	r3, [r7, #4]
20005db2:	681b      	ldr	r3, [r3, #0]
20005db4:	4a6b      	ldr	r2, [pc, #428]	@ (20005f64 <HAL_DMA_IRQHandler+0xa30>)
20005db6:	4293      	cmp	r3, r2
20005db8:	d018      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005dba:	687b      	ldr	r3, [r7, #4]
20005dbc:	681b      	ldr	r3, [r3, #0]
20005dbe:	4a6a      	ldr	r2, [pc, #424]	@ (20005f68 <HAL_DMA_IRQHandler+0xa34>)
20005dc0:	4293      	cmp	r3, r2
20005dc2:	d013      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005dc4:	687b      	ldr	r3, [r7, #4]
20005dc6:	681b      	ldr	r3, [r3, #0]
20005dc8:	4a68      	ldr	r2, [pc, #416]	@ (20005f6c <HAL_DMA_IRQHandler+0xa38>)
20005dca:	4293      	cmp	r3, r2
20005dcc:	d00e      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005dce:	687b      	ldr	r3, [r7, #4]
20005dd0:	681b      	ldr	r3, [r3, #0]
20005dd2:	4a67      	ldr	r2, [pc, #412]	@ (20005f70 <HAL_DMA_IRQHandler+0xa3c>)
20005dd4:	4293      	cmp	r3, r2
20005dd6:	d009      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005dd8:	687b      	ldr	r3, [r7, #4]
20005dda:	681b      	ldr	r3, [r3, #0]
20005ddc:	4a65      	ldr	r2, [pc, #404]	@ (20005f74 <HAL_DMA_IRQHandler+0xa40>)
20005dde:	4293      	cmp	r3, r2
20005de0:	d004      	beq.n	20005dec <HAL_DMA_IRQHandler+0x8b8>
20005de2:	687b      	ldr	r3, [r7, #4]
20005de4:	681b      	ldr	r3, [r3, #0]
20005de6:	4a64      	ldr	r2, [pc, #400]	@ (20005f78 <HAL_DMA_IRQHandler+0xa44>)
20005de8:	4293      	cmp	r3, r2
20005dea:	d108      	bne.n	20005dfe <HAL_DMA_IRQHandler+0x8ca>
20005dec:	687b      	ldr	r3, [r7, #4]
20005dee:	681b      	ldr	r3, [r3, #0]
20005df0:	681a      	ldr	r2, [r3, #0]
20005df2:	687b      	ldr	r3, [r7, #4]
20005df4:	681b      	ldr	r3, [r3, #0]
20005df6:	f022 0201 	bic.w	r2, r2, #1
20005dfa:	601a      	str	r2, [r3, #0]
20005dfc:	e007      	b.n	20005e0e <HAL_DMA_IRQHandler+0x8da>
20005dfe:	687b      	ldr	r3, [r7, #4]
20005e00:	681b      	ldr	r3, [r3, #0]
20005e02:	681a      	ldr	r2, [r3, #0]
20005e04:	687b      	ldr	r3, [r7, #4]
20005e06:	681b      	ldr	r3, [r3, #0]
20005e08:	f022 0201 	bic.w	r2, r2, #1
20005e0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
20005e0e:	68fb      	ldr	r3, [r7, #12]
20005e10:	3301      	adds	r3, #1
20005e12:	60fb      	str	r3, [r7, #12]
20005e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20005e16:	429a      	cmp	r2, r3
20005e18:	d307      	bcc.n	20005e2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
20005e1a:	687b      	ldr	r3, [r7, #4]
20005e1c:	681b      	ldr	r3, [r3, #0]
20005e1e:	681b      	ldr	r3, [r3, #0]
20005e20:	f003 0301 	and.w	r3, r3, #1
20005e24:	2b00      	cmp	r3, #0
20005e26:	d1f2      	bne.n	20005e0e <HAL_DMA_IRQHandler+0x8da>
20005e28:	e000      	b.n	20005e2c <HAL_DMA_IRQHandler+0x8f8>
            break;
20005e2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
20005e2c:	687b      	ldr	r3, [r7, #4]
20005e2e:	681b      	ldr	r3, [r3, #0]
20005e30:	681b      	ldr	r3, [r3, #0]
20005e32:	f003 0301 	and.w	r3, r3, #1
20005e36:	2b00      	cmp	r3, #0
20005e38:	d004      	beq.n	20005e44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
20005e3a:	687b      	ldr	r3, [r7, #4]
20005e3c:	2203      	movs	r2, #3
20005e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
20005e42:	e003      	b.n	20005e4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
20005e44:	687b      	ldr	r3, [r7, #4]
20005e46:	2201      	movs	r2, #1
20005e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20005e4c:	687b      	ldr	r3, [r7, #4]
20005e4e:	2200      	movs	r2, #0
20005e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
20005e54:	687b      	ldr	r3, [r7, #4]
20005e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20005e58:	2b00      	cmp	r3, #0
20005e5a:	f000 8272 	beq.w	20006342 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
20005e5e:	687b      	ldr	r3, [r7, #4]
20005e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20005e62:	6878      	ldr	r0, [r7, #4]
20005e64:	4798      	blx	r3
20005e66:	e26c      	b.n	20006342 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
20005e68:	687b      	ldr	r3, [r7, #4]
20005e6a:	681b      	ldr	r3, [r3, #0]
20005e6c:	4a43      	ldr	r2, [pc, #268]	@ (20005f7c <HAL_DMA_IRQHandler+0xa48>)
20005e6e:	4293      	cmp	r3, r2
20005e70:	d022      	beq.n	20005eb8 <HAL_DMA_IRQHandler+0x984>
20005e72:	687b      	ldr	r3, [r7, #4]
20005e74:	681b      	ldr	r3, [r3, #0]
20005e76:	4a42      	ldr	r2, [pc, #264]	@ (20005f80 <HAL_DMA_IRQHandler+0xa4c>)
20005e78:	4293      	cmp	r3, r2
20005e7a:	d01d      	beq.n	20005eb8 <HAL_DMA_IRQHandler+0x984>
20005e7c:	687b      	ldr	r3, [r7, #4]
20005e7e:	681b      	ldr	r3, [r3, #0]
20005e80:	4a40      	ldr	r2, [pc, #256]	@ (20005f84 <HAL_DMA_IRQHandler+0xa50>)
20005e82:	4293      	cmp	r3, r2
20005e84:	d018      	beq.n	20005eb8 <HAL_DMA_IRQHandler+0x984>
20005e86:	687b      	ldr	r3, [r7, #4]
20005e88:	681b      	ldr	r3, [r3, #0]
20005e8a:	4a3f      	ldr	r2, [pc, #252]	@ (20005f88 <HAL_DMA_IRQHandler+0xa54>)
20005e8c:	4293      	cmp	r3, r2
20005e8e:	d013      	beq.n	20005eb8 <HAL_DMA_IRQHandler+0x984>
20005e90:	687b      	ldr	r3, [r7, #4]
20005e92:	681b      	ldr	r3, [r3, #0]
20005e94:	4a3d      	ldr	r2, [pc, #244]	@ (20005f8c <HAL_DMA_IRQHandler+0xa58>)
20005e96:	4293      	cmp	r3, r2
20005e98:	d00e      	beq.n	20005eb8 <HAL_DMA_IRQHandler+0x984>
20005e9a:	687b      	ldr	r3, [r7, #4]
20005e9c:	681b      	ldr	r3, [r3, #0]
20005e9e:	4a3c      	ldr	r2, [pc, #240]	@ (20005f90 <HAL_DMA_IRQHandler+0xa5c>)
20005ea0:	4293      	cmp	r3, r2
20005ea2:	d009      	beq.n	20005eb8 <HAL_DMA_IRQHandler+0x984>
20005ea4:	687b      	ldr	r3, [r7, #4]
20005ea6:	681b      	ldr	r3, [r3, #0]
20005ea8:	4a3a      	ldr	r2, [pc, #232]	@ (20005f94 <HAL_DMA_IRQHandler+0xa60>)
20005eaa:	4293      	cmp	r3, r2
20005eac:	d004      	beq.n	20005eb8 <HAL_DMA_IRQHandler+0x984>
20005eae:	687b      	ldr	r3, [r7, #4]
20005eb0:	681b      	ldr	r3, [r3, #0]
20005eb2:	4a39      	ldr	r2, [pc, #228]	@ (20005f98 <HAL_DMA_IRQHandler+0xa64>)
20005eb4:	4293      	cmp	r3, r2
20005eb6:	d101      	bne.n	20005ebc <HAL_DMA_IRQHandler+0x988>
20005eb8:	2301      	movs	r3, #1
20005eba:	e000      	b.n	20005ebe <HAL_DMA_IRQHandler+0x98a>
20005ebc:	2300      	movs	r3, #0
20005ebe:	2b00      	cmp	r3, #0
20005ec0:	f000 823f 	beq.w	20006342 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
20005ec4:	687b      	ldr	r3, [r7, #4]
20005ec6:	681b      	ldr	r3, [r3, #0]
20005ec8:	681b      	ldr	r3, [r3, #0]
20005eca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
20005ecc:	687b      	ldr	r3, [r7, #4]
20005ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005ed0:	f003 031f 	and.w	r3, r3, #31
20005ed4:	2204      	movs	r2, #4
20005ed6:	409a      	lsls	r2, r3
20005ed8:	697b      	ldr	r3, [r7, #20]
20005eda:	4013      	ands	r3, r2
20005edc:	2b00      	cmp	r3, #0
20005ede:	f000 80cd 	beq.w	2000607c <HAL_DMA_IRQHandler+0xb48>
20005ee2:	693b      	ldr	r3, [r7, #16]
20005ee4:	f003 0304 	and.w	r3, r3, #4
20005ee8:	2b00      	cmp	r3, #0
20005eea:	f000 80c7 	beq.w	2000607c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
20005eee:	687b      	ldr	r3, [r7, #4]
20005ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20005ef2:	f003 031f 	and.w	r3, r3, #31
20005ef6:	2204      	movs	r2, #4
20005ef8:	409a      	lsls	r2, r3
20005efa:	69fb      	ldr	r3, [r7, #28]
20005efc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
20005efe:	693b      	ldr	r3, [r7, #16]
20005f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20005f04:	2b00      	cmp	r3, #0
20005f06:	d049      	beq.n	20005f9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
20005f08:	693b      	ldr	r3, [r7, #16]
20005f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20005f0e:	2b00      	cmp	r3, #0
20005f10:	d109      	bne.n	20005f26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
20005f12:	687b      	ldr	r3, [r7, #4]
20005f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20005f16:	2b00      	cmp	r3, #0
20005f18:	f000 8210 	beq.w	2000633c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
20005f1c:	687b      	ldr	r3, [r7, #4]
20005f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20005f20:	6878      	ldr	r0, [r7, #4]
20005f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
20005f24:	e20a      	b.n	2000633c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
20005f26:	687b      	ldr	r3, [r7, #4]
20005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005f2a:	2b00      	cmp	r3, #0
20005f2c:	f000 8206 	beq.w	2000633c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
20005f30:	687b      	ldr	r3, [r7, #4]
20005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20005f34:	6878      	ldr	r0, [r7, #4]
20005f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
20005f38:	e200      	b.n	2000633c <HAL_DMA_IRQHandler+0xe08>
20005f3a:	bf00      	nop
20005f3c:	40020010 	.word	0x40020010
20005f40:	40020028 	.word	0x40020028
20005f44:	40020040 	.word	0x40020040
20005f48:	40020058 	.word	0x40020058
20005f4c:	40020070 	.word	0x40020070
20005f50:	40020088 	.word	0x40020088
20005f54:	400200a0 	.word	0x400200a0
20005f58:	400200b8 	.word	0x400200b8
20005f5c:	40020410 	.word	0x40020410
20005f60:	40020428 	.word	0x40020428
20005f64:	40020440 	.word	0x40020440
20005f68:	40020458 	.word	0x40020458
20005f6c:	40020470 	.word	0x40020470
20005f70:	40020488 	.word	0x40020488
20005f74:	400204a0 	.word	0x400204a0
20005f78:	400204b8 	.word	0x400204b8
20005f7c:	58025408 	.word	0x58025408
20005f80:	5802541c 	.word	0x5802541c
20005f84:	58025430 	.word	0x58025430
20005f88:	58025444 	.word	0x58025444
20005f8c:	58025458 	.word	0x58025458
20005f90:	5802546c 	.word	0x5802546c
20005f94:	58025480 	.word	0x58025480
20005f98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
20005f9c:	693b      	ldr	r3, [r7, #16]
20005f9e:	f003 0320 	and.w	r3, r3, #32
20005fa2:	2b00      	cmp	r3, #0
20005fa4:	d160      	bne.n	20006068 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
20005fa6:	687b      	ldr	r3, [r7, #4]
20005fa8:	681b      	ldr	r3, [r3, #0]
20005faa:	4a7f      	ldr	r2, [pc, #508]	@ (200061a8 <HAL_DMA_IRQHandler+0xc74>)
20005fac:	4293      	cmp	r3, r2
20005fae:	d04a      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20005fb0:	687b      	ldr	r3, [r7, #4]
20005fb2:	681b      	ldr	r3, [r3, #0]
20005fb4:	4a7d      	ldr	r2, [pc, #500]	@ (200061ac <HAL_DMA_IRQHandler+0xc78>)
20005fb6:	4293      	cmp	r3, r2
20005fb8:	d045      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20005fba:	687b      	ldr	r3, [r7, #4]
20005fbc:	681b      	ldr	r3, [r3, #0]
20005fbe:	4a7c      	ldr	r2, [pc, #496]	@ (200061b0 <HAL_DMA_IRQHandler+0xc7c>)
20005fc0:	4293      	cmp	r3, r2
20005fc2:	d040      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20005fc4:	687b      	ldr	r3, [r7, #4]
20005fc6:	681b      	ldr	r3, [r3, #0]
20005fc8:	4a7a      	ldr	r2, [pc, #488]	@ (200061b4 <HAL_DMA_IRQHandler+0xc80>)
20005fca:	4293      	cmp	r3, r2
20005fcc:	d03b      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20005fce:	687b      	ldr	r3, [r7, #4]
20005fd0:	681b      	ldr	r3, [r3, #0]
20005fd2:	4a79      	ldr	r2, [pc, #484]	@ (200061b8 <HAL_DMA_IRQHandler+0xc84>)
20005fd4:	4293      	cmp	r3, r2
20005fd6:	d036      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20005fd8:	687b      	ldr	r3, [r7, #4]
20005fda:	681b      	ldr	r3, [r3, #0]
20005fdc:	4a77      	ldr	r2, [pc, #476]	@ (200061bc <HAL_DMA_IRQHandler+0xc88>)
20005fde:	4293      	cmp	r3, r2
20005fe0:	d031      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20005fe2:	687b      	ldr	r3, [r7, #4]
20005fe4:	681b      	ldr	r3, [r3, #0]
20005fe6:	4a76      	ldr	r2, [pc, #472]	@ (200061c0 <HAL_DMA_IRQHandler+0xc8c>)
20005fe8:	4293      	cmp	r3, r2
20005fea:	d02c      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20005fec:	687b      	ldr	r3, [r7, #4]
20005fee:	681b      	ldr	r3, [r3, #0]
20005ff0:	4a74      	ldr	r2, [pc, #464]	@ (200061c4 <HAL_DMA_IRQHandler+0xc90>)
20005ff2:	4293      	cmp	r3, r2
20005ff4:	d027      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20005ff6:	687b      	ldr	r3, [r7, #4]
20005ff8:	681b      	ldr	r3, [r3, #0]
20005ffa:	4a73      	ldr	r2, [pc, #460]	@ (200061c8 <HAL_DMA_IRQHandler+0xc94>)
20005ffc:	4293      	cmp	r3, r2
20005ffe:	d022      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20006000:	687b      	ldr	r3, [r7, #4]
20006002:	681b      	ldr	r3, [r3, #0]
20006004:	4a71      	ldr	r2, [pc, #452]	@ (200061cc <HAL_DMA_IRQHandler+0xc98>)
20006006:	4293      	cmp	r3, r2
20006008:	d01d      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
2000600a:	687b      	ldr	r3, [r7, #4]
2000600c:	681b      	ldr	r3, [r3, #0]
2000600e:	4a70      	ldr	r2, [pc, #448]	@ (200061d0 <HAL_DMA_IRQHandler+0xc9c>)
20006010:	4293      	cmp	r3, r2
20006012:	d018      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20006014:	687b      	ldr	r3, [r7, #4]
20006016:	681b      	ldr	r3, [r3, #0]
20006018:	4a6e      	ldr	r2, [pc, #440]	@ (200061d4 <HAL_DMA_IRQHandler+0xca0>)
2000601a:	4293      	cmp	r3, r2
2000601c:	d013      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
2000601e:	687b      	ldr	r3, [r7, #4]
20006020:	681b      	ldr	r3, [r3, #0]
20006022:	4a6d      	ldr	r2, [pc, #436]	@ (200061d8 <HAL_DMA_IRQHandler+0xca4>)
20006024:	4293      	cmp	r3, r2
20006026:	d00e      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20006028:	687b      	ldr	r3, [r7, #4]
2000602a:	681b      	ldr	r3, [r3, #0]
2000602c:	4a6b      	ldr	r2, [pc, #428]	@ (200061dc <HAL_DMA_IRQHandler+0xca8>)
2000602e:	4293      	cmp	r3, r2
20006030:	d009      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
20006032:	687b      	ldr	r3, [r7, #4]
20006034:	681b      	ldr	r3, [r3, #0]
20006036:	4a6a      	ldr	r2, [pc, #424]	@ (200061e0 <HAL_DMA_IRQHandler+0xcac>)
20006038:	4293      	cmp	r3, r2
2000603a:	d004      	beq.n	20006046 <HAL_DMA_IRQHandler+0xb12>
2000603c:	687b      	ldr	r3, [r7, #4]
2000603e:	681b      	ldr	r3, [r3, #0]
20006040:	4a68      	ldr	r2, [pc, #416]	@ (200061e4 <HAL_DMA_IRQHandler+0xcb0>)
20006042:	4293      	cmp	r3, r2
20006044:	d108      	bne.n	20006058 <HAL_DMA_IRQHandler+0xb24>
20006046:	687b      	ldr	r3, [r7, #4]
20006048:	681b      	ldr	r3, [r3, #0]
2000604a:	681a      	ldr	r2, [r3, #0]
2000604c:	687b      	ldr	r3, [r7, #4]
2000604e:	681b      	ldr	r3, [r3, #0]
20006050:	f022 0208 	bic.w	r2, r2, #8
20006054:	601a      	str	r2, [r3, #0]
20006056:	e007      	b.n	20006068 <HAL_DMA_IRQHandler+0xb34>
20006058:	687b      	ldr	r3, [r7, #4]
2000605a:	681b      	ldr	r3, [r3, #0]
2000605c:	681a      	ldr	r2, [r3, #0]
2000605e:	687b      	ldr	r3, [r7, #4]
20006060:	681b      	ldr	r3, [r3, #0]
20006062:	f022 0204 	bic.w	r2, r2, #4
20006066:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
20006068:	687b      	ldr	r3, [r7, #4]
2000606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000606c:	2b00      	cmp	r3, #0
2000606e:	f000 8165 	beq.w	2000633c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
20006072:	687b      	ldr	r3, [r7, #4]
20006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006076:	6878      	ldr	r0, [r7, #4]
20006078:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2000607a:	e15f      	b.n	2000633c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
2000607c:	687b      	ldr	r3, [r7, #4]
2000607e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20006080:	f003 031f 	and.w	r3, r3, #31
20006084:	2202      	movs	r2, #2
20006086:	409a      	lsls	r2, r3
20006088:	697b      	ldr	r3, [r7, #20]
2000608a:	4013      	ands	r3, r2
2000608c:	2b00      	cmp	r3, #0
2000608e:	f000 80c5 	beq.w	2000621c <HAL_DMA_IRQHandler+0xce8>
20006092:	693b      	ldr	r3, [r7, #16]
20006094:	f003 0302 	and.w	r3, r3, #2
20006098:	2b00      	cmp	r3, #0
2000609a:	f000 80bf 	beq.w	2000621c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
2000609e:	687b      	ldr	r3, [r7, #4]
200060a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200060a2:	f003 031f 	and.w	r3, r3, #31
200060a6:	2202      	movs	r2, #2
200060a8:	409a      	lsls	r2, r3
200060aa:	69fb      	ldr	r3, [r7, #28]
200060ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
200060ae:	693b      	ldr	r3, [r7, #16]
200060b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
200060b4:	2b00      	cmp	r3, #0
200060b6:	d018      	beq.n	200060ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
200060b8:	693b      	ldr	r3, [r7, #16]
200060ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200060be:	2b00      	cmp	r3, #0
200060c0:	d109      	bne.n	200060d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
200060c2:	687b      	ldr	r3, [r7, #4]
200060c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200060c6:	2b00      	cmp	r3, #0
200060c8:	f000 813a 	beq.w	20006340 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
200060cc:	687b      	ldr	r3, [r7, #4]
200060ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200060d0:	6878      	ldr	r0, [r7, #4]
200060d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
200060d4:	e134      	b.n	20006340 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
200060d6:	687b      	ldr	r3, [r7, #4]
200060d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200060da:	2b00      	cmp	r3, #0
200060dc:	f000 8130 	beq.w	20006340 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
200060e0:	687b      	ldr	r3, [r7, #4]
200060e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200060e4:	6878      	ldr	r0, [r7, #4]
200060e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
200060e8:	e12a      	b.n	20006340 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
200060ea:	693b      	ldr	r3, [r7, #16]
200060ec:	f003 0320 	and.w	r3, r3, #32
200060f0:	2b00      	cmp	r3, #0
200060f2:	f040 8089 	bne.w	20006208 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
200060f6:	687b      	ldr	r3, [r7, #4]
200060f8:	681b      	ldr	r3, [r3, #0]
200060fa:	4a2b      	ldr	r2, [pc, #172]	@ (200061a8 <HAL_DMA_IRQHandler+0xc74>)
200060fc:	4293      	cmp	r3, r2
200060fe:	d04a      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006100:	687b      	ldr	r3, [r7, #4]
20006102:	681b      	ldr	r3, [r3, #0]
20006104:	4a29      	ldr	r2, [pc, #164]	@ (200061ac <HAL_DMA_IRQHandler+0xc78>)
20006106:	4293      	cmp	r3, r2
20006108:	d045      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
2000610a:	687b      	ldr	r3, [r7, #4]
2000610c:	681b      	ldr	r3, [r3, #0]
2000610e:	4a28      	ldr	r2, [pc, #160]	@ (200061b0 <HAL_DMA_IRQHandler+0xc7c>)
20006110:	4293      	cmp	r3, r2
20006112:	d040      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006114:	687b      	ldr	r3, [r7, #4]
20006116:	681b      	ldr	r3, [r3, #0]
20006118:	4a26      	ldr	r2, [pc, #152]	@ (200061b4 <HAL_DMA_IRQHandler+0xc80>)
2000611a:	4293      	cmp	r3, r2
2000611c:	d03b      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
2000611e:	687b      	ldr	r3, [r7, #4]
20006120:	681b      	ldr	r3, [r3, #0]
20006122:	4a25      	ldr	r2, [pc, #148]	@ (200061b8 <HAL_DMA_IRQHandler+0xc84>)
20006124:	4293      	cmp	r3, r2
20006126:	d036      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006128:	687b      	ldr	r3, [r7, #4]
2000612a:	681b      	ldr	r3, [r3, #0]
2000612c:	4a23      	ldr	r2, [pc, #140]	@ (200061bc <HAL_DMA_IRQHandler+0xc88>)
2000612e:	4293      	cmp	r3, r2
20006130:	d031      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006132:	687b      	ldr	r3, [r7, #4]
20006134:	681b      	ldr	r3, [r3, #0]
20006136:	4a22      	ldr	r2, [pc, #136]	@ (200061c0 <HAL_DMA_IRQHandler+0xc8c>)
20006138:	4293      	cmp	r3, r2
2000613a:	d02c      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
2000613c:	687b      	ldr	r3, [r7, #4]
2000613e:	681b      	ldr	r3, [r3, #0]
20006140:	4a20      	ldr	r2, [pc, #128]	@ (200061c4 <HAL_DMA_IRQHandler+0xc90>)
20006142:	4293      	cmp	r3, r2
20006144:	d027      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006146:	687b      	ldr	r3, [r7, #4]
20006148:	681b      	ldr	r3, [r3, #0]
2000614a:	4a1f      	ldr	r2, [pc, #124]	@ (200061c8 <HAL_DMA_IRQHandler+0xc94>)
2000614c:	4293      	cmp	r3, r2
2000614e:	d022      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006150:	687b      	ldr	r3, [r7, #4]
20006152:	681b      	ldr	r3, [r3, #0]
20006154:	4a1d      	ldr	r2, [pc, #116]	@ (200061cc <HAL_DMA_IRQHandler+0xc98>)
20006156:	4293      	cmp	r3, r2
20006158:	d01d      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
2000615a:	687b      	ldr	r3, [r7, #4]
2000615c:	681b      	ldr	r3, [r3, #0]
2000615e:	4a1c      	ldr	r2, [pc, #112]	@ (200061d0 <HAL_DMA_IRQHandler+0xc9c>)
20006160:	4293      	cmp	r3, r2
20006162:	d018      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006164:	687b      	ldr	r3, [r7, #4]
20006166:	681b      	ldr	r3, [r3, #0]
20006168:	4a1a      	ldr	r2, [pc, #104]	@ (200061d4 <HAL_DMA_IRQHandler+0xca0>)
2000616a:	4293      	cmp	r3, r2
2000616c:	d013      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
2000616e:	687b      	ldr	r3, [r7, #4]
20006170:	681b      	ldr	r3, [r3, #0]
20006172:	4a19      	ldr	r2, [pc, #100]	@ (200061d8 <HAL_DMA_IRQHandler+0xca4>)
20006174:	4293      	cmp	r3, r2
20006176:	d00e      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006178:	687b      	ldr	r3, [r7, #4]
2000617a:	681b      	ldr	r3, [r3, #0]
2000617c:	4a17      	ldr	r2, [pc, #92]	@ (200061dc <HAL_DMA_IRQHandler+0xca8>)
2000617e:	4293      	cmp	r3, r2
20006180:	d009      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
20006182:	687b      	ldr	r3, [r7, #4]
20006184:	681b      	ldr	r3, [r3, #0]
20006186:	4a16      	ldr	r2, [pc, #88]	@ (200061e0 <HAL_DMA_IRQHandler+0xcac>)
20006188:	4293      	cmp	r3, r2
2000618a:	d004      	beq.n	20006196 <HAL_DMA_IRQHandler+0xc62>
2000618c:	687b      	ldr	r3, [r7, #4]
2000618e:	681b      	ldr	r3, [r3, #0]
20006190:	4a14      	ldr	r2, [pc, #80]	@ (200061e4 <HAL_DMA_IRQHandler+0xcb0>)
20006192:	4293      	cmp	r3, r2
20006194:	d128      	bne.n	200061e8 <HAL_DMA_IRQHandler+0xcb4>
20006196:	687b      	ldr	r3, [r7, #4]
20006198:	681b      	ldr	r3, [r3, #0]
2000619a:	681a      	ldr	r2, [r3, #0]
2000619c:	687b      	ldr	r3, [r7, #4]
2000619e:	681b      	ldr	r3, [r3, #0]
200061a0:	f022 0214 	bic.w	r2, r2, #20
200061a4:	601a      	str	r2, [r3, #0]
200061a6:	e027      	b.n	200061f8 <HAL_DMA_IRQHandler+0xcc4>
200061a8:	40020010 	.word	0x40020010
200061ac:	40020028 	.word	0x40020028
200061b0:	40020040 	.word	0x40020040
200061b4:	40020058 	.word	0x40020058
200061b8:	40020070 	.word	0x40020070
200061bc:	40020088 	.word	0x40020088
200061c0:	400200a0 	.word	0x400200a0
200061c4:	400200b8 	.word	0x400200b8
200061c8:	40020410 	.word	0x40020410
200061cc:	40020428 	.word	0x40020428
200061d0:	40020440 	.word	0x40020440
200061d4:	40020458 	.word	0x40020458
200061d8:	40020470 	.word	0x40020470
200061dc:	40020488 	.word	0x40020488
200061e0:	400204a0 	.word	0x400204a0
200061e4:	400204b8 	.word	0x400204b8
200061e8:	687b      	ldr	r3, [r7, #4]
200061ea:	681b      	ldr	r3, [r3, #0]
200061ec:	681a      	ldr	r2, [r3, #0]
200061ee:	687b      	ldr	r3, [r7, #4]
200061f0:	681b      	ldr	r3, [r3, #0]
200061f2:	f022 020a 	bic.w	r2, r2, #10
200061f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
200061f8:	687b      	ldr	r3, [r7, #4]
200061fa:	2201      	movs	r2, #1
200061fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
20006200:	687b      	ldr	r3, [r7, #4]
20006202:	2200      	movs	r2, #0
20006204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
20006208:	687b      	ldr	r3, [r7, #4]
2000620a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000620c:	2b00      	cmp	r3, #0
2000620e:	f000 8097 	beq.w	20006340 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
20006212:	687b      	ldr	r3, [r7, #4]
20006214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20006216:	6878      	ldr	r0, [r7, #4]
20006218:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2000621a:	e091      	b.n	20006340 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
2000621c:	687b      	ldr	r3, [r7, #4]
2000621e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20006220:	f003 031f 	and.w	r3, r3, #31
20006224:	2208      	movs	r2, #8
20006226:	409a      	lsls	r2, r3
20006228:	697b      	ldr	r3, [r7, #20]
2000622a:	4013      	ands	r3, r2
2000622c:	2b00      	cmp	r3, #0
2000622e:	f000 8088 	beq.w	20006342 <HAL_DMA_IRQHandler+0xe0e>
20006232:	693b      	ldr	r3, [r7, #16]
20006234:	f003 0308 	and.w	r3, r3, #8
20006238:	2b00      	cmp	r3, #0
2000623a:	f000 8082 	beq.w	20006342 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2000623e:	687b      	ldr	r3, [r7, #4]
20006240:	681b      	ldr	r3, [r3, #0]
20006242:	4a41      	ldr	r2, [pc, #260]	@ (20006348 <HAL_DMA_IRQHandler+0xe14>)
20006244:	4293      	cmp	r3, r2
20006246:	d04a      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
20006248:	687b      	ldr	r3, [r7, #4]
2000624a:	681b      	ldr	r3, [r3, #0]
2000624c:	4a3f      	ldr	r2, [pc, #252]	@ (2000634c <HAL_DMA_IRQHandler+0xe18>)
2000624e:	4293      	cmp	r3, r2
20006250:	d045      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
20006252:	687b      	ldr	r3, [r7, #4]
20006254:	681b      	ldr	r3, [r3, #0]
20006256:	4a3e      	ldr	r2, [pc, #248]	@ (20006350 <HAL_DMA_IRQHandler+0xe1c>)
20006258:	4293      	cmp	r3, r2
2000625a:	d040      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
2000625c:	687b      	ldr	r3, [r7, #4]
2000625e:	681b      	ldr	r3, [r3, #0]
20006260:	4a3c      	ldr	r2, [pc, #240]	@ (20006354 <HAL_DMA_IRQHandler+0xe20>)
20006262:	4293      	cmp	r3, r2
20006264:	d03b      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
20006266:	687b      	ldr	r3, [r7, #4]
20006268:	681b      	ldr	r3, [r3, #0]
2000626a:	4a3b      	ldr	r2, [pc, #236]	@ (20006358 <HAL_DMA_IRQHandler+0xe24>)
2000626c:	4293      	cmp	r3, r2
2000626e:	d036      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
20006270:	687b      	ldr	r3, [r7, #4]
20006272:	681b      	ldr	r3, [r3, #0]
20006274:	4a39      	ldr	r2, [pc, #228]	@ (2000635c <HAL_DMA_IRQHandler+0xe28>)
20006276:	4293      	cmp	r3, r2
20006278:	d031      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
2000627a:	687b      	ldr	r3, [r7, #4]
2000627c:	681b      	ldr	r3, [r3, #0]
2000627e:	4a38      	ldr	r2, [pc, #224]	@ (20006360 <HAL_DMA_IRQHandler+0xe2c>)
20006280:	4293      	cmp	r3, r2
20006282:	d02c      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
20006284:	687b      	ldr	r3, [r7, #4]
20006286:	681b      	ldr	r3, [r3, #0]
20006288:	4a36      	ldr	r2, [pc, #216]	@ (20006364 <HAL_DMA_IRQHandler+0xe30>)
2000628a:	4293      	cmp	r3, r2
2000628c:	d027      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
2000628e:	687b      	ldr	r3, [r7, #4]
20006290:	681b      	ldr	r3, [r3, #0]
20006292:	4a35      	ldr	r2, [pc, #212]	@ (20006368 <HAL_DMA_IRQHandler+0xe34>)
20006294:	4293      	cmp	r3, r2
20006296:	d022      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
20006298:	687b      	ldr	r3, [r7, #4]
2000629a:	681b      	ldr	r3, [r3, #0]
2000629c:	4a33      	ldr	r2, [pc, #204]	@ (2000636c <HAL_DMA_IRQHandler+0xe38>)
2000629e:	4293      	cmp	r3, r2
200062a0:	d01d      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
200062a2:	687b      	ldr	r3, [r7, #4]
200062a4:	681b      	ldr	r3, [r3, #0]
200062a6:	4a32      	ldr	r2, [pc, #200]	@ (20006370 <HAL_DMA_IRQHandler+0xe3c>)
200062a8:	4293      	cmp	r3, r2
200062aa:	d018      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
200062ac:	687b      	ldr	r3, [r7, #4]
200062ae:	681b      	ldr	r3, [r3, #0]
200062b0:	4a30      	ldr	r2, [pc, #192]	@ (20006374 <HAL_DMA_IRQHandler+0xe40>)
200062b2:	4293      	cmp	r3, r2
200062b4:	d013      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
200062b6:	687b      	ldr	r3, [r7, #4]
200062b8:	681b      	ldr	r3, [r3, #0]
200062ba:	4a2f      	ldr	r2, [pc, #188]	@ (20006378 <HAL_DMA_IRQHandler+0xe44>)
200062bc:	4293      	cmp	r3, r2
200062be:	d00e      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
200062c0:	687b      	ldr	r3, [r7, #4]
200062c2:	681b      	ldr	r3, [r3, #0]
200062c4:	4a2d      	ldr	r2, [pc, #180]	@ (2000637c <HAL_DMA_IRQHandler+0xe48>)
200062c6:	4293      	cmp	r3, r2
200062c8:	d009      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
200062ca:	687b      	ldr	r3, [r7, #4]
200062cc:	681b      	ldr	r3, [r3, #0]
200062ce:	4a2c      	ldr	r2, [pc, #176]	@ (20006380 <HAL_DMA_IRQHandler+0xe4c>)
200062d0:	4293      	cmp	r3, r2
200062d2:	d004      	beq.n	200062de <HAL_DMA_IRQHandler+0xdaa>
200062d4:	687b      	ldr	r3, [r7, #4]
200062d6:	681b      	ldr	r3, [r3, #0]
200062d8:	4a2a      	ldr	r2, [pc, #168]	@ (20006384 <HAL_DMA_IRQHandler+0xe50>)
200062da:	4293      	cmp	r3, r2
200062dc:	d108      	bne.n	200062f0 <HAL_DMA_IRQHandler+0xdbc>
200062de:	687b      	ldr	r3, [r7, #4]
200062e0:	681b      	ldr	r3, [r3, #0]
200062e2:	681a      	ldr	r2, [r3, #0]
200062e4:	687b      	ldr	r3, [r7, #4]
200062e6:	681b      	ldr	r3, [r3, #0]
200062e8:	f022 021c 	bic.w	r2, r2, #28
200062ec:	601a      	str	r2, [r3, #0]
200062ee:	e007      	b.n	20006300 <HAL_DMA_IRQHandler+0xdcc>
200062f0:	687b      	ldr	r3, [r7, #4]
200062f2:	681b      	ldr	r3, [r3, #0]
200062f4:	681a      	ldr	r2, [r3, #0]
200062f6:	687b      	ldr	r3, [r7, #4]
200062f8:	681b      	ldr	r3, [r3, #0]
200062fa:	f022 020e 	bic.w	r2, r2, #14
200062fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
20006300:	687b      	ldr	r3, [r7, #4]
20006302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20006304:	f003 031f 	and.w	r3, r3, #31
20006308:	2201      	movs	r2, #1
2000630a:	409a      	lsls	r2, r3
2000630c:	69fb      	ldr	r3, [r7, #28]
2000630e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
20006310:	687b      	ldr	r3, [r7, #4]
20006312:	2201      	movs	r2, #1
20006314:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
20006316:	687b      	ldr	r3, [r7, #4]
20006318:	2201      	movs	r2, #1
2000631a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2000631e:	687b      	ldr	r3, [r7, #4]
20006320:	2200      	movs	r2, #0
20006322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
20006326:	687b      	ldr	r3, [r7, #4]
20006328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000632a:	2b00      	cmp	r3, #0
2000632c:	d009      	beq.n	20006342 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2000632e:	687b      	ldr	r3, [r7, #4]
20006330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20006332:	6878      	ldr	r0, [r7, #4]
20006334:	4798      	blx	r3
20006336:	e004      	b.n	20006342 <HAL_DMA_IRQHandler+0xe0e>
          return;
20006338:	bf00      	nop
2000633a:	e002      	b.n	20006342 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2000633c:	bf00      	nop
2000633e:	e000      	b.n	20006342 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
20006340:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
20006342:	3728      	adds	r7, #40	@ 0x28
20006344:	46bd      	mov	sp, r7
20006346:	bd80      	pop	{r7, pc}
20006348:	40020010 	.word	0x40020010
2000634c:	40020028 	.word	0x40020028
20006350:	40020040 	.word	0x40020040
20006354:	40020058 	.word	0x40020058
20006358:	40020070 	.word	0x40020070
2000635c:	40020088 	.word	0x40020088
20006360:	400200a0 	.word	0x400200a0
20006364:	400200b8 	.word	0x400200b8
20006368:	40020410 	.word	0x40020410
2000636c:	40020428 	.word	0x40020428
20006370:	40020440 	.word	0x40020440
20006374:	40020458 	.word	0x40020458
20006378:	40020470 	.word	0x40020470
2000637c:	40020488 	.word	0x40020488
20006380:	400204a0 	.word	0x400204a0
20006384:	400204b8 	.word	0x400204b8

20006388 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
20006388:	b480      	push	{r7}
2000638a:	b087      	sub	sp, #28
2000638c:	af00      	add	r7, sp, #0
2000638e:	60f8      	str	r0, [r7, #12]
20006390:	460b      	mov	r3, r1
20006392:	607a      	str	r2, [r7, #4]
20006394:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
20006396:	2300      	movs	r3, #0
20006398:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2000639a:	68fb      	ldr	r3, [r7, #12]
2000639c:	2b00      	cmp	r3, #0
2000639e:	d101      	bne.n	200063a4 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
200063a0:	2301      	movs	r3, #1
200063a2:	e045      	b.n	20006430 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
200063a4:	68fb      	ldr	r3, [r7, #12]
200063a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
200063aa:	2b01      	cmp	r3, #1
200063ac:	d101      	bne.n	200063b2 <HAL_DMA_RegisterCallback+0x2a>
200063ae:	2302      	movs	r3, #2
200063b0:	e03e      	b.n	20006430 <HAL_DMA_RegisterCallback+0xa8>
200063b2:	68fb      	ldr	r3, [r7, #12]
200063b4:	2201      	movs	r2, #1
200063b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
200063ba:	68fb      	ldr	r3, [r7, #12]
200063bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
200063c0:	b2db      	uxtb	r3, r3
200063c2:	2b01      	cmp	r3, #1
200063c4:	d12d      	bne.n	20006422 <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
200063c6:	7afb      	ldrb	r3, [r7, #11]
200063c8:	2b05      	cmp	r3, #5
200063ca:	d827      	bhi.n	2000641c <HAL_DMA_RegisterCallback+0x94>
200063cc:	a201      	add	r2, pc, #4	@ (adr r2, 200063d4 <HAL_DMA_RegisterCallback+0x4c>)
200063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200063d2:	bf00      	nop
200063d4:	200063ed 	.word	0x200063ed
200063d8:	200063f5 	.word	0x200063f5
200063dc:	200063fd 	.word	0x200063fd
200063e0:	20006405 	.word	0x20006405
200063e4:	2000640d 	.word	0x2000640d
200063e8:	20006415 	.word	0x20006415
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
200063ec:	68fb      	ldr	r3, [r7, #12]
200063ee:	687a      	ldr	r2, [r7, #4]
200063f0:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
200063f2:	e018      	b.n	20006426 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
200063f4:	68fb      	ldr	r3, [r7, #12]
200063f6:	687a      	ldr	r2, [r7, #4]
200063f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
200063fa:	e014      	b.n	20006426 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
200063fc:	68fb      	ldr	r3, [r7, #12]
200063fe:	687a      	ldr	r2, [r7, #4]
20006400:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
20006402:	e010      	b.n	20006426 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
20006404:	68fb      	ldr	r3, [r7, #12]
20006406:	687a      	ldr	r2, [r7, #4]
20006408:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
2000640a:	e00c      	b.n	20006426 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
2000640c:	68fb      	ldr	r3, [r7, #12]
2000640e:	687a      	ldr	r2, [r7, #4]
20006410:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
20006412:	e008      	b.n	20006426 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
20006414:	68fb      	ldr	r3, [r7, #12]
20006416:	687a      	ldr	r2, [r7, #4]
20006418:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
2000641a:	e004      	b.n	20006426 <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
2000641c:	2301      	movs	r3, #1
2000641e:	75fb      	strb	r3, [r7, #23]
      break;
20006420:	e001      	b.n	20006426 <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
20006422:	2301      	movs	r3, #1
20006424:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20006426:	68fb      	ldr	r3, [r7, #12]
20006428:	2200      	movs	r2, #0
2000642a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
2000642e:	7dfb      	ldrb	r3, [r7, #23]
}
20006430:	4618      	mov	r0, r3
20006432:	371c      	adds	r7, #28
20006434:	46bd      	mov	sp, r7
20006436:	f85d 7b04 	ldr.w	r7, [sp], #4
2000643a:	4770      	bx	lr

2000643c <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
2000643c:	b480      	push	{r7}
2000643e:	b085      	sub	sp, #20
20006440:	af00      	add	r7, sp, #0
20006442:	6078      	str	r0, [r7, #4]
20006444:	460b      	mov	r3, r1
20006446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
20006448:	2300      	movs	r3, #0
2000644a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2000644c:	687b      	ldr	r3, [r7, #4]
2000644e:	2b00      	cmp	r3, #0
20006450:	d101      	bne.n	20006456 <HAL_DMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
20006452:	2301      	movs	r3, #1
20006454:	e059      	b.n	2000650a <HAL_DMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
20006456:	687b      	ldr	r3, [r7, #4]
20006458:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
2000645c:	2b01      	cmp	r3, #1
2000645e:	d101      	bne.n	20006464 <HAL_DMA_UnRegisterCallback+0x28>
20006460:	2302      	movs	r3, #2
20006462:	e052      	b.n	2000650a <HAL_DMA_UnRegisterCallback+0xce>
20006464:	687b      	ldr	r3, [r7, #4]
20006466:	2201      	movs	r2, #1
20006468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2000646c:	687b      	ldr	r3, [r7, #4]
2000646e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20006472:	b2db      	uxtb	r3, r3
20006474:	2b01      	cmp	r3, #1
20006476:	d141      	bne.n	200064fc <HAL_DMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
20006478:	78fb      	ldrb	r3, [r7, #3]
2000647a:	2b06      	cmp	r3, #6
2000647c:	d83b      	bhi.n	200064f6 <HAL_DMA_UnRegisterCallback+0xba>
2000647e:	a201      	add	r2, pc, #4	@ (adr r2, 20006484 <HAL_DMA_UnRegisterCallback+0x48>)
20006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20006484:	200064a1 	.word	0x200064a1
20006488:	200064a9 	.word	0x200064a9
2000648c:	200064b1 	.word	0x200064b1
20006490:	200064b9 	.word	0x200064b9
20006494:	200064c1 	.word	0x200064c1
20006498:	200064c9 	.word	0x200064c9
2000649c:	200064d1 	.word	0x200064d1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
200064a0:	687b      	ldr	r3, [r7, #4]
200064a2:	2200      	movs	r2, #0
200064a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
200064a6:	e02b      	b.n	20006500 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
200064a8:	687b      	ldr	r3, [r7, #4]
200064aa:	2200      	movs	r2, #0
200064ac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
200064ae:	e027      	b.n	20006500 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
200064b0:	687b      	ldr	r3, [r7, #4]
200064b2:	2200      	movs	r2, #0
200064b4:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
200064b6:	e023      	b.n	20006500 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
200064b8:	687b      	ldr	r3, [r7, #4]
200064ba:	2200      	movs	r2, #0
200064bc:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
200064be:	e01f      	b.n	20006500 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
200064c0:	687b      	ldr	r3, [r7, #4]
200064c2:	2200      	movs	r2, #0
200064c4:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
200064c6:	e01b      	b.n	20006500 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
200064c8:	687b      	ldr	r3, [r7, #4]
200064ca:	2200      	movs	r2, #0
200064cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
200064ce:	e017      	b.n	20006500 <HAL_DMA_UnRegisterCallback+0xc4>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
200064d0:	687b      	ldr	r3, [r7, #4]
200064d2:	2200      	movs	r2, #0
200064d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->XferHalfCpltCallback = NULL;
200064d6:	687b      	ldr	r3, [r7, #4]
200064d8:	2200      	movs	r2, #0
200064da:	641a      	str	r2, [r3, #64]	@ 0x40
      hdma->XferM1CpltCallback = NULL;
200064dc:	687b      	ldr	r3, [r7, #4]
200064de:	2200      	movs	r2, #0
200064e0:	645a      	str	r2, [r3, #68]	@ 0x44
      hdma->XferM1HalfCpltCallback = NULL;
200064e2:	687b      	ldr	r3, [r7, #4]
200064e4:	2200      	movs	r2, #0
200064e6:	649a      	str	r2, [r3, #72]	@ 0x48
      hdma->XferErrorCallback = NULL;
200064e8:	687b      	ldr	r3, [r7, #4]
200064ea:	2200      	movs	r2, #0
200064ec:	64da      	str	r2, [r3, #76]	@ 0x4c
      hdma->XferAbortCallback = NULL;
200064ee:	687b      	ldr	r3, [r7, #4]
200064f0:	2200      	movs	r2, #0
200064f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
200064f4:	e004      	b.n	20006500 <HAL_DMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
200064f6:	2301      	movs	r3, #1
200064f8:	73fb      	strb	r3, [r7, #15]
      break;
200064fa:	e001      	b.n	20006500 <HAL_DMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
200064fc:	2301      	movs	r3, #1
200064fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20006500:	687b      	ldr	r3, [r7, #4]
20006502:	2200      	movs	r2, #0
20006504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
20006508:	7bfb      	ldrb	r3, [r7, #15]
}
2000650a:	4618      	mov	r0, r3
2000650c:	3714      	adds	r7, #20
2000650e:	46bd      	mov	sp, r7
20006510:	f85d 7b04 	ldr.w	r7, [sp], #4
20006514:	4770      	bx	lr
20006516:	bf00      	nop

20006518 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
20006518:	b480      	push	{r7}
2000651a:	b083      	sub	sp, #12
2000651c:	af00      	add	r7, sp, #0
2000651e:	6078      	str	r0, [r7, #4]
  return hdma->State;
20006520:	687b      	ldr	r3, [r7, #4]
20006522:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20006526:	b2db      	uxtb	r3, r3
}
20006528:	4618      	mov	r0, r3
2000652a:	370c      	adds	r7, #12
2000652c:	46bd      	mov	sp, r7
2000652e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006532:	4770      	bx	lr

20006534 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
20006534:	b480      	push	{r7}
20006536:	b083      	sub	sp, #12
20006538:	af00      	add	r7, sp, #0
2000653a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
2000653c:	687b      	ldr	r3, [r7, #4]
2000653e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
20006540:	4618      	mov	r0, r3
20006542:	370c      	adds	r7, #12
20006544:	46bd      	mov	sp, r7
20006546:	f85d 7b04 	ldr.w	r7, [sp], #4
2000654a:	4770      	bx	lr

2000654c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
2000654c:	b480      	push	{r7}
2000654e:	b087      	sub	sp, #28
20006550:	af00      	add	r7, sp, #0
20006552:	60f8      	str	r0, [r7, #12]
20006554:	60b9      	str	r1, [r7, #8]
20006556:	607a      	str	r2, [r7, #4]
20006558:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2000655a:	68fb      	ldr	r3, [r7, #12]
2000655c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2000655e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
20006560:	68fb      	ldr	r3, [r7, #12]
20006562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20006564:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
20006566:	68fb      	ldr	r3, [r7, #12]
20006568:	681b      	ldr	r3, [r3, #0]
2000656a:	4a7f      	ldr	r2, [pc, #508]	@ (20006768 <DMA_SetConfig+0x21c>)
2000656c:	4293      	cmp	r3, r2
2000656e:	d072      	beq.n	20006656 <DMA_SetConfig+0x10a>
20006570:	68fb      	ldr	r3, [r7, #12]
20006572:	681b      	ldr	r3, [r3, #0]
20006574:	4a7d      	ldr	r2, [pc, #500]	@ (2000676c <DMA_SetConfig+0x220>)
20006576:	4293      	cmp	r3, r2
20006578:	d06d      	beq.n	20006656 <DMA_SetConfig+0x10a>
2000657a:	68fb      	ldr	r3, [r7, #12]
2000657c:	681b      	ldr	r3, [r3, #0]
2000657e:	4a7c      	ldr	r2, [pc, #496]	@ (20006770 <DMA_SetConfig+0x224>)
20006580:	4293      	cmp	r3, r2
20006582:	d068      	beq.n	20006656 <DMA_SetConfig+0x10a>
20006584:	68fb      	ldr	r3, [r7, #12]
20006586:	681b      	ldr	r3, [r3, #0]
20006588:	4a7a      	ldr	r2, [pc, #488]	@ (20006774 <DMA_SetConfig+0x228>)
2000658a:	4293      	cmp	r3, r2
2000658c:	d063      	beq.n	20006656 <DMA_SetConfig+0x10a>
2000658e:	68fb      	ldr	r3, [r7, #12]
20006590:	681b      	ldr	r3, [r3, #0]
20006592:	4a79      	ldr	r2, [pc, #484]	@ (20006778 <DMA_SetConfig+0x22c>)
20006594:	4293      	cmp	r3, r2
20006596:	d05e      	beq.n	20006656 <DMA_SetConfig+0x10a>
20006598:	68fb      	ldr	r3, [r7, #12]
2000659a:	681b      	ldr	r3, [r3, #0]
2000659c:	4a77      	ldr	r2, [pc, #476]	@ (2000677c <DMA_SetConfig+0x230>)
2000659e:	4293      	cmp	r3, r2
200065a0:	d059      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065a2:	68fb      	ldr	r3, [r7, #12]
200065a4:	681b      	ldr	r3, [r3, #0]
200065a6:	4a76      	ldr	r2, [pc, #472]	@ (20006780 <DMA_SetConfig+0x234>)
200065a8:	4293      	cmp	r3, r2
200065aa:	d054      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065ac:	68fb      	ldr	r3, [r7, #12]
200065ae:	681b      	ldr	r3, [r3, #0]
200065b0:	4a74      	ldr	r2, [pc, #464]	@ (20006784 <DMA_SetConfig+0x238>)
200065b2:	4293      	cmp	r3, r2
200065b4:	d04f      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065b6:	68fb      	ldr	r3, [r7, #12]
200065b8:	681b      	ldr	r3, [r3, #0]
200065ba:	4a73      	ldr	r2, [pc, #460]	@ (20006788 <DMA_SetConfig+0x23c>)
200065bc:	4293      	cmp	r3, r2
200065be:	d04a      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065c0:	68fb      	ldr	r3, [r7, #12]
200065c2:	681b      	ldr	r3, [r3, #0]
200065c4:	4a71      	ldr	r2, [pc, #452]	@ (2000678c <DMA_SetConfig+0x240>)
200065c6:	4293      	cmp	r3, r2
200065c8:	d045      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065ca:	68fb      	ldr	r3, [r7, #12]
200065cc:	681b      	ldr	r3, [r3, #0]
200065ce:	4a70      	ldr	r2, [pc, #448]	@ (20006790 <DMA_SetConfig+0x244>)
200065d0:	4293      	cmp	r3, r2
200065d2:	d040      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065d4:	68fb      	ldr	r3, [r7, #12]
200065d6:	681b      	ldr	r3, [r3, #0]
200065d8:	4a6e      	ldr	r2, [pc, #440]	@ (20006794 <DMA_SetConfig+0x248>)
200065da:	4293      	cmp	r3, r2
200065dc:	d03b      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065de:	68fb      	ldr	r3, [r7, #12]
200065e0:	681b      	ldr	r3, [r3, #0]
200065e2:	4a6d      	ldr	r2, [pc, #436]	@ (20006798 <DMA_SetConfig+0x24c>)
200065e4:	4293      	cmp	r3, r2
200065e6:	d036      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065e8:	68fb      	ldr	r3, [r7, #12]
200065ea:	681b      	ldr	r3, [r3, #0]
200065ec:	4a6b      	ldr	r2, [pc, #428]	@ (2000679c <DMA_SetConfig+0x250>)
200065ee:	4293      	cmp	r3, r2
200065f0:	d031      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065f2:	68fb      	ldr	r3, [r7, #12]
200065f4:	681b      	ldr	r3, [r3, #0]
200065f6:	4a6a      	ldr	r2, [pc, #424]	@ (200067a0 <DMA_SetConfig+0x254>)
200065f8:	4293      	cmp	r3, r2
200065fa:	d02c      	beq.n	20006656 <DMA_SetConfig+0x10a>
200065fc:	68fb      	ldr	r3, [r7, #12]
200065fe:	681b      	ldr	r3, [r3, #0]
20006600:	4a68      	ldr	r2, [pc, #416]	@ (200067a4 <DMA_SetConfig+0x258>)
20006602:	4293      	cmp	r3, r2
20006604:	d027      	beq.n	20006656 <DMA_SetConfig+0x10a>
20006606:	68fb      	ldr	r3, [r7, #12]
20006608:	681b      	ldr	r3, [r3, #0]
2000660a:	4a67      	ldr	r2, [pc, #412]	@ (200067a8 <DMA_SetConfig+0x25c>)
2000660c:	4293      	cmp	r3, r2
2000660e:	d022      	beq.n	20006656 <DMA_SetConfig+0x10a>
20006610:	68fb      	ldr	r3, [r7, #12]
20006612:	681b      	ldr	r3, [r3, #0]
20006614:	4a65      	ldr	r2, [pc, #404]	@ (200067ac <DMA_SetConfig+0x260>)
20006616:	4293      	cmp	r3, r2
20006618:	d01d      	beq.n	20006656 <DMA_SetConfig+0x10a>
2000661a:	68fb      	ldr	r3, [r7, #12]
2000661c:	681b      	ldr	r3, [r3, #0]
2000661e:	4a64      	ldr	r2, [pc, #400]	@ (200067b0 <DMA_SetConfig+0x264>)
20006620:	4293      	cmp	r3, r2
20006622:	d018      	beq.n	20006656 <DMA_SetConfig+0x10a>
20006624:	68fb      	ldr	r3, [r7, #12]
20006626:	681b      	ldr	r3, [r3, #0]
20006628:	4a62      	ldr	r2, [pc, #392]	@ (200067b4 <DMA_SetConfig+0x268>)
2000662a:	4293      	cmp	r3, r2
2000662c:	d013      	beq.n	20006656 <DMA_SetConfig+0x10a>
2000662e:	68fb      	ldr	r3, [r7, #12]
20006630:	681b      	ldr	r3, [r3, #0]
20006632:	4a61      	ldr	r2, [pc, #388]	@ (200067b8 <DMA_SetConfig+0x26c>)
20006634:	4293      	cmp	r3, r2
20006636:	d00e      	beq.n	20006656 <DMA_SetConfig+0x10a>
20006638:	68fb      	ldr	r3, [r7, #12]
2000663a:	681b      	ldr	r3, [r3, #0]
2000663c:	4a5f      	ldr	r2, [pc, #380]	@ (200067bc <DMA_SetConfig+0x270>)
2000663e:	4293      	cmp	r3, r2
20006640:	d009      	beq.n	20006656 <DMA_SetConfig+0x10a>
20006642:	68fb      	ldr	r3, [r7, #12]
20006644:	681b      	ldr	r3, [r3, #0]
20006646:	4a5e      	ldr	r2, [pc, #376]	@ (200067c0 <DMA_SetConfig+0x274>)
20006648:	4293      	cmp	r3, r2
2000664a:	d004      	beq.n	20006656 <DMA_SetConfig+0x10a>
2000664c:	68fb      	ldr	r3, [r7, #12]
2000664e:	681b      	ldr	r3, [r3, #0]
20006650:	4a5c      	ldr	r2, [pc, #368]	@ (200067c4 <DMA_SetConfig+0x278>)
20006652:	4293      	cmp	r3, r2
20006654:	d101      	bne.n	2000665a <DMA_SetConfig+0x10e>
20006656:	2301      	movs	r3, #1
20006658:	e000      	b.n	2000665c <DMA_SetConfig+0x110>
2000665a:	2300      	movs	r3, #0
2000665c:	2b00      	cmp	r3, #0
2000665e:	d00d      	beq.n	2000667c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
20006660:	68fb      	ldr	r3, [r7, #12]
20006662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20006664:	68fa      	ldr	r2, [r7, #12]
20006666:	6e92      	ldr	r2, [r2, #104]	@ 0x68
20006668:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
2000666a:	68fb      	ldr	r3, [r7, #12]
2000666c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2000666e:	2b00      	cmp	r3, #0
20006670:	d004      	beq.n	2000667c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
20006672:	68fb      	ldr	r3, [r7, #12]
20006674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006676:	68fa      	ldr	r2, [r7, #12]
20006678:	6f52      	ldr	r2, [r2, #116]	@ 0x74
2000667a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2000667c:	68fb      	ldr	r3, [r7, #12]
2000667e:	681b      	ldr	r3, [r3, #0]
20006680:	4a39      	ldr	r2, [pc, #228]	@ (20006768 <DMA_SetConfig+0x21c>)
20006682:	4293      	cmp	r3, r2
20006684:	d04a      	beq.n	2000671c <DMA_SetConfig+0x1d0>
20006686:	68fb      	ldr	r3, [r7, #12]
20006688:	681b      	ldr	r3, [r3, #0]
2000668a:	4a38      	ldr	r2, [pc, #224]	@ (2000676c <DMA_SetConfig+0x220>)
2000668c:	4293      	cmp	r3, r2
2000668e:	d045      	beq.n	2000671c <DMA_SetConfig+0x1d0>
20006690:	68fb      	ldr	r3, [r7, #12]
20006692:	681b      	ldr	r3, [r3, #0]
20006694:	4a36      	ldr	r2, [pc, #216]	@ (20006770 <DMA_SetConfig+0x224>)
20006696:	4293      	cmp	r3, r2
20006698:	d040      	beq.n	2000671c <DMA_SetConfig+0x1d0>
2000669a:	68fb      	ldr	r3, [r7, #12]
2000669c:	681b      	ldr	r3, [r3, #0]
2000669e:	4a35      	ldr	r2, [pc, #212]	@ (20006774 <DMA_SetConfig+0x228>)
200066a0:	4293      	cmp	r3, r2
200066a2:	d03b      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066a4:	68fb      	ldr	r3, [r7, #12]
200066a6:	681b      	ldr	r3, [r3, #0]
200066a8:	4a33      	ldr	r2, [pc, #204]	@ (20006778 <DMA_SetConfig+0x22c>)
200066aa:	4293      	cmp	r3, r2
200066ac:	d036      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066ae:	68fb      	ldr	r3, [r7, #12]
200066b0:	681b      	ldr	r3, [r3, #0]
200066b2:	4a32      	ldr	r2, [pc, #200]	@ (2000677c <DMA_SetConfig+0x230>)
200066b4:	4293      	cmp	r3, r2
200066b6:	d031      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066b8:	68fb      	ldr	r3, [r7, #12]
200066ba:	681b      	ldr	r3, [r3, #0]
200066bc:	4a30      	ldr	r2, [pc, #192]	@ (20006780 <DMA_SetConfig+0x234>)
200066be:	4293      	cmp	r3, r2
200066c0:	d02c      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066c2:	68fb      	ldr	r3, [r7, #12]
200066c4:	681b      	ldr	r3, [r3, #0]
200066c6:	4a2f      	ldr	r2, [pc, #188]	@ (20006784 <DMA_SetConfig+0x238>)
200066c8:	4293      	cmp	r3, r2
200066ca:	d027      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066cc:	68fb      	ldr	r3, [r7, #12]
200066ce:	681b      	ldr	r3, [r3, #0]
200066d0:	4a2d      	ldr	r2, [pc, #180]	@ (20006788 <DMA_SetConfig+0x23c>)
200066d2:	4293      	cmp	r3, r2
200066d4:	d022      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066d6:	68fb      	ldr	r3, [r7, #12]
200066d8:	681b      	ldr	r3, [r3, #0]
200066da:	4a2c      	ldr	r2, [pc, #176]	@ (2000678c <DMA_SetConfig+0x240>)
200066dc:	4293      	cmp	r3, r2
200066de:	d01d      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066e0:	68fb      	ldr	r3, [r7, #12]
200066e2:	681b      	ldr	r3, [r3, #0]
200066e4:	4a2a      	ldr	r2, [pc, #168]	@ (20006790 <DMA_SetConfig+0x244>)
200066e6:	4293      	cmp	r3, r2
200066e8:	d018      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066ea:	68fb      	ldr	r3, [r7, #12]
200066ec:	681b      	ldr	r3, [r3, #0]
200066ee:	4a29      	ldr	r2, [pc, #164]	@ (20006794 <DMA_SetConfig+0x248>)
200066f0:	4293      	cmp	r3, r2
200066f2:	d013      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066f4:	68fb      	ldr	r3, [r7, #12]
200066f6:	681b      	ldr	r3, [r3, #0]
200066f8:	4a27      	ldr	r2, [pc, #156]	@ (20006798 <DMA_SetConfig+0x24c>)
200066fa:	4293      	cmp	r3, r2
200066fc:	d00e      	beq.n	2000671c <DMA_SetConfig+0x1d0>
200066fe:	68fb      	ldr	r3, [r7, #12]
20006700:	681b      	ldr	r3, [r3, #0]
20006702:	4a26      	ldr	r2, [pc, #152]	@ (2000679c <DMA_SetConfig+0x250>)
20006704:	4293      	cmp	r3, r2
20006706:	d009      	beq.n	2000671c <DMA_SetConfig+0x1d0>
20006708:	68fb      	ldr	r3, [r7, #12]
2000670a:	681b      	ldr	r3, [r3, #0]
2000670c:	4a24      	ldr	r2, [pc, #144]	@ (200067a0 <DMA_SetConfig+0x254>)
2000670e:	4293      	cmp	r3, r2
20006710:	d004      	beq.n	2000671c <DMA_SetConfig+0x1d0>
20006712:	68fb      	ldr	r3, [r7, #12]
20006714:	681b      	ldr	r3, [r3, #0]
20006716:	4a23      	ldr	r2, [pc, #140]	@ (200067a4 <DMA_SetConfig+0x258>)
20006718:	4293      	cmp	r3, r2
2000671a:	d101      	bne.n	20006720 <DMA_SetConfig+0x1d4>
2000671c:	2301      	movs	r3, #1
2000671e:	e000      	b.n	20006722 <DMA_SetConfig+0x1d6>
20006720:	2300      	movs	r3, #0
20006722:	2b00      	cmp	r3, #0
20006724:	d059      	beq.n	200067da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
20006726:	68fb      	ldr	r3, [r7, #12]
20006728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2000672a:	f003 031f 	and.w	r3, r3, #31
2000672e:	223f      	movs	r2, #63	@ 0x3f
20006730:	409a      	lsls	r2, r3
20006732:	697b      	ldr	r3, [r7, #20]
20006734:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
20006736:	68fb      	ldr	r3, [r7, #12]
20006738:	681b      	ldr	r3, [r3, #0]
2000673a:	681a      	ldr	r2, [r3, #0]
2000673c:	68fb      	ldr	r3, [r7, #12]
2000673e:	681b      	ldr	r3, [r3, #0]
20006740:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
20006744:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
20006746:	68fb      	ldr	r3, [r7, #12]
20006748:	681b      	ldr	r3, [r3, #0]
2000674a:	683a      	ldr	r2, [r7, #0]
2000674c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2000674e:	68fb      	ldr	r3, [r7, #12]
20006750:	689b      	ldr	r3, [r3, #8]
20006752:	2b40      	cmp	r3, #64	@ 0x40
20006754:	d138      	bne.n	200067c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
20006756:	68fb      	ldr	r3, [r7, #12]
20006758:	681b      	ldr	r3, [r3, #0]
2000675a:	687a      	ldr	r2, [r7, #4]
2000675c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
2000675e:	68fb      	ldr	r3, [r7, #12]
20006760:	681b      	ldr	r3, [r3, #0]
20006762:	68ba      	ldr	r2, [r7, #8]
20006764:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
20006766:	e086      	b.n	20006876 <DMA_SetConfig+0x32a>
20006768:	40020010 	.word	0x40020010
2000676c:	40020028 	.word	0x40020028
20006770:	40020040 	.word	0x40020040
20006774:	40020058 	.word	0x40020058
20006778:	40020070 	.word	0x40020070
2000677c:	40020088 	.word	0x40020088
20006780:	400200a0 	.word	0x400200a0
20006784:	400200b8 	.word	0x400200b8
20006788:	40020410 	.word	0x40020410
2000678c:	40020428 	.word	0x40020428
20006790:	40020440 	.word	0x40020440
20006794:	40020458 	.word	0x40020458
20006798:	40020470 	.word	0x40020470
2000679c:	40020488 	.word	0x40020488
200067a0:	400204a0 	.word	0x400204a0
200067a4:	400204b8 	.word	0x400204b8
200067a8:	58025408 	.word	0x58025408
200067ac:	5802541c 	.word	0x5802541c
200067b0:	58025430 	.word	0x58025430
200067b4:	58025444 	.word	0x58025444
200067b8:	58025458 	.word	0x58025458
200067bc:	5802546c 	.word	0x5802546c
200067c0:	58025480 	.word	0x58025480
200067c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
200067c8:	68fb      	ldr	r3, [r7, #12]
200067ca:	681b      	ldr	r3, [r3, #0]
200067cc:	68ba      	ldr	r2, [r7, #8]
200067ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
200067d0:	68fb      	ldr	r3, [r7, #12]
200067d2:	681b      	ldr	r3, [r3, #0]
200067d4:	687a      	ldr	r2, [r7, #4]
200067d6:	60da      	str	r2, [r3, #12]
}
200067d8:	e04d      	b.n	20006876 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
200067da:	68fb      	ldr	r3, [r7, #12]
200067dc:	681b      	ldr	r3, [r3, #0]
200067de:	4a29      	ldr	r2, [pc, #164]	@ (20006884 <DMA_SetConfig+0x338>)
200067e0:	4293      	cmp	r3, r2
200067e2:	d022      	beq.n	2000682a <DMA_SetConfig+0x2de>
200067e4:	68fb      	ldr	r3, [r7, #12]
200067e6:	681b      	ldr	r3, [r3, #0]
200067e8:	4a27      	ldr	r2, [pc, #156]	@ (20006888 <DMA_SetConfig+0x33c>)
200067ea:	4293      	cmp	r3, r2
200067ec:	d01d      	beq.n	2000682a <DMA_SetConfig+0x2de>
200067ee:	68fb      	ldr	r3, [r7, #12]
200067f0:	681b      	ldr	r3, [r3, #0]
200067f2:	4a26      	ldr	r2, [pc, #152]	@ (2000688c <DMA_SetConfig+0x340>)
200067f4:	4293      	cmp	r3, r2
200067f6:	d018      	beq.n	2000682a <DMA_SetConfig+0x2de>
200067f8:	68fb      	ldr	r3, [r7, #12]
200067fa:	681b      	ldr	r3, [r3, #0]
200067fc:	4a24      	ldr	r2, [pc, #144]	@ (20006890 <DMA_SetConfig+0x344>)
200067fe:	4293      	cmp	r3, r2
20006800:	d013      	beq.n	2000682a <DMA_SetConfig+0x2de>
20006802:	68fb      	ldr	r3, [r7, #12]
20006804:	681b      	ldr	r3, [r3, #0]
20006806:	4a23      	ldr	r2, [pc, #140]	@ (20006894 <DMA_SetConfig+0x348>)
20006808:	4293      	cmp	r3, r2
2000680a:	d00e      	beq.n	2000682a <DMA_SetConfig+0x2de>
2000680c:	68fb      	ldr	r3, [r7, #12]
2000680e:	681b      	ldr	r3, [r3, #0]
20006810:	4a21      	ldr	r2, [pc, #132]	@ (20006898 <DMA_SetConfig+0x34c>)
20006812:	4293      	cmp	r3, r2
20006814:	d009      	beq.n	2000682a <DMA_SetConfig+0x2de>
20006816:	68fb      	ldr	r3, [r7, #12]
20006818:	681b      	ldr	r3, [r3, #0]
2000681a:	4a20      	ldr	r2, [pc, #128]	@ (2000689c <DMA_SetConfig+0x350>)
2000681c:	4293      	cmp	r3, r2
2000681e:	d004      	beq.n	2000682a <DMA_SetConfig+0x2de>
20006820:	68fb      	ldr	r3, [r7, #12]
20006822:	681b      	ldr	r3, [r3, #0]
20006824:	4a1e      	ldr	r2, [pc, #120]	@ (200068a0 <DMA_SetConfig+0x354>)
20006826:	4293      	cmp	r3, r2
20006828:	d101      	bne.n	2000682e <DMA_SetConfig+0x2e2>
2000682a:	2301      	movs	r3, #1
2000682c:	e000      	b.n	20006830 <DMA_SetConfig+0x2e4>
2000682e:	2300      	movs	r3, #0
20006830:	2b00      	cmp	r3, #0
20006832:	d020      	beq.n	20006876 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
20006834:	68fb      	ldr	r3, [r7, #12]
20006836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20006838:	f003 031f 	and.w	r3, r3, #31
2000683c:	2201      	movs	r2, #1
2000683e:	409a      	lsls	r2, r3
20006840:	693b      	ldr	r3, [r7, #16]
20006842:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
20006844:	68fb      	ldr	r3, [r7, #12]
20006846:	681b      	ldr	r3, [r3, #0]
20006848:	683a      	ldr	r2, [r7, #0]
2000684a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2000684c:	68fb      	ldr	r3, [r7, #12]
2000684e:	689b      	ldr	r3, [r3, #8]
20006850:	2b40      	cmp	r3, #64	@ 0x40
20006852:	d108      	bne.n	20006866 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
20006854:	68fb      	ldr	r3, [r7, #12]
20006856:	681b      	ldr	r3, [r3, #0]
20006858:	687a      	ldr	r2, [r7, #4]
2000685a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
2000685c:	68fb      	ldr	r3, [r7, #12]
2000685e:	681b      	ldr	r3, [r3, #0]
20006860:	68ba      	ldr	r2, [r7, #8]
20006862:	60da      	str	r2, [r3, #12]
}
20006864:	e007      	b.n	20006876 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
20006866:	68fb      	ldr	r3, [r7, #12]
20006868:	681b      	ldr	r3, [r3, #0]
2000686a:	68ba      	ldr	r2, [r7, #8]
2000686c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
2000686e:	68fb      	ldr	r3, [r7, #12]
20006870:	681b      	ldr	r3, [r3, #0]
20006872:	687a      	ldr	r2, [r7, #4]
20006874:	60da      	str	r2, [r3, #12]
}
20006876:	bf00      	nop
20006878:	371c      	adds	r7, #28
2000687a:	46bd      	mov	sp, r7
2000687c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006880:	4770      	bx	lr
20006882:	bf00      	nop
20006884:	58025408 	.word	0x58025408
20006888:	5802541c 	.word	0x5802541c
2000688c:	58025430 	.word	0x58025430
20006890:	58025444 	.word	0x58025444
20006894:	58025458 	.word	0x58025458
20006898:	5802546c 	.word	0x5802546c
2000689c:	58025480 	.word	0x58025480
200068a0:	58025494 	.word	0x58025494

200068a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
200068a4:	b480      	push	{r7}
200068a6:	b085      	sub	sp, #20
200068a8:	af00      	add	r7, sp, #0
200068aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
200068ac:	687b      	ldr	r3, [r7, #4]
200068ae:	681b      	ldr	r3, [r3, #0]
200068b0:	4a42      	ldr	r2, [pc, #264]	@ (200069bc <DMA_CalcBaseAndBitshift+0x118>)
200068b2:	4293      	cmp	r3, r2
200068b4:	d04a      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
200068b6:	687b      	ldr	r3, [r7, #4]
200068b8:	681b      	ldr	r3, [r3, #0]
200068ba:	4a41      	ldr	r2, [pc, #260]	@ (200069c0 <DMA_CalcBaseAndBitshift+0x11c>)
200068bc:	4293      	cmp	r3, r2
200068be:	d045      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
200068c0:	687b      	ldr	r3, [r7, #4]
200068c2:	681b      	ldr	r3, [r3, #0]
200068c4:	4a3f      	ldr	r2, [pc, #252]	@ (200069c4 <DMA_CalcBaseAndBitshift+0x120>)
200068c6:	4293      	cmp	r3, r2
200068c8:	d040      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
200068ca:	687b      	ldr	r3, [r7, #4]
200068cc:	681b      	ldr	r3, [r3, #0]
200068ce:	4a3e      	ldr	r2, [pc, #248]	@ (200069c8 <DMA_CalcBaseAndBitshift+0x124>)
200068d0:	4293      	cmp	r3, r2
200068d2:	d03b      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
200068d4:	687b      	ldr	r3, [r7, #4]
200068d6:	681b      	ldr	r3, [r3, #0]
200068d8:	4a3c      	ldr	r2, [pc, #240]	@ (200069cc <DMA_CalcBaseAndBitshift+0x128>)
200068da:	4293      	cmp	r3, r2
200068dc:	d036      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
200068de:	687b      	ldr	r3, [r7, #4]
200068e0:	681b      	ldr	r3, [r3, #0]
200068e2:	4a3b      	ldr	r2, [pc, #236]	@ (200069d0 <DMA_CalcBaseAndBitshift+0x12c>)
200068e4:	4293      	cmp	r3, r2
200068e6:	d031      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
200068e8:	687b      	ldr	r3, [r7, #4]
200068ea:	681b      	ldr	r3, [r3, #0]
200068ec:	4a39      	ldr	r2, [pc, #228]	@ (200069d4 <DMA_CalcBaseAndBitshift+0x130>)
200068ee:	4293      	cmp	r3, r2
200068f0:	d02c      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
200068f2:	687b      	ldr	r3, [r7, #4]
200068f4:	681b      	ldr	r3, [r3, #0]
200068f6:	4a38      	ldr	r2, [pc, #224]	@ (200069d8 <DMA_CalcBaseAndBitshift+0x134>)
200068f8:	4293      	cmp	r3, r2
200068fa:	d027      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
200068fc:	687b      	ldr	r3, [r7, #4]
200068fe:	681b      	ldr	r3, [r3, #0]
20006900:	4a36      	ldr	r2, [pc, #216]	@ (200069dc <DMA_CalcBaseAndBitshift+0x138>)
20006902:	4293      	cmp	r3, r2
20006904:	d022      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
20006906:	687b      	ldr	r3, [r7, #4]
20006908:	681b      	ldr	r3, [r3, #0]
2000690a:	4a35      	ldr	r2, [pc, #212]	@ (200069e0 <DMA_CalcBaseAndBitshift+0x13c>)
2000690c:	4293      	cmp	r3, r2
2000690e:	d01d      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
20006910:	687b      	ldr	r3, [r7, #4]
20006912:	681b      	ldr	r3, [r3, #0]
20006914:	4a33      	ldr	r2, [pc, #204]	@ (200069e4 <DMA_CalcBaseAndBitshift+0x140>)
20006916:	4293      	cmp	r3, r2
20006918:	d018      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
2000691a:	687b      	ldr	r3, [r7, #4]
2000691c:	681b      	ldr	r3, [r3, #0]
2000691e:	4a32      	ldr	r2, [pc, #200]	@ (200069e8 <DMA_CalcBaseAndBitshift+0x144>)
20006920:	4293      	cmp	r3, r2
20006922:	d013      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
20006924:	687b      	ldr	r3, [r7, #4]
20006926:	681b      	ldr	r3, [r3, #0]
20006928:	4a30      	ldr	r2, [pc, #192]	@ (200069ec <DMA_CalcBaseAndBitshift+0x148>)
2000692a:	4293      	cmp	r3, r2
2000692c:	d00e      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
2000692e:	687b      	ldr	r3, [r7, #4]
20006930:	681b      	ldr	r3, [r3, #0]
20006932:	4a2f      	ldr	r2, [pc, #188]	@ (200069f0 <DMA_CalcBaseAndBitshift+0x14c>)
20006934:	4293      	cmp	r3, r2
20006936:	d009      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
20006938:	687b      	ldr	r3, [r7, #4]
2000693a:	681b      	ldr	r3, [r3, #0]
2000693c:	4a2d      	ldr	r2, [pc, #180]	@ (200069f4 <DMA_CalcBaseAndBitshift+0x150>)
2000693e:	4293      	cmp	r3, r2
20006940:	d004      	beq.n	2000694c <DMA_CalcBaseAndBitshift+0xa8>
20006942:	687b      	ldr	r3, [r7, #4]
20006944:	681b      	ldr	r3, [r3, #0]
20006946:	4a2c      	ldr	r2, [pc, #176]	@ (200069f8 <DMA_CalcBaseAndBitshift+0x154>)
20006948:	4293      	cmp	r3, r2
2000694a:	d101      	bne.n	20006950 <DMA_CalcBaseAndBitshift+0xac>
2000694c:	2301      	movs	r3, #1
2000694e:	e000      	b.n	20006952 <DMA_CalcBaseAndBitshift+0xae>
20006950:	2300      	movs	r3, #0
20006952:	2b00      	cmp	r3, #0
20006954:	d024      	beq.n	200069a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
20006956:	687b      	ldr	r3, [r7, #4]
20006958:	681b      	ldr	r3, [r3, #0]
2000695a:	b2db      	uxtb	r3, r3
2000695c:	3b10      	subs	r3, #16
2000695e:	4a27      	ldr	r2, [pc, #156]	@ (200069fc <DMA_CalcBaseAndBitshift+0x158>)
20006960:	fba2 2303 	umull	r2, r3, r2, r3
20006964:	091b      	lsrs	r3, r3, #4
20006966:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
20006968:	68fb      	ldr	r3, [r7, #12]
2000696a:	f003 0307 	and.w	r3, r3, #7
2000696e:	4a24      	ldr	r2, [pc, #144]	@ (20006a00 <DMA_CalcBaseAndBitshift+0x15c>)
20006970:	5cd3      	ldrb	r3, [r2, r3]
20006972:	461a      	mov	r2, r3
20006974:	687b      	ldr	r3, [r7, #4]
20006976:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
20006978:	68fb      	ldr	r3, [r7, #12]
2000697a:	2b03      	cmp	r3, #3
2000697c:	d908      	bls.n	20006990 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
2000697e:	687b      	ldr	r3, [r7, #4]
20006980:	681b      	ldr	r3, [r3, #0]
20006982:	461a      	mov	r2, r3
20006984:	4b1f      	ldr	r3, [pc, #124]	@ (20006a04 <DMA_CalcBaseAndBitshift+0x160>)
20006986:	4013      	ands	r3, r2
20006988:	1d1a      	adds	r2, r3, #4
2000698a:	687b      	ldr	r3, [r7, #4]
2000698c:	659a      	str	r2, [r3, #88]	@ 0x58
2000698e:	e00d      	b.n	200069ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
20006990:	687b      	ldr	r3, [r7, #4]
20006992:	681b      	ldr	r3, [r3, #0]
20006994:	461a      	mov	r2, r3
20006996:	4b1b      	ldr	r3, [pc, #108]	@ (20006a04 <DMA_CalcBaseAndBitshift+0x160>)
20006998:	4013      	ands	r3, r2
2000699a:	687a      	ldr	r2, [r7, #4]
2000699c:	6593      	str	r3, [r2, #88]	@ 0x58
2000699e:	e005      	b.n	200069ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
200069a0:	687b      	ldr	r3, [r7, #4]
200069a2:	681b      	ldr	r3, [r3, #0]
200069a4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
200069a8:	687b      	ldr	r3, [r7, #4]
200069aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
200069ac:	687b      	ldr	r3, [r7, #4]
200069ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
200069b0:	4618      	mov	r0, r3
200069b2:	3714      	adds	r7, #20
200069b4:	46bd      	mov	sp, r7
200069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200069ba:	4770      	bx	lr
200069bc:	40020010 	.word	0x40020010
200069c0:	40020028 	.word	0x40020028
200069c4:	40020040 	.word	0x40020040
200069c8:	40020058 	.word	0x40020058
200069cc:	40020070 	.word	0x40020070
200069d0:	40020088 	.word	0x40020088
200069d4:	400200a0 	.word	0x400200a0
200069d8:	400200b8 	.word	0x400200b8
200069dc:	40020410 	.word	0x40020410
200069e0:	40020428 	.word	0x40020428
200069e4:	40020440 	.word	0x40020440
200069e8:	40020458 	.word	0x40020458
200069ec:	40020470 	.word	0x40020470
200069f0:	40020488 	.word	0x40020488
200069f4:	400204a0 	.word	0x400204a0
200069f8:	400204b8 	.word	0x400204b8
200069fc:	aaaaaaab 	.word	0xaaaaaaab
20006a00:	2001892c 	.word	0x2001892c
20006a04:	fffffc00 	.word	0xfffffc00

20006a08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
20006a08:	b480      	push	{r7}
20006a0a:	b085      	sub	sp, #20
20006a0c:	af00      	add	r7, sp, #0
20006a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20006a10:	2300      	movs	r3, #0
20006a12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
20006a14:	687b      	ldr	r3, [r7, #4]
20006a16:	699b      	ldr	r3, [r3, #24]
20006a18:	2b00      	cmp	r3, #0
20006a1a:	d120      	bne.n	20006a5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
20006a1c:	687b      	ldr	r3, [r7, #4]
20006a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006a20:	2b03      	cmp	r3, #3
20006a22:	d858      	bhi.n	20006ad6 <DMA_CheckFifoParam+0xce>
20006a24:	a201      	add	r2, pc, #4	@ (adr r2, 20006a2c <DMA_CheckFifoParam+0x24>)
20006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20006a2a:	bf00      	nop
20006a2c:	20006a3d 	.word	0x20006a3d
20006a30:	20006a4f 	.word	0x20006a4f
20006a34:	20006a3d 	.word	0x20006a3d
20006a38:	20006ad7 	.word	0x20006ad7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20006a3c:	687b      	ldr	r3, [r7, #4]
20006a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20006a44:	2b00      	cmp	r3, #0
20006a46:	d048      	beq.n	20006ada <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
20006a48:	2301      	movs	r3, #1
20006a4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
20006a4c:	e045      	b.n	20006ada <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20006a4e:	687b      	ldr	r3, [r7, #4]
20006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006a52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
20006a56:	d142      	bne.n	20006ade <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
20006a58:	2301      	movs	r3, #1
20006a5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
20006a5c:	e03f      	b.n	20006ade <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
20006a5e:	687b      	ldr	r3, [r7, #4]
20006a60:	699b      	ldr	r3, [r3, #24]
20006a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20006a66:	d123      	bne.n	20006ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
20006a68:	687b      	ldr	r3, [r7, #4]
20006a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006a6c:	2b03      	cmp	r3, #3
20006a6e:	d838      	bhi.n	20006ae2 <DMA_CheckFifoParam+0xda>
20006a70:	a201      	add	r2, pc, #4	@ (adr r2, 20006a78 <DMA_CheckFifoParam+0x70>)
20006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20006a76:	bf00      	nop
20006a78:	20006a89 	.word	0x20006a89
20006a7c:	20006a8f 	.word	0x20006a8f
20006a80:	20006a89 	.word	0x20006a89
20006a84:	20006aa1 	.word	0x20006aa1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
20006a88:	2301      	movs	r3, #1
20006a8a:	73fb      	strb	r3, [r7, #15]
        break;
20006a8c:	e030      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20006a8e:	687b      	ldr	r3, [r7, #4]
20006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20006a96:	2b00      	cmp	r3, #0
20006a98:	d025      	beq.n	20006ae6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
20006a9a:	2301      	movs	r3, #1
20006a9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
20006a9e:	e022      	b.n	20006ae6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20006aa0:	687b      	ldr	r3, [r7, #4]
20006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
20006aa8:	d11f      	bne.n	20006aea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
20006aaa:	2301      	movs	r3, #1
20006aac:	73fb      	strb	r3, [r7, #15]
        }
        break;
20006aae:	e01c      	b.n	20006aea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
20006ab0:	687b      	ldr	r3, [r7, #4]
20006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006ab4:	2b02      	cmp	r3, #2
20006ab6:	d902      	bls.n	20006abe <DMA_CheckFifoParam+0xb6>
20006ab8:	2b03      	cmp	r3, #3
20006aba:	d003      	beq.n	20006ac4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
20006abc:	e018      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
20006abe:	2301      	movs	r3, #1
20006ac0:	73fb      	strb	r3, [r7, #15]
        break;
20006ac2:	e015      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20006ac4:	687b      	ldr	r3, [r7, #4]
20006ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20006acc:	2b00      	cmp	r3, #0
20006ace:	d00e      	beq.n	20006aee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
20006ad0:	2301      	movs	r3, #1
20006ad2:	73fb      	strb	r3, [r7, #15]
    break;
20006ad4:	e00b      	b.n	20006aee <DMA_CheckFifoParam+0xe6>
        break;
20006ad6:	bf00      	nop
20006ad8:	e00a      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>
        break;
20006ada:	bf00      	nop
20006adc:	e008      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>
        break;
20006ade:	bf00      	nop
20006ae0:	e006      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>
        break;
20006ae2:	bf00      	nop
20006ae4:	e004      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>
        break;
20006ae6:	bf00      	nop
20006ae8:	e002      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>
        break;
20006aea:	bf00      	nop
20006aec:	e000      	b.n	20006af0 <DMA_CheckFifoParam+0xe8>
    break;
20006aee:	bf00      	nop
    }
  }

  return status;
20006af0:	7bfb      	ldrb	r3, [r7, #15]
}
20006af2:	4618      	mov	r0, r3
20006af4:	3714      	adds	r7, #20
20006af6:	46bd      	mov	sp, r7
20006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
20006afc:	4770      	bx	lr
20006afe:	bf00      	nop

20006b00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
20006b00:	b480      	push	{r7}
20006b02:	b085      	sub	sp, #20
20006b04:	af00      	add	r7, sp, #0
20006b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
20006b08:	687b      	ldr	r3, [r7, #4]
20006b0a:	681b      	ldr	r3, [r3, #0]
20006b0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
20006b0e:	687b      	ldr	r3, [r7, #4]
20006b10:	681b      	ldr	r3, [r3, #0]
20006b12:	4a38      	ldr	r2, [pc, #224]	@ (20006bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
20006b14:	4293      	cmp	r3, r2
20006b16:	d022      	beq.n	20006b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
20006b18:	687b      	ldr	r3, [r7, #4]
20006b1a:	681b      	ldr	r3, [r3, #0]
20006b1c:	4a36      	ldr	r2, [pc, #216]	@ (20006bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
20006b1e:	4293      	cmp	r3, r2
20006b20:	d01d      	beq.n	20006b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
20006b22:	687b      	ldr	r3, [r7, #4]
20006b24:	681b      	ldr	r3, [r3, #0]
20006b26:	4a35      	ldr	r2, [pc, #212]	@ (20006bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
20006b28:	4293      	cmp	r3, r2
20006b2a:	d018      	beq.n	20006b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
20006b2c:	687b      	ldr	r3, [r7, #4]
20006b2e:	681b      	ldr	r3, [r3, #0]
20006b30:	4a33      	ldr	r2, [pc, #204]	@ (20006c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
20006b32:	4293      	cmp	r3, r2
20006b34:	d013      	beq.n	20006b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
20006b36:	687b      	ldr	r3, [r7, #4]
20006b38:	681b      	ldr	r3, [r3, #0]
20006b3a:	4a32      	ldr	r2, [pc, #200]	@ (20006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
20006b3c:	4293      	cmp	r3, r2
20006b3e:	d00e      	beq.n	20006b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
20006b40:	687b      	ldr	r3, [r7, #4]
20006b42:	681b      	ldr	r3, [r3, #0]
20006b44:	4a30      	ldr	r2, [pc, #192]	@ (20006c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
20006b46:	4293      	cmp	r3, r2
20006b48:	d009      	beq.n	20006b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
20006b4a:	687b      	ldr	r3, [r7, #4]
20006b4c:	681b      	ldr	r3, [r3, #0]
20006b4e:	4a2f      	ldr	r2, [pc, #188]	@ (20006c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
20006b50:	4293      	cmp	r3, r2
20006b52:	d004      	beq.n	20006b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
20006b54:	687b      	ldr	r3, [r7, #4]
20006b56:	681b      	ldr	r3, [r3, #0]
20006b58:	4a2d      	ldr	r2, [pc, #180]	@ (20006c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
20006b5a:	4293      	cmp	r3, r2
20006b5c:	d101      	bne.n	20006b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
20006b5e:	2301      	movs	r3, #1
20006b60:	e000      	b.n	20006b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
20006b62:	2300      	movs	r3, #0
20006b64:	2b00      	cmp	r3, #0
20006b66:	d01a      	beq.n	20006b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
20006b68:	687b      	ldr	r3, [r7, #4]
20006b6a:	681b      	ldr	r3, [r3, #0]
20006b6c:	b2db      	uxtb	r3, r3
20006b6e:	3b08      	subs	r3, #8
20006b70:	4a28      	ldr	r2, [pc, #160]	@ (20006c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
20006b72:	fba2 2303 	umull	r2, r3, r2, r3
20006b76:	091b      	lsrs	r3, r3, #4
20006b78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
20006b7a:	68fa      	ldr	r2, [r7, #12]
20006b7c:	4b26      	ldr	r3, [pc, #152]	@ (20006c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
20006b7e:	4413      	add	r3, r2
20006b80:	009b      	lsls	r3, r3, #2
20006b82:	461a      	mov	r2, r3
20006b84:	687b      	ldr	r3, [r7, #4]
20006b86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
20006b88:	687b      	ldr	r3, [r7, #4]
20006b8a:	4a24      	ldr	r2, [pc, #144]	@ (20006c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
20006b8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
20006b8e:	68fb      	ldr	r3, [r7, #12]
20006b90:	f003 031f 	and.w	r3, r3, #31
20006b94:	2201      	movs	r2, #1
20006b96:	409a      	lsls	r2, r3
20006b98:	687b      	ldr	r3, [r7, #4]
20006b9a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
20006b9c:	e024      	b.n	20006be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
20006b9e:	687b      	ldr	r3, [r7, #4]
20006ba0:	681b      	ldr	r3, [r3, #0]
20006ba2:	b2db      	uxtb	r3, r3
20006ba4:	3b10      	subs	r3, #16
20006ba6:	4a1e      	ldr	r2, [pc, #120]	@ (20006c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
20006ba8:	fba2 2303 	umull	r2, r3, r2, r3
20006bac:	091b      	lsrs	r3, r3, #4
20006bae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
20006bb0:	68bb      	ldr	r3, [r7, #8]
20006bb2:	4a1c      	ldr	r2, [pc, #112]	@ (20006c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
20006bb4:	4293      	cmp	r3, r2
20006bb6:	d806      	bhi.n	20006bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
20006bb8:	68bb      	ldr	r3, [r7, #8]
20006bba:	4a1b      	ldr	r2, [pc, #108]	@ (20006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
20006bbc:	4293      	cmp	r3, r2
20006bbe:	d902      	bls.n	20006bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
20006bc0:	68fb      	ldr	r3, [r7, #12]
20006bc2:	3308      	adds	r3, #8
20006bc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
20006bc6:	68fa      	ldr	r2, [r7, #12]
20006bc8:	4b18      	ldr	r3, [pc, #96]	@ (20006c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
20006bca:	4413      	add	r3, r2
20006bcc:	009b      	lsls	r3, r3, #2
20006bce:	461a      	mov	r2, r3
20006bd0:	687b      	ldr	r3, [r7, #4]
20006bd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
20006bd4:	687b      	ldr	r3, [r7, #4]
20006bd6:	4a16      	ldr	r2, [pc, #88]	@ (20006c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
20006bd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
20006bda:	68fb      	ldr	r3, [r7, #12]
20006bdc:	f003 031f 	and.w	r3, r3, #31
20006be0:	2201      	movs	r2, #1
20006be2:	409a      	lsls	r2, r3
20006be4:	687b      	ldr	r3, [r7, #4]
20006be6:	669a      	str	r2, [r3, #104]	@ 0x68
}
20006be8:	bf00      	nop
20006bea:	3714      	adds	r7, #20
20006bec:	46bd      	mov	sp, r7
20006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
20006bf2:	4770      	bx	lr
20006bf4:	58025408 	.word	0x58025408
20006bf8:	5802541c 	.word	0x5802541c
20006bfc:	58025430 	.word	0x58025430
20006c00:	58025444 	.word	0x58025444
20006c04:	58025458 	.word	0x58025458
20006c08:	5802546c 	.word	0x5802546c
20006c0c:	58025480 	.word	0x58025480
20006c10:	58025494 	.word	0x58025494
20006c14:	cccccccd 	.word	0xcccccccd
20006c18:	16009600 	.word	0x16009600
20006c1c:	58025880 	.word	0x58025880
20006c20:	aaaaaaab 	.word	0xaaaaaaab
20006c24:	400204b8 	.word	0x400204b8
20006c28:	4002040f 	.word	0x4002040f
20006c2c:	10008200 	.word	0x10008200
20006c30:	40020880 	.word	0x40020880

20006c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
20006c34:	b480      	push	{r7}
20006c36:	b085      	sub	sp, #20
20006c38:	af00      	add	r7, sp, #0
20006c3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
20006c3c:	687b      	ldr	r3, [r7, #4]
20006c3e:	685b      	ldr	r3, [r3, #4]
20006c40:	b2db      	uxtb	r3, r3
20006c42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
20006c44:	68fb      	ldr	r3, [r7, #12]
20006c46:	2b00      	cmp	r3, #0
20006c48:	d04a      	beq.n	20006ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
20006c4a:	68fb      	ldr	r3, [r7, #12]
20006c4c:	2b08      	cmp	r3, #8
20006c4e:	d847      	bhi.n	20006ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
20006c50:	687b      	ldr	r3, [r7, #4]
20006c52:	681b      	ldr	r3, [r3, #0]
20006c54:	4a25      	ldr	r2, [pc, #148]	@ (20006cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
20006c56:	4293      	cmp	r3, r2
20006c58:	d022      	beq.n	20006ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
20006c5a:	687b      	ldr	r3, [r7, #4]
20006c5c:	681b      	ldr	r3, [r3, #0]
20006c5e:	4a24      	ldr	r2, [pc, #144]	@ (20006cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
20006c60:	4293      	cmp	r3, r2
20006c62:	d01d      	beq.n	20006ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
20006c64:	687b      	ldr	r3, [r7, #4]
20006c66:	681b      	ldr	r3, [r3, #0]
20006c68:	4a22      	ldr	r2, [pc, #136]	@ (20006cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
20006c6a:	4293      	cmp	r3, r2
20006c6c:	d018      	beq.n	20006ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
20006c6e:	687b      	ldr	r3, [r7, #4]
20006c70:	681b      	ldr	r3, [r3, #0]
20006c72:	4a21      	ldr	r2, [pc, #132]	@ (20006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
20006c74:	4293      	cmp	r3, r2
20006c76:	d013      	beq.n	20006ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
20006c78:	687b      	ldr	r3, [r7, #4]
20006c7a:	681b      	ldr	r3, [r3, #0]
20006c7c:	4a1f      	ldr	r2, [pc, #124]	@ (20006cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
20006c7e:	4293      	cmp	r3, r2
20006c80:	d00e      	beq.n	20006ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
20006c82:	687b      	ldr	r3, [r7, #4]
20006c84:	681b      	ldr	r3, [r3, #0]
20006c86:	4a1e      	ldr	r2, [pc, #120]	@ (20006d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
20006c88:	4293      	cmp	r3, r2
20006c8a:	d009      	beq.n	20006ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
20006c8c:	687b      	ldr	r3, [r7, #4]
20006c8e:	681b      	ldr	r3, [r3, #0]
20006c90:	4a1c      	ldr	r2, [pc, #112]	@ (20006d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
20006c92:	4293      	cmp	r3, r2
20006c94:	d004      	beq.n	20006ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
20006c96:	687b      	ldr	r3, [r7, #4]
20006c98:	681b      	ldr	r3, [r3, #0]
20006c9a:	4a1b      	ldr	r2, [pc, #108]	@ (20006d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
20006c9c:	4293      	cmp	r3, r2
20006c9e:	d101      	bne.n	20006ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
20006ca0:	2301      	movs	r3, #1
20006ca2:	e000      	b.n	20006ca6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
20006ca4:	2300      	movs	r3, #0
20006ca6:	2b00      	cmp	r3, #0
20006ca8:	d00a      	beq.n	20006cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
20006caa:	68fa      	ldr	r2, [r7, #12]
20006cac:	4b17      	ldr	r3, [pc, #92]	@ (20006d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
20006cae:	4413      	add	r3, r2
20006cb0:	009b      	lsls	r3, r3, #2
20006cb2:	461a      	mov	r2, r3
20006cb4:	687b      	ldr	r3, [r7, #4]
20006cb6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
20006cb8:	687b      	ldr	r3, [r7, #4]
20006cba:	4a15      	ldr	r2, [pc, #84]	@ (20006d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
20006cbc:	671a      	str	r2, [r3, #112]	@ 0x70
20006cbe:	e009      	b.n	20006cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
20006cc0:	68fa      	ldr	r2, [r7, #12]
20006cc2:	4b14      	ldr	r3, [pc, #80]	@ (20006d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
20006cc4:	4413      	add	r3, r2
20006cc6:	009b      	lsls	r3, r3, #2
20006cc8:	461a      	mov	r2, r3
20006cca:	687b      	ldr	r3, [r7, #4]
20006ccc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
20006cce:	687b      	ldr	r3, [r7, #4]
20006cd0:	4a11      	ldr	r2, [pc, #68]	@ (20006d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
20006cd2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
20006cd4:	68fb      	ldr	r3, [r7, #12]
20006cd6:	3b01      	subs	r3, #1
20006cd8:	2201      	movs	r2, #1
20006cda:	409a      	lsls	r2, r3
20006cdc:	687b      	ldr	r3, [r7, #4]
20006cde:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
20006ce0:	bf00      	nop
20006ce2:	3714      	adds	r7, #20
20006ce4:	46bd      	mov	sp, r7
20006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
20006cea:	4770      	bx	lr
20006cec:	58025408 	.word	0x58025408
20006cf0:	5802541c 	.word	0x5802541c
20006cf4:	58025430 	.word	0x58025430
20006cf8:	58025444 	.word	0x58025444
20006cfc:	58025458 	.word	0x58025458
20006d00:	5802546c 	.word	0x5802546c
20006d04:	58025480 	.word	0x58025480
20006d08:	58025494 	.word	0x58025494
20006d0c:	1600963f 	.word	0x1600963f
20006d10:	58025940 	.word	0x58025940
20006d14:	1000823f 	.word	0x1000823f
20006d18:	40020940 	.word	0x40020940

20006d1c <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
20006d1c:	b580      	push	{r7, lr}
20006d1e:	b086      	sub	sp, #24
20006d20:	af00      	add	r7, sp, #0
20006d22:	60f8      	str	r0, [r7, #12]
20006d24:	60b9      	str	r1, [r7, #8]
20006d26:	607a      	str	r2, [r7, #4]
20006d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20006d2a:	2300      	movs	r3, #0
20006d2c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
20006d2e:	68fb      	ldr	r3, [r7, #12]
20006d30:	689b      	ldr	r3, [r3, #8]
20006d32:	2b80      	cmp	r3, #128	@ 0x80
20006d34:	d106      	bne.n	20006d44 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20006d36:	68fb      	ldr	r3, [r7, #12]
20006d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
20006d3c:	655a      	str	r2, [r3, #84]	@ 0x54
    status = HAL_ERROR;
20006d3e:	2301      	movs	r3, #1
20006d40:	75fb      	strb	r3, [r7, #23]
20006d42:	e1c8      	b.n	200070d6 <HAL_DMAEx_MultiBufferStart+0x3ba>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
20006d44:	68fb      	ldr	r3, [r7, #12]
20006d46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
20006d4a:	2b01      	cmp	r3, #1
20006d4c:	d101      	bne.n	20006d52 <HAL_DMAEx_MultiBufferStart+0x36>
20006d4e:	2302      	movs	r3, #2
20006d50:	e1c2      	b.n	200070d8 <HAL_DMAEx_MultiBufferStart+0x3bc>
20006d52:	68fb      	ldr	r3, [r7, #12]
20006d54:	2201      	movs	r2, #1
20006d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    if(HAL_DMA_STATE_READY == hdma->State)
20006d5a:	68fb      	ldr	r3, [r7, #12]
20006d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20006d60:	b2db      	uxtb	r3, r3
20006d62:	2b01      	cmp	r3, #1
20006d64:	f040 81b1 	bne.w	200070ca <HAL_DMAEx_MultiBufferStart+0x3ae>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY;
20006d68:	68fb      	ldr	r3, [r7, #12]
20006d6a:	2202      	movs	r2, #2
20006d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Initialize the error code */
      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20006d70:	68fb      	ldr	r3, [r7, #12]
20006d72:	2200      	movs	r2, #0
20006d74:	655a      	str	r2, [r3, #84]	@ 0x54

      if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
20006d76:	68fb      	ldr	r3, [r7, #12]
20006d78:	681b      	ldr	r3, [r3, #0]
20006d7a:	4a7f      	ldr	r2, [pc, #508]	@ (20006f78 <HAL_DMAEx_MultiBufferStart+0x25c>)
20006d7c:	4293      	cmp	r3, r2
20006d7e:	d04a      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006d80:	68fb      	ldr	r3, [r7, #12]
20006d82:	681b      	ldr	r3, [r3, #0]
20006d84:	4a7d      	ldr	r2, [pc, #500]	@ (20006f7c <HAL_DMAEx_MultiBufferStart+0x260>)
20006d86:	4293      	cmp	r3, r2
20006d88:	d045      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006d8a:	68fb      	ldr	r3, [r7, #12]
20006d8c:	681b      	ldr	r3, [r3, #0]
20006d8e:	4a7c      	ldr	r2, [pc, #496]	@ (20006f80 <HAL_DMAEx_MultiBufferStart+0x264>)
20006d90:	4293      	cmp	r3, r2
20006d92:	d040      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006d94:	68fb      	ldr	r3, [r7, #12]
20006d96:	681b      	ldr	r3, [r3, #0]
20006d98:	4a7a      	ldr	r2, [pc, #488]	@ (20006f84 <HAL_DMAEx_MultiBufferStart+0x268>)
20006d9a:	4293      	cmp	r3, r2
20006d9c:	d03b      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006d9e:	68fb      	ldr	r3, [r7, #12]
20006da0:	681b      	ldr	r3, [r3, #0]
20006da2:	4a79      	ldr	r2, [pc, #484]	@ (20006f88 <HAL_DMAEx_MultiBufferStart+0x26c>)
20006da4:	4293      	cmp	r3, r2
20006da6:	d036      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006da8:	68fb      	ldr	r3, [r7, #12]
20006daa:	681b      	ldr	r3, [r3, #0]
20006dac:	4a77      	ldr	r2, [pc, #476]	@ (20006f8c <HAL_DMAEx_MultiBufferStart+0x270>)
20006dae:	4293      	cmp	r3, r2
20006db0:	d031      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006db2:	68fb      	ldr	r3, [r7, #12]
20006db4:	681b      	ldr	r3, [r3, #0]
20006db6:	4a76      	ldr	r2, [pc, #472]	@ (20006f90 <HAL_DMAEx_MultiBufferStart+0x274>)
20006db8:	4293      	cmp	r3, r2
20006dba:	d02c      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006dbc:	68fb      	ldr	r3, [r7, #12]
20006dbe:	681b      	ldr	r3, [r3, #0]
20006dc0:	4a74      	ldr	r2, [pc, #464]	@ (20006f94 <HAL_DMAEx_MultiBufferStart+0x278>)
20006dc2:	4293      	cmp	r3, r2
20006dc4:	d027      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006dc6:	68fb      	ldr	r3, [r7, #12]
20006dc8:	681b      	ldr	r3, [r3, #0]
20006dca:	4a73      	ldr	r2, [pc, #460]	@ (20006f98 <HAL_DMAEx_MultiBufferStart+0x27c>)
20006dcc:	4293      	cmp	r3, r2
20006dce:	d022      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006dd0:	68fb      	ldr	r3, [r7, #12]
20006dd2:	681b      	ldr	r3, [r3, #0]
20006dd4:	4a71      	ldr	r2, [pc, #452]	@ (20006f9c <HAL_DMAEx_MultiBufferStart+0x280>)
20006dd6:	4293      	cmp	r3, r2
20006dd8:	d01d      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006dda:	68fb      	ldr	r3, [r7, #12]
20006ddc:	681b      	ldr	r3, [r3, #0]
20006dde:	4a70      	ldr	r2, [pc, #448]	@ (20006fa0 <HAL_DMAEx_MultiBufferStart+0x284>)
20006de0:	4293      	cmp	r3, r2
20006de2:	d018      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006de4:	68fb      	ldr	r3, [r7, #12]
20006de6:	681b      	ldr	r3, [r3, #0]
20006de8:	4a6e      	ldr	r2, [pc, #440]	@ (20006fa4 <HAL_DMAEx_MultiBufferStart+0x288>)
20006dea:	4293      	cmp	r3, r2
20006dec:	d013      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006dee:	68fb      	ldr	r3, [r7, #12]
20006df0:	681b      	ldr	r3, [r3, #0]
20006df2:	4a6d      	ldr	r2, [pc, #436]	@ (20006fa8 <HAL_DMAEx_MultiBufferStart+0x28c>)
20006df4:	4293      	cmp	r3, r2
20006df6:	d00e      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006df8:	68fb      	ldr	r3, [r7, #12]
20006dfa:	681b      	ldr	r3, [r3, #0]
20006dfc:	4a6b      	ldr	r2, [pc, #428]	@ (20006fac <HAL_DMAEx_MultiBufferStart+0x290>)
20006dfe:	4293      	cmp	r3, r2
20006e00:	d009      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006e02:	68fb      	ldr	r3, [r7, #12]
20006e04:	681b      	ldr	r3, [r3, #0]
20006e06:	4a6a      	ldr	r2, [pc, #424]	@ (20006fb0 <HAL_DMAEx_MultiBufferStart+0x294>)
20006e08:	4293      	cmp	r3, r2
20006e0a:	d004      	beq.n	20006e16 <HAL_DMAEx_MultiBufferStart+0xfa>
20006e0c:	68fb      	ldr	r3, [r7, #12]
20006e0e:	681b      	ldr	r3, [r3, #0]
20006e10:	4a68      	ldr	r2, [pc, #416]	@ (20006fb4 <HAL_DMAEx_MultiBufferStart+0x298>)
20006e12:	4293      	cmp	r3, r2
20006e14:	d101      	bne.n	20006e1a <HAL_DMAEx_MultiBufferStart+0xfe>
20006e16:	2301      	movs	r3, #1
20006e18:	e000      	b.n	20006e1c <HAL_DMAEx_MultiBufferStart+0x100>
20006e1a:	2300      	movs	r3, #0
20006e1c:	2b00      	cmp	r3, #0
20006e1e:	d018      	beq.n	20006e52 <HAL_DMAEx_MultiBufferStart+0x136>
      {
        /* Enable the Double buffer mode */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
20006e20:	68fb      	ldr	r3, [r7, #12]
20006e22:	681b      	ldr	r3, [r3, #0]
20006e24:	681a      	ldr	r2, [r3, #0]
20006e26:	68fb      	ldr	r3, [r7, #12]
20006e28:	681b      	ldr	r3, [r3, #0]
20006e2a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
20006e2e:	601a      	str	r2, [r3, #0]

        /* Configure DMA Stream destination address */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
20006e30:	68fb      	ldr	r3, [r7, #12]
20006e32:	681b      	ldr	r3, [r3, #0]
20006e34:	683a      	ldr	r2, [r7, #0]
20006e36:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
20006e38:	68fb      	ldr	r3, [r7, #12]
20006e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20006e3c:	3308      	adds	r3, #8
20006e3e:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
20006e40:	68fb      	ldr	r3, [r7, #12]
20006e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20006e44:	f003 031f 	and.w	r3, r3, #31
20006e48:	223f      	movs	r2, #63	@ 0x3f
20006e4a:	409a      	lsls	r2, r3
20006e4c:	693b      	ldr	r3, [r7, #16]
20006e4e:	601a      	str	r2, [r3, #0]
20006e50:	e018      	b.n	20006e84 <HAL_DMAEx_MultiBufferStart+0x168>
      }
      else /* BDMA instance(s) */
      {
        /* Enable the Double buffer mode */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
20006e52:	68fb      	ldr	r3, [r7, #12]
20006e54:	681b      	ldr	r3, [r3, #0]
20006e56:	6819      	ldr	r1, [r3, #0]
20006e58:	68fb      	ldr	r3, [r7, #12]
20006e5a:	681a      	ldr	r2, [r3, #0]
20006e5c:	f248 0320 	movw	r3, #32800	@ 0x8020
20006e60:	430b      	orrs	r3, r1
20006e62:	6013      	str	r3, [r2, #0]

        /* Configure DMA Stream destination address */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
20006e64:	68fb      	ldr	r3, [r7, #12]
20006e66:	681b      	ldr	r3, [r3, #0]
20006e68:	683a      	ldr	r2, [r7, #0]
20006e6a:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
20006e6c:	68fb      	ldr	r3, [r7, #12]
20006e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20006e70:	3304      	adds	r3, #4
20006e72:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
20006e74:	68fb      	ldr	r3, [r7, #12]
20006e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20006e78:	f003 031f 	and.w	r3, r3, #31
20006e7c:	2201      	movs	r2, #1
20006e7e:	409a      	lsls	r2, r3
20006e80:	693b      	ldr	r3, [r7, #16]
20006e82:	601a      	str	r2, [r3, #0]
      }

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
20006e84:	68fb      	ldr	r3, [r7, #12]
20006e86:	681b      	ldr	r3, [r3, #0]
20006e88:	4a3b      	ldr	r2, [pc, #236]	@ (20006f78 <HAL_DMAEx_MultiBufferStart+0x25c>)
20006e8a:	4293      	cmp	r3, r2
20006e8c:	d072      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006e8e:	68fb      	ldr	r3, [r7, #12]
20006e90:	681b      	ldr	r3, [r3, #0]
20006e92:	4a3a      	ldr	r2, [pc, #232]	@ (20006f7c <HAL_DMAEx_MultiBufferStart+0x260>)
20006e94:	4293      	cmp	r3, r2
20006e96:	d06d      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006e98:	68fb      	ldr	r3, [r7, #12]
20006e9a:	681b      	ldr	r3, [r3, #0]
20006e9c:	4a38      	ldr	r2, [pc, #224]	@ (20006f80 <HAL_DMAEx_MultiBufferStart+0x264>)
20006e9e:	4293      	cmp	r3, r2
20006ea0:	d068      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006ea2:	68fb      	ldr	r3, [r7, #12]
20006ea4:	681b      	ldr	r3, [r3, #0]
20006ea6:	4a37      	ldr	r2, [pc, #220]	@ (20006f84 <HAL_DMAEx_MultiBufferStart+0x268>)
20006ea8:	4293      	cmp	r3, r2
20006eaa:	d063      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006eac:	68fb      	ldr	r3, [r7, #12]
20006eae:	681b      	ldr	r3, [r3, #0]
20006eb0:	4a35      	ldr	r2, [pc, #212]	@ (20006f88 <HAL_DMAEx_MultiBufferStart+0x26c>)
20006eb2:	4293      	cmp	r3, r2
20006eb4:	d05e      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006eb6:	68fb      	ldr	r3, [r7, #12]
20006eb8:	681b      	ldr	r3, [r3, #0]
20006eba:	4a34      	ldr	r2, [pc, #208]	@ (20006f8c <HAL_DMAEx_MultiBufferStart+0x270>)
20006ebc:	4293      	cmp	r3, r2
20006ebe:	d059      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006ec0:	68fb      	ldr	r3, [r7, #12]
20006ec2:	681b      	ldr	r3, [r3, #0]
20006ec4:	4a32      	ldr	r2, [pc, #200]	@ (20006f90 <HAL_DMAEx_MultiBufferStart+0x274>)
20006ec6:	4293      	cmp	r3, r2
20006ec8:	d054      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006eca:	68fb      	ldr	r3, [r7, #12]
20006ecc:	681b      	ldr	r3, [r3, #0]
20006ece:	4a31      	ldr	r2, [pc, #196]	@ (20006f94 <HAL_DMAEx_MultiBufferStart+0x278>)
20006ed0:	4293      	cmp	r3, r2
20006ed2:	d04f      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006ed4:	68fb      	ldr	r3, [r7, #12]
20006ed6:	681b      	ldr	r3, [r3, #0]
20006ed8:	4a2f      	ldr	r2, [pc, #188]	@ (20006f98 <HAL_DMAEx_MultiBufferStart+0x27c>)
20006eda:	4293      	cmp	r3, r2
20006edc:	d04a      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006ede:	68fb      	ldr	r3, [r7, #12]
20006ee0:	681b      	ldr	r3, [r3, #0]
20006ee2:	4a2e      	ldr	r2, [pc, #184]	@ (20006f9c <HAL_DMAEx_MultiBufferStart+0x280>)
20006ee4:	4293      	cmp	r3, r2
20006ee6:	d045      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006ee8:	68fb      	ldr	r3, [r7, #12]
20006eea:	681b      	ldr	r3, [r3, #0]
20006eec:	4a2c      	ldr	r2, [pc, #176]	@ (20006fa0 <HAL_DMAEx_MultiBufferStart+0x284>)
20006eee:	4293      	cmp	r3, r2
20006ef0:	d040      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006ef2:	68fb      	ldr	r3, [r7, #12]
20006ef4:	681b      	ldr	r3, [r3, #0]
20006ef6:	4a2b      	ldr	r2, [pc, #172]	@ (20006fa4 <HAL_DMAEx_MultiBufferStart+0x288>)
20006ef8:	4293      	cmp	r3, r2
20006efa:	d03b      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006efc:	68fb      	ldr	r3, [r7, #12]
20006efe:	681b      	ldr	r3, [r3, #0]
20006f00:	4a29      	ldr	r2, [pc, #164]	@ (20006fa8 <HAL_DMAEx_MultiBufferStart+0x28c>)
20006f02:	4293      	cmp	r3, r2
20006f04:	d036      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f06:	68fb      	ldr	r3, [r7, #12]
20006f08:	681b      	ldr	r3, [r3, #0]
20006f0a:	4a28      	ldr	r2, [pc, #160]	@ (20006fac <HAL_DMAEx_MultiBufferStart+0x290>)
20006f0c:	4293      	cmp	r3, r2
20006f0e:	d031      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f10:	68fb      	ldr	r3, [r7, #12]
20006f12:	681b      	ldr	r3, [r3, #0]
20006f14:	4a26      	ldr	r2, [pc, #152]	@ (20006fb0 <HAL_DMAEx_MultiBufferStart+0x294>)
20006f16:	4293      	cmp	r3, r2
20006f18:	d02c      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f1a:	68fb      	ldr	r3, [r7, #12]
20006f1c:	681b      	ldr	r3, [r3, #0]
20006f1e:	4a25      	ldr	r2, [pc, #148]	@ (20006fb4 <HAL_DMAEx_MultiBufferStart+0x298>)
20006f20:	4293      	cmp	r3, r2
20006f22:	d027      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f24:	68fb      	ldr	r3, [r7, #12]
20006f26:	681b      	ldr	r3, [r3, #0]
20006f28:	4a23      	ldr	r2, [pc, #140]	@ (20006fb8 <HAL_DMAEx_MultiBufferStart+0x29c>)
20006f2a:	4293      	cmp	r3, r2
20006f2c:	d022      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f2e:	68fb      	ldr	r3, [r7, #12]
20006f30:	681b      	ldr	r3, [r3, #0]
20006f32:	4a22      	ldr	r2, [pc, #136]	@ (20006fbc <HAL_DMAEx_MultiBufferStart+0x2a0>)
20006f34:	4293      	cmp	r3, r2
20006f36:	d01d      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f38:	68fb      	ldr	r3, [r7, #12]
20006f3a:	681b      	ldr	r3, [r3, #0]
20006f3c:	4a20      	ldr	r2, [pc, #128]	@ (20006fc0 <HAL_DMAEx_MultiBufferStart+0x2a4>)
20006f3e:	4293      	cmp	r3, r2
20006f40:	d018      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f42:	68fb      	ldr	r3, [r7, #12]
20006f44:	681b      	ldr	r3, [r3, #0]
20006f46:	4a1f      	ldr	r2, [pc, #124]	@ (20006fc4 <HAL_DMAEx_MultiBufferStart+0x2a8>)
20006f48:	4293      	cmp	r3, r2
20006f4a:	d013      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f4c:	68fb      	ldr	r3, [r7, #12]
20006f4e:	681b      	ldr	r3, [r3, #0]
20006f50:	4a1d      	ldr	r2, [pc, #116]	@ (20006fc8 <HAL_DMAEx_MultiBufferStart+0x2ac>)
20006f52:	4293      	cmp	r3, r2
20006f54:	d00e      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f56:	68fb      	ldr	r3, [r7, #12]
20006f58:	681b      	ldr	r3, [r3, #0]
20006f5a:	4a1c      	ldr	r2, [pc, #112]	@ (20006fcc <HAL_DMAEx_MultiBufferStart+0x2b0>)
20006f5c:	4293      	cmp	r3, r2
20006f5e:	d009      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f60:	68fb      	ldr	r3, [r7, #12]
20006f62:	681b      	ldr	r3, [r3, #0]
20006f64:	4a1a      	ldr	r2, [pc, #104]	@ (20006fd0 <HAL_DMAEx_MultiBufferStart+0x2b4>)
20006f66:	4293      	cmp	r3, r2
20006f68:	d004      	beq.n	20006f74 <HAL_DMAEx_MultiBufferStart+0x258>
20006f6a:	68fb      	ldr	r3, [r7, #12]
20006f6c:	681b      	ldr	r3, [r3, #0]
20006f6e:	4a19      	ldr	r2, [pc, #100]	@ (20006fd4 <HAL_DMAEx_MultiBufferStart+0x2b8>)
20006f70:	4293      	cmp	r3, r2
20006f72:	d131      	bne.n	20006fd8 <HAL_DMAEx_MultiBufferStart+0x2bc>
20006f74:	2301      	movs	r3, #1
20006f76:	e030      	b.n	20006fda <HAL_DMAEx_MultiBufferStart+0x2be>
20006f78:	40020010 	.word	0x40020010
20006f7c:	40020028 	.word	0x40020028
20006f80:	40020040 	.word	0x40020040
20006f84:	40020058 	.word	0x40020058
20006f88:	40020070 	.word	0x40020070
20006f8c:	40020088 	.word	0x40020088
20006f90:	400200a0 	.word	0x400200a0
20006f94:	400200b8 	.word	0x400200b8
20006f98:	40020410 	.word	0x40020410
20006f9c:	40020428 	.word	0x40020428
20006fa0:	40020440 	.word	0x40020440
20006fa4:	40020458 	.word	0x40020458
20006fa8:	40020470 	.word	0x40020470
20006fac:	40020488 	.word	0x40020488
20006fb0:	400204a0 	.word	0x400204a0
20006fb4:	400204b8 	.word	0x400204b8
20006fb8:	58025408 	.word	0x58025408
20006fbc:	5802541c 	.word	0x5802541c
20006fc0:	58025430 	.word	0x58025430
20006fc4:	58025444 	.word	0x58025444
20006fc8:	58025458 	.word	0x58025458
20006fcc:	5802546c 	.word	0x5802546c
20006fd0:	58025480 	.word	0x58025480
20006fd4:	58025494 	.word	0x58025494
20006fd8:	2300      	movs	r3, #0
20006fda:	2b00      	cmp	r3, #0
20006fdc:	d013      	beq.n	20007006 <HAL_DMAEx_MultiBufferStart+0x2ea>
      {
        /* Configure the source, destination address and the data length */
        DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
20006fde:	6a3b      	ldr	r3, [r7, #32]
20006fe0:	687a      	ldr	r2, [r7, #4]
20006fe2:	68b9      	ldr	r1, [r7, #8]
20006fe4:	68f8      	ldr	r0, [r7, #12]
20006fe6:	f000 fea3 	bl	20007d30 <DMA_MultiBufferSetConfig>

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
20006fea:	68fb      	ldr	r3, [r7, #12]
20006fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20006fee:	68fa      	ldr	r2, [r7, #12]
20006ff0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
20006ff2:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
20006ff4:	68fb      	ldr	r3, [r7, #12]
20006ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20006ff8:	2b00      	cmp	r3, #0
20006ffa:	d004      	beq.n	20007006 <HAL_DMAEx_MultiBufferStart+0x2ea>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
20006ffc:	68fb      	ldr	r3, [r7, #12]
20006ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007000:	68fa      	ldr	r2, [r7, #12]
20007002:	6f52      	ldr	r2, [r2, #116]	@ 0x74
20007004:	605a      	str	r2, [r3, #4]
        }
      }

      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
20007006:	68fb      	ldr	r3, [r7, #12]
20007008:	681b      	ldr	r3, [r3, #0]
2000700a:	4a35      	ldr	r2, [pc, #212]	@ (200070e0 <HAL_DMAEx_MultiBufferStart+0x3c4>)
2000700c:	4293      	cmp	r3, r2
2000700e:	d04a      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007010:	68fb      	ldr	r3, [r7, #12]
20007012:	681b      	ldr	r3, [r3, #0]
20007014:	4a33      	ldr	r2, [pc, #204]	@ (200070e4 <HAL_DMAEx_MultiBufferStart+0x3c8>)
20007016:	4293      	cmp	r3, r2
20007018:	d045      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
2000701a:	68fb      	ldr	r3, [r7, #12]
2000701c:	681b      	ldr	r3, [r3, #0]
2000701e:	4a32      	ldr	r2, [pc, #200]	@ (200070e8 <HAL_DMAEx_MultiBufferStart+0x3cc>)
20007020:	4293      	cmp	r3, r2
20007022:	d040      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007024:	68fb      	ldr	r3, [r7, #12]
20007026:	681b      	ldr	r3, [r3, #0]
20007028:	4a30      	ldr	r2, [pc, #192]	@ (200070ec <HAL_DMAEx_MultiBufferStart+0x3d0>)
2000702a:	4293      	cmp	r3, r2
2000702c:	d03b      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
2000702e:	68fb      	ldr	r3, [r7, #12]
20007030:	681b      	ldr	r3, [r3, #0]
20007032:	4a2f      	ldr	r2, [pc, #188]	@ (200070f0 <HAL_DMAEx_MultiBufferStart+0x3d4>)
20007034:	4293      	cmp	r3, r2
20007036:	d036      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007038:	68fb      	ldr	r3, [r7, #12]
2000703a:	681b      	ldr	r3, [r3, #0]
2000703c:	4a2d      	ldr	r2, [pc, #180]	@ (200070f4 <HAL_DMAEx_MultiBufferStart+0x3d8>)
2000703e:	4293      	cmp	r3, r2
20007040:	d031      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007042:	68fb      	ldr	r3, [r7, #12]
20007044:	681b      	ldr	r3, [r3, #0]
20007046:	4a2c      	ldr	r2, [pc, #176]	@ (200070f8 <HAL_DMAEx_MultiBufferStart+0x3dc>)
20007048:	4293      	cmp	r3, r2
2000704a:	d02c      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
2000704c:	68fb      	ldr	r3, [r7, #12]
2000704e:	681b      	ldr	r3, [r3, #0]
20007050:	4a2a      	ldr	r2, [pc, #168]	@ (200070fc <HAL_DMAEx_MultiBufferStart+0x3e0>)
20007052:	4293      	cmp	r3, r2
20007054:	d027      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007056:	68fb      	ldr	r3, [r7, #12]
20007058:	681b      	ldr	r3, [r3, #0]
2000705a:	4a29      	ldr	r2, [pc, #164]	@ (20007100 <HAL_DMAEx_MultiBufferStart+0x3e4>)
2000705c:	4293      	cmp	r3, r2
2000705e:	d022      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007060:	68fb      	ldr	r3, [r7, #12]
20007062:	681b      	ldr	r3, [r3, #0]
20007064:	4a27      	ldr	r2, [pc, #156]	@ (20007104 <HAL_DMAEx_MultiBufferStart+0x3e8>)
20007066:	4293      	cmp	r3, r2
20007068:	d01d      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
2000706a:	68fb      	ldr	r3, [r7, #12]
2000706c:	681b      	ldr	r3, [r3, #0]
2000706e:	4a26      	ldr	r2, [pc, #152]	@ (20007108 <HAL_DMAEx_MultiBufferStart+0x3ec>)
20007070:	4293      	cmp	r3, r2
20007072:	d018      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007074:	68fb      	ldr	r3, [r7, #12]
20007076:	681b      	ldr	r3, [r3, #0]
20007078:	4a24      	ldr	r2, [pc, #144]	@ (2000710c <HAL_DMAEx_MultiBufferStart+0x3f0>)
2000707a:	4293      	cmp	r3, r2
2000707c:	d013      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
2000707e:	68fb      	ldr	r3, [r7, #12]
20007080:	681b      	ldr	r3, [r3, #0]
20007082:	4a23      	ldr	r2, [pc, #140]	@ (20007110 <HAL_DMAEx_MultiBufferStart+0x3f4>)
20007084:	4293      	cmp	r3, r2
20007086:	d00e      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007088:	68fb      	ldr	r3, [r7, #12]
2000708a:	681b      	ldr	r3, [r3, #0]
2000708c:	4a21      	ldr	r2, [pc, #132]	@ (20007114 <HAL_DMAEx_MultiBufferStart+0x3f8>)
2000708e:	4293      	cmp	r3, r2
20007090:	d009      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
20007092:	68fb      	ldr	r3, [r7, #12]
20007094:	681b      	ldr	r3, [r3, #0]
20007096:	4a20      	ldr	r2, [pc, #128]	@ (20007118 <HAL_DMAEx_MultiBufferStart+0x3fc>)
20007098:	4293      	cmp	r3, r2
2000709a:	d004      	beq.n	200070a6 <HAL_DMAEx_MultiBufferStart+0x38a>
2000709c:	68fb      	ldr	r3, [r7, #12]
2000709e:	681b      	ldr	r3, [r3, #0]
200070a0:	4a1e      	ldr	r2, [pc, #120]	@ (2000711c <HAL_DMAEx_MultiBufferStart+0x400>)
200070a2:	4293      	cmp	r3, r2
200070a4:	d108      	bne.n	200070b8 <HAL_DMAEx_MultiBufferStart+0x39c>
200070a6:	68fb      	ldr	r3, [r7, #12]
200070a8:	681b      	ldr	r3, [r3, #0]
200070aa:	681a      	ldr	r2, [r3, #0]
200070ac:	68fb      	ldr	r3, [r7, #12]
200070ae:	681b      	ldr	r3, [r3, #0]
200070b0:	f042 0201 	orr.w	r2, r2, #1
200070b4:	601a      	str	r2, [r3, #0]
200070b6:	e00e      	b.n	200070d6 <HAL_DMAEx_MultiBufferStart+0x3ba>
200070b8:	68fb      	ldr	r3, [r7, #12]
200070ba:	681b      	ldr	r3, [r3, #0]
200070bc:	681a      	ldr	r2, [r3, #0]
200070be:	68fb      	ldr	r3, [r7, #12]
200070c0:	681b      	ldr	r3, [r3, #0]
200070c2:	f042 0201 	orr.w	r2, r2, #1
200070c6:	601a      	str	r2, [r3, #0]
200070c8:	e005      	b.n	200070d6 <HAL_DMAEx_MultiBufferStart+0x3ba>
    }
    else
    {
      /* Set the error code to busy */
      hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
200070ca:	68fb      	ldr	r3, [r7, #12]
200070cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
200070d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Return error status */
      status = HAL_ERROR;
200070d2:	2301      	movs	r3, #1
200070d4:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
200070d6:	7dfb      	ldrb	r3, [r7, #23]
}
200070d8:	4618      	mov	r0, r3
200070da:	3718      	adds	r7, #24
200070dc:	46bd      	mov	sp, r7
200070de:	bd80      	pop	{r7, pc}
200070e0:	40020010 	.word	0x40020010
200070e4:	40020028 	.word	0x40020028
200070e8:	40020040 	.word	0x40020040
200070ec:	40020058 	.word	0x40020058
200070f0:	40020070 	.word	0x40020070
200070f4:	40020088 	.word	0x40020088
200070f8:	400200a0 	.word	0x400200a0
200070fc:	400200b8 	.word	0x400200b8
20007100:	40020410 	.word	0x40020410
20007104:	40020428 	.word	0x40020428
20007108:	40020440 	.word	0x40020440
2000710c:	40020458 	.word	0x40020458
20007110:	40020470 	.word	0x40020470
20007114:	40020488 	.word	0x40020488
20007118:	400204a0 	.word	0x400204a0
2000711c:	400204b8 	.word	0x400204b8

20007120 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
20007120:	b580      	push	{r7, lr}
20007122:	b086      	sub	sp, #24
20007124:	af00      	add	r7, sp, #0
20007126:	60f8      	str	r0, [r7, #12]
20007128:	60b9      	str	r1, [r7, #8]
2000712a:	607a      	str	r2, [r7, #4]
2000712c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000712e:	2300      	movs	r3, #0
20007130:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
20007132:	68fb      	ldr	r3, [r7, #12]
20007134:	689b      	ldr	r3, [r3, #8]
20007136:	2b80      	cmp	r3, #128	@ 0x80
20007138:	d105      	bne.n	20007146 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
2000713a:	68fb      	ldr	r3, [r7, #12]
2000713c:	f44f 7280 	mov.w	r2, #256	@ 0x100
20007140:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
20007142:	2301      	movs	r3, #1
20007144:	e315      	b.n	20007772 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
20007146:	68fb      	ldr	r3, [r7, #12]
20007148:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
2000714c:	2b01      	cmp	r3, #1
2000714e:	d101      	bne.n	20007154 <HAL_DMAEx_MultiBufferStart_IT+0x34>
20007150:	2302      	movs	r3, #2
20007152:	e30e      	b.n	20007772 <HAL_DMAEx_MultiBufferStart_IT+0x652>
20007154:	68fb      	ldr	r3, [r7, #12]
20007156:	2201      	movs	r2, #1
20007158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2000715c:	68fb      	ldr	r3, [r7, #12]
2000715e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20007162:	b2db      	uxtb	r3, r3
20007164:	2b01      	cmp	r3, #1
20007166:	f040 82fd 	bne.w	20007764 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2000716a:	68fb      	ldr	r3, [r7, #12]
2000716c:	2202      	movs	r2, #2
2000716e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20007172:	68fb      	ldr	r3, [r7, #12]
20007174:	2200      	movs	r2, #0
20007176:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
20007178:	68fb      	ldr	r3, [r7, #12]
2000717a:	681b      	ldr	r3, [r3, #0]
2000717c:	4a82      	ldr	r2, [pc, #520]	@ (20007388 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
2000717e:	4293      	cmp	r3, r2
20007180:	d04a      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
20007182:	68fb      	ldr	r3, [r7, #12]
20007184:	681b      	ldr	r3, [r3, #0]
20007186:	4a81      	ldr	r2, [pc, #516]	@ (2000738c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
20007188:	4293      	cmp	r3, r2
2000718a:	d045      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
2000718c:	68fb      	ldr	r3, [r7, #12]
2000718e:	681b      	ldr	r3, [r3, #0]
20007190:	4a7f      	ldr	r2, [pc, #508]	@ (20007390 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
20007192:	4293      	cmp	r3, r2
20007194:	d040      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
20007196:	68fb      	ldr	r3, [r7, #12]
20007198:	681b      	ldr	r3, [r3, #0]
2000719a:	4a7e      	ldr	r2, [pc, #504]	@ (20007394 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
2000719c:	4293      	cmp	r3, r2
2000719e:	d03b      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071a0:	68fb      	ldr	r3, [r7, #12]
200071a2:	681b      	ldr	r3, [r3, #0]
200071a4:	4a7c      	ldr	r2, [pc, #496]	@ (20007398 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
200071a6:	4293      	cmp	r3, r2
200071a8:	d036      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071aa:	68fb      	ldr	r3, [r7, #12]
200071ac:	681b      	ldr	r3, [r3, #0]
200071ae:	4a7b      	ldr	r2, [pc, #492]	@ (2000739c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
200071b0:	4293      	cmp	r3, r2
200071b2:	d031      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071b4:	68fb      	ldr	r3, [r7, #12]
200071b6:	681b      	ldr	r3, [r3, #0]
200071b8:	4a79      	ldr	r2, [pc, #484]	@ (200073a0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
200071ba:	4293      	cmp	r3, r2
200071bc:	d02c      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071be:	68fb      	ldr	r3, [r7, #12]
200071c0:	681b      	ldr	r3, [r3, #0]
200071c2:	4a78      	ldr	r2, [pc, #480]	@ (200073a4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
200071c4:	4293      	cmp	r3, r2
200071c6:	d027      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071c8:	68fb      	ldr	r3, [r7, #12]
200071ca:	681b      	ldr	r3, [r3, #0]
200071cc:	4a76      	ldr	r2, [pc, #472]	@ (200073a8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
200071ce:	4293      	cmp	r3, r2
200071d0:	d022      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071d2:	68fb      	ldr	r3, [r7, #12]
200071d4:	681b      	ldr	r3, [r3, #0]
200071d6:	4a75      	ldr	r2, [pc, #468]	@ (200073ac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
200071d8:	4293      	cmp	r3, r2
200071da:	d01d      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071dc:	68fb      	ldr	r3, [r7, #12]
200071de:	681b      	ldr	r3, [r3, #0]
200071e0:	4a73      	ldr	r2, [pc, #460]	@ (200073b0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
200071e2:	4293      	cmp	r3, r2
200071e4:	d018      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071e6:	68fb      	ldr	r3, [r7, #12]
200071e8:	681b      	ldr	r3, [r3, #0]
200071ea:	4a72      	ldr	r2, [pc, #456]	@ (200073b4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
200071ec:	4293      	cmp	r3, r2
200071ee:	d013      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071f0:	68fb      	ldr	r3, [r7, #12]
200071f2:	681b      	ldr	r3, [r3, #0]
200071f4:	4a70      	ldr	r2, [pc, #448]	@ (200073b8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
200071f6:	4293      	cmp	r3, r2
200071f8:	d00e      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
200071fa:	68fb      	ldr	r3, [r7, #12]
200071fc:	681b      	ldr	r3, [r3, #0]
200071fe:	4a6f      	ldr	r2, [pc, #444]	@ (200073bc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
20007200:	4293      	cmp	r3, r2
20007202:	d009      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
20007204:	68fb      	ldr	r3, [r7, #12]
20007206:	681b      	ldr	r3, [r3, #0]
20007208:	4a6d      	ldr	r2, [pc, #436]	@ (200073c0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
2000720a:	4293      	cmp	r3, r2
2000720c:	d004      	beq.n	20007218 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
2000720e:	68fb      	ldr	r3, [r7, #12]
20007210:	681b      	ldr	r3, [r3, #0]
20007212:	4a6c      	ldr	r2, [pc, #432]	@ (200073c4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
20007214:	4293      	cmp	r3, r2
20007216:	d101      	bne.n	2000721c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
20007218:	2301      	movs	r3, #1
2000721a:	e000      	b.n	2000721e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
2000721c:	2300      	movs	r3, #0
2000721e:	2b00      	cmp	r3, #0
20007220:	d018      	beq.n	20007254 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
20007222:	68fb      	ldr	r3, [r7, #12]
20007224:	681b      	ldr	r3, [r3, #0]
20007226:	681a      	ldr	r2, [r3, #0]
20007228:	68fb      	ldr	r3, [r7, #12]
2000722a:	681b      	ldr	r3, [r3, #0]
2000722c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
20007230:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
20007232:	68fb      	ldr	r3, [r7, #12]
20007234:	681b      	ldr	r3, [r3, #0]
20007236:	683a      	ldr	r2, [r7, #0]
20007238:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
2000723a:	68fb      	ldr	r3, [r7, #12]
2000723c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2000723e:	3308      	adds	r3, #8
20007240:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
20007242:	68fb      	ldr	r3, [r7, #12]
20007244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20007246:	f003 031f 	and.w	r3, r3, #31
2000724a:	223f      	movs	r2, #63	@ 0x3f
2000724c:	409a      	lsls	r2, r3
2000724e:	693b      	ldr	r3, [r7, #16]
20007250:	601a      	str	r2, [r3, #0]
20007252:	e018      	b.n	20007286 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
20007254:	68fb      	ldr	r3, [r7, #12]
20007256:	681b      	ldr	r3, [r3, #0]
20007258:	6819      	ldr	r1, [r3, #0]
2000725a:	68fb      	ldr	r3, [r7, #12]
2000725c:	681a      	ldr	r2, [r3, #0]
2000725e:	f248 0320 	movw	r3, #32800	@ 0x8020
20007262:	430b      	orrs	r3, r1
20007264:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
20007266:	68fb      	ldr	r3, [r7, #12]
20007268:	681b      	ldr	r3, [r3, #0]
2000726a:	683a      	ldr	r2, [r7, #0]
2000726c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
2000726e:	68fb      	ldr	r3, [r7, #12]
20007270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20007272:	3304      	adds	r3, #4
20007274:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
20007276:	68fb      	ldr	r3, [r7, #12]
20007278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2000727a:	f003 031f 	and.w	r3, r3, #31
2000727e:	2201      	movs	r2, #1
20007280:	409a      	lsls	r2, r3
20007282:	693b      	ldr	r3, [r7, #16]
20007284:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
20007286:	6a3b      	ldr	r3, [r7, #32]
20007288:	687a      	ldr	r2, [r7, #4]
2000728a:	68b9      	ldr	r1, [r7, #8]
2000728c:	68f8      	ldr	r0, [r7, #12]
2000728e:	f000 fd4f 	bl	20007d30 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
20007292:	68fb      	ldr	r3, [r7, #12]
20007294:	681b      	ldr	r3, [r3, #0]
20007296:	4a3c      	ldr	r2, [pc, #240]	@ (20007388 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
20007298:	4293      	cmp	r3, r2
2000729a:	d072      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2000729c:	68fb      	ldr	r3, [r7, #12]
2000729e:	681b      	ldr	r3, [r3, #0]
200072a0:	4a3a      	ldr	r2, [pc, #232]	@ (2000738c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
200072a2:	4293      	cmp	r3, r2
200072a4:	d06d      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072a6:	68fb      	ldr	r3, [r7, #12]
200072a8:	681b      	ldr	r3, [r3, #0]
200072aa:	4a39      	ldr	r2, [pc, #228]	@ (20007390 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
200072ac:	4293      	cmp	r3, r2
200072ae:	d068      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072b0:	68fb      	ldr	r3, [r7, #12]
200072b2:	681b      	ldr	r3, [r3, #0]
200072b4:	4a37      	ldr	r2, [pc, #220]	@ (20007394 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
200072b6:	4293      	cmp	r3, r2
200072b8:	d063      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072ba:	68fb      	ldr	r3, [r7, #12]
200072bc:	681b      	ldr	r3, [r3, #0]
200072be:	4a36      	ldr	r2, [pc, #216]	@ (20007398 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
200072c0:	4293      	cmp	r3, r2
200072c2:	d05e      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072c4:	68fb      	ldr	r3, [r7, #12]
200072c6:	681b      	ldr	r3, [r3, #0]
200072c8:	4a34      	ldr	r2, [pc, #208]	@ (2000739c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
200072ca:	4293      	cmp	r3, r2
200072cc:	d059      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072ce:	68fb      	ldr	r3, [r7, #12]
200072d0:	681b      	ldr	r3, [r3, #0]
200072d2:	4a33      	ldr	r2, [pc, #204]	@ (200073a0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
200072d4:	4293      	cmp	r3, r2
200072d6:	d054      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072d8:	68fb      	ldr	r3, [r7, #12]
200072da:	681b      	ldr	r3, [r3, #0]
200072dc:	4a31      	ldr	r2, [pc, #196]	@ (200073a4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
200072de:	4293      	cmp	r3, r2
200072e0:	d04f      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072e2:	68fb      	ldr	r3, [r7, #12]
200072e4:	681b      	ldr	r3, [r3, #0]
200072e6:	4a30      	ldr	r2, [pc, #192]	@ (200073a8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
200072e8:	4293      	cmp	r3, r2
200072ea:	d04a      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072ec:	68fb      	ldr	r3, [r7, #12]
200072ee:	681b      	ldr	r3, [r3, #0]
200072f0:	4a2e      	ldr	r2, [pc, #184]	@ (200073ac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
200072f2:	4293      	cmp	r3, r2
200072f4:	d045      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
200072f6:	68fb      	ldr	r3, [r7, #12]
200072f8:	681b      	ldr	r3, [r3, #0]
200072fa:	4a2d      	ldr	r2, [pc, #180]	@ (200073b0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
200072fc:	4293      	cmp	r3, r2
200072fe:	d040      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
20007300:	68fb      	ldr	r3, [r7, #12]
20007302:	681b      	ldr	r3, [r3, #0]
20007304:	4a2b      	ldr	r2, [pc, #172]	@ (200073b4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
20007306:	4293      	cmp	r3, r2
20007308:	d03b      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2000730a:	68fb      	ldr	r3, [r7, #12]
2000730c:	681b      	ldr	r3, [r3, #0]
2000730e:	4a2a      	ldr	r2, [pc, #168]	@ (200073b8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
20007310:	4293      	cmp	r3, r2
20007312:	d036      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
20007314:	68fb      	ldr	r3, [r7, #12]
20007316:	681b      	ldr	r3, [r3, #0]
20007318:	4a28      	ldr	r2, [pc, #160]	@ (200073bc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
2000731a:	4293      	cmp	r3, r2
2000731c:	d031      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2000731e:	68fb      	ldr	r3, [r7, #12]
20007320:	681b      	ldr	r3, [r3, #0]
20007322:	4a27      	ldr	r2, [pc, #156]	@ (200073c0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
20007324:	4293      	cmp	r3, r2
20007326:	d02c      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
20007328:	68fb      	ldr	r3, [r7, #12]
2000732a:	681b      	ldr	r3, [r3, #0]
2000732c:	4a25      	ldr	r2, [pc, #148]	@ (200073c4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
2000732e:	4293      	cmp	r3, r2
20007330:	d027      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
20007332:	68fb      	ldr	r3, [r7, #12]
20007334:	681b      	ldr	r3, [r3, #0]
20007336:	4a24      	ldr	r2, [pc, #144]	@ (200073c8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
20007338:	4293      	cmp	r3, r2
2000733a:	d022      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2000733c:	68fb      	ldr	r3, [r7, #12]
2000733e:	681b      	ldr	r3, [r3, #0]
20007340:	4a22      	ldr	r2, [pc, #136]	@ (200073cc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
20007342:	4293      	cmp	r3, r2
20007344:	d01d      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
20007346:	68fb      	ldr	r3, [r7, #12]
20007348:	681b      	ldr	r3, [r3, #0]
2000734a:	4a21      	ldr	r2, [pc, #132]	@ (200073d0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
2000734c:	4293      	cmp	r3, r2
2000734e:	d018      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
20007350:	68fb      	ldr	r3, [r7, #12]
20007352:	681b      	ldr	r3, [r3, #0]
20007354:	4a1f      	ldr	r2, [pc, #124]	@ (200073d4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
20007356:	4293      	cmp	r3, r2
20007358:	d013      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2000735a:	68fb      	ldr	r3, [r7, #12]
2000735c:	681b      	ldr	r3, [r3, #0]
2000735e:	4a1e      	ldr	r2, [pc, #120]	@ (200073d8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
20007360:	4293      	cmp	r3, r2
20007362:	d00e      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
20007364:	68fb      	ldr	r3, [r7, #12]
20007366:	681b      	ldr	r3, [r3, #0]
20007368:	4a1c      	ldr	r2, [pc, #112]	@ (200073dc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
2000736a:	4293      	cmp	r3, r2
2000736c:	d009      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2000736e:	68fb      	ldr	r3, [r7, #12]
20007370:	681b      	ldr	r3, [r3, #0]
20007372:	4a1b      	ldr	r2, [pc, #108]	@ (200073e0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
20007374:	4293      	cmp	r3, r2
20007376:	d004      	beq.n	20007382 <HAL_DMAEx_MultiBufferStart_IT+0x262>
20007378:	68fb      	ldr	r3, [r7, #12]
2000737a:	681b      	ldr	r3, [r3, #0]
2000737c:	4a19      	ldr	r2, [pc, #100]	@ (200073e4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
2000737e:	4293      	cmp	r3, r2
20007380:	d132      	bne.n	200073e8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
20007382:	2301      	movs	r3, #1
20007384:	e031      	b.n	200073ea <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
20007386:	bf00      	nop
20007388:	40020010 	.word	0x40020010
2000738c:	40020028 	.word	0x40020028
20007390:	40020040 	.word	0x40020040
20007394:	40020058 	.word	0x40020058
20007398:	40020070 	.word	0x40020070
2000739c:	40020088 	.word	0x40020088
200073a0:	400200a0 	.word	0x400200a0
200073a4:	400200b8 	.word	0x400200b8
200073a8:	40020410 	.word	0x40020410
200073ac:	40020428 	.word	0x40020428
200073b0:	40020440 	.word	0x40020440
200073b4:	40020458 	.word	0x40020458
200073b8:	40020470 	.word	0x40020470
200073bc:	40020488 	.word	0x40020488
200073c0:	400204a0 	.word	0x400204a0
200073c4:	400204b8 	.word	0x400204b8
200073c8:	58025408 	.word	0x58025408
200073cc:	5802541c 	.word	0x5802541c
200073d0:	58025430 	.word	0x58025430
200073d4:	58025444 	.word	0x58025444
200073d8:	58025458 	.word	0x58025458
200073dc:	5802546c 	.word	0x5802546c
200073e0:	58025480 	.word	0x58025480
200073e4:	58025494 	.word	0x58025494
200073e8:	2300      	movs	r3, #0
200073ea:	2b00      	cmp	r3, #0
200073ec:	d00d      	beq.n	2000740a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
200073ee:	68fb      	ldr	r3, [r7, #12]
200073f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200073f2:	68fa      	ldr	r2, [r7, #12]
200073f4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
200073f6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
200073f8:	68fb      	ldr	r3, [r7, #12]
200073fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
200073fc:	2b00      	cmp	r3, #0
200073fe:	d004      	beq.n	2000740a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
20007400:	68fb      	ldr	r3, [r7, #12]
20007402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007404:	68fa      	ldr	r2, [r7, #12]
20007406:	6f52      	ldr	r2, [r2, #116]	@ 0x74
20007408:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2000740a:	68fb      	ldr	r3, [r7, #12]
2000740c:	681b      	ldr	r3, [r3, #0]
2000740e:	4a3b      	ldr	r2, [pc, #236]	@ (200074fc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
20007410:	4293      	cmp	r3, r2
20007412:	d04a      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007414:	68fb      	ldr	r3, [r7, #12]
20007416:	681b      	ldr	r3, [r3, #0]
20007418:	4a39      	ldr	r2, [pc, #228]	@ (20007500 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
2000741a:	4293      	cmp	r3, r2
2000741c:	d045      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2000741e:	68fb      	ldr	r3, [r7, #12]
20007420:	681b      	ldr	r3, [r3, #0]
20007422:	4a38      	ldr	r2, [pc, #224]	@ (20007504 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
20007424:	4293      	cmp	r3, r2
20007426:	d040      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007428:	68fb      	ldr	r3, [r7, #12]
2000742a:	681b      	ldr	r3, [r3, #0]
2000742c:	4a36      	ldr	r2, [pc, #216]	@ (20007508 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
2000742e:	4293      	cmp	r3, r2
20007430:	d03b      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007432:	68fb      	ldr	r3, [r7, #12]
20007434:	681b      	ldr	r3, [r3, #0]
20007436:	4a35      	ldr	r2, [pc, #212]	@ (2000750c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
20007438:	4293      	cmp	r3, r2
2000743a:	d036      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2000743c:	68fb      	ldr	r3, [r7, #12]
2000743e:	681b      	ldr	r3, [r3, #0]
20007440:	4a33      	ldr	r2, [pc, #204]	@ (20007510 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
20007442:	4293      	cmp	r3, r2
20007444:	d031      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007446:	68fb      	ldr	r3, [r7, #12]
20007448:	681b      	ldr	r3, [r3, #0]
2000744a:	4a32      	ldr	r2, [pc, #200]	@ (20007514 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
2000744c:	4293      	cmp	r3, r2
2000744e:	d02c      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007450:	68fb      	ldr	r3, [r7, #12]
20007452:	681b      	ldr	r3, [r3, #0]
20007454:	4a30      	ldr	r2, [pc, #192]	@ (20007518 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
20007456:	4293      	cmp	r3, r2
20007458:	d027      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2000745a:	68fb      	ldr	r3, [r7, #12]
2000745c:	681b      	ldr	r3, [r3, #0]
2000745e:	4a2f      	ldr	r2, [pc, #188]	@ (2000751c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
20007460:	4293      	cmp	r3, r2
20007462:	d022      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007464:	68fb      	ldr	r3, [r7, #12]
20007466:	681b      	ldr	r3, [r3, #0]
20007468:	4a2d      	ldr	r2, [pc, #180]	@ (20007520 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
2000746a:	4293      	cmp	r3, r2
2000746c:	d01d      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2000746e:	68fb      	ldr	r3, [r7, #12]
20007470:	681b      	ldr	r3, [r3, #0]
20007472:	4a2c      	ldr	r2, [pc, #176]	@ (20007524 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
20007474:	4293      	cmp	r3, r2
20007476:	d018      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007478:	68fb      	ldr	r3, [r7, #12]
2000747a:	681b      	ldr	r3, [r3, #0]
2000747c:	4a2a      	ldr	r2, [pc, #168]	@ (20007528 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
2000747e:	4293      	cmp	r3, r2
20007480:	d013      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007482:	68fb      	ldr	r3, [r7, #12]
20007484:	681b      	ldr	r3, [r3, #0]
20007486:	4a29      	ldr	r2, [pc, #164]	@ (2000752c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
20007488:	4293      	cmp	r3, r2
2000748a:	d00e      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2000748c:	68fb      	ldr	r3, [r7, #12]
2000748e:	681b      	ldr	r3, [r3, #0]
20007490:	4a27      	ldr	r2, [pc, #156]	@ (20007530 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
20007492:	4293      	cmp	r3, r2
20007494:	d009      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
20007496:	68fb      	ldr	r3, [r7, #12]
20007498:	681b      	ldr	r3, [r3, #0]
2000749a:	4a26      	ldr	r2, [pc, #152]	@ (20007534 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
2000749c:	4293      	cmp	r3, r2
2000749e:	d004      	beq.n	200074aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
200074a0:	68fb      	ldr	r3, [r7, #12]
200074a2:	681b      	ldr	r3, [r3, #0]
200074a4:	4a24      	ldr	r2, [pc, #144]	@ (20007538 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
200074a6:	4293      	cmp	r3, r2
200074a8:	d101      	bne.n	200074ae <HAL_DMAEx_MultiBufferStart_IT+0x38e>
200074aa:	2301      	movs	r3, #1
200074ac:	e000      	b.n	200074b0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
200074ae:	2300      	movs	r3, #0
200074b0:	2b00      	cmp	r3, #0
200074b2:	d043      	beq.n	2000753c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
200074b4:	68fb      	ldr	r3, [r7, #12]
200074b6:	681b      	ldr	r3, [r3, #0]
200074b8:	681b      	ldr	r3, [r3, #0]
200074ba:	f023 021e 	bic.w	r2, r3, #30
200074be:	68fb      	ldr	r3, [r7, #12]
200074c0:	681b      	ldr	r3, [r3, #0]
200074c2:	f042 0216 	orr.w	r2, r2, #22
200074c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
200074c8:	68fb      	ldr	r3, [r7, #12]
200074ca:	681b      	ldr	r3, [r3, #0]
200074cc:	695a      	ldr	r2, [r3, #20]
200074ce:	68fb      	ldr	r3, [r7, #12]
200074d0:	681b      	ldr	r3, [r3, #0]
200074d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
200074d6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
200074d8:	68fb      	ldr	r3, [r7, #12]
200074da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200074dc:	2b00      	cmp	r3, #0
200074de:	d103      	bne.n	200074e8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
200074e0:	68fb      	ldr	r3, [r7, #12]
200074e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200074e4:	2b00      	cmp	r3, #0
200074e6:	d043      	beq.n	20007570 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
200074e8:	68fb      	ldr	r3, [r7, #12]
200074ea:	681b      	ldr	r3, [r3, #0]
200074ec:	681a      	ldr	r2, [r3, #0]
200074ee:	68fb      	ldr	r3, [r7, #12]
200074f0:	681b      	ldr	r3, [r3, #0]
200074f2:	f042 0208 	orr.w	r2, r2, #8
200074f6:	601a      	str	r2, [r3, #0]
200074f8:	e03a      	b.n	20007570 <HAL_DMAEx_MultiBufferStart_IT+0x450>
200074fa:	bf00      	nop
200074fc:	40020010 	.word	0x40020010
20007500:	40020028 	.word	0x40020028
20007504:	40020040 	.word	0x40020040
20007508:	40020058 	.word	0x40020058
2000750c:	40020070 	.word	0x40020070
20007510:	40020088 	.word	0x40020088
20007514:	400200a0 	.word	0x400200a0
20007518:	400200b8 	.word	0x400200b8
2000751c:	40020410 	.word	0x40020410
20007520:	40020428 	.word	0x40020428
20007524:	40020440 	.word	0x40020440
20007528:	40020458 	.word	0x40020458
2000752c:	40020470 	.word	0x40020470
20007530:	40020488 	.word	0x40020488
20007534:	400204a0 	.word	0x400204a0
20007538:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
2000753c:	68fb      	ldr	r3, [r7, #12]
2000753e:	681b      	ldr	r3, [r3, #0]
20007540:	681b      	ldr	r3, [r3, #0]
20007542:	f023 020e 	bic.w	r2, r3, #14
20007546:	68fb      	ldr	r3, [r7, #12]
20007548:	681b      	ldr	r3, [r3, #0]
2000754a:	f042 020a 	orr.w	r2, r2, #10
2000754e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20007550:	68fb      	ldr	r3, [r7, #12]
20007552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20007554:	2b00      	cmp	r3, #0
20007556:	d103      	bne.n	20007560 <HAL_DMAEx_MultiBufferStart_IT+0x440>
20007558:	68fb      	ldr	r3, [r7, #12]
2000755a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2000755c:	2b00      	cmp	r3, #0
2000755e:	d007      	beq.n	20007570 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
20007560:	68fb      	ldr	r3, [r7, #12]
20007562:	681b      	ldr	r3, [r3, #0]
20007564:	681a      	ldr	r2, [r3, #0]
20007566:	68fb      	ldr	r3, [r7, #12]
20007568:	681b      	ldr	r3, [r3, #0]
2000756a:	f042 0204 	orr.w	r2, r2, #4
2000756e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
20007570:	68fb      	ldr	r3, [r7, #12]
20007572:	681b      	ldr	r3, [r3, #0]
20007574:	4a81      	ldr	r2, [pc, #516]	@ (2000777c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
20007576:	4293      	cmp	r3, r2
20007578:	d072      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2000757a:	68fb      	ldr	r3, [r7, #12]
2000757c:	681b      	ldr	r3, [r3, #0]
2000757e:	4a80      	ldr	r2, [pc, #512]	@ (20007780 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
20007580:	4293      	cmp	r3, r2
20007582:	d06d      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
20007584:	68fb      	ldr	r3, [r7, #12]
20007586:	681b      	ldr	r3, [r3, #0]
20007588:	4a7e      	ldr	r2, [pc, #504]	@ (20007784 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
2000758a:	4293      	cmp	r3, r2
2000758c:	d068      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2000758e:	68fb      	ldr	r3, [r7, #12]
20007590:	681b      	ldr	r3, [r3, #0]
20007592:	4a7d      	ldr	r2, [pc, #500]	@ (20007788 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
20007594:	4293      	cmp	r3, r2
20007596:	d063      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
20007598:	68fb      	ldr	r3, [r7, #12]
2000759a:	681b      	ldr	r3, [r3, #0]
2000759c:	4a7b      	ldr	r2, [pc, #492]	@ (2000778c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
2000759e:	4293      	cmp	r3, r2
200075a0:	d05e      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075a2:	68fb      	ldr	r3, [r7, #12]
200075a4:	681b      	ldr	r3, [r3, #0]
200075a6:	4a7a      	ldr	r2, [pc, #488]	@ (20007790 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
200075a8:	4293      	cmp	r3, r2
200075aa:	d059      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075ac:	68fb      	ldr	r3, [r7, #12]
200075ae:	681b      	ldr	r3, [r3, #0]
200075b0:	4a78      	ldr	r2, [pc, #480]	@ (20007794 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
200075b2:	4293      	cmp	r3, r2
200075b4:	d054      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075b6:	68fb      	ldr	r3, [r7, #12]
200075b8:	681b      	ldr	r3, [r3, #0]
200075ba:	4a77      	ldr	r2, [pc, #476]	@ (20007798 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
200075bc:	4293      	cmp	r3, r2
200075be:	d04f      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075c0:	68fb      	ldr	r3, [r7, #12]
200075c2:	681b      	ldr	r3, [r3, #0]
200075c4:	4a75      	ldr	r2, [pc, #468]	@ (2000779c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
200075c6:	4293      	cmp	r3, r2
200075c8:	d04a      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075ca:	68fb      	ldr	r3, [r7, #12]
200075cc:	681b      	ldr	r3, [r3, #0]
200075ce:	4a74      	ldr	r2, [pc, #464]	@ (200077a0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
200075d0:	4293      	cmp	r3, r2
200075d2:	d045      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075d4:	68fb      	ldr	r3, [r7, #12]
200075d6:	681b      	ldr	r3, [r3, #0]
200075d8:	4a72      	ldr	r2, [pc, #456]	@ (200077a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
200075da:	4293      	cmp	r3, r2
200075dc:	d040      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075de:	68fb      	ldr	r3, [r7, #12]
200075e0:	681b      	ldr	r3, [r3, #0]
200075e2:	4a71      	ldr	r2, [pc, #452]	@ (200077a8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
200075e4:	4293      	cmp	r3, r2
200075e6:	d03b      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075e8:	68fb      	ldr	r3, [r7, #12]
200075ea:	681b      	ldr	r3, [r3, #0]
200075ec:	4a6f      	ldr	r2, [pc, #444]	@ (200077ac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
200075ee:	4293      	cmp	r3, r2
200075f0:	d036      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075f2:	68fb      	ldr	r3, [r7, #12]
200075f4:	681b      	ldr	r3, [r3, #0]
200075f6:	4a6e      	ldr	r2, [pc, #440]	@ (200077b0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
200075f8:	4293      	cmp	r3, r2
200075fa:	d031      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
200075fc:	68fb      	ldr	r3, [r7, #12]
200075fe:	681b      	ldr	r3, [r3, #0]
20007600:	4a6c      	ldr	r2, [pc, #432]	@ (200077b4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
20007602:	4293      	cmp	r3, r2
20007604:	d02c      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
20007606:	68fb      	ldr	r3, [r7, #12]
20007608:	681b      	ldr	r3, [r3, #0]
2000760a:	4a6b      	ldr	r2, [pc, #428]	@ (200077b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
2000760c:	4293      	cmp	r3, r2
2000760e:	d027      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
20007610:	68fb      	ldr	r3, [r7, #12]
20007612:	681b      	ldr	r3, [r3, #0]
20007614:	4a69      	ldr	r2, [pc, #420]	@ (200077bc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
20007616:	4293      	cmp	r3, r2
20007618:	d022      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2000761a:	68fb      	ldr	r3, [r7, #12]
2000761c:	681b      	ldr	r3, [r3, #0]
2000761e:	4a68      	ldr	r2, [pc, #416]	@ (200077c0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
20007620:	4293      	cmp	r3, r2
20007622:	d01d      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
20007624:	68fb      	ldr	r3, [r7, #12]
20007626:	681b      	ldr	r3, [r3, #0]
20007628:	4a66      	ldr	r2, [pc, #408]	@ (200077c4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
2000762a:	4293      	cmp	r3, r2
2000762c:	d018      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2000762e:	68fb      	ldr	r3, [r7, #12]
20007630:	681b      	ldr	r3, [r3, #0]
20007632:	4a65      	ldr	r2, [pc, #404]	@ (200077c8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
20007634:	4293      	cmp	r3, r2
20007636:	d013      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
20007638:	68fb      	ldr	r3, [r7, #12]
2000763a:	681b      	ldr	r3, [r3, #0]
2000763c:	4a63      	ldr	r2, [pc, #396]	@ (200077cc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
2000763e:	4293      	cmp	r3, r2
20007640:	d00e      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
20007642:	68fb      	ldr	r3, [r7, #12]
20007644:	681b      	ldr	r3, [r3, #0]
20007646:	4a62      	ldr	r2, [pc, #392]	@ (200077d0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
20007648:	4293      	cmp	r3, r2
2000764a:	d009      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2000764c:	68fb      	ldr	r3, [r7, #12]
2000764e:	681b      	ldr	r3, [r3, #0]
20007650:	4a60      	ldr	r2, [pc, #384]	@ (200077d4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
20007652:	4293      	cmp	r3, r2
20007654:	d004      	beq.n	20007660 <HAL_DMAEx_MultiBufferStart_IT+0x540>
20007656:	68fb      	ldr	r3, [r7, #12]
20007658:	681b      	ldr	r3, [r3, #0]
2000765a:	4a5f      	ldr	r2, [pc, #380]	@ (200077d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
2000765c:	4293      	cmp	r3, r2
2000765e:	d101      	bne.n	20007664 <HAL_DMAEx_MultiBufferStart_IT+0x544>
20007660:	2301      	movs	r3, #1
20007662:	e000      	b.n	20007666 <HAL_DMAEx_MultiBufferStart_IT+0x546>
20007664:	2300      	movs	r3, #0
20007666:	2b00      	cmp	r3, #0
20007668:	d01a      	beq.n	200076a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
2000766a:	68fb      	ldr	r3, [r7, #12]
2000766c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2000766e:	681b      	ldr	r3, [r3, #0]
20007670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20007674:	2b00      	cmp	r3, #0
20007676:	d007      	beq.n	20007688 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
20007678:	68fb      	ldr	r3, [r7, #12]
2000767a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2000767c:	681a      	ldr	r2, [r3, #0]
2000767e:	68fb      	ldr	r3, [r7, #12]
20007680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20007682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
20007686:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
20007688:	68fb      	ldr	r3, [r7, #12]
2000768a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2000768c:	2b00      	cmp	r3, #0
2000768e:	d007      	beq.n	200076a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
20007690:	68fb      	ldr	r3, [r7, #12]
20007692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007694:	681a      	ldr	r2, [r3, #0]
20007696:	68fb      	ldr	r3, [r7, #12]
20007698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2000769a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
2000769e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
200076a0:	68fb      	ldr	r3, [r7, #12]
200076a2:	681b      	ldr	r3, [r3, #0]
200076a4:	4a35      	ldr	r2, [pc, #212]	@ (2000777c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
200076a6:	4293      	cmp	r3, r2
200076a8:	d04a      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076aa:	68fb      	ldr	r3, [r7, #12]
200076ac:	681b      	ldr	r3, [r3, #0]
200076ae:	4a34      	ldr	r2, [pc, #208]	@ (20007780 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
200076b0:	4293      	cmp	r3, r2
200076b2:	d045      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076b4:	68fb      	ldr	r3, [r7, #12]
200076b6:	681b      	ldr	r3, [r3, #0]
200076b8:	4a32      	ldr	r2, [pc, #200]	@ (20007784 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
200076ba:	4293      	cmp	r3, r2
200076bc:	d040      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076be:	68fb      	ldr	r3, [r7, #12]
200076c0:	681b      	ldr	r3, [r3, #0]
200076c2:	4a31      	ldr	r2, [pc, #196]	@ (20007788 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
200076c4:	4293      	cmp	r3, r2
200076c6:	d03b      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076c8:	68fb      	ldr	r3, [r7, #12]
200076ca:	681b      	ldr	r3, [r3, #0]
200076cc:	4a2f      	ldr	r2, [pc, #188]	@ (2000778c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
200076ce:	4293      	cmp	r3, r2
200076d0:	d036      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076d2:	68fb      	ldr	r3, [r7, #12]
200076d4:	681b      	ldr	r3, [r3, #0]
200076d6:	4a2e      	ldr	r2, [pc, #184]	@ (20007790 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
200076d8:	4293      	cmp	r3, r2
200076da:	d031      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076dc:	68fb      	ldr	r3, [r7, #12]
200076de:	681b      	ldr	r3, [r3, #0]
200076e0:	4a2c      	ldr	r2, [pc, #176]	@ (20007794 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
200076e2:	4293      	cmp	r3, r2
200076e4:	d02c      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076e6:	68fb      	ldr	r3, [r7, #12]
200076e8:	681b      	ldr	r3, [r3, #0]
200076ea:	4a2b      	ldr	r2, [pc, #172]	@ (20007798 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
200076ec:	4293      	cmp	r3, r2
200076ee:	d027      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076f0:	68fb      	ldr	r3, [r7, #12]
200076f2:	681b      	ldr	r3, [r3, #0]
200076f4:	4a29      	ldr	r2, [pc, #164]	@ (2000779c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
200076f6:	4293      	cmp	r3, r2
200076f8:	d022      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
200076fa:	68fb      	ldr	r3, [r7, #12]
200076fc:	681b      	ldr	r3, [r3, #0]
200076fe:	4a28      	ldr	r2, [pc, #160]	@ (200077a0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
20007700:	4293      	cmp	r3, r2
20007702:	d01d      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
20007704:	68fb      	ldr	r3, [r7, #12]
20007706:	681b      	ldr	r3, [r3, #0]
20007708:	4a26      	ldr	r2, [pc, #152]	@ (200077a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
2000770a:	4293      	cmp	r3, r2
2000770c:	d018      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2000770e:	68fb      	ldr	r3, [r7, #12]
20007710:	681b      	ldr	r3, [r3, #0]
20007712:	4a25      	ldr	r2, [pc, #148]	@ (200077a8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
20007714:	4293      	cmp	r3, r2
20007716:	d013      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
20007718:	68fb      	ldr	r3, [r7, #12]
2000771a:	681b      	ldr	r3, [r3, #0]
2000771c:	4a23      	ldr	r2, [pc, #140]	@ (200077ac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
2000771e:	4293      	cmp	r3, r2
20007720:	d00e      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
20007722:	68fb      	ldr	r3, [r7, #12]
20007724:	681b      	ldr	r3, [r3, #0]
20007726:	4a22      	ldr	r2, [pc, #136]	@ (200077b0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
20007728:	4293      	cmp	r3, r2
2000772a:	d009      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2000772c:	68fb      	ldr	r3, [r7, #12]
2000772e:	681b      	ldr	r3, [r3, #0]
20007730:	4a20      	ldr	r2, [pc, #128]	@ (200077b4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
20007732:	4293      	cmp	r3, r2
20007734:	d004      	beq.n	20007740 <HAL_DMAEx_MultiBufferStart_IT+0x620>
20007736:	68fb      	ldr	r3, [r7, #12]
20007738:	681b      	ldr	r3, [r3, #0]
2000773a:	4a1f      	ldr	r2, [pc, #124]	@ (200077b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
2000773c:	4293      	cmp	r3, r2
2000773e:	d108      	bne.n	20007752 <HAL_DMAEx_MultiBufferStart_IT+0x632>
20007740:	68fb      	ldr	r3, [r7, #12]
20007742:	681b      	ldr	r3, [r3, #0]
20007744:	681a      	ldr	r2, [r3, #0]
20007746:	68fb      	ldr	r3, [r7, #12]
20007748:	681b      	ldr	r3, [r3, #0]
2000774a:	f042 0201 	orr.w	r2, r2, #1
2000774e:	601a      	str	r2, [r3, #0]
20007750:	e00e      	b.n	20007770 <HAL_DMAEx_MultiBufferStart_IT+0x650>
20007752:	68fb      	ldr	r3, [r7, #12]
20007754:	681b      	ldr	r3, [r3, #0]
20007756:	681a      	ldr	r2, [r3, #0]
20007758:	68fb      	ldr	r3, [r7, #12]
2000775a:	681b      	ldr	r3, [r3, #0]
2000775c:	f042 0201 	orr.w	r2, r2, #1
20007760:	601a      	str	r2, [r3, #0]
20007762:	e005      	b.n	20007770 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
20007764:	68fb      	ldr	r3, [r7, #12]
20007766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
2000776a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
2000776c:	2301      	movs	r3, #1
2000776e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
20007770:	7dfb      	ldrb	r3, [r7, #23]
}
20007772:	4618      	mov	r0, r3
20007774:	3718      	adds	r7, #24
20007776:	46bd      	mov	sp, r7
20007778:	bd80      	pop	{r7, pc}
2000777a:	bf00      	nop
2000777c:	40020010 	.word	0x40020010
20007780:	40020028 	.word	0x40020028
20007784:	40020040 	.word	0x40020040
20007788:	40020058 	.word	0x40020058
2000778c:	40020070 	.word	0x40020070
20007790:	40020088 	.word	0x40020088
20007794:	400200a0 	.word	0x400200a0
20007798:	400200b8 	.word	0x400200b8
2000779c:	40020410 	.word	0x40020410
200077a0:	40020428 	.word	0x40020428
200077a4:	40020440 	.word	0x40020440
200077a8:	40020458 	.word	0x40020458
200077ac:	40020470 	.word	0x40020470
200077b0:	40020488 	.word	0x40020488
200077b4:	400204a0 	.word	0x400204a0
200077b8:	400204b8 	.word	0x400204b8
200077bc:	58025408 	.word	0x58025408
200077c0:	5802541c 	.word	0x5802541c
200077c4:	58025430 	.word	0x58025430
200077c8:	58025444 	.word	0x58025444
200077cc:	58025458 	.word	0x58025458
200077d0:	5802546c 	.word	0x5802546c
200077d4:	58025480 	.word	0x58025480
200077d8:	58025494 	.word	0x58025494

200077dc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
200077dc:	b480      	push	{r7}
200077de:	b085      	sub	sp, #20
200077e0:	af00      	add	r7, sp, #0
200077e2:	60f8      	str	r0, [r7, #12]
200077e4:	60b9      	str	r1, [r7, #8]
200077e6:	4613      	mov	r3, r2
200077e8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
200077ea:	68fb      	ldr	r3, [r7, #12]
200077ec:	681b      	ldr	r3, [r3, #0]
200077ee:	4a39      	ldr	r2, [pc, #228]	@ (200078d4 <HAL_DMAEx_ChangeMemory+0xf8>)
200077f0:	4293      	cmp	r3, r2
200077f2:	d04a      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
200077f4:	68fb      	ldr	r3, [r7, #12]
200077f6:	681b      	ldr	r3, [r3, #0]
200077f8:	4a37      	ldr	r2, [pc, #220]	@ (200078d8 <HAL_DMAEx_ChangeMemory+0xfc>)
200077fa:	4293      	cmp	r3, r2
200077fc:	d045      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
200077fe:	68fb      	ldr	r3, [r7, #12]
20007800:	681b      	ldr	r3, [r3, #0]
20007802:	4a36      	ldr	r2, [pc, #216]	@ (200078dc <HAL_DMAEx_ChangeMemory+0x100>)
20007804:	4293      	cmp	r3, r2
20007806:	d040      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007808:	68fb      	ldr	r3, [r7, #12]
2000780a:	681b      	ldr	r3, [r3, #0]
2000780c:	4a34      	ldr	r2, [pc, #208]	@ (200078e0 <HAL_DMAEx_ChangeMemory+0x104>)
2000780e:	4293      	cmp	r3, r2
20007810:	d03b      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007812:	68fb      	ldr	r3, [r7, #12]
20007814:	681b      	ldr	r3, [r3, #0]
20007816:	4a33      	ldr	r2, [pc, #204]	@ (200078e4 <HAL_DMAEx_ChangeMemory+0x108>)
20007818:	4293      	cmp	r3, r2
2000781a:	d036      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
2000781c:	68fb      	ldr	r3, [r7, #12]
2000781e:	681b      	ldr	r3, [r3, #0]
20007820:	4a31      	ldr	r2, [pc, #196]	@ (200078e8 <HAL_DMAEx_ChangeMemory+0x10c>)
20007822:	4293      	cmp	r3, r2
20007824:	d031      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007826:	68fb      	ldr	r3, [r7, #12]
20007828:	681b      	ldr	r3, [r3, #0]
2000782a:	4a30      	ldr	r2, [pc, #192]	@ (200078ec <HAL_DMAEx_ChangeMemory+0x110>)
2000782c:	4293      	cmp	r3, r2
2000782e:	d02c      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007830:	68fb      	ldr	r3, [r7, #12]
20007832:	681b      	ldr	r3, [r3, #0]
20007834:	4a2e      	ldr	r2, [pc, #184]	@ (200078f0 <HAL_DMAEx_ChangeMemory+0x114>)
20007836:	4293      	cmp	r3, r2
20007838:	d027      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
2000783a:	68fb      	ldr	r3, [r7, #12]
2000783c:	681b      	ldr	r3, [r3, #0]
2000783e:	4a2d      	ldr	r2, [pc, #180]	@ (200078f4 <HAL_DMAEx_ChangeMemory+0x118>)
20007840:	4293      	cmp	r3, r2
20007842:	d022      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007844:	68fb      	ldr	r3, [r7, #12]
20007846:	681b      	ldr	r3, [r3, #0]
20007848:	4a2b      	ldr	r2, [pc, #172]	@ (200078f8 <HAL_DMAEx_ChangeMemory+0x11c>)
2000784a:	4293      	cmp	r3, r2
2000784c:	d01d      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
2000784e:	68fb      	ldr	r3, [r7, #12]
20007850:	681b      	ldr	r3, [r3, #0]
20007852:	4a2a      	ldr	r2, [pc, #168]	@ (200078fc <HAL_DMAEx_ChangeMemory+0x120>)
20007854:	4293      	cmp	r3, r2
20007856:	d018      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007858:	68fb      	ldr	r3, [r7, #12]
2000785a:	681b      	ldr	r3, [r3, #0]
2000785c:	4a28      	ldr	r2, [pc, #160]	@ (20007900 <HAL_DMAEx_ChangeMemory+0x124>)
2000785e:	4293      	cmp	r3, r2
20007860:	d013      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007862:	68fb      	ldr	r3, [r7, #12]
20007864:	681b      	ldr	r3, [r3, #0]
20007866:	4a27      	ldr	r2, [pc, #156]	@ (20007904 <HAL_DMAEx_ChangeMemory+0x128>)
20007868:	4293      	cmp	r3, r2
2000786a:	d00e      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
2000786c:	68fb      	ldr	r3, [r7, #12]
2000786e:	681b      	ldr	r3, [r3, #0]
20007870:	4a25      	ldr	r2, [pc, #148]	@ (20007908 <HAL_DMAEx_ChangeMemory+0x12c>)
20007872:	4293      	cmp	r3, r2
20007874:	d009      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007876:	68fb      	ldr	r3, [r7, #12]
20007878:	681b      	ldr	r3, [r3, #0]
2000787a:	4a24      	ldr	r2, [pc, #144]	@ (2000790c <HAL_DMAEx_ChangeMemory+0x130>)
2000787c:	4293      	cmp	r3, r2
2000787e:	d004      	beq.n	2000788a <HAL_DMAEx_ChangeMemory+0xae>
20007880:	68fb      	ldr	r3, [r7, #12]
20007882:	681b      	ldr	r3, [r3, #0]
20007884:	4a22      	ldr	r2, [pc, #136]	@ (20007910 <HAL_DMAEx_ChangeMemory+0x134>)
20007886:	4293      	cmp	r3, r2
20007888:	d101      	bne.n	2000788e <HAL_DMAEx_ChangeMemory+0xb2>
2000788a:	2301      	movs	r3, #1
2000788c:	e000      	b.n	20007890 <HAL_DMAEx_ChangeMemory+0xb4>
2000788e:	2300      	movs	r3, #0
20007890:	2b00      	cmp	r3, #0
20007892:	d00c      	beq.n	200078ae <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
20007894:	79fb      	ldrb	r3, [r7, #7]
20007896:	2b00      	cmp	r3, #0
20007898:	d104      	bne.n	200078a4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
2000789a:	68fb      	ldr	r3, [r7, #12]
2000789c:	681b      	ldr	r3, [r3, #0]
2000789e:	68ba      	ldr	r2, [r7, #8]
200078a0:	60da      	str	r2, [r3, #12]
200078a2:	e010      	b.n	200078c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
200078a4:	68fb      	ldr	r3, [r7, #12]
200078a6:	681b      	ldr	r3, [r3, #0]
200078a8:	68ba      	ldr	r2, [r7, #8]
200078aa:	611a      	str	r2, [r3, #16]
200078ac:	e00b      	b.n	200078c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
200078ae:	79fb      	ldrb	r3, [r7, #7]
200078b0:	2b00      	cmp	r3, #0
200078b2:	d104      	bne.n	200078be <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
200078b4:	68fb      	ldr	r3, [r7, #12]
200078b6:	681b      	ldr	r3, [r3, #0]
200078b8:	68ba      	ldr	r2, [r7, #8]
200078ba:	60da      	str	r2, [r3, #12]
200078bc:	e003      	b.n	200078c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
200078be:	68fb      	ldr	r3, [r7, #12]
200078c0:	681b      	ldr	r3, [r3, #0]
200078c2:	68ba      	ldr	r2, [r7, #8]
200078c4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
200078c6:	2300      	movs	r3, #0
}
200078c8:	4618      	mov	r0, r3
200078ca:	3714      	adds	r7, #20
200078cc:	46bd      	mov	sp, r7
200078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200078d2:	4770      	bx	lr
200078d4:	40020010 	.word	0x40020010
200078d8:	40020028 	.word	0x40020028
200078dc:	40020040 	.word	0x40020040
200078e0:	40020058 	.word	0x40020058
200078e4:	40020070 	.word	0x40020070
200078e8:	40020088 	.word	0x40020088
200078ec:	400200a0 	.word	0x400200a0
200078f0:	400200b8 	.word	0x400200b8
200078f4:	40020410 	.word	0x40020410
200078f8:	40020428 	.word	0x40020428
200078fc:	40020440 	.word	0x40020440
20007900:	40020458 	.word	0x40020458
20007904:	40020470 	.word	0x40020470
20007908:	40020488 	.word	0x40020488
2000790c:	400204a0 	.word	0x400204a0
20007910:	400204b8 	.word	0x400204b8

20007914 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
20007914:	b480      	push	{r7}
20007916:	b085      	sub	sp, #20
20007918:	af00      	add	r7, sp, #0
2000791a:	6078      	str	r0, [r7, #4]
2000791c:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
2000791e:	2300      	movs	r3, #0
20007920:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
20007922:	2300      	movs	r3, #0
20007924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
20007926:	683b      	ldr	r3, [r7, #0]
20007928:	7a1b      	ldrb	r3, [r3, #8]
2000792a:	2b01      	cmp	r3, #1
2000792c:	d154      	bne.n	200079d8 <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2000792e:	687b      	ldr	r3, [r7, #4]
20007930:	681b      	ldr	r3, [r3, #0]
20007932:	4a4b      	ldr	r2, [pc, #300]	@ (20007a60 <HAL_DMAEx_ConfigMuxSync+0x14c>)
20007934:	4293      	cmp	r3, r2
20007936:	d049      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
20007938:	687b      	ldr	r3, [r7, #4]
2000793a:	681b      	ldr	r3, [r3, #0]
2000793c:	4a49      	ldr	r2, [pc, #292]	@ (20007a64 <HAL_DMAEx_ConfigMuxSync+0x150>)
2000793e:	4293      	cmp	r3, r2
20007940:	d044      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
20007942:	687b      	ldr	r3, [r7, #4]
20007944:	681b      	ldr	r3, [r3, #0]
20007946:	4a48      	ldr	r2, [pc, #288]	@ (20007a68 <HAL_DMAEx_ConfigMuxSync+0x154>)
20007948:	4293      	cmp	r3, r2
2000794a:	d03f      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
2000794c:	687b      	ldr	r3, [r7, #4]
2000794e:	681b      	ldr	r3, [r3, #0]
20007950:	4a46      	ldr	r2, [pc, #280]	@ (20007a6c <HAL_DMAEx_ConfigMuxSync+0x158>)
20007952:	4293      	cmp	r3, r2
20007954:	d03a      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
20007956:	687b      	ldr	r3, [r7, #4]
20007958:	681b      	ldr	r3, [r3, #0]
2000795a:	4a45      	ldr	r2, [pc, #276]	@ (20007a70 <HAL_DMAEx_ConfigMuxSync+0x15c>)
2000795c:	4293      	cmp	r3, r2
2000795e:	d035      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
20007960:	687b      	ldr	r3, [r7, #4]
20007962:	681b      	ldr	r3, [r3, #0]
20007964:	4a43      	ldr	r2, [pc, #268]	@ (20007a74 <HAL_DMAEx_ConfigMuxSync+0x160>)
20007966:	4293      	cmp	r3, r2
20007968:	d030      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
2000796a:	687b      	ldr	r3, [r7, #4]
2000796c:	681b      	ldr	r3, [r3, #0]
2000796e:	4a42      	ldr	r2, [pc, #264]	@ (20007a78 <HAL_DMAEx_ConfigMuxSync+0x164>)
20007970:	4293      	cmp	r3, r2
20007972:	d02b      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
20007974:	687b      	ldr	r3, [r7, #4]
20007976:	681b      	ldr	r3, [r3, #0]
20007978:	4a40      	ldr	r2, [pc, #256]	@ (20007a7c <HAL_DMAEx_ConfigMuxSync+0x168>)
2000797a:	4293      	cmp	r3, r2
2000797c:	d026      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
2000797e:	687b      	ldr	r3, [r7, #4]
20007980:	681b      	ldr	r3, [r3, #0]
20007982:	4a3f      	ldr	r2, [pc, #252]	@ (20007a80 <HAL_DMAEx_ConfigMuxSync+0x16c>)
20007984:	4293      	cmp	r3, r2
20007986:	d021      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
20007988:	687b      	ldr	r3, [r7, #4]
2000798a:	681b      	ldr	r3, [r3, #0]
2000798c:	4a3d      	ldr	r2, [pc, #244]	@ (20007a84 <HAL_DMAEx_ConfigMuxSync+0x170>)
2000798e:	4293      	cmp	r3, r2
20007990:	d01c      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
20007992:	687b      	ldr	r3, [r7, #4]
20007994:	681b      	ldr	r3, [r3, #0]
20007996:	4a3c      	ldr	r2, [pc, #240]	@ (20007a88 <HAL_DMAEx_ConfigMuxSync+0x174>)
20007998:	4293      	cmp	r3, r2
2000799a:	d017      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
2000799c:	687b      	ldr	r3, [r7, #4]
2000799e:	681b      	ldr	r3, [r3, #0]
200079a0:	4a3a      	ldr	r2, [pc, #232]	@ (20007a8c <HAL_DMAEx_ConfigMuxSync+0x178>)
200079a2:	4293      	cmp	r3, r2
200079a4:	d012      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
200079a6:	687b      	ldr	r3, [r7, #4]
200079a8:	681b      	ldr	r3, [r3, #0]
200079aa:	4a39      	ldr	r2, [pc, #228]	@ (20007a90 <HAL_DMAEx_ConfigMuxSync+0x17c>)
200079ac:	4293      	cmp	r3, r2
200079ae:	d00d      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
200079b0:	687b      	ldr	r3, [r7, #4]
200079b2:	681b      	ldr	r3, [r3, #0]
200079b4:	4a37      	ldr	r2, [pc, #220]	@ (20007a94 <HAL_DMAEx_ConfigMuxSync+0x180>)
200079b6:	4293      	cmp	r3, r2
200079b8:	d008      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
200079ba:	687b      	ldr	r3, [r7, #4]
200079bc:	681b      	ldr	r3, [r3, #0]
200079be:	4a36      	ldr	r2, [pc, #216]	@ (20007a98 <HAL_DMAEx_ConfigMuxSync+0x184>)
200079c0:	4293      	cmp	r3, r2
200079c2:	d003      	beq.n	200079cc <HAL_DMAEx_ConfigMuxSync+0xb8>
200079c4:	687b      	ldr	r3, [r7, #4]
200079c6:	681b      	ldr	r3, [r3, #0]
200079c8:	4a34      	ldr	r2, [pc, #208]	@ (20007a9c <HAL_DMAEx_ConfigMuxSync+0x188>)
200079ca:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
200079cc:	683b      	ldr	r3, [r7, #0]
200079ce:	681b      	ldr	r3, [r3, #0]
200079d0:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
200079d2:	683b      	ldr	r3, [r7, #0]
200079d4:	685b      	ldr	r3, [r3, #4]
200079d6:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
200079d8:	687b      	ldr	r3, [r7, #4]
200079da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
200079de:	b2db      	uxtb	r3, r3
200079e0:	2b01      	cmp	r3, #1
200079e2:	d131      	bne.n	20007a48 <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
200079e4:	687b      	ldr	r3, [r7, #4]
200079e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
200079ea:	2b01      	cmp	r3, #1
200079ec:	d101      	bne.n	200079f2 <HAL_DMAEx_ConfigMuxSync+0xde>
200079ee:	2302      	movs	r3, #2
200079f0:	e02f      	b.n	20007a52 <HAL_DMAEx_ConfigMuxSync+0x13e>
200079f2:	687b      	ldr	r3, [r7, #4]
200079f4:	2201      	movs	r2, #1
200079f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
200079fa:	687b      	ldr	r3, [r7, #4]
200079fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200079fe:	681a      	ldr	r2, [r3, #0]
20007a00:	687b      	ldr	r3, [r7, #4]
20007a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20007a04:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
20007a08:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
20007a0a:	687b      	ldr	r3, [r7, #4]
20007a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20007a0e:	681b      	ldr	r3, [r3, #0]
20007a10:	b2d9      	uxtb	r1, r3
20007a12:	68fb      	ldr	r3, [r7, #12]
20007a14:	061a      	lsls	r2, r3, #24
20007a16:	683b      	ldr	r3, [r7, #0]
20007a18:	68db      	ldr	r3, [r3, #12]
20007a1a:	3b01      	subs	r3, #1
20007a1c:	04db      	lsls	r3, r3, #19
20007a1e:	431a      	orrs	r2, r3
20007a20:	68bb      	ldr	r3, [r7, #8]
20007a22:	431a      	orrs	r2, r3
20007a24:	683b      	ldr	r3, [r7, #0]
20007a26:	7a1b      	ldrb	r3, [r3, #8]
20007a28:	041b      	lsls	r3, r3, #16
20007a2a:	431a      	orrs	r2, r3
20007a2c:	683b      	ldr	r3, [r7, #0]
20007a2e:	7a5b      	ldrb	r3, [r3, #9]
20007a30:	025b      	lsls	r3, r3, #9
20007a32:	431a      	orrs	r2, r3
20007a34:	687b      	ldr	r3, [r7, #4]
20007a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20007a38:	430a      	orrs	r2, r1
20007a3a:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
20007a3c:	687b      	ldr	r3, [r7, #4]
20007a3e:	2200      	movs	r2, #0
20007a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
20007a44:	2300      	movs	r3, #0
20007a46:	e004      	b.n	20007a52 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
20007a48:	687b      	ldr	r3, [r7, #4]
20007a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
20007a4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
20007a50:	2301      	movs	r3, #1
  }
}
20007a52:	4618      	mov	r0, r3
20007a54:	3714      	adds	r7, #20
20007a56:	46bd      	mov	sp, r7
20007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
20007a5c:	4770      	bx	lr
20007a5e:	bf00      	nop
20007a60:	40020010 	.word	0x40020010
20007a64:	40020028 	.word	0x40020028
20007a68:	40020040 	.word	0x40020040
20007a6c:	40020058 	.word	0x40020058
20007a70:	40020070 	.word	0x40020070
20007a74:	40020088 	.word	0x40020088
20007a78:	400200a0 	.word	0x400200a0
20007a7c:	400200b8 	.word	0x400200b8
20007a80:	40020410 	.word	0x40020410
20007a84:	40020428 	.word	0x40020428
20007a88:	40020440 	.word	0x40020440
20007a8c:	40020458 	.word	0x40020458
20007a90:	40020470 	.word	0x40020470
20007a94:	40020488 	.word	0x40020488
20007a98:	400204a0 	.word	0x400204a0
20007a9c:	400204b8 	.word	0x400204b8

20007aa0 <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *         contains the request generator parameters.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
20007aa0:	b480      	push	{r7}
20007aa2:	b085      	sub	sp, #20
20007aa4:	af00      	add	r7, sp, #0
20007aa6:	6078      	str	r0, [r7, #4]
20007aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
20007aaa:	687b      	ldr	r3, [r7, #4]
20007aac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20007ab0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
20007ab2:	687b      	ldr	r3, [r7, #4]
20007ab4:	681b      	ldr	r3, [r3, #0]
20007ab6:	4a46      	ldr	r2, [pc, #280]	@ (20007bd0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x130>)
20007ab8:	4293      	cmp	r3, r2
20007aba:	d049      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007abc:	687b      	ldr	r3, [r7, #4]
20007abe:	681b      	ldr	r3, [r3, #0]
20007ac0:	4a44      	ldr	r2, [pc, #272]	@ (20007bd4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x134>)
20007ac2:	4293      	cmp	r3, r2
20007ac4:	d044      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007ac6:	687b      	ldr	r3, [r7, #4]
20007ac8:	681b      	ldr	r3, [r3, #0]
20007aca:	4a43      	ldr	r2, [pc, #268]	@ (20007bd8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x138>)
20007acc:	4293      	cmp	r3, r2
20007ace:	d03f      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007ad0:	687b      	ldr	r3, [r7, #4]
20007ad2:	681b      	ldr	r3, [r3, #0]
20007ad4:	4a41      	ldr	r2, [pc, #260]	@ (20007bdc <HAL_DMAEx_ConfigMuxRequestGenerator+0x13c>)
20007ad6:	4293      	cmp	r3, r2
20007ad8:	d03a      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007ada:	687b      	ldr	r3, [r7, #4]
20007adc:	681b      	ldr	r3, [r3, #0]
20007ade:	4a40      	ldr	r2, [pc, #256]	@ (20007be0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x140>)
20007ae0:	4293      	cmp	r3, r2
20007ae2:	d035      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007ae4:	687b      	ldr	r3, [r7, #4]
20007ae6:	681b      	ldr	r3, [r3, #0]
20007ae8:	4a3e      	ldr	r2, [pc, #248]	@ (20007be4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x144>)
20007aea:	4293      	cmp	r3, r2
20007aec:	d030      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007aee:	687b      	ldr	r3, [r7, #4]
20007af0:	681b      	ldr	r3, [r3, #0]
20007af2:	4a3d      	ldr	r2, [pc, #244]	@ (20007be8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x148>)
20007af4:	4293      	cmp	r3, r2
20007af6:	d02b      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007af8:	687b      	ldr	r3, [r7, #4]
20007afa:	681b      	ldr	r3, [r3, #0]
20007afc:	4a3b      	ldr	r2, [pc, #236]	@ (20007bec <HAL_DMAEx_ConfigMuxRequestGenerator+0x14c>)
20007afe:	4293      	cmp	r3, r2
20007b00:	d026      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007b02:	687b      	ldr	r3, [r7, #4]
20007b04:	681b      	ldr	r3, [r3, #0]
20007b06:	4a3a      	ldr	r2, [pc, #232]	@ (20007bf0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x150>)
20007b08:	4293      	cmp	r3, r2
20007b0a:	d021      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007b0c:	687b      	ldr	r3, [r7, #4]
20007b0e:	681b      	ldr	r3, [r3, #0]
20007b10:	4a38      	ldr	r2, [pc, #224]	@ (20007bf4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x154>)
20007b12:	4293      	cmp	r3, r2
20007b14:	d01c      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007b16:	687b      	ldr	r3, [r7, #4]
20007b18:	681b      	ldr	r3, [r3, #0]
20007b1a:	4a37      	ldr	r2, [pc, #220]	@ (20007bf8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x158>)
20007b1c:	4293      	cmp	r3, r2
20007b1e:	d017      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007b20:	687b      	ldr	r3, [r7, #4]
20007b22:	681b      	ldr	r3, [r3, #0]
20007b24:	4a35      	ldr	r2, [pc, #212]	@ (20007bfc <HAL_DMAEx_ConfigMuxRequestGenerator+0x15c>)
20007b26:	4293      	cmp	r3, r2
20007b28:	d012      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007b2a:	687b      	ldr	r3, [r7, #4]
20007b2c:	681b      	ldr	r3, [r3, #0]
20007b2e:	4a34      	ldr	r2, [pc, #208]	@ (20007c00 <HAL_DMAEx_ConfigMuxRequestGenerator+0x160>)
20007b30:	4293      	cmp	r3, r2
20007b32:	d00d      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007b34:	687b      	ldr	r3, [r7, #4]
20007b36:	681b      	ldr	r3, [r3, #0]
20007b38:	4a32      	ldr	r2, [pc, #200]	@ (20007c04 <HAL_DMAEx_ConfigMuxRequestGenerator+0x164>)
20007b3a:	4293      	cmp	r3, r2
20007b3c:	d008      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007b3e:	687b      	ldr	r3, [r7, #4]
20007b40:	681b      	ldr	r3, [r3, #0]
20007b42:	4a31      	ldr	r2, [pc, #196]	@ (20007c08 <HAL_DMAEx_ConfigMuxRequestGenerator+0x168>)
20007b44:	4293      	cmp	r3, r2
20007b46:	d003      	beq.n	20007b50 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
20007b48:	687b      	ldr	r3, [r7, #4]
20007b4a:	681b      	ldr	r3, [r3, #0]
20007b4c:	4a2f      	ldr	r2, [pc, #188]	@ (20007c0c <HAL_DMAEx_ConfigMuxRequestGenerator+0x16c>)
20007b4e:	4293      	cmp	r3, r2
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if(hdma->DMAmuxRequestGen == 0U)
20007b50:	687b      	ldr	r3, [r7, #4]
20007b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007b54:	2b00      	cmp	r3, #0
20007b56:	d105      	bne.n	20007b64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xc4>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
20007b58:	687b      	ldr	r3, [r7, #4]
20007b5a:	2240      	movs	r2, #64	@ 0x40
20007b5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* error status */
    status = HAL_ERROR;
20007b5e:	2301      	movs	r3, #1
20007b60:	73fb      	strb	r3, [r7, #15]
20007b62:	e02e      	b.n	20007bc2 <HAL_DMAEx_ConfigMuxRequestGenerator+0x122>
  }
  else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
20007b64:	687b      	ldr	r3, [r7, #4]
20007b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007b68:	681b      	ldr	r3, [r3, #0]
20007b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20007b6e:	2b00      	cmp	r3, #0
20007b70:	d121      	bne.n	20007bb6 <HAL_DMAEx_ConfigMuxRequestGenerator+0x116>
20007b72:	7bbb      	ldrb	r3, [r7, #14]
20007b74:	2b01      	cmp	r3, #1
20007b76:	d11e      	bne.n	20007bb6 <HAL_DMAEx_ConfigMuxRequestGenerator+0x116>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
20007b78:	687b      	ldr	r3, [r7, #4]
20007b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
20007b7e:	2b01      	cmp	r3, #1
20007b80:	d101      	bne.n	20007b86 <HAL_DMAEx_ConfigMuxRequestGenerator+0xe6>
20007b82:	2302      	movs	r3, #2
20007b84:	e01e      	b.n	20007bc4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
20007b86:	687b      	ldr	r3, [r7, #4]
20007b88:	2201      	movs	r2, #1
20007b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
20007b8e:	683b      	ldr	r3, [r7, #0]
20007b90:	681a      	ldr	r2, [r3, #0]
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
20007b92:	683b      	ldr	r3, [r7, #0]
20007b94:	689b      	ldr	r3, [r3, #8]
20007b96:	3b01      	subs	r3, #1
20007b98:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
20007b9a:	ea42 0103 	orr.w	r1, r2, r3
                                  pRequestGeneratorConfig->Polarity;
20007b9e:	683b      	ldr	r3, [r7, #0]
20007ba0:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
20007ba2:	687b      	ldr	r3, [r7, #4]
20007ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
20007ba6:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
20007ba8:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_UNLOCK(hdma);
20007baa:	687b      	ldr	r3, [r7, #4]
20007bac:	2200      	movs	r2, #0
20007bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
20007bb2:	2300      	movs	r3, #0
20007bb4:	e006      	b.n	20007bc4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
20007bb6:	687b      	ldr	r3, [r7, #4]
20007bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
20007bbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* error status */
    status = HAL_ERROR;
20007bbe:	2301      	movs	r3, #1
20007bc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
20007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
20007bc4:	4618      	mov	r0, r3
20007bc6:	3714      	adds	r7, #20
20007bc8:	46bd      	mov	sp, r7
20007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
20007bce:	4770      	bx	lr
20007bd0:	40020010 	.word	0x40020010
20007bd4:	40020028 	.word	0x40020028
20007bd8:	40020040 	.word	0x40020040
20007bdc:	40020058 	.word	0x40020058
20007be0:	40020070 	.word	0x40020070
20007be4:	40020088 	.word	0x40020088
20007be8:	400200a0 	.word	0x400200a0
20007bec:	400200b8 	.word	0x400200b8
20007bf0:	40020410 	.word	0x40020410
20007bf4:	40020428 	.word	0x40020428
20007bf8:	40020440 	.word	0x40020440
20007bfc:	40020458 	.word	0x40020458
20007c00:	40020470 	.word	0x40020470
20007c04:	40020488 	.word	0x40020488
20007c08:	400204a0 	.word	0x400204a0
20007c0c:	400204b8 	.word	0x400204b8

20007c10 <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
20007c10:	b480      	push	{r7}
20007c12:	b083      	sub	sp, #12
20007c14:	af00      	add	r7, sp, #0
20007c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
20007c18:	687b      	ldr	r3, [r7, #4]
20007c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20007c1e:	b2db      	uxtb	r3, r3
20007c20:	2b00      	cmp	r3, #0
20007c22:	d00d      	beq.n	20007c40 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
20007c24:	687b      	ldr	r3, [r7, #4]
20007c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007c28:	2b00      	cmp	r3, #0
20007c2a:	d009      	beq.n	20007c40 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
20007c2c:	687b      	ldr	r3, [r7, #4]
20007c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007c30:	681a      	ldr	r2, [r3, #0]
20007c32:	687b      	ldr	r3, [r7, #4]
20007c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007c36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
20007c3a:	601a      	str	r2, [r3, #0]

   return HAL_OK;
20007c3c:	2300      	movs	r3, #0
20007c3e:	e000      	b.n	20007c42 <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
20007c40:	2301      	movs	r3, #1
 }
}
20007c42:	4618      	mov	r0, r3
20007c44:	370c      	adds	r7, #12
20007c46:	46bd      	mov	sp, r7
20007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
20007c4c:	4770      	bx	lr

20007c4e <HAL_DMAEx_DisableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
20007c4e:	b480      	push	{r7}
20007c50:	b083      	sub	sp, #12
20007c52:	af00      	add	r7, sp, #0
20007c54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
20007c56:	687b      	ldr	r3, [r7, #4]
20007c58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20007c5c:	b2db      	uxtb	r3, r3
20007c5e:	2b00      	cmp	r3, #0
20007c60:	d00d      	beq.n	20007c7e <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
20007c62:	687b      	ldr	r3, [r7, #4]
20007c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007c66:	2b00      	cmp	r3, #0
20007c68:	d009      	beq.n	20007c7e <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
  {
    /* Disable the request generator*/
    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_GE;
20007c6a:	687b      	ldr	r3, [r7, #4]
20007c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007c6e:	681a      	ldr	r2, [r3, #0]
20007c70:	687b      	ldr	r3, [r7, #4]
20007c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007c74:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
20007c78:	601a      	str	r2, [r3, #0]

   return HAL_OK;
20007c7a:	2300      	movs	r3, #0
20007c7c:	e000      	b.n	20007c80 <HAL_DMAEx_DisableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
20007c7e:	2301      	movs	r3, #1
 }
}
20007c80:	4618      	mov	r0, r3
20007c82:	370c      	adds	r7, #12
20007c84:	46bd      	mov	sp, r7
20007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
20007c8a:	4770      	bx	lr

20007c8c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
20007c8c:	b580      	push	{r7, lr}
20007c8e:	b082      	sub	sp, #8
20007c90:	af00      	add	r7, sp, #0
20007c92:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
20007c94:	687b      	ldr	r3, [r7, #4]
20007c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20007c98:	681a      	ldr	r2, [r3, #0]
20007c9a:	687b      	ldr	r3, [r7, #4]
20007c9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20007c9e:	4013      	ands	r3, r2
20007ca0:	2b00      	cmp	r3, #0
20007ca2:	d01a      	beq.n	20007cda <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
20007ca4:	687b      	ldr	r3, [r7, #4]
20007ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20007ca8:	681a      	ldr	r2, [r3, #0]
20007caa:	687b      	ldr	r3, [r7, #4]
20007cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20007cae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
20007cb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
20007cb4:	687b      	ldr	r3, [r7, #4]
20007cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20007cb8:	687a      	ldr	r2, [r7, #4]
20007cba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
20007cbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
20007cbe:	687b      	ldr	r3, [r7, #4]
20007cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20007cc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
20007cc6:	687b      	ldr	r3, [r7, #4]
20007cc8:	655a      	str	r2, [r3, #84]	@ 0x54

    if(hdma->XferErrorCallback != NULL)
20007cca:	687b      	ldr	r3, [r7, #4]
20007ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20007cce:	2b00      	cmp	r3, #0
20007cd0:	d003      	beq.n	20007cda <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
20007cd2:	687b      	ldr	r3, [r7, #4]
20007cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20007cd6:	6878      	ldr	r0, [r7, #4]
20007cd8:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
20007cda:	687b      	ldr	r3, [r7, #4]
20007cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007cde:	2b00      	cmp	r3, #0
20007ce0:	d022      	beq.n	20007d28 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
20007ce2:	687b      	ldr	r3, [r7, #4]
20007ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007ce6:	681a      	ldr	r2, [r3, #0]
20007ce8:	687b      	ldr	r3, [r7, #4]
20007cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007cec:	4013      	ands	r3, r2
20007cee:	2b00      	cmp	r3, #0
20007cf0:	d01a      	beq.n	20007d28 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
20007cf2:	687b      	ldr	r3, [r7, #4]
20007cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007cf6:	681a      	ldr	r2, [r3, #0]
20007cf8:	687b      	ldr	r3, [r7, #4]
20007cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20007cfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
20007d00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
20007d02:	687b      	ldr	r3, [r7, #4]
20007d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007d06:	687a      	ldr	r2, [r7, #4]
20007d08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
20007d0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
20007d0c:	687b      	ldr	r3, [r7, #4]
20007d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20007d10:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
20007d14:	687b      	ldr	r3, [r7, #4]
20007d16:	655a      	str	r2, [r3, #84]	@ 0x54

      if(hdma->XferErrorCallback != NULL)
20007d18:	687b      	ldr	r3, [r7, #4]
20007d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20007d1c:	2b00      	cmp	r3, #0
20007d1e:	d003      	beq.n	20007d28 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
20007d20:	687b      	ldr	r3, [r7, #4]
20007d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20007d24:	6878      	ldr	r0, [r7, #4]
20007d26:	4798      	blx	r3
      }
    }
  }
}
20007d28:	bf00      	nop
20007d2a:	3708      	adds	r7, #8
20007d2c:	46bd      	mov	sp, r7
20007d2e:	bd80      	pop	{r7, pc}

20007d30 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20007d30:	b480      	push	{r7}
20007d32:	b085      	sub	sp, #20
20007d34:	af00      	add	r7, sp, #0
20007d36:	60f8      	str	r0, [r7, #12]
20007d38:	60b9      	str	r1, [r7, #8]
20007d3a:	607a      	str	r2, [r7, #4]
20007d3c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
20007d3e:	68fb      	ldr	r3, [r7, #12]
20007d40:	681b      	ldr	r3, [r3, #0]
20007d42:	4a46      	ldr	r2, [pc, #280]	@ (20007e5c <DMA_MultiBufferSetConfig+0x12c>)
20007d44:	4293      	cmp	r3, r2
20007d46:	d04a      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d48:	68fb      	ldr	r3, [r7, #12]
20007d4a:	681b      	ldr	r3, [r3, #0]
20007d4c:	4a44      	ldr	r2, [pc, #272]	@ (20007e60 <DMA_MultiBufferSetConfig+0x130>)
20007d4e:	4293      	cmp	r3, r2
20007d50:	d045      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d52:	68fb      	ldr	r3, [r7, #12]
20007d54:	681b      	ldr	r3, [r3, #0]
20007d56:	4a43      	ldr	r2, [pc, #268]	@ (20007e64 <DMA_MultiBufferSetConfig+0x134>)
20007d58:	4293      	cmp	r3, r2
20007d5a:	d040      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d5c:	68fb      	ldr	r3, [r7, #12]
20007d5e:	681b      	ldr	r3, [r3, #0]
20007d60:	4a41      	ldr	r2, [pc, #260]	@ (20007e68 <DMA_MultiBufferSetConfig+0x138>)
20007d62:	4293      	cmp	r3, r2
20007d64:	d03b      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d66:	68fb      	ldr	r3, [r7, #12]
20007d68:	681b      	ldr	r3, [r3, #0]
20007d6a:	4a40      	ldr	r2, [pc, #256]	@ (20007e6c <DMA_MultiBufferSetConfig+0x13c>)
20007d6c:	4293      	cmp	r3, r2
20007d6e:	d036      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d70:	68fb      	ldr	r3, [r7, #12]
20007d72:	681b      	ldr	r3, [r3, #0]
20007d74:	4a3e      	ldr	r2, [pc, #248]	@ (20007e70 <DMA_MultiBufferSetConfig+0x140>)
20007d76:	4293      	cmp	r3, r2
20007d78:	d031      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d7a:	68fb      	ldr	r3, [r7, #12]
20007d7c:	681b      	ldr	r3, [r3, #0]
20007d7e:	4a3d      	ldr	r2, [pc, #244]	@ (20007e74 <DMA_MultiBufferSetConfig+0x144>)
20007d80:	4293      	cmp	r3, r2
20007d82:	d02c      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d84:	68fb      	ldr	r3, [r7, #12]
20007d86:	681b      	ldr	r3, [r3, #0]
20007d88:	4a3b      	ldr	r2, [pc, #236]	@ (20007e78 <DMA_MultiBufferSetConfig+0x148>)
20007d8a:	4293      	cmp	r3, r2
20007d8c:	d027      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d8e:	68fb      	ldr	r3, [r7, #12]
20007d90:	681b      	ldr	r3, [r3, #0]
20007d92:	4a3a      	ldr	r2, [pc, #232]	@ (20007e7c <DMA_MultiBufferSetConfig+0x14c>)
20007d94:	4293      	cmp	r3, r2
20007d96:	d022      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007d98:	68fb      	ldr	r3, [r7, #12]
20007d9a:	681b      	ldr	r3, [r3, #0]
20007d9c:	4a38      	ldr	r2, [pc, #224]	@ (20007e80 <DMA_MultiBufferSetConfig+0x150>)
20007d9e:	4293      	cmp	r3, r2
20007da0:	d01d      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007da2:	68fb      	ldr	r3, [r7, #12]
20007da4:	681b      	ldr	r3, [r3, #0]
20007da6:	4a37      	ldr	r2, [pc, #220]	@ (20007e84 <DMA_MultiBufferSetConfig+0x154>)
20007da8:	4293      	cmp	r3, r2
20007daa:	d018      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007dac:	68fb      	ldr	r3, [r7, #12]
20007dae:	681b      	ldr	r3, [r3, #0]
20007db0:	4a35      	ldr	r2, [pc, #212]	@ (20007e88 <DMA_MultiBufferSetConfig+0x158>)
20007db2:	4293      	cmp	r3, r2
20007db4:	d013      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007db6:	68fb      	ldr	r3, [r7, #12]
20007db8:	681b      	ldr	r3, [r3, #0]
20007dba:	4a34      	ldr	r2, [pc, #208]	@ (20007e8c <DMA_MultiBufferSetConfig+0x15c>)
20007dbc:	4293      	cmp	r3, r2
20007dbe:	d00e      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007dc0:	68fb      	ldr	r3, [r7, #12]
20007dc2:	681b      	ldr	r3, [r3, #0]
20007dc4:	4a32      	ldr	r2, [pc, #200]	@ (20007e90 <DMA_MultiBufferSetConfig+0x160>)
20007dc6:	4293      	cmp	r3, r2
20007dc8:	d009      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007dca:	68fb      	ldr	r3, [r7, #12]
20007dcc:	681b      	ldr	r3, [r3, #0]
20007dce:	4a31      	ldr	r2, [pc, #196]	@ (20007e94 <DMA_MultiBufferSetConfig+0x164>)
20007dd0:	4293      	cmp	r3, r2
20007dd2:	d004      	beq.n	20007dde <DMA_MultiBufferSetConfig+0xae>
20007dd4:	68fb      	ldr	r3, [r7, #12]
20007dd6:	681b      	ldr	r3, [r3, #0]
20007dd8:	4a2f      	ldr	r2, [pc, #188]	@ (20007e98 <DMA_MultiBufferSetConfig+0x168>)
20007dda:	4293      	cmp	r3, r2
20007ddc:	d101      	bne.n	20007de2 <DMA_MultiBufferSetConfig+0xb2>
20007dde:	2301      	movs	r3, #1
20007de0:	e000      	b.n	20007de4 <DMA_MultiBufferSetConfig+0xb4>
20007de2:	2300      	movs	r3, #0
20007de4:	2b00      	cmp	r3, #0
20007de6:	d019      	beq.n	20007e1c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
20007de8:	68fb      	ldr	r3, [r7, #12]
20007dea:	681b      	ldr	r3, [r3, #0]
20007dec:	683a      	ldr	r2, [r7, #0]
20007dee:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20007df0:	68fb      	ldr	r3, [r7, #12]
20007df2:	689b      	ldr	r3, [r3, #8]
20007df4:	2b40      	cmp	r3, #64	@ 0x40
20007df6:	d108      	bne.n	20007e0a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
20007df8:	68fb      	ldr	r3, [r7, #12]
20007dfa:	681b      	ldr	r3, [r3, #0]
20007dfc:	687a      	ldr	r2, [r7, #4]
20007dfe:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
20007e00:	68fb      	ldr	r3, [r7, #12]
20007e02:	681b      	ldr	r3, [r3, #0]
20007e04:	68ba      	ldr	r2, [r7, #8]
20007e06:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
20007e08:	e021      	b.n	20007e4e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
20007e0a:	68fb      	ldr	r3, [r7, #12]
20007e0c:	681b      	ldr	r3, [r3, #0]
20007e0e:	68ba      	ldr	r2, [r7, #8]
20007e10:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
20007e12:	68fb      	ldr	r3, [r7, #12]
20007e14:	681b      	ldr	r3, [r3, #0]
20007e16:	687a      	ldr	r2, [r7, #4]
20007e18:	60da      	str	r2, [r3, #12]
}
20007e1a:	e018      	b.n	20007e4e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
20007e1c:	68fb      	ldr	r3, [r7, #12]
20007e1e:	681b      	ldr	r3, [r3, #0]
20007e20:	683a      	ldr	r2, [r7, #0]
20007e22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20007e24:	68fb      	ldr	r3, [r7, #12]
20007e26:	689b      	ldr	r3, [r3, #8]
20007e28:	2b40      	cmp	r3, #64	@ 0x40
20007e2a:	d108      	bne.n	20007e3e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
20007e2c:	68fb      	ldr	r3, [r7, #12]
20007e2e:	681b      	ldr	r3, [r3, #0]
20007e30:	687a      	ldr	r2, [r7, #4]
20007e32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
20007e34:	68fb      	ldr	r3, [r7, #12]
20007e36:	681b      	ldr	r3, [r3, #0]
20007e38:	68ba      	ldr	r2, [r7, #8]
20007e3a:	60da      	str	r2, [r3, #12]
}
20007e3c:	e007      	b.n	20007e4e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
20007e3e:	68fb      	ldr	r3, [r7, #12]
20007e40:	681b      	ldr	r3, [r3, #0]
20007e42:	68ba      	ldr	r2, [r7, #8]
20007e44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
20007e46:	68fb      	ldr	r3, [r7, #12]
20007e48:	681b      	ldr	r3, [r3, #0]
20007e4a:	687a      	ldr	r2, [r7, #4]
20007e4c:	60da      	str	r2, [r3, #12]
}
20007e4e:	bf00      	nop
20007e50:	3714      	adds	r7, #20
20007e52:	46bd      	mov	sp, r7
20007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
20007e58:	4770      	bx	lr
20007e5a:	bf00      	nop
20007e5c:	40020010 	.word	0x40020010
20007e60:	40020028 	.word	0x40020028
20007e64:	40020040 	.word	0x40020040
20007e68:	40020058 	.word	0x40020058
20007e6c:	40020070 	.word	0x40020070
20007e70:	40020088 	.word	0x40020088
20007e74:	400200a0 	.word	0x400200a0
20007e78:	400200b8 	.word	0x400200b8
20007e7c:	40020410 	.word	0x40020410
20007e80:	40020428 	.word	0x40020428
20007e84:	40020440 	.word	0x40020440
20007e88:	40020458 	.word	0x40020458
20007e8c:	40020470 	.word	0x40020470
20007e90:	40020488 	.word	0x40020488
20007e94:	400204a0 	.word	0x400204a0
20007e98:	400204b8 	.word	0x400204b8

20007e9c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
20007e9c:	b480      	push	{r7}
20007e9e:	b089      	sub	sp, #36	@ 0x24
20007ea0:	af00      	add	r7, sp, #0
20007ea2:	6078      	str	r0, [r7, #4]
20007ea4:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
20007ea6:	687b      	ldr	r3, [r7, #4]
20007ea8:	2b00      	cmp	r3, #0
20007eaa:	d002      	beq.n	20007eb2 <HAL_EXTI_SetConfigLine+0x16>
20007eac:	683b      	ldr	r3, [r7, #0]
20007eae:	2b00      	cmp	r3, #0
20007eb0:	d101      	bne.n	20007eb6 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
20007eb2:	2301      	movs	r3, #1
20007eb4:	e109      	b.n	200080ca <HAL_EXTI_SetConfigLine+0x22e>
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
20007eb6:	683b      	ldr	r3, [r7, #0]
20007eb8:	681a      	ldr	r2, [r3, #0]
20007eba:	687b      	ldr	r3, [r7, #4]
20007ebc:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
20007ebe:	683b      	ldr	r3, [r7, #0]
20007ec0:	681b      	ldr	r3, [r3, #0]
20007ec2:	0c1b      	lsrs	r3, r3, #16
20007ec4:	f003 0303 	and.w	r3, r3, #3
20007ec8:	613b      	str	r3, [r7, #16]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
20007eca:	683b      	ldr	r3, [r7, #0]
20007ecc:	681b      	ldr	r3, [r3, #0]
20007ece:	f003 031f 	and.w	r3, r3, #31
20007ed2:	60fb      	str	r3, [r7, #12]
  maskline = (1UL << linepos);
20007ed4:	2201      	movs	r2, #1
20007ed6:	68fb      	ldr	r3, [r7, #12]
20007ed8:	fa02 f303 	lsl.w	r3, r2, r3
20007edc:	60bb      	str	r3, [r7, #8]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
20007ede:	683b      	ldr	r3, [r7, #0]
20007ee0:	681b      	ldr	r3, [r3, #0]
20007ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20007ee6:	2b00      	cmp	r3, #0
20007ee8:	d064      	beq.n	20007fb4 <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
20007eea:	693b      	ldr	r3, [r7, #16]
20007eec:	015b      	lsls	r3, r3, #5
20007eee:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
20007ef2:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
20007ef4:	69fb      	ldr	r3, [r7, #28]
20007ef6:	681b      	ldr	r3, [r3, #0]
20007ef8:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00U)
20007efa:	683b      	ldr	r3, [r7, #0]
20007efc:	689b      	ldr	r3, [r3, #8]
20007efe:	f003 0301 	and.w	r3, r3, #1
20007f02:	2b00      	cmp	r3, #0
20007f04:	d004      	beq.n	20007f10 <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
20007f06:	69ba      	ldr	r2, [r7, #24]
20007f08:	68bb      	ldr	r3, [r7, #8]
20007f0a:	4313      	orrs	r3, r2
20007f0c:	61bb      	str	r3, [r7, #24]
20007f0e:	e004      	b.n	20007f1a <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
20007f10:	68bb      	ldr	r3, [r7, #8]
20007f12:	43db      	mvns	r3, r3
20007f14:	69ba      	ldr	r2, [r7, #24]
20007f16:	4013      	ands	r3, r2
20007f18:	61bb      	str	r3, [r7, #24]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
20007f1a:	69fb      	ldr	r3, [r7, #28]
20007f1c:	69ba      	ldr	r2, [r7, #24]
20007f1e:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
20007f20:	693b      	ldr	r3, [r7, #16]
20007f22:	015a      	lsls	r2, r3, #5
20007f24:	4b6c      	ldr	r3, [pc, #432]	@ (200080d8 <HAL_EXTI_SetConfigLine+0x23c>)
20007f26:	4413      	add	r3, r2
20007f28:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
20007f2a:	69fb      	ldr	r3, [r7, #28]
20007f2c:	681b      	ldr	r3, [r3, #0]
20007f2e:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00U)
20007f30:	683b      	ldr	r3, [r7, #0]
20007f32:	689b      	ldr	r3, [r3, #8]
20007f34:	f003 0302 	and.w	r3, r3, #2
20007f38:	2b00      	cmp	r3, #0
20007f3a:	d004      	beq.n	20007f46 <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
20007f3c:	69ba      	ldr	r2, [r7, #24]
20007f3e:	68bb      	ldr	r3, [r7, #8]
20007f40:	4313      	orrs	r3, r2
20007f42:	61bb      	str	r3, [r7, #24]
20007f44:	e004      	b.n	20007f50 <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
20007f46:	68bb      	ldr	r3, [r7, #8]
20007f48:	43db      	mvns	r3, r3
20007f4a:	69ba      	ldr	r2, [r7, #24]
20007f4c:	4013      	ands	r3, r2
20007f4e:	61bb      	str	r3, [r7, #24]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
20007f50:	69fb      	ldr	r3, [r7, #28]
20007f52:	69ba      	ldr	r2, [r7, #24]
20007f54:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20007f56:	683b      	ldr	r3, [r7, #0]
20007f58:	681b      	ldr	r3, [r3, #0]
20007f5a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
20007f5e:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
20007f62:	d127      	bne.n	20007fb4 <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
20007f64:	4a5d      	ldr	r2, [pc, #372]	@ (200080dc <HAL_EXTI_SetConfigLine+0x240>)
20007f66:	68fb      	ldr	r3, [r7, #12]
20007f68:	089b      	lsrs	r3, r3, #2
20007f6a:	f003 0303 	and.w	r3, r3, #3
20007f6e:	3302      	adds	r3, #2
20007f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20007f74:	61bb      	str	r3, [r7, #24]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
20007f76:	68fb      	ldr	r3, [r7, #12]
20007f78:	f003 0303 	and.w	r3, r3, #3
20007f7c:	009b      	lsls	r3, r3, #2
20007f7e:	220f      	movs	r2, #15
20007f80:	fa02 f303 	lsl.w	r3, r2, r3
20007f84:	43db      	mvns	r3, r3
20007f86:	69ba      	ldr	r2, [r7, #24]
20007f88:	4013      	ands	r3, r2
20007f8a:	61bb      	str	r3, [r7, #24]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
20007f8c:	683b      	ldr	r3, [r7, #0]
20007f8e:	68da      	ldr	r2, [r3, #12]
20007f90:	68fb      	ldr	r3, [r7, #12]
20007f92:	f003 0303 	and.w	r3, r3, #3
20007f96:	009b      	lsls	r3, r3, #2
20007f98:	fa02 f303 	lsl.w	r3, r2, r3
20007f9c:	69ba      	ldr	r2, [r7, #24]
20007f9e:	4313      	orrs	r3, r2
20007fa0:	61bb      	str	r3, [r7, #24]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
20007fa2:	494e      	ldr	r1, [pc, #312]	@ (200080dc <HAL_EXTI_SetConfigLine+0x240>)
20007fa4:	68fb      	ldr	r3, [r7, #12]
20007fa6:	089b      	lsrs	r3, r3, #2
20007fa8:	f003 0303 	and.w	r3, r3, #3
20007fac:	3302      	adds	r3, #2
20007fae:	69ba      	ldr	r2, [r7, #24]
20007fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
20007fb4:	693b      	ldr	r3, [r7, #16]
20007fb6:	011a      	lsls	r2, r3, #4
20007fb8:	4b49      	ldr	r3, [pc, #292]	@ (200080e0 <HAL_EXTI_SetConfigLine+0x244>)
20007fba:	4413      	add	r3, r2
20007fbc:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
20007fbe:	69fb      	ldr	r3, [r7, #28]
20007fc0:	681b      	ldr	r3, [r3, #0]
20007fc2:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00U)
20007fc4:	683b      	ldr	r3, [r7, #0]
20007fc6:	685b      	ldr	r3, [r3, #4]
20007fc8:	f003 0301 	and.w	r3, r3, #1
20007fcc:	2b00      	cmp	r3, #0
20007fce:	d004      	beq.n	20007fda <HAL_EXTI_SetConfigLine+0x13e>
  {
    regval |= maskline;
20007fd0:	69ba      	ldr	r2, [r7, #24]
20007fd2:	68bb      	ldr	r3, [r7, #8]
20007fd4:	4313      	orrs	r3, r2
20007fd6:	61bb      	str	r3, [r7, #24]
20007fd8:	e004      	b.n	20007fe4 <HAL_EXTI_SetConfigLine+0x148>
  }
  else
  {
    regval &= ~maskline;
20007fda:	68bb      	ldr	r3, [r7, #8]
20007fdc:	43db      	mvns	r3, r3
20007fde:	69ba      	ldr	r2, [r7, #24]
20007fe0:	4013      	ands	r3, r2
20007fe2:	61bb      	str	r3, [r7, #24]
  }

  /* Store interrupt mode */
  *regaddr = regval;
20007fe4:	69fb      	ldr	r3, [r7, #28]
20007fe6:	69ba      	ldr	r2, [r7, #24]
20007fe8:	601a      	str	r2, [r3, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
20007fea:	693b      	ldr	r3, [r7, #16]
20007fec:	011a      	lsls	r2, r3, #4
20007fee:	4b3d      	ldr	r3, [pc, #244]	@ (200080e4 <HAL_EXTI_SetConfigLine+0x248>)
20007ff0:	4413      	add	r3, r2
20007ff2:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
20007ff4:	69fb      	ldr	r3, [r7, #28]
20007ff6:	681b      	ldr	r3, [r3, #0]
20007ff8:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00U)
20007ffa:	683b      	ldr	r3, [r7, #0]
20007ffc:	685b      	ldr	r3, [r3, #4]
20007ffe:	f003 0302 	and.w	r3, r3, #2
20008002:	2b00      	cmp	r3, #0
20008004:	d004      	beq.n	20008010 <HAL_EXTI_SetConfigLine+0x174>
  {
    regval |= maskline;
20008006:	69ba      	ldr	r2, [r7, #24]
20008008:	68bb      	ldr	r3, [r7, #8]
2000800a:	4313      	orrs	r3, r2
2000800c:	61bb      	str	r3, [r7, #24]
2000800e:	e004      	b.n	2000801a <HAL_EXTI_SetConfigLine+0x17e>
  }
  else
  {
    regval &= ~maskline;
20008010:	68bb      	ldr	r3, [r7, #8]
20008012:	43db      	mvns	r3, r3
20008014:	69ba      	ldr	r2, [r7, #24]
20008016:	4013      	ands	r3, r2
20008018:	61bb      	str	r3, [r7, #24]
  }

  /* Store event mode */
  *regaddr = regval;
2000801a:	69fb      	ldr	r3, [r7, #28]
2000801c:	69ba      	ldr	r2, [r7, #24]
2000801e:	601a      	str	r2, [r3, #0]
  /* Store event mode */
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* Configure the D3 PendClear source in case of Wakeup target is Any */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
20008020:	683b      	ldr	r3, [r7, #0]
20008022:	681b      	ldr	r3, [r3, #0]
20008024:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
20008028:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
2000802c:	d14c      	bne.n	200080c8 <HAL_EXTI_SetConfigLine+0x22c>
  {
    assert_param(IS_EXTI_D3_PENDCLR_SRC(pExtiConfig->PendClearSource));

    /*Calc the PMR register address for the given line */
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
2000802e:	693b      	ldr	r3, [r7, #16]
20008030:	015a      	lsls	r2, r3, #5
20008032:	4b2d      	ldr	r3, [pc, #180]	@ (200080e8 <HAL_EXTI_SetConfigLine+0x24c>)
20008034:	4413      	add	r3, r2
20008036:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
20008038:	69fb      	ldr	r3, [r7, #28]
2000803a:	681b      	ldr	r3, [r3, #0]
2000803c:	61bb      	str	r3, [r7, #24]

    if(pExtiConfig->PendClearSource == EXTI_D3_PENDCLR_SRC_NONE)
2000803e:	683b      	ldr	r3, [r7, #0]
20008040:	691b      	ldr	r3, [r3, #16]
20008042:	2b00      	cmp	r3, #0
20008044:	d108      	bne.n	20008058 <HAL_EXTI_SetConfigLine+0x1bc>
    {
      /* Clear D3PMRx register for the given line */
      regval &= ~maskline;
20008046:	68bb      	ldr	r3, [r7, #8]
20008048:	43db      	mvns	r3, r3
2000804a:	69ba      	ldr	r2, [r7, #24]
2000804c:	4013      	ands	r3, r2
2000804e:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
20008050:	69fb      	ldr	r3, [r7, #28]
20008052:	69ba      	ldr	r2, [r7, #24]
20008054:	601a      	str	r2, [r3, #0]
20008056:	e037      	b.n	200080c8 <HAL_EXTI_SetConfigLine+0x22c>
    }
    else
    {
      /* Set D3PMRx register to 1 for the given line */
      regval |= maskline;
20008058:	69ba      	ldr	r2, [r7, #24]
2000805a:	68bb      	ldr	r3, [r7, #8]
2000805c:	4313      	orrs	r3, r2
2000805e:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
20008060:	69fb      	ldr	r3, [r7, #28]
20008062:	69ba      	ldr	r2, [r7, #24]
20008064:	601a      	str	r2, [r3, #0]

      if(linepos < 16UL)
20008066:	68fb      	ldr	r3, [r7, #12]
20008068:	2b0f      	cmp	r3, #15
2000806a:	d80a      	bhi.n	20008082 <HAL_EXTI_SetConfigLine+0x1e6>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
2000806c:	693b      	ldr	r3, [r7, #16]
2000806e:	015a      	lsls	r2, r3, #5
20008070:	4b1e      	ldr	r3, [pc, #120]	@ (200080ec <HAL_EXTI_SetConfigLine+0x250>)
20008072:	4413      	add	r3, r2
20008074:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
20008076:	2201      	movs	r2, #1
20008078:	68fb      	ldr	r3, [r7, #12]
2000807a:	fa02 f303 	lsl.w	r3, r2, r3
2000807e:	617b      	str	r3, [r7, #20]
20008080:	e00a      	b.n	20008098 <HAL_EXTI_SetConfigLine+0x1fc>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
20008082:	693b      	ldr	r3, [r7, #16]
20008084:	015a      	lsls	r2, r3, #5
20008086:	4b1a      	ldr	r3, [pc, #104]	@ (200080f0 <HAL_EXTI_SetConfigLine+0x254>)
20008088:	4413      	add	r3, r2
2000808a:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
2000808c:	68fb      	ldr	r3, [r7, #12]
2000808e:	3b10      	subs	r3, #16
20008090:	2201      	movs	r2, #1
20008092:	fa02 f303 	lsl.w	r3, r2, r3
20008096:	617b      	str	r3, [r7, #20]
      }

      regval = (*regaddr & (~(pcrlinepos * pcrlinepos * 3UL))) | (pcrlinepos * pcrlinepos * (pExtiConfig->PendClearSource - 1UL));
20008098:	69fb      	ldr	r3, [r7, #28]
2000809a:	6819      	ldr	r1, [r3, #0]
2000809c:	697b      	ldr	r3, [r7, #20]
2000809e:	fb03 f203 	mul.w	r2, r3, r3
200080a2:	4613      	mov	r3, r2
200080a4:	005b      	lsls	r3, r3, #1
200080a6:	4413      	add	r3, r2
200080a8:	43db      	mvns	r3, r3
200080aa:	ea01 0203 	and.w	r2, r1, r3
200080ae:	697b      	ldr	r3, [r7, #20]
200080b0:	fb03 f303 	mul.w	r3, r3, r3
200080b4:	6839      	ldr	r1, [r7, #0]
200080b6:	6909      	ldr	r1, [r1, #16]
200080b8:	3901      	subs	r1, #1
200080ba:	fb01 f303 	mul.w	r3, r1, r3
200080be:	4313      	orrs	r3, r2
200080c0:	61bb      	str	r3, [r7, #24]
      *regaddr = regval;
200080c2:	69fb      	ldr	r3, [r7, #28]
200080c4:	69ba      	ldr	r2, [r7, #24]
200080c6:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
200080c8:	2300      	movs	r3, #0
}
200080ca:	4618      	mov	r0, r3
200080cc:	3724      	adds	r7, #36	@ 0x24
200080ce:	46bd      	mov	sp, r7
200080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200080d4:	4770      	bx	lr
200080d6:	bf00      	nop
200080d8:	58000004 	.word	0x58000004
200080dc:	58000400 	.word	0x58000400
200080e0:	58000080 	.word	0x58000080
200080e4:	58000084 	.word	0x58000084
200080e8:	5800000c 	.word	0x5800000c
200080ec:	58000010 	.word	0x58000010
200080f0:	58000014 	.word	0x58000014

200080f4 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
200080f4:	b480      	push	{r7}
200080f6:	b089      	sub	sp, #36	@ 0x24
200080f8:	af00      	add	r7, sp, #0
200080fa:	6078      	str	r0, [r7, #4]
200080fc:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
200080fe:	687b      	ldr	r3, [r7, #4]
20008100:	2b00      	cmp	r3, #0
20008102:	d002      	beq.n	2000810a <HAL_EXTI_GetConfigLine+0x16>
20008104:	683b      	ldr	r3, [r7, #0]
20008106:	2b00      	cmp	r3, #0
20008108:	d101      	bne.n	2000810e <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
2000810a:	2301      	movs	r3, #1
2000810c:	e0c4      	b.n	20008298 <HAL_EXTI_GetConfigLine+0x1a4>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
2000810e:	687b      	ldr	r3, [r7, #4]
20008110:	681a      	ldr	r2, [r3, #0]
20008112:	683b      	ldr	r3, [r7, #0]
20008114:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
20008116:	683b      	ldr	r3, [r7, #0]
20008118:	681b      	ldr	r3, [r3, #0]
2000811a:	0c1b      	lsrs	r3, r3, #16
2000811c:	f003 0303 	and.w	r3, r3, #3
20008120:	617b      	str	r3, [r7, #20]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
20008122:	683b      	ldr	r3, [r7, #0]
20008124:	681b      	ldr	r3, [r3, #0]
20008126:	f003 031f 	and.w	r3, r3, #31
2000812a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
2000812c:	2201      	movs	r2, #1
2000812e:	693b      	ldr	r3, [r7, #16]
20008130:	fa02 f303 	lsl.w	r3, r2, r3
20008134:	60fb      	str	r3, [r7, #12]

  /* 1] Get core mode : interrupt */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
20008136:	697b      	ldr	r3, [r7, #20]
20008138:	011a      	lsls	r2, r3, #4
2000813a:	4b5a      	ldr	r3, [pc, #360]	@ (200082a4 <HAL_EXTI_GetConfigLine+0x1b0>)
2000813c:	4413      	add	r3, r2
2000813e:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
20008140:	69fb      	ldr	r3, [r7, #28]
20008142:	681b      	ldr	r3, [r3, #0]
20008144:	60bb      	str	r3, [r7, #8]

  pExtiConfig->Mode = EXTI_MODE_NONE;
20008146:	683b      	ldr	r3, [r7, #0]
20008148:	2200      	movs	r2, #0
2000814a:	605a      	str	r2, [r3, #4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
2000814c:	68ba      	ldr	r2, [r7, #8]
2000814e:	68fb      	ldr	r3, [r7, #12]
20008150:	4013      	ands	r3, r2
20008152:	2b00      	cmp	r3, #0
20008154:	d002      	beq.n	2000815c <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
20008156:	683b      	ldr	r3, [r7, #0]
20008158:	2201      	movs	r2, #1
2000815a:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
2000815c:	697b      	ldr	r3, [r7, #20]
2000815e:	011a      	lsls	r2, r3, #4
20008160:	4b51      	ldr	r3, [pc, #324]	@ (200082a8 <HAL_EXTI_GetConfigLine+0x1b4>)
20008162:	4413      	add	r3, r2
20008164:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
20008166:	69fb      	ldr	r3, [r7, #28]
20008168:	681b      	ldr	r3, [r3, #0]
2000816a:	60bb      	str	r3, [r7, #8]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
2000816c:	68ba      	ldr	r2, [r7, #8]
2000816e:	68fb      	ldr	r3, [r7, #12]
20008170:	4013      	ands	r3, r2
20008172:	2b00      	cmp	r3, #0
20008174:	d005      	beq.n	20008182 <HAL_EXTI_GetConfigLine+0x8e>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
20008176:	683b      	ldr	r3, [r7, #0]
20008178:	685b      	ldr	r3, [r3, #4]
2000817a:	f043 0202 	orr.w	r2, r3, #2
2000817e:	683b      	ldr	r3, [r7, #0]
20008180:	605a      	str	r2, [r3, #4]
    pExtiConfig->Mode |= EXTI_MODE_CORE2_EVENT;
  }
#endif /*DUAL_CORE*/

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
20008182:	683b      	ldr	r3, [r7, #0]
20008184:	2200      	movs	r2, #0
20008186:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00U;
20008188:	683b      	ldr	r3, [r7, #0]
2000818a:	2200      	movs	r2, #0
2000818c:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
2000818e:	683b      	ldr	r3, [r7, #0]
20008190:	681b      	ldr	r3, [r3, #0]
20008192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20008196:	2b00      	cmp	r3, #0
20008198:	d03d      	beq.n	20008216 <HAL_EXTI_GetConfigLine+0x122>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
2000819a:	697b      	ldr	r3, [r7, #20]
2000819c:	015b      	lsls	r3, r3, #5
2000819e:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
200081a2:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
200081a4:	69fb      	ldr	r3, [r7, #28]
200081a6:	681b      	ldr	r3, [r3, #0]
200081a8:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
200081aa:	68ba      	ldr	r2, [r7, #8]
200081ac:	68fb      	ldr	r3, [r7, #12]
200081ae:	4013      	ands	r3, r2
200081b0:	2b00      	cmp	r3, #0
200081b2:	d002      	beq.n	200081ba <HAL_EXTI_GetConfigLine+0xc6>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
200081b4:	683b      	ldr	r3, [r7, #0]
200081b6:	2201      	movs	r2, #1
200081b8:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
200081ba:	697b      	ldr	r3, [r7, #20]
200081bc:	015a      	lsls	r2, r3, #5
200081be:	4b3b      	ldr	r3, [pc, #236]	@ (200082ac <HAL_EXTI_GetConfigLine+0x1b8>)
200081c0:	4413      	add	r3, r2
200081c2:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
200081c4:	69fb      	ldr	r3, [r7, #28]
200081c6:	681b      	ldr	r3, [r3, #0]
200081c8:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
200081ca:	68ba      	ldr	r2, [r7, #8]
200081cc:	68fb      	ldr	r3, [r7, #12]
200081ce:	4013      	ands	r3, r2
200081d0:	2b00      	cmp	r3, #0
200081d2:	d005      	beq.n	200081e0 <HAL_EXTI_GetConfigLine+0xec>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
200081d4:	683b      	ldr	r3, [r7, #0]
200081d6:	689b      	ldr	r3, [r3, #8]
200081d8:	f043 0202 	orr.w	r2, r3, #2
200081dc:	683b      	ldr	r3, [r7, #0]
200081de:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
200081e0:	683b      	ldr	r3, [r7, #0]
200081e2:	681b      	ldr	r3, [r3, #0]
200081e4:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
200081e8:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
200081ec:	d113      	bne.n	20008216 <HAL_EXTI_GetConfigLine+0x122>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
200081ee:	4a30      	ldr	r2, [pc, #192]	@ (200082b0 <HAL_EXTI_GetConfigLine+0x1bc>)
200081f0:	693b      	ldr	r3, [r7, #16]
200081f2:	089b      	lsrs	r3, r3, #2
200081f4:	f003 0303 	and.w	r3, r3, #3
200081f8:	3302      	adds	r3, #2
200081fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200081fe:	60bb      	str	r3, [r7, #8]
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
20008200:	693b      	ldr	r3, [r7, #16]
20008202:	f003 0303 	and.w	r3, r3, #3
20008206:	009b      	lsls	r3, r3, #2
20008208:	68ba      	ldr	r2, [r7, #8]
2000820a:	fa22 f303 	lsr.w	r3, r2, r3
2000820e:	f003 020f 	and.w	r2, r3, #15
20008212:	683b      	ldr	r3, [r7, #0]
20008214:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get default Pend Clear Source */
  pExtiConfig->PendClearSource = EXTI_D3_PENDCLR_SRC_NONE;
20008216:	683b      	ldr	r3, [r7, #0]
20008218:	2200      	movs	r2, #0
2000821a:	611a      	str	r2, [r3, #16]

  /* 3] Get D3 Pend Clear source */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
2000821c:	683b      	ldr	r3, [r7, #0]
2000821e:	681b      	ldr	r3, [r3, #0]
20008220:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
20008224:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
20008228:	d135      	bne.n	20008296 <HAL_EXTI_GetConfigLine+0x1a2>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
2000822a:	697b      	ldr	r3, [r7, #20]
2000822c:	015a      	lsls	r2, r3, #5
2000822e:	4b21      	ldr	r3, [pc, #132]	@ (200082b4 <HAL_EXTI_GetConfigLine+0x1c0>)
20008230:	4413      	add	r3, r2
20008232:	61fb      	str	r3, [r7, #28]
    if(((*regaddr) & linepos) != 0UL)
20008234:	69fb      	ldr	r3, [r7, #28]
20008236:	681a      	ldr	r2, [r3, #0]
20008238:	693b      	ldr	r3, [r7, #16]
2000823a:	4013      	ands	r3, r2
2000823c:	2b00      	cmp	r3, #0
2000823e:	d02a      	beq.n	20008296 <HAL_EXTI_GetConfigLine+0x1a2>
    {
      /* if wakeup target is any and PMR set, the read pend clear source from  D3PCRxL/H */
      if(linepos < 16UL)
20008240:	693b      	ldr	r3, [r7, #16]
20008242:	2b0f      	cmp	r3, #15
20008244:	d80a      	bhi.n	2000825c <HAL_EXTI_GetConfigLine+0x168>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
20008246:	697b      	ldr	r3, [r7, #20]
20008248:	015a      	lsls	r2, r3, #5
2000824a:	4b1b      	ldr	r3, [pc, #108]	@ (200082b8 <HAL_EXTI_GetConfigLine+0x1c4>)
2000824c:	4413      	add	r3, r2
2000824e:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
20008250:	2201      	movs	r2, #1
20008252:	693b      	ldr	r3, [r7, #16]
20008254:	fa02 f303 	lsl.w	r3, r2, r3
20008258:	61bb      	str	r3, [r7, #24]
2000825a:	e00a      	b.n	20008272 <HAL_EXTI_GetConfigLine+0x17e>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
2000825c:	697b      	ldr	r3, [r7, #20]
2000825e:	015a      	lsls	r2, r3, #5
20008260:	4b16      	ldr	r3, [pc, #88]	@ (200082bc <HAL_EXTI_GetConfigLine+0x1c8>)
20008262:	4413      	add	r3, r2
20008264:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
20008266:	693b      	ldr	r3, [r7, #16]
20008268:	3b10      	subs	r3, #16
2000826a:	2201      	movs	r2, #1
2000826c:	fa02 f303 	lsl.w	r3, r2, r3
20008270:	61bb      	str	r3, [r7, #24]
      }

      pExtiConfig->PendClearSource = 1UL + ((*regaddr & (pcrlinepos * pcrlinepos * 3UL)) / (pcrlinepos * pcrlinepos));
20008272:	69fb      	ldr	r3, [r7, #28]
20008274:	6819      	ldr	r1, [r3, #0]
20008276:	69bb      	ldr	r3, [r7, #24]
20008278:	fb03 f203 	mul.w	r2, r3, r3
2000827c:	4613      	mov	r3, r2
2000827e:	005b      	lsls	r3, r3, #1
20008280:	4413      	add	r3, r2
20008282:	ea01 0203 	and.w	r2, r1, r3
20008286:	69bb      	ldr	r3, [r7, #24]
20008288:	fb03 f303 	mul.w	r3, r3, r3
2000828c:	fbb2 f3f3 	udiv	r3, r2, r3
20008290:	1c5a      	adds	r2, r3, #1
20008292:	683b      	ldr	r3, [r7, #0]
20008294:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
20008296:	2300      	movs	r3, #0
}
20008298:	4618      	mov	r0, r3
2000829a:	3724      	adds	r7, #36	@ 0x24
2000829c:	46bd      	mov	sp, r7
2000829e:	f85d 7b04 	ldr.w	r7, [sp], #4
200082a2:	4770      	bx	lr
200082a4:	58000080 	.word	0x58000080
200082a8:	58000084 	.word	0x58000084
200082ac:	58000004 	.word	0x58000004
200082b0:	58000400 	.word	0x58000400
200082b4:	5800000c 	.word	0x5800000c
200082b8:	58000010 	.word	0x58000010
200082bc:	58000014 	.word	0x58000014

200082c0 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
200082c0:	b480      	push	{r7}
200082c2:	b089      	sub	sp, #36	@ 0x24
200082c4:	af00      	add	r7, sp, #0
200082c6:	6078      	str	r0, [r7, #4]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if (hexti == NULL)
200082c8:	687b      	ldr	r3, [r7, #4]
200082ca:	2b00      	cmp	r3, #0
200082cc:	d101      	bne.n	200082d2 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
200082ce:	2301      	movs	r3, #1
200082d0:	e0ab      	b.n	2000842a <HAL_EXTI_ClearConfigLine+0x16a>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
200082d2:	687b      	ldr	r3, [r7, #4]
200082d4:	681b      	ldr	r3, [r3, #0]
200082d6:	0c1b      	lsrs	r3, r3, #16
200082d8:	f003 0303 	and.w	r3, r3, #3
200082dc:	617b      	str	r3, [r7, #20]
  linepos = (hexti->Line & EXTI_PIN_MASK);
200082de:	687b      	ldr	r3, [r7, #4]
200082e0:	681b      	ldr	r3, [r3, #0]
200082e2:	f003 031f 	and.w	r3, r3, #31
200082e6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
200082e8:	2201      	movs	r2, #1
200082ea:	693b      	ldr	r3, [r7, #16]
200082ec:	fa02 f303 	lsl.w	r3, r2, r3
200082f0:	60fb      	str	r3, [r7, #12]

  /* 1] Clear interrupt mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
200082f2:	697b      	ldr	r3, [r7, #20]
200082f4:	011a      	lsls	r2, r3, #4
200082f6:	4b50      	ldr	r3, [pc, #320]	@ (20008438 <HAL_EXTI_ClearConfigLine+0x178>)
200082f8:	4413      	add	r3, r2
200082fa:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
200082fc:	69fb      	ldr	r3, [r7, #28]
200082fe:	681a      	ldr	r2, [r3, #0]
20008300:	68fb      	ldr	r3, [r7, #12]
20008302:	43db      	mvns	r3, r3
20008304:	4013      	ands	r3, r2
20008306:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
20008308:	69fb      	ldr	r3, [r7, #28]
2000830a:	68ba      	ldr	r2, [r7, #8]
2000830c:	601a      	str	r2, [r3, #0]

  /* 2] Clear event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
2000830e:	697b      	ldr	r3, [r7, #20]
20008310:	011a      	lsls	r2, r3, #4
20008312:	4b4a      	ldr	r3, [pc, #296]	@ (2000843c <HAL_EXTI_ClearConfigLine+0x17c>)
20008314:	4413      	add	r3, r2
20008316:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
20008318:	69fb      	ldr	r3, [r7, #28]
2000831a:	681a      	ldr	r2, [r3, #0]
2000831c:	68fb      	ldr	r3, [r7, #12]
2000831e:	43db      	mvns	r3, r3
20008320:	4013      	ands	r3, r2
20008322:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
20008324:	69fb      	ldr	r3, [r7, #28]
20008326:	68ba      	ldr	r2, [r7, #8]
20008328:	601a      	str	r2, [r3, #0]
  regval = (*regaddr & ~maskline);
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00U)
2000832a:	687b      	ldr	r3, [r7, #4]
2000832c:	681b      	ldr	r3, [r3, #0]
2000832e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20008332:	2b00      	cmp	r3, #0
20008334:	d03f      	beq.n	200083b6 <HAL_EXTI_ClearConfigLine+0xf6>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
20008336:	697b      	ldr	r3, [r7, #20]
20008338:	015b      	lsls	r3, r3, #5
2000833a:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
2000833e:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
20008340:	69fb      	ldr	r3, [r7, #28]
20008342:	681a      	ldr	r2, [r3, #0]
20008344:	68fb      	ldr	r3, [r7, #12]
20008346:	43db      	mvns	r3, r3
20008348:	4013      	ands	r3, r2
2000834a:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
2000834c:	69fb      	ldr	r3, [r7, #28]
2000834e:	68ba      	ldr	r2, [r7, #8]
20008350:	601a      	str	r2, [r3, #0]

    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
20008352:	697b      	ldr	r3, [r7, #20]
20008354:	015a      	lsls	r2, r3, #5
20008356:	4b3a      	ldr	r3, [pc, #232]	@ (20008440 <HAL_EXTI_ClearConfigLine+0x180>)
20008358:	4413      	add	r3, r2
2000835a:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
2000835c:	69fb      	ldr	r3, [r7, #28]
2000835e:	681a      	ldr	r2, [r3, #0]
20008360:	68fb      	ldr	r3, [r7, #12]
20008362:	43db      	mvns	r3, r3
20008364:	4013      	ands	r3, r2
20008366:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
20008368:	69fb      	ldr	r3, [r7, #28]
2000836a:	68ba      	ldr	r2, [r7, #8]
2000836c:	601a      	str	r2, [r3, #0]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
2000836e:	687b      	ldr	r3, [r7, #4]
20008370:	681b      	ldr	r3, [r3, #0]
20008372:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
20008376:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
2000837a:	d11c      	bne.n	200083b6 <HAL_EXTI_ClearConfigLine+0xf6>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
2000837c:	4a31      	ldr	r2, [pc, #196]	@ (20008444 <HAL_EXTI_ClearConfigLine+0x184>)
2000837e:	693b      	ldr	r3, [r7, #16]
20008380:	089b      	lsrs	r3, r3, #2
20008382:	f003 0303 	and.w	r3, r3, #3
20008386:	3302      	adds	r3, #2
20008388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000838c:	60bb      	str	r3, [r7, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03UL)));
2000838e:	693b      	ldr	r3, [r7, #16]
20008390:	f003 0303 	and.w	r3, r3, #3
20008394:	009b      	lsls	r3, r3, #2
20008396:	220f      	movs	r2, #15
20008398:	fa02 f303 	lsl.w	r3, r2, r3
2000839c:	43db      	mvns	r3, r3
2000839e:	68ba      	ldr	r2, [r7, #8]
200083a0:	4013      	ands	r3, r2
200083a2:	60bb      	str	r3, [r7, #8]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
200083a4:	4927      	ldr	r1, [pc, #156]	@ (20008444 <HAL_EXTI_ClearConfigLine+0x184>)
200083a6:	693b      	ldr	r3, [r7, #16]
200083a8:	089b      	lsrs	r3, r3, #2
200083aa:	f003 0303 	and.w	r3, r3, #3
200083ae:	3302      	adds	r3, #2
200083b0:	68ba      	ldr	r2, [r7, #8]
200083b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* 4] Clear D3 Config lines */
  if ((hexti->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
200083b6:	687b      	ldr	r3, [r7, #4]
200083b8:	681b      	ldr	r3, [r3, #0]
200083ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
200083be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
200083c2:	d131      	bne.n	20008428 <HAL_EXTI_ClearConfigLine+0x168>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
200083c4:	697b      	ldr	r3, [r7, #20]
200083c6:	015a      	lsls	r2, r3, #5
200083c8:	4b1f      	ldr	r3, [pc, #124]	@ (20008448 <HAL_EXTI_ClearConfigLine+0x188>)
200083ca:	4413      	add	r3, r2
200083cc:	61fb      	str	r3, [r7, #28]
    *regaddr = (*regaddr & ~maskline);
200083ce:	69fb      	ldr	r3, [r7, #28]
200083d0:	681a      	ldr	r2, [r3, #0]
200083d2:	68fb      	ldr	r3, [r7, #12]
200083d4:	43db      	mvns	r3, r3
200083d6:	401a      	ands	r2, r3
200083d8:	69fb      	ldr	r3, [r7, #28]
200083da:	601a      	str	r2, [r3, #0]

    if(linepos < 16UL)
200083dc:	693b      	ldr	r3, [r7, #16]
200083de:	2b0f      	cmp	r3, #15
200083e0:	d80a      	bhi.n	200083f8 <HAL_EXTI_ClearConfigLine+0x138>
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
200083e2:	697b      	ldr	r3, [r7, #20]
200083e4:	015a      	lsls	r2, r3, #5
200083e6:	4b19      	ldr	r3, [pc, #100]	@ (2000844c <HAL_EXTI_ClearConfigLine+0x18c>)
200083e8:	4413      	add	r3, r2
200083ea:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << linepos;
200083ec:	2201      	movs	r2, #1
200083ee:	693b      	ldr	r3, [r7, #16]
200083f0:	fa02 f303 	lsl.w	r3, r2, r3
200083f4:	61bb      	str	r3, [r7, #24]
200083f6:	e00a      	b.n	2000840e <HAL_EXTI_ClearConfigLine+0x14e>
    }
    else
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
200083f8:	697b      	ldr	r3, [r7, #20]
200083fa:	015a      	lsls	r2, r3, #5
200083fc:	4b14      	ldr	r3, [pc, #80]	@ (20008450 <HAL_EXTI_ClearConfigLine+0x190>)
200083fe:	4413      	add	r3, r2
20008400:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << (linepos - 16UL);
20008402:	693b      	ldr	r3, [r7, #16]
20008404:	3b10      	subs	r3, #16
20008406:	2201      	movs	r2, #1
20008408:	fa02 f303 	lsl.w	r3, r2, r3
2000840c:	61bb      	str	r3, [r7, #24]
    }

    /*Clear D3 PendClear source */
    *regaddr &= (~(pcrlinepos * pcrlinepos * 3UL));
2000840e:	69fb      	ldr	r3, [r7, #28]
20008410:	6819      	ldr	r1, [r3, #0]
20008412:	69bb      	ldr	r3, [r7, #24]
20008414:	fb03 f203 	mul.w	r2, r3, r3
20008418:	4613      	mov	r3, r2
2000841a:	005b      	lsls	r3, r3, #1
2000841c:	4413      	add	r3, r2
2000841e:	43db      	mvns	r3, r3
20008420:	ea01 0203 	and.w	r2, r1, r3
20008424:	69fb      	ldr	r3, [r7, #28]
20008426:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
20008428:	2300      	movs	r3, #0
}
2000842a:	4618      	mov	r0, r3
2000842c:	3724      	adds	r7, #36	@ 0x24
2000842e:	46bd      	mov	sp, r7
20008430:	f85d 7b04 	ldr.w	r7, [sp], #4
20008434:	4770      	bx	lr
20008436:	bf00      	nop
20008438:	58000080 	.word	0x58000080
2000843c:	58000084 	.word	0x58000084
20008440:	58000004 	.word	0x58000004
20008444:	58000400 	.word	0x58000400
20008448:	5800000c 	.word	0x5800000c
2000844c:	58000010 	.word	0x58000010
20008450:	58000014 	.word	0x58000014

20008454 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
20008454:	b480      	push	{r7}
20008456:	b087      	sub	sp, #28
20008458:	af00      	add	r7, sp, #0
2000845a:	60f8      	str	r0, [r7, #12]
2000845c:	460b      	mov	r3, r1
2000845e:	607a      	str	r2, [r7, #4]
20008460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
20008462:	2300      	movs	r3, #0
20008464:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
20008466:	68fb      	ldr	r3, [r7, #12]
20008468:	2b00      	cmp	r3, #0
2000846a:	d101      	bne.n	20008470 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
2000846c:	2301      	movs	r3, #1
2000846e:	e00a      	b.n	20008486 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
20008470:	7afb      	ldrb	r3, [r7, #11]
20008472:	2b00      	cmp	r3, #0
20008474:	d103      	bne.n	2000847e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
20008476:	68fb      	ldr	r3, [r7, #12]
20008478:	687a      	ldr	r2, [r7, #4]
2000847a:	605a      	str	r2, [r3, #4]
      break;
2000847c:	e002      	b.n	20008484 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
2000847e:	2301      	movs	r3, #1
20008480:	75fb      	strb	r3, [r7, #23]
      break;
20008482:	bf00      	nop
  }

  return status;
20008484:	7dfb      	ldrb	r3, [r7, #23]
}
20008486:	4618      	mov	r0, r3
20008488:	371c      	adds	r7, #28
2000848a:	46bd      	mov	sp, r7
2000848c:	f85d 7b04 	ldr.w	r7, [sp], #4
20008490:	4770      	bx	lr

20008492 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
20008492:	b480      	push	{r7}
20008494:	b083      	sub	sp, #12
20008496:	af00      	add	r7, sp, #0
20008498:	6078      	str	r0, [r7, #4]
2000849a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
2000849c:	687b      	ldr	r3, [r7, #4]
2000849e:	2b00      	cmp	r3, #0
200084a0:	d101      	bne.n	200084a6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
200084a2:	2301      	movs	r3, #1
200084a4:	e003      	b.n	200084ae <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
200084a6:	687b      	ldr	r3, [r7, #4]
200084a8:	683a      	ldr	r2, [r7, #0]
200084aa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
200084ac:	2300      	movs	r3, #0
  }
}
200084ae:	4618      	mov	r0, r3
200084b0:	370c      	adds	r7, #12
200084b2:	46bd      	mov	sp, r7
200084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200084b8:	4770      	bx	lr
	...

200084bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
200084bc:	b580      	push	{r7, lr}
200084be:	b086      	sub	sp, #24
200084c0:	af00      	add	r7, sp, #0
200084c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
200084c4:	687b      	ldr	r3, [r7, #4]
200084c6:	681b      	ldr	r3, [r3, #0]
200084c8:	0c1b      	lsrs	r3, r3, #16
200084ca:	f003 0303 	and.w	r3, r3, #3
200084ce:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
200084d0:	687b      	ldr	r3, [r7, #4]
200084d2:	681b      	ldr	r3, [r3, #0]
200084d4:	f003 031f 	and.w	r3, r3, #31
200084d8:	2201      	movs	r2, #1
200084da:	fa02 f303 	lsl.w	r3, r2, r3
200084de:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
200084e0:	697b      	ldr	r3, [r7, #20]
200084e2:	011a      	lsls	r2, r3, #4
200084e4:	4b0c      	ldr	r3, [pc, #48]	@ (20008518 <HAL_EXTI_IRQHandler+0x5c>)
200084e6:	4413      	add	r3, r2
200084e8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
200084ea:	68fb      	ldr	r3, [r7, #12]
200084ec:	681b      	ldr	r3, [r3, #0]
200084ee:	693a      	ldr	r2, [r7, #16]
200084f0:	4013      	ands	r3, r2
200084f2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
200084f4:	68bb      	ldr	r3, [r7, #8]
200084f6:	2b00      	cmp	r3, #0
200084f8:	d009      	beq.n	2000850e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
200084fa:	68fb      	ldr	r3, [r7, #12]
200084fc:	693a      	ldr	r2, [r7, #16]
200084fe:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
20008500:	687b      	ldr	r3, [r7, #4]
20008502:	685b      	ldr	r3, [r3, #4]
20008504:	2b00      	cmp	r3, #0
20008506:	d002      	beq.n	2000850e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
20008508:	687b      	ldr	r3, [r7, #4]
2000850a:	685b      	ldr	r3, [r3, #4]
2000850c:	4798      	blx	r3
    }
  }
}
2000850e:	bf00      	nop
20008510:	3718      	adds	r7, #24
20008512:	46bd      	mov	sp, r7
20008514:	bd80      	pop	{r7, pc}
20008516:	bf00      	nop
20008518:	58000088 	.word	0x58000088

2000851c <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
2000851c:	b480      	push	{r7}
2000851e:	b089      	sub	sp, #36	@ 0x24
20008520:	af00      	add	r7, sp, #0
20008522:	6078      	str	r0, [r7, #4]
20008524:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
20008526:	687b      	ldr	r3, [r7, #4]
20008528:	681b      	ldr	r3, [r3, #0]
2000852a:	0c1b      	lsrs	r3, r3, #16
2000852c:	f003 0303 	and.w	r3, r3, #3
20008530:	61fb      	str	r3, [r7, #28]
  linepos = (hexti->Line & EXTI_PIN_MASK);
20008532:	687b      	ldr	r3, [r7, #4]
20008534:	681b      	ldr	r3, [r3, #0]
20008536:	f003 031f 	and.w	r3, r3, #31
2000853a:	61bb      	str	r3, [r7, #24]
  maskline = (1UL << linepos);
2000853c:	2201      	movs	r2, #1
2000853e:	69bb      	ldr	r3, [r7, #24]
20008540:	fa02 f303 	lsl.w	r3, r2, r3
20008544:	617b      	str	r3, [r7, #20]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
20008546:	69fb      	ldr	r3, [r7, #28]
20008548:	011a      	lsls	r2, r3, #4
2000854a:	4b09      	ldr	r3, [pc, #36]	@ (20008570 <HAL_EXTI_GetPending+0x54>)
2000854c:	4413      	add	r3, r2
2000854e:	613b      	str	r3, [r7, #16]
#endif /* DUAL_CORE */

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
20008550:	693b      	ldr	r3, [r7, #16]
20008552:	681a      	ldr	r2, [r3, #0]
20008554:	697b      	ldr	r3, [r7, #20]
20008556:	401a      	ands	r2, r3
20008558:	69bb      	ldr	r3, [r7, #24]
2000855a:	fa22 f303 	lsr.w	r3, r2, r3
2000855e:	60fb      	str	r3, [r7, #12]
  return regval;
20008560:	68fb      	ldr	r3, [r7, #12]
}
20008562:	4618      	mov	r0, r3
20008564:	3724      	adds	r7, #36	@ 0x24
20008566:	46bd      	mov	sp, r7
20008568:	f85d 7b04 	ldr.w	r7, [sp], #4
2000856c:	4770      	bx	lr
2000856e:	bf00      	nop
20008570:	58000088 	.word	0x58000088

20008574 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20008574:	b480      	push	{r7}
20008576:	b087      	sub	sp, #28
20008578:	af00      	add	r7, sp, #0
2000857a:	6078      	str	r0, [r7, #4]
2000857c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
2000857e:	687b      	ldr	r3, [r7, #4]
20008580:	681b      	ldr	r3, [r3, #0]
20008582:	0c1b      	lsrs	r3, r3, #16
20008584:	f003 0303 	and.w	r3, r3, #3
20008588:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
2000858a:	687b      	ldr	r3, [r7, #4]
2000858c:	681b      	ldr	r3, [r3, #0]
2000858e:	f003 031f 	and.w	r3, r3, #31
20008592:	2201      	movs	r2, #1
20008594:	fa02 f303 	lsl.w	r3, r2, r3
20008598:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
2000859a:	697b      	ldr	r3, [r7, #20]
2000859c:	011a      	lsls	r2, r3, #4
2000859e:	4b06      	ldr	r3, [pc, #24]	@ (200085b8 <HAL_EXTI_ClearPending+0x44>)
200085a0:	4413      	add	r3, r2
200085a2:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Clear Pending bit */
  *regaddr =  maskline;
200085a4:	68fb      	ldr	r3, [r7, #12]
200085a6:	693a      	ldr	r2, [r7, #16]
200085a8:	601a      	str	r2, [r3, #0]
}
200085aa:	bf00      	nop
200085ac:	371c      	adds	r7, #28
200085ae:	46bd      	mov	sp, r7
200085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200085b4:	4770      	bx	lr
200085b6:	bf00      	nop
200085b8:	58000088 	.word	0x58000088

200085bc <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
200085bc:	b480      	push	{r7}
200085be:	b087      	sub	sp, #28
200085c0:	af00      	add	r7, sp, #0
200085c2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
200085c4:	687b      	ldr	r3, [r7, #4]
200085c6:	681b      	ldr	r3, [r3, #0]
200085c8:	0c1b      	lsrs	r3, r3, #16
200085ca:	f003 0303 	and.w	r3, r3, #3
200085ce:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
200085d0:	687b      	ldr	r3, [r7, #4]
200085d2:	681b      	ldr	r3, [r3, #0]
200085d4:	f003 031f 	and.w	r3, r3, #31
200085d8:	2201      	movs	r2, #1
200085da:	fa02 f303 	lsl.w	r3, r2, r3
200085de:	613b      	str	r3, [r7, #16]

  regaddr = (__IO uint32_t *)(&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
200085e0:	697b      	ldr	r3, [r7, #20]
200085e2:	015a      	lsls	r2, r3, #5
200085e4:	4b05      	ldr	r3, [pc, #20]	@ (200085fc <HAL_EXTI_GenerateSWI+0x40>)
200085e6:	4413      	add	r3, r2
200085e8:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
200085ea:	68fb      	ldr	r3, [r7, #12]
200085ec:	693a      	ldr	r2, [r7, #16]
200085ee:	601a      	str	r2, [r3, #0]
}
200085f0:	bf00      	nop
200085f2:	371c      	adds	r7, #28
200085f4:	46bd      	mov	sp, r7
200085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200085fa:	4770      	bx	lr
200085fc:	58000008 	.word	0x58000008

20008600 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
20008600:	b580      	push	{r7, lr}
20008602:	b08a      	sub	sp, #40	@ 0x28
20008604:	af00      	add	r7, sp, #0
20008606:	60f8      	str	r0, [r7, #12]
20008608:	60b9      	str	r1, [r7, #8]
2000860a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
2000860c:	68bb      	ldr	r3, [r7, #8]
2000860e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
20008610:	687b      	ldr	r3, [r7, #4]
20008612:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
20008614:	2308      	movs	r3, #8
20008616:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20008618:	4b2f      	ldr	r3, [pc, #188]	@ (200086d8 <HAL_FLASH_Program+0xd8>)
2000861a:	7d1b      	ldrb	r3, [r3, #20]
2000861c:	2b01      	cmp	r3, #1
2000861e:	d101      	bne.n	20008624 <HAL_FLASH_Program+0x24>
20008620:	2302      	movs	r3, #2
20008622:	e054      	b.n	200086ce <HAL_FLASH_Program+0xce>
20008624:	4b2c      	ldr	r3, [pc, #176]	@ (200086d8 <HAL_FLASH_Program+0xd8>)
20008626:	2201      	movs	r2, #1
20008628:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
2000862a:	68bb      	ldr	r3, [r7, #8]
2000862c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20008630:	d316      	bcc.n	20008660 <HAL_FLASH_Program+0x60>
20008632:	68bb      	ldr	r3, [r7, #8]
20008634:	4a29      	ldr	r2, [pc, #164]	@ (200086dc <HAL_FLASH_Program+0xdc>)
20008636:	4293      	cmp	r3, r2
20008638:	d812      	bhi.n	20008660 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
2000863a:	2301      	movs	r3, #1
2000863c:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
2000863e:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20008640:	4b25      	ldr	r3, [pc, #148]	@ (200086d8 <HAL_FLASH_Program+0xd8>)
20008642:	2200      	movs	r2, #0
20008644:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
20008646:	6979      	ldr	r1, [r7, #20]
20008648:	f24c 3050 	movw	r0, #50000	@ 0xc350
2000864c:	f000 fa20 	bl	20008a90 <FLASH_WaitForLastOperation>
20008650:	4603      	mov	r3, r0
20008652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
20008656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2000865a:	2b00      	cmp	r3, #0
2000865c:	d132      	bne.n	200086c4 <HAL_FLASH_Program+0xc4>
2000865e:	e001      	b.n	20008664 <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
20008660:	2301      	movs	r3, #1
20008662:	e034      	b.n	200086ce <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
20008664:	4b1e      	ldr	r3, [pc, #120]	@ (200086e0 <HAL_FLASH_Program+0xe0>)
20008666:	68db      	ldr	r3, [r3, #12]
20008668:	4a1d      	ldr	r2, [pc, #116]	@ (200086e0 <HAL_FLASH_Program+0xe0>)
2000866a:	f043 0302 	orr.w	r3, r3, #2
2000866e:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
20008670:	f3bf 8f6f 	isb	sy
}
20008674:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
20008676:	f3bf 8f4f 	dsb	sy
}
2000867a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
2000867c:	69fb      	ldr	r3, [r7, #28]
2000867e:	681a      	ldr	r2, [r3, #0]
20008680:	6a3b      	ldr	r3, [r7, #32]
20008682:	601a      	str	r2, [r3, #0]
        dest_addr++;
20008684:	6a3b      	ldr	r3, [r7, #32]
20008686:	3304      	adds	r3, #4
20008688:	623b      	str	r3, [r7, #32]
        src_addr++;
2000868a:	69fb      	ldr	r3, [r7, #28]
2000868c:	3304      	adds	r3, #4
2000868e:	61fb      	str	r3, [r7, #28]
        row_index--;
20008690:	7efb      	ldrb	r3, [r7, #27]
20008692:	3b01      	subs	r3, #1
20008694:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
20008696:	7efb      	ldrb	r3, [r7, #27]
20008698:	2b00      	cmp	r3, #0
2000869a:	d1ef      	bne.n	2000867c <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
2000869c:	f3bf 8f6f 	isb	sy
}
200086a0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
200086a2:	f3bf 8f4f 	dsb	sy
}
200086a6:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
200086a8:	6979      	ldr	r1, [r7, #20]
200086aa:	f24c 3050 	movw	r0, #50000	@ 0xc350
200086ae:	f000 f9ef 	bl	20008a90 <FLASH_WaitForLastOperation>
200086b2:	4603      	mov	r3, r0
200086b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
200086b8:	4b09      	ldr	r3, [pc, #36]	@ (200086e0 <HAL_FLASH_Program+0xe0>)
200086ba:	68db      	ldr	r3, [r3, #12]
200086bc:	4a08      	ldr	r2, [pc, #32]	@ (200086e0 <HAL_FLASH_Program+0xe0>)
200086be:	f023 0302 	bic.w	r3, r3, #2
200086c2:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
200086c4:	4b04      	ldr	r3, [pc, #16]	@ (200086d8 <HAL_FLASH_Program+0xd8>)
200086c6:	2200      	movs	r2, #0
200086c8:	751a      	strb	r2, [r3, #20]

  return status;
200086ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
200086ce:	4618      	mov	r0, r3
200086d0:	3728      	adds	r7, #40	@ 0x28
200086d2:	46bd      	mov	sp, r7
200086d4:	bd80      	pop	{r7, pc}
200086d6:	bf00      	nop
200086d8:	20000590 	.word	0x20000590
200086dc:	0801ffff 	.word	0x0801ffff
200086e0:	52002000 	.word	0x52002000

200086e4 <HAL_FLASH_Program_IT>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
200086e4:	b580      	push	{r7, lr}
200086e6:	b08a      	sub	sp, #40	@ 0x28
200086e8:	af00      	add	r7, sp, #0
200086ea:	60f8      	str	r0, [r7, #12]
200086ec:	60b9      	str	r1, [r7, #8]
200086ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t*)FlashAddress;
200086f0:	68bb      	ldr	r3, [r7, #8]
200086f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
200086f4:	687b      	ldr	r3, [r7, #4]
200086f6:	623b      	str	r3, [r7, #32]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
200086f8:	2308      	movs	r3, #8
200086fa:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
200086fc:	4b2d      	ldr	r3, [pc, #180]	@ (200087b4 <HAL_FLASH_Program_IT+0xd0>)
200086fe:	7d1b      	ldrb	r3, [r3, #20]
20008700:	2b01      	cmp	r3, #1
20008702:	d101      	bne.n	20008708 <HAL_FLASH_Program_IT+0x24>
20008704:	2302      	movs	r3, #2
20008706:	e050      	b.n	200087aa <HAL_FLASH_Program_IT+0xc6>
20008708:	4b2a      	ldr	r3, [pc, #168]	@ (200087b4 <HAL_FLASH_Program_IT+0xd0>)
2000870a:	2201      	movs	r2, #1
2000870c:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2000870e:	4b29      	ldr	r3, [pc, #164]	@ (200087b4 <HAL_FLASH_Program_IT+0xd0>)
20008710:	2200      	movs	r2, #0
20008712:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
20008714:	68bb      	ldr	r3, [r7, #8]
20008716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
2000871a:	d311      	bcc.n	20008740 <HAL_FLASH_Program_IT+0x5c>
2000871c:	68bb      	ldr	r3, [r7, #8]
2000871e:	4a26      	ldr	r2, [pc, #152]	@ (200087b8 <HAL_FLASH_Program_IT+0xd4>)
20008720:	4293      	cmp	r3, r2
20008722:	d80d      	bhi.n	20008740 <HAL_FLASH_Program_IT+0x5c>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
20008724:	2301      	movs	r3, #1
20008726:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
20008728:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
2000872a:	69b9      	ldr	r1, [r7, #24]
2000872c:	f24c 3050 	movw	r0, #50000	@ 0xc350
20008730:	f000 f9ae 	bl	20008a90 <FLASH_WaitForLastOperation>
20008734:	4603      	mov	r3, r0
20008736:	75fb      	strb	r3, [r7, #23]

  if (status != HAL_OK)
20008738:	7dfb      	ldrb	r3, [r7, #23]
2000873a:	2b00      	cmp	r3, #0
2000873c:	d006      	beq.n	2000874c <HAL_FLASH_Program_IT+0x68>
2000873e:	e001      	b.n	20008744 <HAL_FLASH_Program_IT+0x60>
    return HAL_ERROR;
20008740:	2301      	movs	r3, #1
20008742:	e032      	b.n	200087aa <HAL_FLASH_Program_IT+0xc6>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
20008744:	4b1b      	ldr	r3, [pc, #108]	@ (200087b4 <HAL_FLASH_Program_IT+0xd0>)
20008746:	2200      	movs	r2, #0
20008748:	751a      	strb	r2, [r3, #20]
2000874a:	e02d      	b.n	200087a8 <HAL_FLASH_Program_IT+0xc4>
  }
  else
  {
    pFlash.Address = FlashAddress;
2000874c:	4a19      	ldr	r2, [pc, #100]	@ (200087b4 <HAL_FLASH_Program_IT+0xd0>)
2000874e:	68bb      	ldr	r3, [r7, #8]
20008750:	6113      	str	r3, [r2, #16]
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#else /* Single Bank */
    /* Set internal variables used by the IRQ handler */
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK1;
20008752:	4b18      	ldr	r3, [pc, #96]	@ (200087b4 <HAL_FLASH_Program_IT+0xd0>)
20008754:	2203      	movs	r2, #3
20008756:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR1, FLASH_CR_PG);
20008758:	4b18      	ldr	r3, [pc, #96]	@ (200087bc <HAL_FLASH_Program_IT+0xd8>)
2000875a:	68db      	ldr	r3, [r3, #12]
2000875c:	4a17      	ldr	r2, [pc, #92]	@ (200087bc <HAL_FLASH_Program_IT+0xd8>)
2000875e:	f043 0302 	orr.w	r3, r3, #2
20008762:	60d3      	str	r3, [r2, #12]
    }

      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
20008764:	4b15      	ldr	r3, [pc, #84]	@ (200087bc <HAL_FLASH_Program_IT+0xd8>)
20008766:	68db      	ldr	r3, [r3, #12]
20008768:	4a14      	ldr	r2, [pc, #80]	@ (200087bc <HAL_FLASH_Program_IT+0xd8>)
2000876a:	f443 03de 	orr.w	r3, r3, #7274496	@ 0x6f0000
2000876e:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
20008770:	f3bf 8f6f 	isb	sy
}
20008774:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
20008776:	f3bf 8f4f 	dsb	sy
}
2000877a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
2000877c:	6a3b      	ldr	r3, [r7, #32]
2000877e:	681a      	ldr	r2, [r3, #0]
20008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008782:	601a      	str	r2, [r3, #0]
        dest_addr++;
20008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20008786:	3304      	adds	r3, #4
20008788:	627b      	str	r3, [r7, #36]	@ 0x24
        src_addr++;
2000878a:	6a3b      	ldr	r3, [r7, #32]
2000878c:	3304      	adds	r3, #4
2000878e:	623b      	str	r3, [r7, #32]
        row_index--;
20008790:	7ffb      	ldrb	r3, [r7, #31]
20008792:	3b01      	subs	r3, #1
20008794:	77fb      	strb	r3, [r7, #31]
      } while (row_index != 0U);
20008796:	7ffb      	ldrb	r3, [r7, #31]
20008798:	2b00      	cmp	r3, #0
2000879a:	d1ef      	bne.n	2000877c <HAL_FLASH_Program_IT+0x98>
  __ASM volatile ("isb 0xF":::"memory");
2000879c:	f3bf 8f6f 	isb	sy
}
200087a0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
200087a2:	f3bf 8f4f 	dsb	sy
}
200087a6:	bf00      	nop

    __ISB();
    __DSB();
  }

  return status;
200087a8:	7dfb      	ldrb	r3, [r7, #23]
}
200087aa:	4618      	mov	r0, r3
200087ac:	3728      	adds	r7, #40	@ 0x28
200087ae:	46bd      	mov	sp, r7
200087b0:	bd80      	pop	{r7, pc}
200087b2:	bf00      	nop
200087b4:	20000590 	.word	0x20000590
200087b8:	0801ffff 	.word	0x0801ffff
200087bc:	52002000 	.word	0x52002000

200087c0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
200087c0:	b580      	push	{r7, lr}
200087c2:	b084      	sub	sp, #16
200087c4:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
200087c6:	4b53      	ldr	r3, [pc, #332]	@ (20008914 <HAL_FLASH_IRQHandler+0x154>)
200087c8:	691b      	ldr	r3, [r3, #16]
200087ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200087ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200087d2:	d15c      	bne.n	2000888e <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
200087d4:	4b50      	ldr	r3, [pc, #320]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200087d6:	781b      	ldrb	r3, [r3, #0]
200087d8:	b2db      	uxtb	r3, r3
200087da:	2b01      	cmp	r3, #1
200087dc:	d132      	bne.n	20008844 <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
200087de:	4b4e      	ldr	r3, [pc, #312]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200087e0:	685b      	ldr	r3, [r3, #4]
200087e2:	3b01      	subs	r3, #1
200087e4:	4a4c      	ldr	r2, [pc, #304]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200087e6:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
200087e8:	4b4b      	ldr	r3, [pc, #300]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200087ea:	685b      	ldr	r3, [r3, #4]
200087ec:	2b00      	cmp	r3, #0
200087ee:	d018      	beq.n	20008822 <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
200087f0:	4b49      	ldr	r3, [pc, #292]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200087f2:	68db      	ldr	r3, [r3, #12]
200087f4:	4618      	mov	r0, r3
200087f6:	f000 f891 	bl	2000891c <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
200087fa:	4b46      	ldr	r3, [pc, #280]	@ (20008914 <HAL_FLASH_IRQHandler+0x154>)
200087fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20008800:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
20008802:	4b45      	ldr	r3, [pc, #276]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
20008804:	68db      	ldr	r3, [r3, #12]
20008806:	3301      	adds	r3, #1
20008808:	4a43      	ldr	r2, [pc, #268]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
2000880a:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
2000880c:	4b42      	ldr	r3, [pc, #264]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
2000880e:	68db      	ldr	r3, [r3, #12]
20008810:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
20008812:	4b41      	ldr	r3, [pc, #260]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
20008814:	689b      	ldr	r3, [r3, #8]
20008816:	461a      	mov	r2, r3
20008818:	2101      	movs	r1, #1
2000881a:	68f8      	ldr	r0, [r7, #12]
2000881c:	f000 fcd6 	bl	200091cc <FLASH_Erase_Sector>
20008820:	e035      	b.n	2000888e <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
20008822:	4b3d      	ldr	r3, [pc, #244]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
20008824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
20008828:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
2000882a:	4b3b      	ldr	r3, [pc, #236]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
2000882c:	2200      	movs	r2, #0
2000882e:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
20008830:	4b39      	ldr	r3, [pc, #228]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
20008832:	68db      	ldr	r3, [r3, #12]
20008834:	4618      	mov	r0, r3
20008836:	f000 f871 	bl	2000891c <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
2000883a:	4b36      	ldr	r3, [pc, #216]	@ (20008914 <HAL_FLASH_IRQHandler+0x154>)
2000883c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20008840:	615a      	str	r2, [r3, #20]
20008842:	e024      	b.n	2000888e <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
20008844:	4b34      	ldr	r3, [pc, #208]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
20008846:	781b      	ldrb	r3, [r3, #0]
20008848:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
2000884a:	7afb      	ldrb	r3, [r7, #11]
2000884c:	2b02      	cmp	r3, #2
2000884e:	d002      	beq.n	20008856 <HAL_FLASH_IRQHandler+0x96>
20008850:	7afb      	ldrb	r3, [r7, #11]
20008852:	2b07      	cmp	r3, #7
20008854:	d103      	bne.n	2000885e <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
20008856:	2001      	movs	r0, #1
20008858:	f000 f860 	bl	2000891c <HAL_FLASH_EndOfOperationCallback>
2000885c:	e007      	b.n	2000886e <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
2000885e:	7afb      	ldrb	r3, [r7, #11]
20008860:	2b03      	cmp	r3, #3
20008862:	d104      	bne.n	2000886e <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
20008864:	4b2c      	ldr	r3, [pc, #176]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
20008866:	691b      	ldr	r3, [r3, #16]
20008868:	4618      	mov	r0, r3
2000886a:	f000 f857 	bl	2000891c <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
2000886e:	7afb      	ldrb	r3, [r7, #11]
20008870:	2b04      	cmp	r3, #4
20008872:	d00c      	beq.n	2000888e <HAL_FLASH_IRQHandler+0xce>
20008874:	7afb      	ldrb	r3, [r7, #11]
20008876:	2b05      	cmp	r3, #5
20008878:	d009      	beq.n	2000888e <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
2000887a:	7afb      	ldrb	r3, [r7, #11]
2000887c:	2b06      	cmp	r3, #6
2000887e:	d006      	beq.n	2000888e <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20008880:	4b25      	ldr	r3, [pc, #148]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
20008882:	2200      	movs	r2, #0
20008884:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
20008886:	4b23      	ldr	r3, [pc, #140]	@ (20008914 <HAL_FLASH_IRQHandler+0x154>)
20008888:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
2000888c:	615a      	str	r2, [r3, #20]
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
2000888e:	4b21      	ldr	r3, [pc, #132]	@ (20008914 <HAL_FLASH_IRQHandler+0x154>)
20008890:	691b      	ldr	r3, [r3, #16]
20008892:	f403 03dc 	and.w	r3, r3, #7208960	@ 0x6e0000
20008896:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
20008898:	687b      	ldr	r3, [r7, #4]
2000889a:	2b00      	cmp	r3, #0
2000889c:	d028      	beq.n	200088f0 <HAL_FLASH_IRQHandler+0x130>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
2000889e:	4b1e      	ldr	r3, [pc, #120]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200088a0:	699a      	ldr	r2, [r3, #24]
200088a2:	687b      	ldr	r3, [r7, #4]
200088a4:	4313      	orrs	r3, r2
200088a6:	4a1c      	ldr	r2, [pc, #112]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200088a8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
200088aa:	4a1a      	ldr	r2, [pc, #104]	@ (20008914 <HAL_FLASH_IRQHandler+0x154>)
200088ac:	687b      	ldr	r3, [r7, #4]
200088ae:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
200088b0:	4b19      	ldr	r3, [pc, #100]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200088b2:	781b      	ldrb	r3, [r3, #0]
200088b4:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
200088b6:	7afb      	ldrb	r3, [r7, #11]
200088b8:	2b01      	cmp	r3, #1
200088ba:	d107      	bne.n	200088cc <HAL_FLASH_IRQHandler+0x10c>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
200088bc:	4b16      	ldr	r3, [pc, #88]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200088be:	68db      	ldr	r3, [r3, #12]
200088c0:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
200088c2:	4b15      	ldr	r3, [pc, #84]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200088c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
200088c8:	60da      	str	r2, [r3, #12]
200088ca:	e00b      	b.n	200088e4 <HAL_FLASH_IRQHandler+0x124>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
200088cc:	7afb      	ldrb	r3, [r7, #11]
200088ce:	2b02      	cmp	r3, #2
200088d0:	d002      	beq.n	200088d8 <HAL_FLASH_IRQHandler+0x118>
200088d2:	7afb      	ldrb	r3, [r7, #11]
200088d4:	2b07      	cmp	r3, #7
200088d6:	d102      	bne.n	200088de <HAL_FLASH_IRQHandler+0x11e>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
200088d8:	2301      	movs	r3, #1
200088da:	60fb      	str	r3, [r7, #12]
200088dc:	e002      	b.n	200088e4 <HAL_FLASH_IRQHandler+0x124>
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
200088de:	4b0e      	ldr	r3, [pc, #56]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200088e0:	691b      	ldr	r3, [r3, #16]
200088e2:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
200088e4:	4b0c      	ldr	r3, [pc, #48]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200088e6:	2200      	movs	r2, #0
200088e8:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
200088ea:	68f8      	ldr	r0, [r7, #12]
200088ec:	f000 f820 	bl	20008930 <HAL_FLASH_OperationErrorCallback>
  }

#endif /* USE_FLASH_ECC */
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
200088f0:	4b09      	ldr	r3, [pc, #36]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
200088f2:	781b      	ldrb	r3, [r3, #0]
200088f4:	b2db      	uxtb	r3, r3
200088f6:	2b00      	cmp	r3, #0
200088f8:	d108      	bne.n	2000890c <HAL_FLASH_IRQHandler+0x14c>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
200088fa:	4b06      	ldr	r3, [pc, #24]	@ (20008914 <HAL_FLASH_IRQHandler+0x154>)
200088fc:	68db      	ldr	r3, [r3, #12]
200088fe:	4a05      	ldr	r2, [pc, #20]	@ (20008914 <HAL_FLASH_IRQHandler+0x154>)
20008900:	f423 03de 	bic.w	r3, r3, #7274496	@ 0x6f0000
20008904:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
20008906:	4b04      	ldr	r3, [pc, #16]	@ (20008918 <HAL_FLASH_IRQHandler+0x158>)
20008908:	2200      	movs	r2, #0
2000890a:	751a      	strb	r2, [r3, #20]
  }
}
2000890c:	bf00      	nop
2000890e:	3710      	adds	r7, #16
20008910:	46bd      	mov	sp, r7
20008912:	bd80      	pop	{r7, pc}
20008914:	52002000 	.word	0x52002000
20008918:	20000590 	.word	0x20000590

2000891c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
2000891c:	b480      	push	{r7}
2000891e:	b083      	sub	sp, #12
20008920:	af00      	add	r7, sp, #0
20008922:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
20008924:	bf00      	nop
20008926:	370c      	adds	r7, #12
20008928:	46bd      	mov	sp, r7
2000892a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000892e:	4770      	bx	lr

20008930 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
20008930:	b480      	push	{r7}
20008932:	b083      	sub	sp, #12
20008934:	af00      	add	r7, sp, #0
20008936:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
20008938:	bf00      	nop
2000893a:	370c      	adds	r7, #12
2000893c:	46bd      	mov	sp, r7
2000893e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008942:	4770      	bx	lr

20008944 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20008944:	b480      	push	{r7}
20008946:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
20008948:	4b0c      	ldr	r3, [pc, #48]	@ (2000897c <HAL_FLASH_Unlock+0x38>)
2000894a:	68db      	ldr	r3, [r3, #12]
2000894c:	f003 0301 	and.w	r3, r3, #1
20008950:	2b00      	cmp	r3, #0
20008952:	d00d      	beq.n	20008970 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
20008954:	4b09      	ldr	r3, [pc, #36]	@ (2000897c <HAL_FLASH_Unlock+0x38>)
20008956:	4a0a      	ldr	r2, [pc, #40]	@ (20008980 <HAL_FLASH_Unlock+0x3c>)
20008958:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
2000895a:	4b08      	ldr	r3, [pc, #32]	@ (2000897c <HAL_FLASH_Unlock+0x38>)
2000895c:	4a09      	ldr	r2, [pc, #36]	@ (20008984 <HAL_FLASH_Unlock+0x40>)
2000895e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
20008960:	4b06      	ldr	r3, [pc, #24]	@ (2000897c <HAL_FLASH_Unlock+0x38>)
20008962:	68db      	ldr	r3, [r3, #12]
20008964:	f003 0301 	and.w	r3, r3, #1
20008968:	2b00      	cmp	r3, #0
2000896a:	d001      	beq.n	20008970 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
2000896c:	2301      	movs	r3, #1
2000896e:	e000      	b.n	20008972 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
20008970:	2300      	movs	r3, #0
}
20008972:	4618      	mov	r0, r3
20008974:	46bd      	mov	sp, r7
20008976:	f85d 7b04 	ldr.w	r7, [sp], #4
2000897a:	4770      	bx	lr
2000897c:	52002000 	.word	0x52002000
20008980:	45670123 	.word	0x45670123
20008984:	cdef89ab 	.word	0xcdef89ab

20008988 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20008988:	b480      	push	{r7}
2000898a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
2000898c:	4b09      	ldr	r3, [pc, #36]	@ (200089b4 <HAL_FLASH_Lock+0x2c>)
2000898e:	68db      	ldr	r3, [r3, #12]
20008990:	4a08      	ldr	r2, [pc, #32]	@ (200089b4 <HAL_FLASH_Lock+0x2c>)
20008992:	f043 0301 	orr.w	r3, r3, #1
20008996:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
20008998:	4b06      	ldr	r3, [pc, #24]	@ (200089b4 <HAL_FLASH_Lock+0x2c>)
2000899a:	68db      	ldr	r3, [r3, #12]
2000899c:	f003 0301 	and.w	r3, r3, #1
200089a0:	2b00      	cmp	r3, #0
200089a2:	d101      	bne.n	200089a8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
200089a4:	2301      	movs	r3, #1
200089a6:	e000      	b.n	200089aa <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
200089a8:	2300      	movs	r3, #0
}
200089aa:	4618      	mov	r0, r3
200089ac:	46bd      	mov	sp, r7
200089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200089b2:	4770      	bx	lr
200089b4:	52002000 	.word	0x52002000

200089b8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
200089b8:	b480      	push	{r7}
200089ba:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
200089bc:	4b0c      	ldr	r3, [pc, #48]	@ (200089f0 <HAL_FLASH_OB_Unlock+0x38>)
200089be:	699b      	ldr	r3, [r3, #24]
200089c0:	f003 0301 	and.w	r3, r3, #1
200089c4:	2b00      	cmp	r3, #0
200089c6:	d00d      	beq.n	200089e4 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
200089c8:	4b09      	ldr	r3, [pc, #36]	@ (200089f0 <HAL_FLASH_OB_Unlock+0x38>)
200089ca:	4a0a      	ldr	r2, [pc, #40]	@ (200089f4 <HAL_FLASH_OB_Unlock+0x3c>)
200089cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
200089ce:	4b08      	ldr	r3, [pc, #32]	@ (200089f0 <HAL_FLASH_OB_Unlock+0x38>)
200089d0:	4a09      	ldr	r2, [pc, #36]	@ (200089f8 <HAL_FLASH_OB_Unlock+0x40>)
200089d2:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
200089d4:	4b06      	ldr	r3, [pc, #24]	@ (200089f0 <HAL_FLASH_OB_Unlock+0x38>)
200089d6:	699b      	ldr	r3, [r3, #24]
200089d8:	f003 0301 	and.w	r3, r3, #1
200089dc:	2b00      	cmp	r3, #0
200089de:	d001      	beq.n	200089e4 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
200089e0:	2301      	movs	r3, #1
200089e2:	e000      	b.n	200089e6 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
200089e4:	2300      	movs	r3, #0
}
200089e6:	4618      	mov	r0, r3
200089e8:	46bd      	mov	sp, r7
200089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200089ee:	4770      	bx	lr
200089f0:	52002000 	.word	0x52002000
200089f4:	08192a3b 	.word	0x08192a3b
200089f8:	4c5d6e7f 	.word	0x4c5d6e7f

200089fc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
200089fc:	b480      	push	{r7}
200089fe:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
20008a00:	4b09      	ldr	r3, [pc, #36]	@ (20008a28 <HAL_FLASH_OB_Lock+0x2c>)
20008a02:	699b      	ldr	r3, [r3, #24]
20008a04:	4a08      	ldr	r2, [pc, #32]	@ (20008a28 <HAL_FLASH_OB_Lock+0x2c>)
20008a06:	f043 0301 	orr.w	r3, r3, #1
20008a0a:	6193      	str	r3, [r2, #24]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) == 0U)
20008a0c:	4b06      	ldr	r3, [pc, #24]	@ (20008a28 <HAL_FLASH_OB_Lock+0x2c>)
20008a0e:	699b      	ldr	r3, [r3, #24]
20008a10:	f003 0301 	and.w	r3, r3, #1
20008a14:	2b00      	cmp	r3, #0
20008a16:	d101      	bne.n	20008a1c <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_ERROR;
20008a18:	2301      	movs	r3, #1
20008a1a:	e000      	b.n	20008a1e <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_OK;
20008a1c:	2300      	movs	r3, #0
}
20008a1e:	4618      	mov	r0, r3
20008a20:	46bd      	mov	sp, r7
20008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
20008a26:	4770      	bx	lr
20008a28:	52002000 	.word	0x52002000

20008a2c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
20008a2c:	b580      	push	{r7, lr}
20008a2e:	b082      	sub	sp, #8
20008a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
20008a32:	2101      	movs	r1, #1
20008a34:	f24c 3050 	movw	r0, #50000	@ 0xc350
20008a38:	f000 f8bc 	bl	20008bb4 <FLASH_CRC_WaitForLastOperation>
20008a3c:	4603      	mov	r3, r0
20008a3e:	2b00      	cmp	r3, #0
20008a40:	d002      	beq.n	20008a48 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
20008a42:	2301      	movs	r3, #1
20008a44:	71fb      	strb	r3, [r7, #7]
20008a46:	e001      	b.n	20008a4c <HAL_FLASH_OB_Launch+0x20>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
20008a48:	2300      	movs	r3, #0
20008a4a:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
20008a4c:	79fb      	ldrb	r3, [r7, #7]
20008a4e:	2b00      	cmp	r3, #0
20008a50:	d10b      	bne.n	20008a6a <HAL_FLASH_OB_Launch+0x3e>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
20008a52:	4b08      	ldr	r3, [pc, #32]	@ (20008a74 <HAL_FLASH_OB_Launch+0x48>)
20008a54:	699b      	ldr	r3, [r3, #24]
20008a56:	4a07      	ldr	r2, [pc, #28]	@ (20008a74 <HAL_FLASH_OB_Launch+0x48>)
20008a58:	f043 0302 	orr.w	r3, r3, #2
20008a5c:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20008a5e:	f24c 3050 	movw	r0, #50000	@ 0xc350
20008a62:	f000 f86b 	bl	20008b3c <FLASH_OB_WaitForLastOperation>
20008a66:	4603      	mov	r3, r0
20008a68:	71fb      	strb	r3, [r7, #7]
  }

  return status;
20008a6a:	79fb      	ldrb	r3, [r7, #7]
}
20008a6c:	4618      	mov	r0, r3
20008a6e:	3708      	adds	r7, #8
20008a70:	46bd      	mov	sp, r7
20008a72:	bd80      	pop	{r7, pc}
20008a74:	52002000 	.word	0x52002000

20008a78 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
  */

uint32_t HAL_FLASH_GetError(void)
{
20008a78:	b480      	push	{r7}
20008a7a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
20008a7c:	4b03      	ldr	r3, [pc, #12]	@ (20008a8c <HAL_FLASH_GetError+0x14>)
20008a7e:	699b      	ldr	r3, [r3, #24]
}
20008a80:	4618      	mov	r0, r3
20008a82:	46bd      	mov	sp, r7
20008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
20008a88:	4770      	bx	lr
20008a8a:	bf00      	nop
20008a8c:	20000590 	.word	0x20000590

20008a90 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
20008a90:	b580      	push	{r7, lr}
20008a92:	b086      	sub	sp, #24
20008a94:	af00      	add	r7, sp, #0
20008a96:	6078      	str	r0, [r7, #4]
20008a98:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
20008a9a:	2304      	movs	r3, #4
20008a9c:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
20008a9e:	2300      	movs	r3, #0
20008aa0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
20008aa2:	f7f9 fc0d 	bl	200022c0 <HAL_GetTick>
20008aa6:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
20008aa8:	e010      	b.n	20008acc <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
20008aaa:	687b      	ldr	r3, [r7, #4]
20008aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
20008ab0:	d00c      	beq.n	20008acc <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
20008ab2:	f7f9 fc05 	bl	200022c0 <HAL_GetTick>
20008ab6:	4602      	mov	r2, r0
20008ab8:	68fb      	ldr	r3, [r7, #12]
20008aba:	1ad3      	subs	r3, r2, r3
20008abc:	687a      	ldr	r2, [r7, #4]
20008abe:	429a      	cmp	r2, r3
20008ac0:	d302      	bcc.n	20008ac8 <FLASH_WaitForLastOperation+0x38>
20008ac2:	687b      	ldr	r3, [r7, #4]
20008ac4:	2b00      	cmp	r3, #0
20008ac6:	d101      	bne.n	20008acc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20008ac8:	2303      	movs	r3, #3
20008aca:	e02d      	b.n	20008b28 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
20008acc:	4b18      	ldr	r3, [pc, #96]	@ (20008b30 <FLASH_WaitForLastOperation+0xa0>)
20008ace:	691a      	ldr	r2, [r3, #16]
20008ad0:	693b      	ldr	r3, [r7, #16]
20008ad2:	4013      	ands	r3, r2
20008ad4:	693a      	ldr	r2, [r7, #16]
20008ad6:	429a      	cmp	r2, r3
20008ad8:	d0e7      	beq.n	20008aaa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
20008ada:	683b      	ldr	r3, [r7, #0]
20008adc:	2b01      	cmp	r3, #1
20008ade:	d104      	bne.n	20008aea <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
20008ae0:	4b13      	ldr	r3, [pc, #76]	@ (20008b30 <FLASH_WaitForLastOperation+0xa0>)
20008ae2:	691a      	ldr	r2, [r3, #16]
20008ae4:	4b13      	ldr	r3, [pc, #76]	@ (20008b34 <FLASH_WaitForLastOperation+0xa4>)
20008ae6:	4013      	ands	r3, r2
20008ae8:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
20008aea:	697b      	ldr	r3, [r7, #20]
20008aec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
20008af0:	2b00      	cmp	r3, #0
20008af2:	d00a      	beq.n	20008b0a <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
20008af4:	4b10      	ldr	r3, [pc, #64]	@ (20008b38 <FLASH_WaitForLastOperation+0xa8>)
20008af6:	699a      	ldr	r2, [r3, #24]
20008af8:	697b      	ldr	r3, [r7, #20]
20008afa:	4313      	orrs	r3, r2
20008afc:	4a0e      	ldr	r2, [pc, #56]	@ (20008b38 <FLASH_WaitForLastOperation+0xa8>)
20008afe:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
20008b00:	4a0b      	ldr	r2, [pc, #44]	@ (20008b30 <FLASH_WaitForLastOperation+0xa0>)
20008b02:	697b      	ldr	r3, [r7, #20]
20008b04:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
20008b06:	2301      	movs	r3, #1
20008b08:	e00e      	b.n	20008b28 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
20008b0a:	683b      	ldr	r3, [r7, #0]
20008b0c:	2b01      	cmp	r3, #1
20008b0e:	d10a      	bne.n	20008b26 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
20008b10:	4b07      	ldr	r3, [pc, #28]	@ (20008b30 <FLASH_WaitForLastOperation+0xa0>)
20008b12:	691b      	ldr	r3, [r3, #16]
20008b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20008b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20008b1c:	d103      	bne.n	20008b26 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
20008b1e:	4b04      	ldr	r3, [pc, #16]	@ (20008b30 <FLASH_WaitForLastOperation+0xa0>)
20008b20:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20008b24:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
20008b26:	2300      	movs	r3, #0
}
20008b28:	4618      	mov	r0, r3
20008b2a:	3718      	adds	r7, #24
20008b2c:	46bd      	mov	sp, r7
20008b2e:	bd80      	pop	{r7, pc}
20008b30:	52002000 	.word	0x52002000
20008b34:	17ee0000 	.word	0x17ee0000
20008b38:	20000590 	.word	0x20000590

20008b3c <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
20008b3c:	b580      	push	{r7, lr}
20008b3e:	b084      	sub	sp, #16
20008b40:	af00      	add	r7, sp, #0
20008b42:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
20008b44:	f7f9 fbbc 	bl	200022c0 <HAL_GetTick>
20008b48:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
20008b4a:	e010      	b.n	20008b6e <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
20008b4c:	687b      	ldr	r3, [r7, #4]
20008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
20008b52:	d00c      	beq.n	20008b6e <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
20008b54:	f7f9 fbb4 	bl	200022c0 <HAL_GetTick>
20008b58:	4602      	mov	r2, r0
20008b5a:	68fb      	ldr	r3, [r7, #12]
20008b5c:	1ad3      	subs	r3, r2, r3
20008b5e:	687a      	ldr	r2, [r7, #4]
20008b60:	429a      	cmp	r2, r3
20008b62:	d302      	bcc.n	20008b6a <FLASH_OB_WaitForLastOperation+0x2e>
20008b64:	687b      	ldr	r3, [r7, #4]
20008b66:	2b00      	cmp	r3, #0
20008b68:	d101      	bne.n	20008b6e <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
20008b6a:	2303      	movs	r3, #3
20008b6c:	e01a      	b.n	20008ba4 <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
20008b6e:	4b0f      	ldr	r3, [pc, #60]	@ (20008bac <FLASH_OB_WaitForLastOperation+0x70>)
20008b70:	69db      	ldr	r3, [r3, #28]
20008b72:	f003 0301 	and.w	r3, r3, #1
20008b76:	2b00      	cmp	r3, #0
20008b78:	d1e8      	bne.n	20008b4c <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
20008b7a:	4b0c      	ldr	r3, [pc, #48]	@ (20008bac <FLASH_OB_WaitForLastOperation+0x70>)
20008b7c:	69db      	ldr	r3, [r3, #28]
20008b7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
20008b82:	2b00      	cmp	r3, #0
20008b84:	d00d      	beq.n	20008ba2 <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
20008b86:	4b0a      	ldr	r3, [pc, #40]	@ (20008bb0 <FLASH_OB_WaitForLastOperation+0x74>)
20008b88:	699b      	ldr	r3, [r3, #24]
20008b8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20008b8e:	4a08      	ldr	r2, [pc, #32]	@ (20008bb0 <FLASH_OB_WaitForLastOperation+0x74>)
20008b90:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
20008b92:	4b06      	ldr	r3, [pc, #24]	@ (20008bac <FLASH_OB_WaitForLastOperation+0x70>)
20008b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20008b96:	4a05      	ldr	r2, [pc, #20]	@ (20008bac <FLASH_OB_WaitForLastOperation+0x70>)
20008b98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20008b9c:	6253      	str	r3, [r2, #36]	@ 0x24

    return HAL_ERROR;
20008b9e:	2301      	movs	r3, #1
20008ba0:	e000      	b.n	20008ba4 <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
20008ba2:	2300      	movs	r3, #0
}
20008ba4:	4618      	mov	r0, r3
20008ba6:	3710      	adds	r7, #16
20008ba8:	46bd      	mov	sp, r7
20008baa:	bd80      	pop	{r7, pc}
20008bac:	52002000 	.word	0x52002000
20008bb0:	20000590 	.word	0x20000590

20008bb4 <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
20008bb4:	b580      	push	{r7, lr}
20008bb6:	b084      	sub	sp, #16
20008bb8:	af00      	add	r7, sp, #0
20008bba:	6078      	str	r0, [r7, #4]
20008bbc:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
20008bbe:	f7f9 fb7f 	bl	200022c0 <HAL_GetTick>
20008bc2:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
20008bc4:	683b      	ldr	r3, [r7, #0]
20008bc6:	2b01      	cmp	r3, #1
20008bc8:	d102      	bne.n	20008bd0 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
20008bca:	2308      	movs	r3, #8
20008bcc:	60fb      	str	r3, [r7, #12]
20008bce:	e013      	b.n	20008bf8 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
20008bd0:	4b1a      	ldr	r3, [pc, #104]	@ (20008c3c <FLASH_CRC_WaitForLastOperation+0x88>)
20008bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
20008bd4:	e010      	b.n	20008bf8 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
20008bd6:	687b      	ldr	r3, [r7, #4]
20008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
20008bdc:	d00c      	beq.n	20008bf8 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
20008bde:	f7f9 fb6f 	bl	200022c0 <HAL_GetTick>
20008be2:	4602      	mov	r2, r0
20008be4:	68bb      	ldr	r3, [r7, #8]
20008be6:	1ad3      	subs	r3, r2, r3
20008be8:	687a      	ldr	r2, [r7, #4]
20008bea:	429a      	cmp	r2, r3
20008bec:	d302      	bcc.n	20008bf4 <FLASH_CRC_WaitForLastOperation+0x40>
20008bee:	687b      	ldr	r3, [r7, #4]
20008bf0:	2b00      	cmp	r3, #0
20008bf2:	d101      	bne.n	20008bf8 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
20008bf4:	2303      	movs	r3, #3
20008bf6:	e01d      	b.n	20008c34 <FLASH_CRC_WaitForLastOperation+0x80>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
20008bf8:	4b11      	ldr	r3, [pc, #68]	@ (20008c40 <FLASH_CRC_WaitForLastOperation+0x8c>)
20008bfa:	691a      	ldr	r2, [r3, #16]
20008bfc:	68fb      	ldr	r3, [r7, #12]
20008bfe:	4013      	ands	r3, r2
20008c00:	68fa      	ldr	r2, [r7, #12]
20008c02:	429a      	cmp	r2, r3
20008c04:	d0e7      	beq.n	20008bd6 <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
20008c06:	683b      	ldr	r3, [r7, #0]
20008c08:	2b01      	cmp	r3, #1
20008c0a:	d112      	bne.n	20008c32 <FLASH_CRC_WaitForLastOperation+0x7e>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
20008c0c:	4b0c      	ldr	r3, [pc, #48]	@ (20008c40 <FLASH_CRC_WaitForLastOperation+0x8c>)
20008c0e:	691b      	ldr	r3, [r3, #16]
20008c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20008c14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20008c18:	d10b      	bne.n	20008c32 <FLASH_CRC_WaitForLastOperation+0x7e>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
20008c1a:	4b0a      	ldr	r3, [pc, #40]	@ (20008c44 <FLASH_CRC_WaitForLastOperation+0x90>)
20008c1c:	699b      	ldr	r3, [r3, #24]
20008c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20008c22:	4a08      	ldr	r2, [pc, #32]	@ (20008c44 <FLASH_CRC_WaitForLastOperation+0x90>)
20008c24:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
20008c26:	4b06      	ldr	r3, [pc, #24]	@ (20008c40 <FLASH_CRC_WaitForLastOperation+0x8c>)
20008c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
20008c2c:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
20008c2e:	2301      	movs	r3, #1
20008c30:	e000      	b.n	20008c34 <FLASH_CRC_WaitForLastOperation+0x80>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
20008c32:	2300      	movs	r3, #0
}
20008c34:	4618      	mov	r0, r3
20008c36:	3710      	adds	r7, #16
20008c38:	46bd      	mov	sp, r7
20008c3a:	bd80      	pop	{r7, pc}
20008c3c:	80000008 	.word	0x80000008
20008c40:	52002000 	.word	0x52002000
20008c44:	20000590 	.word	0x20000590

20008c48 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
20008c48:	b580      	push	{r7, lr}
20008c4a:	b084      	sub	sp, #16
20008c4c:	af00      	add	r7, sp, #0
20008c4e:	6078      	str	r0, [r7, #4]
20008c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20008c52:	2300      	movs	r3, #0
20008c54:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20008c56:	4b3f      	ldr	r3, [pc, #252]	@ (20008d54 <HAL_FLASHEx_Erase+0x10c>)
20008c58:	7d1b      	ldrb	r3, [r3, #20]
20008c5a:	2b01      	cmp	r3, #1
20008c5c:	d101      	bne.n	20008c62 <HAL_FLASHEx_Erase+0x1a>
20008c5e:	2302      	movs	r3, #2
20008c60:	e074      	b.n	20008d4c <HAL_FLASHEx_Erase+0x104>
20008c62:	4b3c      	ldr	r3, [pc, #240]	@ (20008d54 <HAL_FLASHEx_Erase+0x10c>)
20008c64:	2201      	movs	r2, #1
20008c66:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20008c68:	4b3a      	ldr	r3, [pc, #232]	@ (20008d54 <HAL_FLASHEx_Erase+0x10c>)
20008c6a:	2200      	movs	r2, #0
20008c6c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
20008c6e:	687b      	ldr	r3, [r7, #4]
20008c70:	685b      	ldr	r3, [r3, #4]
20008c72:	f003 0301 	and.w	r3, r3, #1
20008c76:	2b00      	cmp	r3, #0
20008c78:	d009      	beq.n	20008c8e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
20008c7a:	2101      	movs	r1, #1
20008c7c:	f24c 3050 	movw	r0, #50000	@ 0xc350
20008c80:	f7ff ff06 	bl	20008a90 <FLASH_WaitForLastOperation>
20008c84:	4603      	mov	r3, r0
20008c86:	2b00      	cmp	r3, #0
20008c88:	d001      	beq.n	20008c8e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
20008c8a:	2301      	movs	r3, #1
20008c8c:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
20008c8e:	7bfb      	ldrb	r3, [r7, #15]
20008c90:	2b00      	cmp	r3, #0
20008c92:	d157      	bne.n	20008d44 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20008c94:	687b      	ldr	r3, [r7, #4]
20008c96:	681b      	ldr	r3, [r3, #0]
20008c98:	2b01      	cmp	r3, #1
20008c9a:	d11e      	bne.n	20008cda <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
20008c9c:	687b      	ldr	r3, [r7, #4]
20008c9e:	691a      	ldr	r2, [r3, #16]
20008ca0:	687b      	ldr	r3, [r7, #4]
20008ca2:	685b      	ldr	r3, [r3, #4]
20008ca4:	4619      	mov	r1, r3
20008ca6:	4610      	mov	r0, r2
20008ca8:	f000 fa6c 	bl	20009184 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
20008cac:	687b      	ldr	r3, [r7, #4]
20008cae:	685b      	ldr	r3, [r3, #4]
20008cb0:	f003 0301 	and.w	r3, r3, #1
20008cb4:	2b00      	cmp	r3, #0
20008cb6:	d045      	beq.n	20008d44 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
20008cb8:	2101      	movs	r1, #1
20008cba:	f24c 3050 	movw	r0, #50000	@ 0xc350
20008cbe:	f7ff fee7 	bl	20008a90 <FLASH_WaitForLastOperation>
20008cc2:	4603      	mov	r3, r0
20008cc4:	2b00      	cmp	r3, #0
20008cc6:	d001      	beq.n	20008ccc <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
20008cc8:	2301      	movs	r3, #1
20008cca:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
20008ccc:	4b22      	ldr	r3, [pc, #136]	@ (20008d58 <HAL_FLASHEx_Erase+0x110>)
20008cce:	68db      	ldr	r3, [r3, #12]
20008cd0:	4a21      	ldr	r2, [pc, #132]	@ (20008d58 <HAL_FLASHEx_Erase+0x110>)
20008cd2:	f023 0308 	bic.w	r3, r3, #8
20008cd6:	60d3      	str	r3, [r2, #12]
20008cd8:	e034      	b.n	20008d44 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
20008cda:	683b      	ldr	r3, [r7, #0]
20008cdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
20008ce0:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
20008ce2:	687b      	ldr	r3, [r7, #4]
20008ce4:	689b      	ldr	r3, [r3, #8]
20008ce6:	60bb      	str	r3, [r7, #8]
20008ce8:	e024      	b.n	20008d34 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
20008cea:	687b      	ldr	r3, [r7, #4]
20008cec:	6859      	ldr	r1, [r3, #4]
20008cee:	687b      	ldr	r3, [r7, #4]
20008cf0:	691b      	ldr	r3, [r3, #16]
20008cf2:	461a      	mov	r2, r3
20008cf4:	68b8      	ldr	r0, [r7, #8]
20008cf6:	f000 fa69 	bl	200091cc <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
20008cfa:	687b      	ldr	r3, [r7, #4]
20008cfc:	685b      	ldr	r3, [r3, #4]
20008cfe:	f003 0301 	and.w	r3, r3, #1
20008d02:	2b00      	cmp	r3, #0
20008d04:	d00c      	beq.n	20008d20 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
20008d06:	2101      	movs	r1, #1
20008d08:	f24c 3050 	movw	r0, #50000	@ 0xc350
20008d0c:	f7ff fec0 	bl	20008a90 <FLASH_WaitForLastOperation>
20008d10:	4603      	mov	r3, r0
20008d12:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
20008d14:	4b10      	ldr	r3, [pc, #64]	@ (20008d58 <HAL_FLASHEx_Erase+0x110>)
20008d16:	68da      	ldr	r2, [r3, #12]
20008d18:	490f      	ldr	r1, [pc, #60]	@ (20008d58 <HAL_FLASHEx_Erase+0x110>)
20008d1a:	4b10      	ldr	r3, [pc, #64]	@ (20008d5c <HAL_FLASHEx_Erase+0x114>)
20008d1c:	4013      	ands	r3, r2
20008d1e:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
20008d20:	7bfb      	ldrb	r3, [r7, #15]
20008d22:	2b00      	cmp	r3, #0
20008d24:	d003      	beq.n	20008d2e <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
20008d26:	683b      	ldr	r3, [r7, #0]
20008d28:	68ba      	ldr	r2, [r7, #8]
20008d2a:	601a      	str	r2, [r3, #0]
          break;
20008d2c:	e00a      	b.n	20008d44 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
20008d2e:	68bb      	ldr	r3, [r7, #8]
20008d30:	3301      	adds	r3, #1
20008d32:	60bb      	str	r3, [r7, #8]
20008d34:	687b      	ldr	r3, [r7, #4]
20008d36:	68da      	ldr	r2, [r3, #12]
20008d38:	687b      	ldr	r3, [r7, #4]
20008d3a:	689b      	ldr	r3, [r3, #8]
20008d3c:	4413      	add	r3, r2
20008d3e:	68ba      	ldr	r2, [r7, #8]
20008d40:	429a      	cmp	r2, r3
20008d42:	d3d2      	bcc.n	20008cea <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20008d44:	4b03      	ldr	r3, [pc, #12]	@ (20008d54 <HAL_FLASHEx_Erase+0x10c>)
20008d46:	2200      	movs	r2, #0
20008d48:	751a      	strb	r2, [r3, #20]

  return status;
20008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
20008d4c:	4618      	mov	r0, r3
20008d4e:	3710      	adds	r7, #16
20008d50:	46bd      	mov	sp, r7
20008d52:	bd80      	pop	{r7, pc}
20008d54:	20000590 	.word	0x20000590
20008d58:	52002000 	.word	0x52002000
20008d5c:	fffff8fb 	.word	0xfffff8fb

20008d60 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
20008d60:	b580      	push	{r7, lr}
20008d62:	b084      	sub	sp, #16
20008d64:	af00      	add	r7, sp, #0
20008d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20008d68:	2300      	movs	r3, #0
20008d6a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20008d6c:	4b31      	ldr	r3, [pc, #196]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008d6e:	7d1b      	ldrb	r3, [r3, #20]
20008d70:	2b01      	cmp	r3, #1
20008d72:	d101      	bne.n	20008d78 <HAL_FLASHEx_Erase_IT+0x18>
20008d74:	2302      	movs	r3, #2
20008d76:	e059      	b.n	20008e2c <HAL_FLASHEx_Erase_IT+0xcc>
20008d78:	4b2e      	ldr	r3, [pc, #184]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008d7a:	2201      	movs	r2, #1
20008d7c:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20008d7e:	4b2d      	ldr	r3, [pc, #180]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008d80:	2200      	movs	r2, #0
20008d82:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank 1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
20008d84:	687b      	ldr	r3, [r7, #4]
20008d86:	685b      	ldr	r3, [r3, #4]
20008d88:	f003 0301 	and.w	r3, r3, #1
20008d8c:	2b00      	cmp	r3, #0
20008d8e:	d009      	beq.n	20008da4 <HAL_FLASHEx_Erase_IT+0x44>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
20008d90:	2101      	movs	r1, #1
20008d92:	f24c 3050 	movw	r0, #50000	@ 0xc350
20008d96:	f7ff fe7b 	bl	20008a90 <FLASH_WaitForLastOperation>
20008d9a:	4603      	mov	r3, r0
20008d9c:	2b00      	cmp	r3, #0
20008d9e:	d001      	beq.n	20008da4 <HAL_FLASHEx_Erase_IT+0x44>
    {
      status = HAL_ERROR;
20008da0:	2301      	movs	r3, #1
20008da2:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if (status != HAL_OK)
20008da4:	7bfb      	ldrb	r3, [r7, #15]
20008da6:	2b00      	cmp	r3, #0
20008da8:	d003      	beq.n	20008db2 <HAL_FLASHEx_Erase_IT+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
20008daa:	4b22      	ldr	r3, [pc, #136]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008dac:	2200      	movs	r2, #0
20008dae:	751a      	strb	r2, [r3, #20]
20008db0:	e03b      	b.n	20008e2a <HAL_FLASHEx_Erase_IT+0xca>
  }
  else
  {
    if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
20008db2:	687b      	ldr	r3, [r7, #4]
20008db4:	685b      	ldr	r3, [r3, #4]
20008db6:	f003 0301 	and.w	r3, r3, #1
20008dba:	2b00      	cmp	r3, #0
20008dbc:	d005      	beq.n	20008dca <HAL_FLASHEx_Erase_IT+0x6a>
    {
      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
20008dbe:	4b1e      	ldr	r3, [pc, #120]	@ (20008e38 <HAL_FLASHEx_Erase_IT+0xd8>)
20008dc0:	68db      	ldr	r3, [r3, #12]
20008dc2:	4a1d      	ldr	r2, [pc, #116]	@ (20008e38 <HAL_FLASHEx_Erase_IT+0xd8>)
20008dc4:	f443 03de 	orr.w	r3, r3, #7274496	@ 0x6f0000
20008dc8:	60d3      	str	r3, [r2, #12]
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#endif /* DUAL_BANK */

    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20008dca:	687b      	ldr	r3, [r7, #4]
20008dcc:	681b      	ldr	r3, [r3, #0]
20008dce:	2b01      	cmp	r3, #1
20008dd0:	d113      	bne.n	20008dfa <HAL_FLASHEx_Erase_IT+0x9a>
    {
      /*Mass erase to be done*/
      if(pEraseInit->Banks == FLASH_BANK_1)
20008dd2:	687b      	ldr	r3, [r7, #4]
20008dd4:	685b      	ldr	r3, [r3, #4]
20008dd6:	2b01      	cmp	r3, #1
20008dd8:	d103      	bne.n	20008de2 <HAL_FLASHEx_Erase_IT+0x82>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK1;
20008dda:	4b16      	ldr	r3, [pc, #88]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008ddc:	2202      	movs	r2, #2
20008dde:	701a      	strb	r2, [r3, #0]
20008de0:	e002      	b.n	20008de8 <HAL_FLASHEx_Erase_IT+0x88>
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK2;
      }
#endif /* DUAL_BANK */
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_ALLBANK_MASSERASE;
20008de2:	4b14      	ldr	r3, [pc, #80]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008de4:	2207      	movs	r2, #7
20008de6:	701a      	strb	r2, [r3, #0]
      }

      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
20008de8:	687b      	ldr	r3, [r7, #4]
20008dea:	691a      	ldr	r2, [r3, #16]
20008dec:	687b      	ldr	r3, [r7, #4]
20008dee:	685b      	ldr	r3, [r3, #4]
20008df0:	4619      	mov	r1, r3
20008df2:	4610      	mov	r0, r2
20008df4:	f000 f9c6 	bl	20009184 <FLASH_MassErase>
20008df8:	e017      	b.n	20008e2a <HAL_FLASHEx_Erase_IT+0xca>
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK2;
      }
#else
      pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK1;
20008dfa:	4b0e      	ldr	r3, [pc, #56]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008dfc:	2201      	movs	r2, #1
20008dfe:	701a      	strb	r2, [r3, #0]
#endif /* DUAL_BANK */

      pFlash.NbSectorsToErase = pEraseInit->NbSectors;
20008e00:	687b      	ldr	r3, [r7, #4]
20008e02:	68db      	ldr	r3, [r3, #12]
20008e04:	4a0b      	ldr	r2, [pc, #44]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008e06:	6053      	str	r3, [r2, #4]
      pFlash.Sector = pEraseInit->Sector;
20008e08:	687b      	ldr	r3, [r7, #4]
20008e0a:	689b      	ldr	r3, [r3, #8]
20008e0c:	4a09      	ldr	r2, [pc, #36]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008e0e:	60d3      	str	r3, [r2, #12]
      pFlash.VoltageForErase = pEraseInit->VoltageRange;
20008e10:	687b      	ldr	r3, [r7, #4]
20008e12:	691b      	ldr	r3, [r3, #16]
20008e14:	4a07      	ldr	r2, [pc, #28]	@ (20008e34 <HAL_FLASHEx_Erase_IT+0xd4>)
20008e16:	6093      	str	r3, [r2, #8]

      /* Erase first sector and wait for IT */
      FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->Banks, pEraseInit->VoltageRange);
20008e18:	687b      	ldr	r3, [r7, #4]
20008e1a:	6898      	ldr	r0, [r3, #8]
20008e1c:	687b      	ldr	r3, [r7, #4]
20008e1e:	6859      	ldr	r1, [r3, #4]
20008e20:	687b      	ldr	r3, [r7, #4]
20008e22:	691b      	ldr	r3, [r3, #16]
20008e24:	461a      	mov	r2, r3
20008e26:	f000 f9d1 	bl	200091cc <FLASH_Erase_Sector>
    }
  }

  return status;
20008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
20008e2c:	4618      	mov	r0, r3
20008e2e:	3710      	adds	r7, #16
20008e30:	46bd      	mov	sp, r7
20008e32:	bd80      	pop	{r7, pc}
20008e34:	20000590 	.word	0x20000590
20008e38:	52002000 	.word	0x52002000

20008e3c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
20008e3c:	b580      	push	{r7, lr}
20008e3e:	b084      	sub	sp, #16
20008e40:	af00      	add	r7, sp, #0
20008e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20008e44:	4b48      	ldr	r3, [pc, #288]	@ (20008f68 <HAL_FLASHEx_OBProgram+0x12c>)
20008e46:	7d1b      	ldrb	r3, [r3, #20]
20008e48:	2b01      	cmp	r3, #1
20008e4a:	d101      	bne.n	20008e50 <HAL_FLASHEx_OBProgram+0x14>
20008e4c:	2302      	movs	r3, #2
20008e4e:	e087      	b.n	20008f60 <HAL_FLASHEx_OBProgram+0x124>
20008e50:	4b45      	ldr	r3, [pc, #276]	@ (20008f68 <HAL_FLASHEx_OBProgram+0x12c>)
20008e52:	2201      	movs	r2, #1
20008e54:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20008e56:	4b44      	ldr	r3, [pc, #272]	@ (20008f68 <HAL_FLASHEx_OBProgram+0x12c>)
20008e58:	2200      	movs	r2, #0
20008e5a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
20008e5c:	2101      	movs	r1, #1
20008e5e:	f24c 3050 	movw	r0, #50000	@ 0xc350
20008e62:	f7ff fe15 	bl	20008a90 <FLASH_WaitForLastOperation>
20008e66:	4603      	mov	r3, r0
20008e68:	2b00      	cmp	r3, #0
20008e6a:	d002      	beq.n	20008e72 <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
20008e6c:	2301      	movs	r3, #1
20008e6e:	73fb      	strb	r3, [r7, #15]
20008e70:	e001      	b.n	20008e76 <HAL_FLASHEx_OBProgram+0x3a>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
20008e72:	2300      	movs	r3, #0
20008e74:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
20008e76:	7bfb      	ldrb	r3, [r7, #15]
20008e78:	2b00      	cmp	r3, #0
20008e7a:	d16d      	bne.n	20008f58 <HAL_FLASHEx_OBProgram+0x11c>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
20008e7c:	687b      	ldr	r3, [r7, #4]
20008e7e:	681b      	ldr	r3, [r3, #0]
20008e80:	f003 0301 	and.w	r3, r3, #1
20008e84:	2b00      	cmp	r3, #0
20008e86:	d014      	beq.n	20008eb2 <HAL_FLASHEx_OBProgram+0x76>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
20008e88:	687b      	ldr	r3, [r7, #4]
20008e8a:	685b      	ldr	r3, [r3, #4]
20008e8c:	2b01      	cmp	r3, #1
20008e8e:	d108      	bne.n	20008ea2 <HAL_FLASHEx_OBProgram+0x66>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
20008e90:	687b      	ldr	r3, [r7, #4]
20008e92:	689a      	ldr	r2, [r3, #8]
20008e94:	687b      	ldr	r3, [r7, #4]
20008e96:	69db      	ldr	r3, [r3, #28]
20008e98:	4619      	mov	r1, r3
20008e9a:	4610      	mov	r0, r2
20008e9c:	f000 f9ba 	bl	20009214 <FLASH_OB_EnableWRP>
20008ea0:	e007      	b.n	20008eb2 <HAL_FLASHEx_OBProgram+0x76>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
20008ea2:	687b      	ldr	r3, [r7, #4]
20008ea4:	689a      	ldr	r2, [r3, #8]
20008ea6:	687b      	ldr	r3, [r7, #4]
20008ea8:	69db      	ldr	r3, [r3, #28]
20008eaa:	4619      	mov	r1, r3
20008eac:	4610      	mov	r0, r2
20008eae:	f000 f9cb 	bl	20009248 <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
20008eb2:	687b      	ldr	r3, [r7, #4]
20008eb4:	681b      	ldr	r3, [r3, #0]
20008eb6:	f003 0302 	and.w	r3, r3, #2
20008eba:	2b00      	cmp	r3, #0
20008ebc:	d004      	beq.n	20008ec8 <HAL_FLASHEx_OBProgram+0x8c>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
20008ebe:	687b      	ldr	r3, [r7, #4]
20008ec0:	68db      	ldr	r3, [r3, #12]
20008ec2:	4618      	mov	r0, r3
20008ec4:	f000 fa00 	bl	200092c8 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
20008ec8:	687b      	ldr	r3, [r7, #4]
20008eca:	681b      	ldr	r3, [r3, #0]
20008ecc:	f003 0304 	and.w	r3, r3, #4
20008ed0:	2b00      	cmp	r3, #0
20008ed2:	d007      	beq.n	20008ee4 <HAL_FLASHEx_OBProgram+0xa8>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
20008ed4:	687b      	ldr	r3, [r7, #4]
20008ed6:	695a      	ldr	r2, [r3, #20]
20008ed8:	687b      	ldr	r3, [r7, #4]
20008eda:	699b      	ldr	r3, [r3, #24]
20008edc:	4619      	mov	r1, r3
20008ede:	4610      	mov	r0, r2
20008ee0:	f000 fa22 	bl	20009328 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
20008ee4:	687b      	ldr	r3, [r7, #4]
20008ee6:	681b      	ldr	r3, [r3, #0]
20008ee8:	f003 0308 	and.w	r3, r3, #8
20008eec:	2b00      	cmp	r3, #0
20008eee:	d009      	beq.n	20008f04 <HAL_FLASHEx_OBProgram+0xc8>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
20008ef0:	687b      	ldr	r3, [r7, #4]
20008ef2:	6a18      	ldr	r0, [r3, #32]
20008ef4:	687b      	ldr	r3, [r7, #4]
20008ef6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
20008ef8:	687b      	ldr	r3, [r7, #4]
20008efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20008efc:	687b      	ldr	r3, [r7, #4]
20008efe:	69db      	ldr	r3, [r3, #28]
20008f00:	f000 faba 	bl	20009478 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
20008f04:	687b      	ldr	r3, [r7, #4]
20008f06:	681b      	ldr	r3, [r3, #0]
20008f08:	f003 0310 	and.w	r3, r3, #16
20008f0c:	2b00      	cmp	r3, #0
20008f0e:	d004      	beq.n	20008f1a <HAL_FLASHEx_OBProgram+0xde>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
20008f10:	687b      	ldr	r3, [r7, #4]
20008f12:	691b      	ldr	r3, [r3, #16]
20008f14:	4618      	mov	r0, r3
20008f16:	f000 fb09 	bl	2000952c <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
20008f1a:	687b      	ldr	r3, [r7, #4]
20008f1c:	681b      	ldr	r3, [r3, #0]
20008f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008f22:	2b00      	cmp	r3, #0
20008f24:	d008      	beq.n	20008f38 <HAL_FLASHEx_OBProgram+0xfc>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
20008f26:	687b      	ldr	r3, [r7, #4]
20008f28:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
20008f2a:	687b      	ldr	r3, [r7, #4]
20008f2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
20008f2e:	687b      	ldr	r3, [r7, #4]
20008f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20008f32:	461a      	mov	r2, r3
20008f34:	f000 fb1c 	bl	20009570 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
20008f38:	687b      	ldr	r3, [r7, #4]
20008f3a:	681b      	ldr	r3, [r3, #0]
20008f3c:	f003 0320 	and.w	r3, r3, #32
20008f40:	2b00      	cmp	r3, #0
20008f42:	d009      	beq.n	20008f58 <HAL_FLASHEx_OBProgram+0x11c>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
20008f44:	687b      	ldr	r3, [r7, #4]
20008f46:	6b98      	ldr	r0, [r3, #56]	@ 0x38
20008f48:	687b      	ldr	r3, [r7, #4]
20008f4a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
20008f4c:	687b      	ldr	r3, [r7, #4]
20008f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
20008f50:	687b      	ldr	r3, [r7, #4]
20008f52:	69db      	ldr	r3, [r3, #28]
20008f54:	f000 fb52 	bl	200095fc <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20008f58:	4b03      	ldr	r3, [pc, #12]	@ (20008f68 <HAL_FLASHEx_OBProgram+0x12c>)
20008f5a:	2200      	movs	r2, #0
20008f5c:	751a      	strb	r2, [r3, #20]

  return status;
20008f5e:	7bfb      	ldrb	r3, [r7, #15]
}
20008f60:	4618      	mov	r0, r3
20008f62:	3710      	adds	r7, #16
20008f64:	46bd      	mov	sp, r7
20008f66:	bd80      	pop	{r7, pc}
20008f68:	20000590 	.word	0x20000590

20008f6c <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
20008f6c:	b580      	push	{r7, lr}
20008f6e:	b082      	sub	sp, #8
20008f70:	af00      	add	r7, sp, #0
20008f72:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
20008f74:	687b      	ldr	r3, [r7, #4]
20008f76:	2216      	movs	r2, #22
20008f78:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
20008f7a:	f000 f9b9 	bl	200092f0 <FLASH_OB_GetRDP>
20008f7e:	4602      	mov	r2, r0
20008f80:	687b      	ldr	r3, [r7, #4]
20008f82:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
20008f84:	f000 fa62 	bl	2000944c <FLASH_OB_GetUser>
20008f88:	4602      	mov	r2, r0
20008f8a:	687b      	ldr	r3, [r7, #4]
20008f8c:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
20008f8e:	f000 fae1 	bl	20009554 <FLASH_OB_GetBOR>
20008f92:	4602      	mov	r2, r0
20008f94:	687b      	ldr	r3, [r7, #4]
20008f96:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
#else
  if (pOBInit->Banks == FLASH_BANK_1)
20008f98:	687b      	ldr	r3, [r7, #4]
20008f9a:	69db      	ldr	r3, [r3, #28]
20008f9c:	2b01      	cmp	r3, #1
20008f9e:	d129      	bne.n	20008ff4 <HAL_FLASHEx_OBGetConfig+0x88>
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
20008fa0:	687b      	ldr	r3, [r7, #4]
20008fa2:	681b      	ldr	r3, [r3, #0]
20008fa4:	f043 0229 	orr.w	r2, r3, #41	@ 0x29
20008fa8:	687b      	ldr	r3, [r7, #4]
20008faa:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
20008fac:	687b      	ldr	r3, [r7, #4]
20008fae:	1d18      	adds	r0, r3, #4
20008fb0:	687b      	ldr	r3, [r7, #4]
20008fb2:	f103 0108 	add.w	r1, r3, #8
20008fb6:	687b      	ldr	r3, [r7, #4]
20008fb8:	69db      	ldr	r3, [r3, #28]
20008fba:	461a      	mov	r2, r3
20008fbc:	f000 f95e 	bl	2000927c <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
20008fc0:	687b      	ldr	r3, [r7, #4]
20008fc2:	f103 0020 	add.w	r0, r3, #32
20008fc6:	687b      	ldr	r3, [r7, #4]
20008fc8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
20008fcc:	687b      	ldr	r3, [r7, #4]
20008fce:	f103 0228 	add.w	r2, r3, #40	@ 0x28
20008fd2:	687b      	ldr	r3, [r7, #4]
20008fd4:	69db      	ldr	r3, [r3, #28]
20008fd6:	f000 fa71 	bl	200094bc <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
20008fda:	687b      	ldr	r3, [r7, #4]
20008fdc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
20008fe0:	687b      	ldr	r3, [r7, #4]
20008fe2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
20008fe6:	687b      	ldr	r3, [r7, #4]
20008fe8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
20008fec:	687b      	ldr	r3, [r7, #4]
20008fee:	69db      	ldr	r3, [r3, #28]
20008ff0:	f000 fb28 	bl	20009644 <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
20008ff4:	687b      	ldr	r3, [r7, #4]
20008ff6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
20008ffa:	687b      	ldr	r3, [r7, #4]
20008ffc:	3334      	adds	r3, #52	@ 0x34
20008ffe:	4619      	mov	r1, r3
20009000:	4610      	mov	r0, r2
20009002:	f000 fadf 	bl	200095c4 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
20009006:	687b      	ldr	r3, [r7, #4]
20009008:	681b      	ldr	r3, [r3, #0]
2000900a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
2000900e:	687b      	ldr	r3, [r7, #4]
20009010:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
20009012:	bf00      	nop
20009014:	3708      	adds	r7, #8
20009016:	46bd      	mov	sp, r7
20009018:	bd80      	pop	{r7, pc}
	...

2000901c <HAL_FLASHEx_Unlock_Bank1>:
/**
  * @brief  Unlock the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void)
{
2000901c:	b480      	push	{r7}
2000901e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
20009020:	4b0c      	ldr	r3, [pc, #48]	@ (20009054 <HAL_FLASHEx_Unlock_Bank1+0x38>)
20009022:	68db      	ldr	r3, [r3, #12]
20009024:	f003 0301 	and.w	r3, r3, #1
20009028:	2b00      	cmp	r3, #0
2000902a:	d00d      	beq.n	20009048 <HAL_FLASHEx_Unlock_Bank1+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
2000902c:	4b09      	ldr	r3, [pc, #36]	@ (20009054 <HAL_FLASHEx_Unlock_Bank1+0x38>)
2000902e:	4a0a      	ldr	r2, [pc, #40]	@ (20009058 <HAL_FLASHEx_Unlock_Bank1+0x3c>)
20009030:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
20009032:	4b08      	ldr	r3, [pc, #32]	@ (20009054 <HAL_FLASHEx_Unlock_Bank1+0x38>)
20009034:	4a09      	ldr	r2, [pc, #36]	@ (2000905c <HAL_FLASHEx_Unlock_Bank1+0x40>)
20009036:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
20009038:	4b06      	ldr	r3, [pc, #24]	@ (20009054 <HAL_FLASHEx_Unlock_Bank1+0x38>)
2000903a:	68db      	ldr	r3, [r3, #12]
2000903c:	f003 0301 	and.w	r3, r3, #1
20009040:	2b00      	cmp	r3, #0
20009042:	d001      	beq.n	20009048 <HAL_FLASHEx_Unlock_Bank1+0x2c>
    {
      return HAL_ERROR;
20009044:	2301      	movs	r3, #1
20009046:	e000      	b.n	2000904a <HAL_FLASHEx_Unlock_Bank1+0x2e>
    }
  }

  return HAL_OK;
20009048:	2300      	movs	r3, #0
}
2000904a:	4618      	mov	r0, r3
2000904c:	46bd      	mov	sp, r7
2000904e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009052:	4770      	bx	lr
20009054:	52002000 	.word	0x52002000
20009058:	45670123 	.word	0x45670123
2000905c:	cdef89ab 	.word	0xcdef89ab

20009060 <HAL_FLASHEx_Lock_Bank1>:
/**
  * @brief  Locks the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void)
{
20009060:	b480      	push	{r7}
20009062:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Registers access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
20009064:	4b05      	ldr	r3, [pc, #20]	@ (2000907c <HAL_FLASHEx_Lock_Bank1+0x1c>)
20009066:	68db      	ldr	r3, [r3, #12]
20009068:	4a04      	ldr	r2, [pc, #16]	@ (2000907c <HAL_FLASHEx_Lock_Bank1+0x1c>)
2000906a:	f043 0301 	orr.w	r3, r3, #1
2000906e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
20009070:	2300      	movs	r3, #0
}
20009072:	4618      	mov	r0, r3
20009074:	46bd      	mov	sp, r7
20009076:	f85d 7b04 	ldr.w	r7, [sp], #4
2000907a:	4770      	bx	lr
2000907c:	52002000 	.word	0x52002000

20009080 <HAL_FLASHEx_ComputeCRC>:
  *         A special error flag (CRC read error: CRCRDERR) can be used to
  *         detect such a case.
  * @retval HAL Status
*/
HAL_StatusTypeDef HAL_FLASHEx_ComputeCRC(FLASH_CRCInitTypeDef *pCRCInit, uint32_t *CRC_Result)
{
20009080:	b580      	push	{r7, lr}
20009082:	b084      	sub	sp, #16
20009084:	af00      	add	r7, sp, #0
20009086:	6078      	str	r0, [r7, #4]
20009088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(pCRCInit->Bank));
  assert_param(IS_FLASH_TYPECRC(pCRCInit->TypeCRC));

  /* Wait for OB change operation to be completed */
  status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000908a:	f24c 3050 	movw	r0, #50000	@ 0xc350
2000908e:	f7ff fd55 	bl	20008b3c <FLASH_OB_WaitForLastOperation>
20009092:	4603      	mov	r3, r0
20009094:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20009096:	7bfb      	ldrb	r3, [r7, #15]
20009098:	2b00      	cmp	r3, #0
2000909a:	d169      	bne.n	20009170 <HAL_FLASHEx_ComputeCRC+0xf0>
  {
    if (pCRCInit->Bank == FLASH_BANK_1)
2000909c:	687b      	ldr	r3, [r7, #4]
2000909e:	689b      	ldr	r3, [r3, #8]
200090a0:	2b01      	cmp	r3, #1
200090a2:	d165      	bne.n	20009170 <HAL_FLASHEx_ComputeCRC+0xf0>
    {
      /* Enable CRC feature */
      FLASH->CR1 |= FLASH_CR_CRC_EN;
200090a4:	4b35      	ldr	r3, [pc, #212]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
200090a6:	68db      	ldr	r3, [r3, #12]
200090a8:	4a34      	ldr	r2, [pc, #208]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
200090aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
200090ae:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags in Status Register: CRC end of calculation and CRC read error */
      FLASH->CCR1 |= (FLASH_CCR_CLR_CRCEND | FLASH_CCR_CLR_CRCRDERR);
200090b0:	4b32      	ldr	r3, [pc, #200]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
200090b2:	695b      	ldr	r3, [r3, #20]
200090b4:	4a31      	ldr	r2, [pc, #196]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
200090b6:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
200090ba:	6153      	str	r3, [r2, #20]

      /* Clear current CRC result, program burst size and define memory area on which CRC has to be computed */
      FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_CRC | pCRCInit->BurstSize | pCRCInit->TypeCRC;
200090bc:	4b2f      	ldr	r3, [pc, #188]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
200090be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
200090c0:	687b      	ldr	r3, [r7, #4]
200090c2:	6859      	ldr	r1, [r3, #4]
200090c4:	687b      	ldr	r3, [r7, #4]
200090c6:	681b      	ldr	r3, [r3, #0]
200090c8:	430b      	orrs	r3, r1
200090ca:	4313      	orrs	r3, r2
200090cc:	4a2b      	ldr	r2, [pc, #172]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
200090ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
200090d2:	6513      	str	r3, [r2, #80]	@ 0x50

      if (pCRCInit->TypeCRC == FLASH_CRC_SECTORS)
200090d4:	687b      	ldr	r3, [r7, #4]
200090d6:	681b      	ldr	r3, [r3, #0]
200090d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
200090dc:	d119      	bne.n	20009112 <HAL_FLASHEx_ComputeCRC+0x92>
      {
        /* Clear sectors list */
        FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_SECT;
200090de:	4b27      	ldr	r3, [pc, #156]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
200090e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200090e2:	4a26      	ldr	r2, [pc, #152]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
200090e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
200090e8:	6513      	str	r3, [r2, #80]	@ 0x50

        /* Select CRC sectors */
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
200090ea:	687b      	ldr	r3, [r7, #4]
200090ec:	68db      	ldr	r3, [r3, #12]
200090ee:	60bb      	str	r3, [r7, #8]
200090f0:	e006      	b.n	20009100 <HAL_FLASHEx_ComputeCRC+0x80>
        {
          FLASH_CRC_AddSector(sector_index, FLASH_BANK_1);
200090f2:	2101      	movs	r1, #1
200090f4:	68b8      	ldr	r0, [r7, #8]
200090f6:	f000 fadd 	bl	200096b4 <FLASH_CRC_AddSector>
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
200090fa:	68bb      	ldr	r3, [r7, #8]
200090fc:	3301      	adds	r3, #1
200090fe:	60bb      	str	r3, [r7, #8]
20009100:	687b      	ldr	r3, [r7, #4]
20009102:	691a      	ldr	r2, [r3, #16]
20009104:	687b      	ldr	r3, [r7, #4]
20009106:	68db      	ldr	r3, [r3, #12]
20009108:	4413      	add	r3, r2
2000910a:	68ba      	ldr	r2, [r7, #8]
2000910c:	429a      	cmp	r2, r3
2000910e:	d3f0      	bcc.n	200090f2 <HAL_FLASHEx_ComputeCRC+0x72>
20009110:	e013      	b.n	2000913a <HAL_FLASHEx_ComputeCRC+0xba>
        }
      }
      else if (pCRCInit->TypeCRC == FLASH_CRC_BANK)
20009112:	687b      	ldr	r3, [r7, #4]
20009114:	681b      	ldr	r3, [r3, #0]
20009116:	4a1a      	ldr	r2, [pc, #104]	@ (20009180 <HAL_FLASHEx_ComputeCRC+0x100>)
20009118:	4293      	cmp	r3, r2
2000911a:	d106      	bne.n	2000912a <HAL_FLASHEx_ComputeCRC+0xaa>
      {
        /* Enable Bank 1 CRC select bit */
        FLASH->CRCCR1 |= FLASH_CRCCR_ALL_BANK;
2000911c:	4b17      	ldr	r3, [pc, #92]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
2000911e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20009120:	4a16      	ldr	r2, [pc, #88]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
20009122:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
20009126:	6513      	str	r3, [r2, #80]	@ 0x50
20009128:	e007      	b.n	2000913a <HAL_FLASHEx_ComputeCRC+0xba>
      }
      else
      {
        /* Select CRC start and end addresses */
        FLASH_CRC_SelectAddress(pCRCInit->CRCStartAddr, pCRCInit->CRCEndAddr, FLASH_BANK_1);
2000912a:	687b      	ldr	r3, [r7, #4]
2000912c:	6958      	ldr	r0, [r3, #20]
2000912e:	687b      	ldr	r3, [r7, #4]
20009130:	699b      	ldr	r3, [r3, #24]
20009132:	2201      	movs	r2, #1
20009134:	4619      	mov	r1, r3
20009136:	f000 fadb 	bl	200096f0 <FLASH_CRC_SelectAddress>
      }

      /* Start the CRC calculation */
      FLASH->CRCCR1 |= FLASH_CRCCR_START_CRC;
2000913a:	4b10      	ldr	r3, [pc, #64]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
2000913c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000913e:	4a0f      	ldr	r2, [pc, #60]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
20009140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20009144:	6513      	str	r3, [r2, #80]	@ 0x50

      /* Wait on CRC busy flag */
      status = FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
20009146:	2101      	movs	r1, #1
20009148:	f24c 3050 	movw	r0, #50000	@ 0xc350
2000914c:	f7ff fd32 	bl	20008bb4 <FLASH_CRC_WaitForLastOperation>
20009150:	4603      	mov	r3, r0
20009152:	73fb      	strb	r3, [r7, #15]

      /* Return CRC result */
      (*CRC_Result) = FLASH->CRCDATA;
20009154:	4b09      	ldr	r3, [pc, #36]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
20009156:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
20009158:	683b      	ldr	r3, [r7, #0]
2000915a:	601a      	str	r2, [r3, #0]

      /* Disable CRC feature */
      FLASH->CR1 &= (~FLASH_CR_CRC_EN);
2000915c:	4b07      	ldr	r3, [pc, #28]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
2000915e:	68db      	ldr	r3, [r3, #12]
20009160:	4a06      	ldr	r2, [pc, #24]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
20009162:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
20009166:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCEND_BANK1 | FLASH_FLAG_CRCRDERR_BANK1);
20009168:	4b04      	ldr	r3, [pc, #16]	@ (2000917c <HAL_FLASHEx_ComputeCRC+0xfc>)
2000916a:	f04f 52c0 	mov.w	r2, #402653184	@ 0x18000000
2000916e:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCEND_BANK2 | FLASH_FLAG_CRCRDERR_BANK2);
    }
#endif /* DUAL_BANK */
  }

  return status;
20009170:	7bfb      	ldrb	r3, [r7, #15]
}
20009172:	4618      	mov	r0, r3
20009174:	3710      	adds	r7, #16
20009176:	46bd      	mov	sp, r7
20009178:	bd80      	pop	{r7, pc}
2000917a:	bf00      	nop
2000917c:	52002000 	.word	0x52002000
20009180:	00400100 	.word	0x00400100

20009184 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
20009184:	b480      	push	{r7}
20009186:	b083      	sub	sp, #12
20009188:	af00      	add	r7, sp, #0
2000918a:	6078      	str	r0, [r7, #4]
2000918c:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2000918e:	683b      	ldr	r3, [r7, #0]
20009190:	f003 0301 	and.w	r3, r3, #1
20009194:	2b00      	cmp	r3, #0
20009196:	d011      	beq.n	200091bc <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
20009198:	4b0b      	ldr	r3, [pc, #44]	@ (200091c8 <FLASH_MassErase+0x44>)
2000919a:	68db      	ldr	r3, [r3, #12]
2000919c:	4a0a      	ldr	r2, [pc, #40]	@ (200091c8 <FLASH_MassErase+0x44>)
2000919e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
200091a2:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
200091a4:	4b08      	ldr	r3, [pc, #32]	@ (200091c8 <FLASH_MassErase+0x44>)
200091a6:	68da      	ldr	r2, [r3, #12]
200091a8:	4907      	ldr	r1, [pc, #28]	@ (200091c8 <FLASH_MassErase+0x44>)
200091aa:	687b      	ldr	r3, [r7, #4]
200091ac:	4313      	orrs	r3, r2
200091ae:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
200091b0:	4b05      	ldr	r3, [pc, #20]	@ (200091c8 <FLASH_MassErase+0x44>)
200091b2:	68db      	ldr	r3, [r3, #12]
200091b4:	4a04      	ldr	r2, [pc, #16]	@ (200091c8 <FLASH_MassErase+0x44>)
200091b6:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
200091ba:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
200091bc:	bf00      	nop
200091be:	370c      	adds	r7, #12
200091c0:	46bd      	mov	sp, r7
200091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200091c6:	4770      	bx	lr
200091c8:	52002000 	.word	0x52002000

200091cc <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
200091cc:	b480      	push	{r7}
200091ce:	b085      	sub	sp, #20
200091d0:	af00      	add	r7, sp, #0
200091d2:	60f8      	str	r0, [r7, #12]
200091d4:	60b9      	str	r1, [r7, #8]
200091d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
200091d8:	68bb      	ldr	r3, [r7, #8]
200091da:	f003 0301 	and.w	r3, r3, #1
200091de:	2b00      	cmp	r3, #0
200091e0:	d010      	beq.n	20009204 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
200091e2:	4b0b      	ldr	r3, [pc, #44]	@ (20009210 <FLASH_Erase_Sector+0x44>)
200091e4:	68db      	ldr	r3, [r3, #12]
200091e6:	4a0a      	ldr	r2, [pc, #40]	@ (20009210 <FLASH_Erase_Sector+0x44>)
200091e8:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
200091ec:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
200091ee:	4b08      	ldr	r3, [pc, #32]	@ (20009210 <FLASH_Erase_Sector+0x44>)
200091f0:	68da      	ldr	r2, [r3, #12]
200091f2:	68fb      	ldr	r3, [r7, #12]
200091f4:	0219      	lsls	r1, r3, #8
200091f6:	687b      	ldr	r3, [r7, #4]
200091f8:	430b      	orrs	r3, r1
200091fa:	4313      	orrs	r3, r2
200091fc:	4a04      	ldr	r2, [pc, #16]	@ (20009210 <FLASH_Erase_Sector+0x44>)
200091fe:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
20009202:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
20009204:	bf00      	nop
20009206:	3714      	adds	r7, #20
20009208:	46bd      	mov	sp, r7
2000920a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000920e:	4770      	bx	lr
20009210:	52002000 	.word	0x52002000

20009214 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
20009214:	b480      	push	{r7}
20009216:	b083      	sub	sp, #12
20009218:	af00      	add	r7, sp, #0
2000921a:	6078      	str	r0, [r7, #4]
2000921c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2000921e:	683b      	ldr	r3, [r7, #0]
20009220:	f003 0301 	and.w	r3, r3, #1
20009224:	2b00      	cmp	r3, #0
20009226:	d007      	beq.n	20009238 <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
20009228:	4b06      	ldr	r3, [pc, #24]	@ (20009244 <FLASH_OB_EnableWRP+0x30>)
2000922a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
2000922c:	687b      	ldr	r3, [r7, #4]
2000922e:	b2db      	uxtb	r3, r3
20009230:	43db      	mvns	r3, r3
20009232:	4904      	ldr	r1, [pc, #16]	@ (20009244 <FLASH_OB_EnableWRP+0x30>)
20009234:	4013      	ands	r3, r2
20009236:	63cb      	str	r3, [r1, #60]	@ 0x3c
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
  }
#endif /* DUAL_BANK */
}
20009238:	bf00      	nop
2000923a:	370c      	adds	r7, #12
2000923c:	46bd      	mov	sp, r7
2000923e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009242:	4770      	bx	lr
20009244:	52002000 	.word	0x52002000

20009248 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
20009248:	b480      	push	{r7}
2000924a:	b083      	sub	sp, #12
2000924c:	af00      	add	r7, sp, #0
2000924e:	6078      	str	r0, [r7, #4]
20009250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
20009252:	683b      	ldr	r3, [r7, #0]
20009254:	f003 0301 	and.w	r3, r3, #1
20009258:	2b00      	cmp	r3, #0
2000925a:	d006      	beq.n	2000926a <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
2000925c:	4b06      	ldr	r3, [pc, #24]	@ (20009278 <FLASH_OB_DisableWRP+0x30>)
2000925e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20009260:	687b      	ldr	r3, [r7, #4]
20009262:	b2db      	uxtb	r3, r3
20009264:	4904      	ldr	r1, [pc, #16]	@ (20009278 <FLASH_OB_DisableWRP+0x30>)
20009266:	4313      	orrs	r3, r2
20009268:	63cb      	str	r3, [r1, #60]	@ 0x3c
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
  }
#endif /* DUAL_BANK */
}
2000926a:	bf00      	nop
2000926c:	370c      	adds	r7, #12
2000926e:	46bd      	mov	sp, r7
20009270:	f85d 7b04 	ldr.w	r7, [sp], #4
20009274:	4770      	bx	lr
20009276:	bf00      	nop
20009278:	52002000 	.word	0x52002000

2000927c <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
2000927c:	b480      	push	{r7}
2000927e:	b087      	sub	sp, #28
20009280:	af00      	add	r7, sp, #0
20009282:	60f8      	str	r0, [r7, #12]
20009284:	60b9      	str	r1, [r7, #8]
20009286:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
20009288:	2300      	movs	r3, #0
2000928a:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
2000928c:	687b      	ldr	r3, [r7, #4]
2000928e:	2b01      	cmp	r3, #1
20009290:	d102      	bne.n	20009298 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
20009292:	4b0c      	ldr	r3, [pc, #48]	@ (200092c4 <FLASH_OB_GetWRP+0x48>)
20009294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009296:	617b      	str	r3, [r7, #20]
  {
    regvalue = FLASH->WPSN_CUR2;
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
20009298:	697b      	ldr	r3, [r7, #20]
2000929a:	43db      	mvns	r3, r3
2000929c:	b2da      	uxtb	r2, r3
2000929e:	68bb      	ldr	r3, [r7, #8]
200092a0:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
200092a2:	68bb      	ldr	r3, [r7, #8]
200092a4:	681b      	ldr	r3, [r3, #0]
200092a6:	2b00      	cmp	r3, #0
200092a8:	d103      	bne.n	200092b2 <FLASH_OB_GetWRP+0x36>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
200092aa:	68fb      	ldr	r3, [r7, #12]
200092ac:	2200      	movs	r2, #0
200092ae:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
200092b0:	e002      	b.n	200092b8 <FLASH_OB_GetWRP+0x3c>
    (*WRPState) = OB_WRPSTATE_ENABLE;
200092b2:	68fb      	ldr	r3, [r7, #12]
200092b4:	2201      	movs	r2, #1
200092b6:	601a      	str	r2, [r3, #0]
}
200092b8:	bf00      	nop
200092ba:	371c      	adds	r7, #28
200092bc:	46bd      	mov	sp, r7
200092be:	f85d 7b04 	ldr.w	r7, [sp], #4
200092c2:	4770      	bx	lr
200092c4:	52002000 	.word	0x52002000

200092c8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
200092c8:	b480      	push	{r7}
200092ca:	b083      	sub	sp, #12
200092cc:	af00      	add	r7, sp, #0
200092ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
200092d0:	4b06      	ldr	r3, [pc, #24]	@ (200092ec <FLASH_OB_RDPConfig+0x24>)
200092d2:	6a1b      	ldr	r3, [r3, #32]
200092d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
200092d8:	4904      	ldr	r1, [pc, #16]	@ (200092ec <FLASH_OB_RDPConfig+0x24>)
200092da:	687b      	ldr	r3, [r7, #4]
200092dc:	4313      	orrs	r3, r2
200092de:	620b      	str	r3, [r1, #32]
}
200092e0:	bf00      	nop
200092e2:	370c      	adds	r7, #12
200092e4:	46bd      	mov	sp, r7
200092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200092ea:	4770      	bx	lr
200092ec:	52002000 	.word	0x52002000

200092f0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
200092f0:	b480      	push	{r7}
200092f2:	b083      	sub	sp, #12
200092f4:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
200092f6:	4b0b      	ldr	r3, [pc, #44]	@ (20009324 <FLASH_OB_GetRDP+0x34>)
200092f8:	69db      	ldr	r3, [r3, #28]
200092fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
200092fe:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
20009300:	687b      	ldr	r3, [r7, #4]
20009302:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
20009306:	d006      	beq.n	20009316 <FLASH_OB_GetRDP+0x26>
20009308:	687b      	ldr	r3, [r7, #4]
2000930a:	f5b3 4f4c 	cmp.w	r3, #52224	@ 0xcc00
2000930e:	d002      	beq.n	20009316 <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
20009310:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
20009314:	e000      	b.n	20009318 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
20009316:	687b      	ldr	r3, [r7, #4]
  }
}
20009318:	4618      	mov	r0, r3
2000931a:	370c      	adds	r7, #12
2000931c:	46bd      	mov	sp, r7
2000931e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009322:	4770      	bx	lr
20009324:	52002000 	.word	0x52002000

20009328 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
20009328:	b480      	push	{r7}
2000932a:	b085      	sub	sp, #20
2000932c:	af00      	add	r7, sp, #0
2000932e:	6078      	str	r0, [r7, #4]
20009330:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
20009332:	2300      	movs	r3, #0
20009334:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
20009336:	2300      	movs	r3, #0
20009338:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
2000933a:	687b      	ldr	r3, [r7, #4]
2000933c:	f003 0301 	and.w	r3, r3, #1
20009340:	2b00      	cmp	r3, #0
20009342:	d009      	beq.n	20009358 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
20009344:	683b      	ldr	r3, [r7, #0]
20009346:	f003 0310 	and.w	r3, r3, #16
2000934a:	68fa      	ldr	r2, [r7, #12]
2000934c:	4313      	orrs	r3, r2
2000934e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
20009350:	68bb      	ldr	r3, [r7, #8]
20009352:	f043 0310 	orr.w	r3, r3, #16
20009356:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
20009358:	687b      	ldr	r3, [r7, #4]
2000935a:	f003 0302 	and.w	r3, r3, #2
2000935e:	2b00      	cmp	r3, #0
20009360:	d009      	beq.n	20009376 <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
20009362:	683b      	ldr	r3, [r7, #0]
20009364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20009368:	68fa      	ldr	r2, [r7, #12]
2000936a:	4313      	orrs	r3, r2
2000936c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
2000936e:	68bb      	ldr	r3, [r7, #8]
20009370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20009374:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
20009376:	687b      	ldr	r3, [r7, #4]
20009378:	f003 0304 	and.w	r3, r3, #4
2000937c:	2b00      	cmp	r3, #0
2000937e:	d009      	beq.n	20009394 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
20009380:	683b      	ldr	r3, [r7, #0]
20009382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20009386:	68fa      	ldr	r2, [r7, #12]
20009388:	4313      	orrs	r3, r2
2000938a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
2000938c:	68bb      	ldr	r3, [r7, #8]
2000938e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20009392:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
20009394:	687b      	ldr	r3, [r7, #4]
20009396:	f003 0308 	and.w	r3, r3, #8
2000939a:	2b00      	cmp	r3, #0
2000939c:	d009      	beq.n	200093b2 <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
2000939e:	683b      	ldr	r3, [r7, #0]
200093a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200093a4:	68fa      	ldr	r2, [r7, #12]
200093a6:	4313      	orrs	r3, r2
200093a8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
200093aa:	68bb      	ldr	r3, [r7, #8]
200093ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
200093b0:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
200093b2:	687b      	ldr	r3, [r7, #4]
200093b4:	f003 0310 	and.w	r3, r3, #16
200093b8:	2b00      	cmp	r3, #0
200093ba:	d009      	beq.n	200093d0 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
200093bc:	683b      	ldr	r3, [r7, #0]
200093be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
200093c2:	68fa      	ldr	r2, [r7, #12]
200093c4:	4313      	orrs	r3, r2
200093c6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
200093c8:	68bb      	ldr	r3, [r7, #8]
200093ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200093ce:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
200093d0:	687b      	ldr	r3, [r7, #4]
200093d2:	f003 0320 	and.w	r3, r3, #32
200093d6:	2b00      	cmp	r3, #0
200093d8:	d009      	beq.n	200093ee <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
200093da:	683b      	ldr	r3, [r7, #0]
200093dc:	f403 13c0 	and.w	r3, r3, #1572864	@ 0x180000
200093e0:	68fa      	ldr	r2, [r7, #12]
200093e2:	4313      	orrs	r3, r2
200093e4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
200093e6:	68bb      	ldr	r3, [r7, #8]
200093e8:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
200093ec:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
200093ee:	687b      	ldr	r3, [r7, #4]
200093f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200093f4:	2b00      	cmp	r3, #0
200093f6:	d009      	beq.n	2000940c <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
200093f8:	683b      	ldr	r3, [r7, #0]
200093fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
200093fe:	68fa      	ldr	r2, [r7, #12]
20009400:	4313      	orrs	r3, r2
20009402:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
20009404:	68bb      	ldr	r3, [r7, #8]
20009406:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
2000940a:	60bb      	str	r3, [r7, #8]
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
2000940c:	687b      	ldr	r3, [r7, #4]
2000940e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20009412:	2b00      	cmp	r3, #0
20009414:	d009      	beq.n	2000942a <FLASH_OB_UserConfig+0x102>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
20009416:	683b      	ldr	r3, [r7, #0]
20009418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
2000941c:	68fa      	ldr	r2, [r7, #12]
2000941e:	4313      	orrs	r3, r2
20009420:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
20009422:	68bb      	ldr	r3, [r7, #8]
20009424:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20009428:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
2000942a:	4b07      	ldr	r3, [pc, #28]	@ (20009448 <FLASH_OB_UserConfig+0x120>)
2000942c:	6a1a      	ldr	r2, [r3, #32]
2000942e:	68bb      	ldr	r3, [r7, #8]
20009430:	43db      	mvns	r3, r3
20009432:	401a      	ands	r2, r3
20009434:	4904      	ldr	r1, [pc, #16]	@ (20009448 <FLASH_OB_UserConfig+0x120>)
20009436:	68fb      	ldr	r3, [r7, #12]
20009438:	4313      	orrs	r3, r2
2000943a:	620b      	str	r3, [r1, #32]
}
2000943c:	bf00      	nop
2000943e:	3714      	adds	r7, #20
20009440:	46bd      	mov	sp, r7
20009442:	f85d 7b04 	ldr.w	r7, [sp], #4
20009446:	4770      	bx	lr
20009448:	52002000 	.word	0x52002000

2000944c <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
2000944c:	b480      	push	{r7}
2000944e:	b083      	sub	sp, #12
20009450:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
20009452:	4b07      	ldr	r3, [pc, #28]	@ (20009470 <FLASH_OB_GetUser+0x24>)
20009454:	69db      	ldr	r3, [r3, #28]
20009456:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
20009458:	687a      	ldr	r2, [r7, #4]
2000945a:	4b06      	ldr	r3, [pc, #24]	@ (20009474 <FLASH_OB_GetUser+0x28>)
2000945c:	4013      	ands	r3, r2
2000945e:	607b      	str	r3, [r7, #4]

  return userConfig;
20009460:	687b      	ldr	r3, [r7, #4]
}
20009462:	4618      	mov	r0, r3
20009464:	370c      	adds	r7, #12
20009466:	46bd      	mov	sp, r7
20009468:	f85d 7b04 	ldr.w	r7, [sp], #4
2000946c:	4770      	bx	lr
2000946e:	bf00      	nop
20009470:	52002000 	.word	0x52002000
20009474:	ffff00f3 	.word	0xffff00f3

20009478 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
20009478:	b480      	push	{r7}
2000947a:	b085      	sub	sp, #20
2000947c:	af00      	add	r7, sp, #0
2000947e:	60f8      	str	r0, [r7, #12]
20009480:	60b9      	str	r1, [r7, #8]
20009482:	607a      	str	r2, [r7, #4]
20009484:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
20009486:	683b      	ldr	r3, [r7, #0]
20009488:	f003 0301 	and.w	r3, r3, #1
2000948c:	2b00      	cmp	r3, #0
2000948e:	d00d      	beq.n	200094ac <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
20009490:	68bb      	ldr	r3, [r7, #8]
20009492:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
20009496:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
20009498:	687b      	ldr	r3, [r7, #4]
2000949a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
2000949e:	0a1b      	lsrs	r3, r3, #8
200094a0:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
200094a2:	431a      	orrs	r2, r3
200094a4:	4904      	ldr	r1, [pc, #16]	@ (200094b8 <FLASH_OB_PCROPConfig+0x40>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
200094a6:	68fb      	ldr	r3, [r7, #12]
200094a8:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
200094aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
200094ac:	bf00      	nop
200094ae:	3714      	adds	r7, #20
200094b0:	46bd      	mov	sp, r7
200094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200094b6:	4770      	bx	lr
200094b8:	52002000 	.word	0x52002000

200094bc <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
200094bc:	b480      	push	{r7}
200094be:	b087      	sub	sp, #28
200094c0:	af00      	add	r7, sp, #0
200094c2:	60f8      	str	r0, [r7, #12]
200094c4:	60b9      	str	r1, [r7, #8]
200094c6:	607a      	str	r2, [r7, #4]
200094c8:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
200094ca:	2300      	movs	r3, #0
200094cc:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
200094ce:	2300      	movs	r3, #0
200094d0:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
200094d2:	683b      	ldr	r3, [r7, #0]
200094d4:	2b01      	cmp	r3, #1
200094d6:	d105      	bne.n	200094e4 <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
200094d8:	4b12      	ldr	r3, [pc, #72]	@ (20009524 <FLASH_OB_GetPCROP+0x68>)
200094da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200094dc:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
200094de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
200094e2:	613b      	str	r3, [r7, #16]
    regvalue = FLASH->PRAR_CUR2;
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
200094e4:	697b      	ldr	r3, [r7, #20]
200094e6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
200094ea:	68fb      	ldr	r3, [r7, #12]
200094ec:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
200094ee:	697b      	ldr	r3, [r7, #20]
200094f0:	021a      	lsls	r2, r3, #8
200094f2:	4b0d      	ldr	r3, [pc, #52]	@ (20009528 <FLASH_OB_GetPCROP+0x6c>)
200094f4:	4013      	ands	r3, r2
200094f6:	693a      	ldr	r2, [r7, #16]
200094f8:	441a      	add	r2, r3
200094fa:	68bb      	ldr	r3, [r7, #8]
200094fc:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
200094fe:	697b      	ldr	r3, [r7, #20]
20009500:	0c1b      	lsrs	r3, r3, #16
20009502:	f3c3 020b 	ubfx	r2, r3, #0, #12
20009506:	687b      	ldr	r3, [r7, #4]
20009508:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
2000950a:	687b      	ldr	r3, [r7, #4]
2000950c:	681b      	ldr	r3, [r3, #0]
2000950e:	021a      	lsls	r2, r3, #8
20009510:	693b      	ldr	r3, [r7, #16]
20009512:	441a      	add	r2, r3
20009514:	687b      	ldr	r3, [r7, #4]
20009516:	601a      	str	r2, [r3, #0]
}
20009518:	bf00      	nop
2000951a:	371c      	adds	r7, #28
2000951c:	46bd      	mov	sp, r7
2000951e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009522:	4770      	bx	lr
20009524:	52002000 	.word	0x52002000
20009528:	000fff00 	.word	0x000fff00

2000952c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
2000952c:	b480      	push	{r7}
2000952e:	b083      	sub	sp, #12
20009530:	af00      	add	r7, sp, #0
20009532:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
20009534:	4b06      	ldr	r3, [pc, #24]	@ (20009550 <FLASH_OB_BOR_LevelConfig+0x24>)
20009536:	6a1b      	ldr	r3, [r3, #32]
20009538:	f023 020c 	bic.w	r2, r3, #12
2000953c:	4904      	ldr	r1, [pc, #16]	@ (20009550 <FLASH_OB_BOR_LevelConfig+0x24>)
2000953e:	687b      	ldr	r3, [r7, #4]
20009540:	4313      	orrs	r3, r2
20009542:	620b      	str	r3, [r1, #32]
}
20009544:	bf00      	nop
20009546:	370c      	adds	r7, #12
20009548:	46bd      	mov	sp, r7
2000954a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000954e:	4770      	bx	lr
20009550:	52002000 	.word	0x52002000

20009554 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
20009554:	b480      	push	{r7}
20009556:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
20009558:	4b04      	ldr	r3, [pc, #16]	@ (2000956c <FLASH_OB_GetBOR+0x18>)
2000955a:	69db      	ldr	r3, [r3, #28]
2000955c:	f003 030c 	and.w	r3, r3, #12
}
20009560:	4618      	mov	r0, r3
20009562:	46bd      	mov	sp, r7
20009564:	f85d 7b04 	ldr.w	r7, [sp], #4
20009568:	4770      	bx	lr
2000956a:	bf00      	nop
2000956c:	52002000 	.word	0x52002000

20009570 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
20009570:	b480      	push	{r7}
20009572:	b085      	sub	sp, #20
20009574:	af00      	add	r7, sp, #0
20009576:	60f8      	str	r0, [r7, #12]
20009578:	60b9      	str	r1, [r7, #8]
2000957a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
2000957c:	68fb      	ldr	r3, [r7, #12]
2000957e:	f003 0301 	and.w	r3, r3, #1
20009582:	2b00      	cmp	r3, #0
20009584:	d008      	beq.n	20009598 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
20009586:	4b0d      	ldr	r3, [pc, #52]	@ (200095bc <FLASH_OB_BootAddConfig+0x4c>)
20009588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
2000958a:	4b0d      	ldr	r3, [pc, #52]	@ (200095c0 <FLASH_OB_BootAddConfig+0x50>)
2000958c:	4013      	ands	r3, r2
2000958e:	68ba      	ldr	r2, [r7, #8]
20009590:	0c12      	lsrs	r2, r2, #16
20009592:	490a      	ldr	r1, [pc, #40]	@ (200095bc <FLASH_OB_BootAddConfig+0x4c>)
20009594:	4313      	orrs	r3, r2
20009596:	644b      	str	r3, [r1, #68]	@ 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
20009598:	68fb      	ldr	r3, [r7, #12]
2000959a:	f003 0302 	and.w	r3, r3, #2
2000959e:	2b00      	cmp	r3, #0
200095a0:	d006      	beq.n	200095b0 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
200095a2:	4b06      	ldr	r3, [pc, #24]	@ (200095bc <FLASH_OB_BootAddConfig+0x4c>)
200095a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200095a6:	b29a      	uxth	r2, r3
200095a8:	4904      	ldr	r1, [pc, #16]	@ (200095bc <FLASH_OB_BootAddConfig+0x4c>)
200095aa:	687b      	ldr	r3, [r7, #4]
200095ac:	4313      	orrs	r3, r2
200095ae:	644b      	str	r3, [r1, #68]	@ 0x44
#endif /* DUAL_CORE */
  }
}
200095b0:	bf00      	nop
200095b2:	3714      	adds	r7, #20
200095b4:	46bd      	mov	sp, r7
200095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200095ba:	4770      	bx	lr
200095bc:	52002000 	.word	0x52002000
200095c0:	ffff0000 	.word	0xffff0000

200095c4 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
200095c4:	b480      	push	{r7}
200095c6:	b085      	sub	sp, #20
200095c8:	af00      	add	r7, sp, #0
200095ca:	6078      	str	r0, [r7, #4]
200095cc:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
200095ce:	4b09      	ldr	r3, [pc, #36]	@ (200095f4 <FLASH_OB_GetBootAdd+0x30>)
200095d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200095d2:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
200095d4:	68fb      	ldr	r3, [r7, #12]
200095d6:	041a      	lsls	r2, r3, #16
200095d8:	687b      	ldr	r3, [r7, #4]
200095da:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
200095dc:	68fa      	ldr	r2, [r7, #12]
200095de:	4b06      	ldr	r3, [pc, #24]	@ (200095f8 <FLASH_OB_GetBootAdd+0x34>)
200095e0:	4013      	ands	r3, r2
200095e2:	683a      	ldr	r2, [r7, #0]
200095e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
200095e6:	bf00      	nop
200095e8:	3714      	adds	r7, #20
200095ea:	46bd      	mov	sp, r7
200095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200095f0:	4770      	bx	lr
200095f2:	bf00      	nop
200095f4:	52002000 	.word	0x52002000
200095f8:	ffff0000 	.word	0xffff0000

200095fc <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
200095fc:	b480      	push	{r7}
200095fe:	b085      	sub	sp, #20
20009600:	af00      	add	r7, sp, #0
20009602:	60f8      	str	r0, [r7, #12]
20009604:	60b9      	str	r1, [r7, #8]
20009606:	607a      	str	r2, [r7, #4]
20009608:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2000960a:	683b      	ldr	r3, [r7, #0]
2000960c:	f003 0301 	and.w	r3, r3, #1
20009610:	2b00      	cmp	r3, #0
20009612:	d00f      	beq.n	20009634 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
20009614:	68bb      	ldr	r3, [r7, #8]
20009616:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
2000961a:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
2000961c:	687b      	ldr	r3, [r7, #4]
2000961e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
20009622:	0a1b      	lsrs	r3, r3, #8
20009624:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
20009626:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
20009628:	68fb      	ldr	r3, [r7, #12]
2000962a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2000962e:	4904      	ldr	r1, [pc, #16]	@ (20009640 <FLASH_OB_SecureAreaConfig+0x44>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
20009630:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
20009632:	634b      	str	r3, [r1, #52]	@ 0x34
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
                       (SecureAreaConfig & FLASH_SCAR_DMES);
  }
#endif /* DUAL_BANK */
}
20009634:	bf00      	nop
20009636:	3714      	adds	r7, #20
20009638:	46bd      	mov	sp, r7
2000963a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000963e:	4770      	bx	lr
20009640:	52002000 	.word	0x52002000

20009644 <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
20009644:	b480      	push	{r7}
20009646:	b087      	sub	sp, #28
20009648:	af00      	add	r7, sp, #0
2000964a:	60f8      	str	r0, [r7, #12]
2000964c:	60b9      	str	r1, [r7, #8]
2000964e:	607a      	str	r2, [r7, #4]
20009650:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
20009652:	2300      	movs	r3, #0
20009654:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
20009656:	2300      	movs	r3, #0
20009658:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
2000965a:	683b      	ldr	r3, [r7, #0]
2000965c:	2b01      	cmp	r3, #1
2000965e:	d105      	bne.n	2000966c <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
20009660:	4b12      	ldr	r3, [pc, #72]	@ (200096ac <FLASH_OB_GetSecureArea+0x68>)
20009662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20009664:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
20009666:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
2000966a:	613b      	str	r3, [r7, #16]
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
2000966c:	697b      	ldr	r3, [r7, #20]
2000966e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
20009672:	68fb      	ldr	r3, [r7, #12]
20009674:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
20009676:	697b      	ldr	r3, [r7, #20]
20009678:	021a      	lsls	r2, r3, #8
2000967a:	4b0d      	ldr	r3, [pc, #52]	@ (200096b0 <FLASH_OB_GetSecureArea+0x6c>)
2000967c:	4013      	ands	r3, r2
2000967e:	693a      	ldr	r2, [r7, #16]
20009680:	441a      	add	r2, r3
20009682:	68bb      	ldr	r3, [r7, #8]
20009684:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
20009686:	697b      	ldr	r3, [r7, #20]
20009688:	0c1b      	lsrs	r3, r3, #16
2000968a:	f3c3 020b 	ubfx	r2, r3, #0, #12
2000968e:	687b      	ldr	r3, [r7, #4]
20009690:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
20009692:	687b      	ldr	r3, [r7, #4]
20009694:	681b      	ldr	r3, [r3, #0]
20009696:	021a      	lsls	r2, r3, #8
20009698:	693b      	ldr	r3, [r7, #16]
2000969a:	441a      	add	r2, r3
2000969c:	687b      	ldr	r3, [r7, #4]
2000969e:	601a      	str	r2, [r3, #0]
}
200096a0:	bf00      	nop
200096a2:	371c      	adds	r7, #28
200096a4:	46bd      	mov	sp, r7
200096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200096aa:	4770      	bx	lr
200096ac:	52002000 	.word	0x52002000
200096b0:	000fff00 	.word	0x000fff00

200096b4 <FLASH_CRC_AddSector>:
  * @param  Sector Specifies the CRC sector number
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_AddSector(uint32_t Sector, uint32_t Bank)
{
200096b4:	b480      	push	{r7}
200096b6:	b083      	sub	sp, #12
200096b8:	af00      	add	r7, sp, #0
200096ba:	6078      	str	r0, [r7, #4]
200096bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));

  if (Bank == FLASH_BANK_1)
200096be:	683b      	ldr	r3, [r7, #0]
200096c0:	2b01      	cmp	r3, #1
200096c2:	d10d      	bne.n	200096e0 <FLASH_CRC_AddSector+0x2c>
  {
    /* Clear CRC sector */
    FLASH->CRCCR1 &= (~FLASH_CRCCR_CRC_SECT);
200096c4:	4b09      	ldr	r3, [pc, #36]	@ (200096ec <FLASH_CRC_AddSector+0x38>)
200096c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200096c8:	4a08      	ldr	r2, [pc, #32]	@ (200096ec <FLASH_CRC_AddSector+0x38>)
200096ca:	f023 0307 	bic.w	r3, r3, #7
200096ce:	6513      	str	r3, [r2, #80]	@ 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR1 |= Sector | FLASH_CRCCR_ADD_SECT;
200096d0:	4b06      	ldr	r3, [pc, #24]	@ (200096ec <FLASH_CRC_AddSector+0x38>)
200096d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
200096d4:	687b      	ldr	r3, [r7, #4]
200096d6:	4313      	orrs	r3, r2
200096d8:	4a04      	ldr	r2, [pc, #16]	@ (200096ec <FLASH_CRC_AddSector+0x38>)
200096da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
200096de:	6513      	str	r3, [r2, #80]	@ 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR2 |= Sector | FLASH_CRCCR_ADD_SECT;
  }
#endif /* DUAL_BANK */
}
200096e0:	bf00      	nop
200096e2:	370c      	adds	r7, #12
200096e4:	46bd      	mov	sp, r7
200096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200096ea:	4770      	bx	lr
200096ec:	52002000 	.word	0x52002000

200096f0 <FLASH_CRC_SelectAddress>:
  * @param  CRCEndAddr Specifies the CRC end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_SelectAddress(uint32_t CRCStartAddr, uint32_t CRCEndAddr, uint32_t Bank)
{
200096f0:	b480      	push	{r7}
200096f2:	b085      	sub	sp, #20
200096f4:	af00      	add	r7, sp, #0
200096f6:	60f8      	str	r0, [r7, #12]
200096f8:	60b9      	str	r1, [r7, #8]
200096fa:	607a      	str	r2, [r7, #4]
  if (Bank == FLASH_BANK_1)
200096fc:	687b      	ldr	r3, [r7, #4]
200096fe:	2b01      	cmp	r3, #1
20009700:	d105      	bne.n	2000970e <FLASH_CRC_SelectAddress+0x1e>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCEndAddr));

    /* Write CRC Start and End addresses */
    FLASH->CRCSADD1 = CRCStartAddr;
20009702:	4a06      	ldr	r2, [pc, #24]	@ (2000971c <FLASH_CRC_SelectAddress+0x2c>)
20009704:	68fb      	ldr	r3, [r7, #12]
20009706:	6553      	str	r3, [r2, #84]	@ 0x54
    FLASH->CRCEADD1 = CRCEndAddr;
20009708:	4a04      	ldr	r2, [pc, #16]	@ (2000971c <FLASH_CRC_SelectAddress+0x2c>)
2000970a:	68bb      	ldr	r3, [r7, #8]
2000970c:	6593      	str	r3, [r2, #88]	@ 0x58
    /* Write CRC Start and End addresses */
    FLASH->CRCSADD2 = CRCStartAddr;
    FLASH->CRCEADD2 = CRCEndAddr;
  }
#endif /* DUAL_BANK */
}
2000970e:	bf00      	nop
20009710:	3714      	adds	r7, #20
20009712:	46bd      	mov	sp, r7
20009714:	f85d 7b04 	ldr.w	r7, [sp], #4
20009718:	4770      	bx	lr
2000971a:	bf00      	nop
2000971c:	52002000 	.word	0x52002000

20009720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20009720:	b480      	push	{r7}
20009722:	b089      	sub	sp, #36	@ 0x24
20009724:	af00      	add	r7, sp, #0
20009726:	6078      	str	r0, [r7, #4]
20009728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
2000972a:	2300      	movs	r3, #0
2000972c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
2000972e:	4b89      	ldr	r3, [pc, #548]	@ (20009954 <HAL_GPIO_Init+0x234>)
20009730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
20009732:	e194      	b.n	20009a5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
20009734:	683b      	ldr	r3, [r7, #0]
20009736:	681a      	ldr	r2, [r3, #0]
20009738:	2101      	movs	r1, #1
2000973a:	69fb      	ldr	r3, [r7, #28]
2000973c:	fa01 f303 	lsl.w	r3, r1, r3
20009740:	4013      	ands	r3, r2
20009742:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
20009744:	693b      	ldr	r3, [r7, #16]
20009746:	2b00      	cmp	r3, #0
20009748:	f000 8186 	beq.w	20009a58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2000974c:	683b      	ldr	r3, [r7, #0]
2000974e:	685b      	ldr	r3, [r3, #4]
20009750:	f003 0303 	and.w	r3, r3, #3
20009754:	2b01      	cmp	r3, #1
20009756:	d005      	beq.n	20009764 <HAL_GPIO_Init+0x44>
20009758:	683b      	ldr	r3, [r7, #0]
2000975a:	685b      	ldr	r3, [r3, #4]
2000975c:	f003 0303 	and.w	r3, r3, #3
20009760:	2b02      	cmp	r3, #2
20009762:	d130      	bne.n	200097c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
20009764:	687b      	ldr	r3, [r7, #4]
20009766:	689b      	ldr	r3, [r3, #8]
20009768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2000976a:	69fb      	ldr	r3, [r7, #28]
2000976c:	005b      	lsls	r3, r3, #1
2000976e:	2203      	movs	r2, #3
20009770:	fa02 f303 	lsl.w	r3, r2, r3
20009774:	43db      	mvns	r3, r3
20009776:	69ba      	ldr	r2, [r7, #24]
20009778:	4013      	ands	r3, r2
2000977a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000977c:	683b      	ldr	r3, [r7, #0]
2000977e:	68da      	ldr	r2, [r3, #12]
20009780:	69fb      	ldr	r3, [r7, #28]
20009782:	005b      	lsls	r3, r3, #1
20009784:	fa02 f303 	lsl.w	r3, r2, r3
20009788:	69ba      	ldr	r2, [r7, #24]
2000978a:	4313      	orrs	r3, r2
2000978c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2000978e:	687b      	ldr	r3, [r7, #4]
20009790:	69ba      	ldr	r2, [r7, #24]
20009792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20009794:	687b      	ldr	r3, [r7, #4]
20009796:	685b      	ldr	r3, [r3, #4]
20009798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
2000979a:	2201      	movs	r2, #1
2000979c:	69fb      	ldr	r3, [r7, #28]
2000979e:	fa02 f303 	lsl.w	r3, r2, r3
200097a2:	43db      	mvns	r3, r3
200097a4:	69ba      	ldr	r2, [r7, #24]
200097a6:	4013      	ands	r3, r2
200097a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
200097aa:	683b      	ldr	r3, [r7, #0]
200097ac:	685b      	ldr	r3, [r3, #4]
200097ae:	091b      	lsrs	r3, r3, #4
200097b0:	f003 0201 	and.w	r2, r3, #1
200097b4:	69fb      	ldr	r3, [r7, #28]
200097b6:	fa02 f303 	lsl.w	r3, r2, r3
200097ba:	69ba      	ldr	r2, [r7, #24]
200097bc:	4313      	orrs	r3, r2
200097be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
200097c0:	687b      	ldr	r3, [r7, #4]
200097c2:	69ba      	ldr	r2, [r7, #24]
200097c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
200097c6:	683b      	ldr	r3, [r7, #0]
200097c8:	685b      	ldr	r3, [r3, #4]
200097ca:	f003 0303 	and.w	r3, r3, #3
200097ce:	2b03      	cmp	r3, #3
200097d0:	d017      	beq.n	20009802 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
200097d2:	687b      	ldr	r3, [r7, #4]
200097d4:	68db      	ldr	r3, [r3, #12]
200097d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
200097d8:	69fb      	ldr	r3, [r7, #28]
200097da:	005b      	lsls	r3, r3, #1
200097dc:	2203      	movs	r2, #3
200097de:	fa02 f303 	lsl.w	r3, r2, r3
200097e2:	43db      	mvns	r3, r3
200097e4:	69ba      	ldr	r2, [r7, #24]
200097e6:	4013      	ands	r3, r2
200097e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
200097ea:	683b      	ldr	r3, [r7, #0]
200097ec:	689a      	ldr	r2, [r3, #8]
200097ee:	69fb      	ldr	r3, [r7, #28]
200097f0:	005b      	lsls	r3, r3, #1
200097f2:	fa02 f303 	lsl.w	r3, r2, r3
200097f6:	69ba      	ldr	r2, [r7, #24]
200097f8:	4313      	orrs	r3, r2
200097fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
200097fc:	687b      	ldr	r3, [r7, #4]
200097fe:	69ba      	ldr	r2, [r7, #24]
20009800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20009802:	683b      	ldr	r3, [r7, #0]
20009804:	685b      	ldr	r3, [r3, #4]
20009806:	f003 0303 	and.w	r3, r3, #3
2000980a:	2b02      	cmp	r3, #2
2000980c:	d123      	bne.n	20009856 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000980e:	69fb      	ldr	r3, [r7, #28]
20009810:	08da      	lsrs	r2, r3, #3
20009812:	687b      	ldr	r3, [r7, #4]
20009814:	3208      	adds	r2, #8
20009816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000981a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
2000981c:	69fb      	ldr	r3, [r7, #28]
2000981e:	f003 0307 	and.w	r3, r3, #7
20009822:	009b      	lsls	r3, r3, #2
20009824:	220f      	movs	r2, #15
20009826:	fa02 f303 	lsl.w	r3, r2, r3
2000982a:	43db      	mvns	r3, r3
2000982c:	69ba      	ldr	r2, [r7, #24]
2000982e:	4013      	ands	r3, r2
20009830:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
20009832:	683b      	ldr	r3, [r7, #0]
20009834:	691a      	ldr	r2, [r3, #16]
20009836:	69fb      	ldr	r3, [r7, #28]
20009838:	f003 0307 	and.w	r3, r3, #7
2000983c:	009b      	lsls	r3, r3, #2
2000983e:	fa02 f303 	lsl.w	r3, r2, r3
20009842:	69ba      	ldr	r2, [r7, #24]
20009844:	4313      	orrs	r3, r2
20009846:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
20009848:	69fb      	ldr	r3, [r7, #28]
2000984a:	08da      	lsrs	r2, r3, #3
2000984c:	687b      	ldr	r3, [r7, #4]
2000984e:	3208      	adds	r2, #8
20009850:	69b9      	ldr	r1, [r7, #24]
20009852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20009856:	687b      	ldr	r3, [r7, #4]
20009858:	681b      	ldr	r3, [r3, #0]
2000985a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
2000985c:	69fb      	ldr	r3, [r7, #28]
2000985e:	005b      	lsls	r3, r3, #1
20009860:	2203      	movs	r2, #3
20009862:	fa02 f303 	lsl.w	r3, r2, r3
20009866:	43db      	mvns	r3, r3
20009868:	69ba      	ldr	r2, [r7, #24]
2000986a:	4013      	ands	r3, r2
2000986c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000986e:	683b      	ldr	r3, [r7, #0]
20009870:	685b      	ldr	r3, [r3, #4]
20009872:	f003 0203 	and.w	r2, r3, #3
20009876:	69fb      	ldr	r3, [r7, #28]
20009878:	005b      	lsls	r3, r3, #1
2000987a:	fa02 f303 	lsl.w	r3, r2, r3
2000987e:	69ba      	ldr	r2, [r7, #24]
20009880:	4313      	orrs	r3, r2
20009882:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20009884:	687b      	ldr	r3, [r7, #4]
20009886:	69ba      	ldr	r2, [r7, #24]
20009888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2000988a:	683b      	ldr	r3, [r7, #0]
2000988c:	685b      	ldr	r3, [r3, #4]
2000988e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20009892:	2b00      	cmp	r3, #0
20009894:	f000 80e0 	beq.w	20009a58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20009898:	4b2f      	ldr	r3, [pc, #188]	@ (20009958 <HAL_GPIO_Init+0x238>)
2000989a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2000989e:	4a2e      	ldr	r2, [pc, #184]	@ (20009958 <HAL_GPIO_Init+0x238>)
200098a0:	f043 0302 	orr.w	r3, r3, #2
200098a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
200098a8:	4b2b      	ldr	r3, [pc, #172]	@ (20009958 <HAL_GPIO_Init+0x238>)
200098aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
200098ae:	f003 0302 	and.w	r3, r3, #2
200098b2:	60fb      	str	r3, [r7, #12]
200098b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
200098b6:	4a29      	ldr	r2, [pc, #164]	@ (2000995c <HAL_GPIO_Init+0x23c>)
200098b8:	69fb      	ldr	r3, [r7, #28]
200098ba:	089b      	lsrs	r3, r3, #2
200098bc:	3302      	adds	r3, #2
200098be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200098c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
200098c4:	69fb      	ldr	r3, [r7, #28]
200098c6:	f003 0303 	and.w	r3, r3, #3
200098ca:	009b      	lsls	r3, r3, #2
200098cc:	220f      	movs	r2, #15
200098ce:	fa02 f303 	lsl.w	r3, r2, r3
200098d2:	43db      	mvns	r3, r3
200098d4:	69ba      	ldr	r2, [r7, #24]
200098d6:	4013      	ands	r3, r2
200098d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
200098da:	687b      	ldr	r3, [r7, #4]
200098dc:	4a20      	ldr	r2, [pc, #128]	@ (20009960 <HAL_GPIO_Init+0x240>)
200098de:	4293      	cmp	r3, r2
200098e0:	d052      	beq.n	20009988 <HAL_GPIO_Init+0x268>
200098e2:	687b      	ldr	r3, [r7, #4]
200098e4:	4a1f      	ldr	r2, [pc, #124]	@ (20009964 <HAL_GPIO_Init+0x244>)
200098e6:	4293      	cmp	r3, r2
200098e8:	d031      	beq.n	2000994e <HAL_GPIO_Init+0x22e>
200098ea:	687b      	ldr	r3, [r7, #4]
200098ec:	4a1e      	ldr	r2, [pc, #120]	@ (20009968 <HAL_GPIO_Init+0x248>)
200098ee:	4293      	cmp	r3, r2
200098f0:	d02b      	beq.n	2000994a <HAL_GPIO_Init+0x22a>
200098f2:	687b      	ldr	r3, [r7, #4]
200098f4:	4a1d      	ldr	r2, [pc, #116]	@ (2000996c <HAL_GPIO_Init+0x24c>)
200098f6:	4293      	cmp	r3, r2
200098f8:	d025      	beq.n	20009946 <HAL_GPIO_Init+0x226>
200098fa:	687b      	ldr	r3, [r7, #4]
200098fc:	4a1c      	ldr	r2, [pc, #112]	@ (20009970 <HAL_GPIO_Init+0x250>)
200098fe:	4293      	cmp	r3, r2
20009900:	d01f      	beq.n	20009942 <HAL_GPIO_Init+0x222>
20009902:	687b      	ldr	r3, [r7, #4]
20009904:	4a1b      	ldr	r2, [pc, #108]	@ (20009974 <HAL_GPIO_Init+0x254>)
20009906:	4293      	cmp	r3, r2
20009908:	d019      	beq.n	2000993e <HAL_GPIO_Init+0x21e>
2000990a:	687b      	ldr	r3, [r7, #4]
2000990c:	4a1a      	ldr	r2, [pc, #104]	@ (20009978 <HAL_GPIO_Init+0x258>)
2000990e:	4293      	cmp	r3, r2
20009910:	d013      	beq.n	2000993a <HAL_GPIO_Init+0x21a>
20009912:	687b      	ldr	r3, [r7, #4]
20009914:	4a19      	ldr	r2, [pc, #100]	@ (2000997c <HAL_GPIO_Init+0x25c>)
20009916:	4293      	cmp	r3, r2
20009918:	d00d      	beq.n	20009936 <HAL_GPIO_Init+0x216>
2000991a:	687b      	ldr	r3, [r7, #4]
2000991c:	4a18      	ldr	r2, [pc, #96]	@ (20009980 <HAL_GPIO_Init+0x260>)
2000991e:	4293      	cmp	r3, r2
20009920:	d007      	beq.n	20009932 <HAL_GPIO_Init+0x212>
20009922:	687b      	ldr	r3, [r7, #4]
20009924:	4a17      	ldr	r2, [pc, #92]	@ (20009984 <HAL_GPIO_Init+0x264>)
20009926:	4293      	cmp	r3, r2
20009928:	d101      	bne.n	2000992e <HAL_GPIO_Init+0x20e>
2000992a:	2309      	movs	r3, #9
2000992c:	e02d      	b.n	2000998a <HAL_GPIO_Init+0x26a>
2000992e:	230a      	movs	r3, #10
20009930:	e02b      	b.n	2000998a <HAL_GPIO_Init+0x26a>
20009932:	2308      	movs	r3, #8
20009934:	e029      	b.n	2000998a <HAL_GPIO_Init+0x26a>
20009936:	2307      	movs	r3, #7
20009938:	e027      	b.n	2000998a <HAL_GPIO_Init+0x26a>
2000993a:	2306      	movs	r3, #6
2000993c:	e025      	b.n	2000998a <HAL_GPIO_Init+0x26a>
2000993e:	2305      	movs	r3, #5
20009940:	e023      	b.n	2000998a <HAL_GPIO_Init+0x26a>
20009942:	2304      	movs	r3, #4
20009944:	e021      	b.n	2000998a <HAL_GPIO_Init+0x26a>
20009946:	2303      	movs	r3, #3
20009948:	e01f      	b.n	2000998a <HAL_GPIO_Init+0x26a>
2000994a:	2302      	movs	r3, #2
2000994c:	e01d      	b.n	2000998a <HAL_GPIO_Init+0x26a>
2000994e:	2301      	movs	r3, #1
20009950:	e01b      	b.n	2000998a <HAL_GPIO_Init+0x26a>
20009952:	bf00      	nop
20009954:	58000080 	.word	0x58000080
20009958:	58024400 	.word	0x58024400
2000995c:	58000400 	.word	0x58000400
20009960:	58020000 	.word	0x58020000
20009964:	58020400 	.word	0x58020400
20009968:	58020800 	.word	0x58020800
2000996c:	58020c00 	.word	0x58020c00
20009970:	58021000 	.word	0x58021000
20009974:	58021400 	.word	0x58021400
20009978:	58021800 	.word	0x58021800
2000997c:	58021c00 	.word	0x58021c00
20009980:	58022000 	.word	0x58022000
20009984:	58022400 	.word	0x58022400
20009988:	2300      	movs	r3, #0
2000998a:	69fa      	ldr	r2, [r7, #28]
2000998c:	f002 0203 	and.w	r2, r2, #3
20009990:	0092      	lsls	r2, r2, #2
20009992:	4093      	lsls	r3, r2
20009994:	69ba      	ldr	r2, [r7, #24]
20009996:	4313      	orrs	r3, r2
20009998:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000999a:	4938      	ldr	r1, [pc, #224]	@ (20009a7c <HAL_GPIO_Init+0x35c>)
2000999c:	69fb      	ldr	r3, [r7, #28]
2000999e:	089b      	lsrs	r3, r3, #2
200099a0:	3302      	adds	r3, #2
200099a2:	69ba      	ldr	r2, [r7, #24]
200099a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
200099a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
200099ac:	681b      	ldr	r3, [r3, #0]
200099ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
200099b0:	693b      	ldr	r3, [r7, #16]
200099b2:	43db      	mvns	r3, r3
200099b4:	69ba      	ldr	r2, [r7, #24]
200099b6:	4013      	ands	r3, r2
200099b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
200099ba:	683b      	ldr	r3, [r7, #0]
200099bc:	685b      	ldr	r3, [r3, #4]
200099be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
200099c2:	2b00      	cmp	r3, #0
200099c4:	d003      	beq.n	200099ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
200099c6:	69ba      	ldr	r2, [r7, #24]
200099c8:	693b      	ldr	r3, [r7, #16]
200099ca:	4313      	orrs	r3, r2
200099cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
200099ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
200099d2:	69bb      	ldr	r3, [r7, #24]
200099d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
200099d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
200099da:	685b      	ldr	r3, [r3, #4]
200099dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
200099de:	693b      	ldr	r3, [r7, #16]
200099e0:	43db      	mvns	r3, r3
200099e2:	69ba      	ldr	r2, [r7, #24]
200099e4:	4013      	ands	r3, r2
200099e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
200099e8:	683b      	ldr	r3, [r7, #0]
200099ea:	685b      	ldr	r3, [r3, #4]
200099ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
200099f0:	2b00      	cmp	r3, #0
200099f2:	d003      	beq.n	200099fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
200099f4:	69ba      	ldr	r2, [r7, #24]
200099f6:	693b      	ldr	r3, [r7, #16]
200099f8:	4313      	orrs	r3, r2
200099fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
200099fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20009a00:	69bb      	ldr	r3, [r7, #24]
20009a02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
20009a04:	697b      	ldr	r3, [r7, #20]
20009a06:	685b      	ldr	r3, [r3, #4]
20009a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
20009a0a:	693b      	ldr	r3, [r7, #16]
20009a0c:	43db      	mvns	r3, r3
20009a0e:	69ba      	ldr	r2, [r7, #24]
20009a10:	4013      	ands	r3, r2
20009a12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20009a14:	683b      	ldr	r3, [r7, #0]
20009a16:	685b      	ldr	r3, [r3, #4]
20009a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20009a1c:	2b00      	cmp	r3, #0
20009a1e:	d003      	beq.n	20009a28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
20009a20:	69ba      	ldr	r2, [r7, #24]
20009a22:	693b      	ldr	r3, [r7, #16]
20009a24:	4313      	orrs	r3, r2
20009a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
20009a28:	697b      	ldr	r3, [r7, #20]
20009a2a:	69ba      	ldr	r2, [r7, #24]
20009a2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
20009a2e:	697b      	ldr	r3, [r7, #20]
20009a30:	681b      	ldr	r3, [r3, #0]
20009a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
20009a34:	693b      	ldr	r3, [r7, #16]
20009a36:	43db      	mvns	r3, r3
20009a38:	69ba      	ldr	r2, [r7, #24]
20009a3a:	4013      	ands	r3, r2
20009a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20009a3e:	683b      	ldr	r3, [r7, #0]
20009a40:	685b      	ldr	r3, [r3, #4]
20009a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20009a46:	2b00      	cmp	r3, #0
20009a48:	d003      	beq.n	20009a52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
20009a4a:	69ba      	ldr	r2, [r7, #24]
20009a4c:	693b      	ldr	r3, [r7, #16]
20009a4e:	4313      	orrs	r3, r2
20009a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
20009a52:	697b      	ldr	r3, [r7, #20]
20009a54:	69ba      	ldr	r2, [r7, #24]
20009a56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
20009a58:	69fb      	ldr	r3, [r7, #28]
20009a5a:	3301      	adds	r3, #1
20009a5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
20009a5e:	683b      	ldr	r3, [r7, #0]
20009a60:	681a      	ldr	r2, [r3, #0]
20009a62:	69fb      	ldr	r3, [r7, #28]
20009a64:	fa22 f303 	lsr.w	r3, r2, r3
20009a68:	2b00      	cmp	r3, #0
20009a6a:	f47f ae63 	bne.w	20009734 <HAL_GPIO_Init+0x14>
  }
}
20009a6e:	bf00      	nop
20009a70:	bf00      	nop
20009a72:	3724      	adds	r7, #36	@ 0x24
20009a74:	46bd      	mov	sp, r7
20009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
20009a7a:	4770      	bx	lr
20009a7c:	58000400 	.word	0x58000400

20009a80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
20009a80:	b480      	push	{r7}
20009a82:	b087      	sub	sp, #28
20009a84:	af00      	add	r7, sp, #0
20009a86:	6078      	str	r0, [r7, #4]
20009a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
20009a8a:	2300      	movs	r3, #0
20009a8c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
20009a8e:	4b75      	ldr	r3, [pc, #468]	@ (20009c64 <HAL_GPIO_DeInit+0x1e4>)
20009a90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
20009a92:	e0d9      	b.n	20009c48 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
20009a94:	2201      	movs	r2, #1
20009a96:	697b      	ldr	r3, [r7, #20]
20009a98:	fa02 f303 	lsl.w	r3, r2, r3
20009a9c:	683a      	ldr	r2, [r7, #0]
20009a9e:	4013      	ands	r3, r2
20009aa0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
20009aa2:	68fb      	ldr	r3, [r7, #12]
20009aa4:	2b00      	cmp	r3, #0
20009aa6:	f000 80cc 	beq.w	20009c42 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
20009aaa:	4a6f      	ldr	r2, [pc, #444]	@ (20009c68 <HAL_GPIO_DeInit+0x1e8>)
20009aac:	697b      	ldr	r3, [r7, #20]
20009aae:	089b      	lsrs	r3, r3, #2
20009ab0:	3302      	adds	r3, #2
20009ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20009ab6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
20009ab8:	697b      	ldr	r3, [r7, #20]
20009aba:	f003 0303 	and.w	r3, r3, #3
20009abe:	009b      	lsls	r3, r3, #2
20009ac0:	220f      	movs	r2, #15
20009ac2:	fa02 f303 	lsl.w	r3, r2, r3
20009ac6:	68ba      	ldr	r2, [r7, #8]
20009ac8:	4013      	ands	r3, r2
20009aca:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
20009acc:	687b      	ldr	r3, [r7, #4]
20009ace:	4a67      	ldr	r2, [pc, #412]	@ (20009c6c <HAL_GPIO_DeInit+0x1ec>)
20009ad0:	4293      	cmp	r3, r2
20009ad2:	d037      	beq.n	20009b44 <HAL_GPIO_DeInit+0xc4>
20009ad4:	687b      	ldr	r3, [r7, #4]
20009ad6:	4a66      	ldr	r2, [pc, #408]	@ (20009c70 <HAL_GPIO_DeInit+0x1f0>)
20009ad8:	4293      	cmp	r3, r2
20009ada:	d031      	beq.n	20009b40 <HAL_GPIO_DeInit+0xc0>
20009adc:	687b      	ldr	r3, [r7, #4]
20009ade:	4a65      	ldr	r2, [pc, #404]	@ (20009c74 <HAL_GPIO_DeInit+0x1f4>)
20009ae0:	4293      	cmp	r3, r2
20009ae2:	d02b      	beq.n	20009b3c <HAL_GPIO_DeInit+0xbc>
20009ae4:	687b      	ldr	r3, [r7, #4]
20009ae6:	4a64      	ldr	r2, [pc, #400]	@ (20009c78 <HAL_GPIO_DeInit+0x1f8>)
20009ae8:	4293      	cmp	r3, r2
20009aea:	d025      	beq.n	20009b38 <HAL_GPIO_DeInit+0xb8>
20009aec:	687b      	ldr	r3, [r7, #4]
20009aee:	4a63      	ldr	r2, [pc, #396]	@ (20009c7c <HAL_GPIO_DeInit+0x1fc>)
20009af0:	4293      	cmp	r3, r2
20009af2:	d01f      	beq.n	20009b34 <HAL_GPIO_DeInit+0xb4>
20009af4:	687b      	ldr	r3, [r7, #4]
20009af6:	4a62      	ldr	r2, [pc, #392]	@ (20009c80 <HAL_GPIO_DeInit+0x200>)
20009af8:	4293      	cmp	r3, r2
20009afa:	d019      	beq.n	20009b30 <HAL_GPIO_DeInit+0xb0>
20009afc:	687b      	ldr	r3, [r7, #4]
20009afe:	4a61      	ldr	r2, [pc, #388]	@ (20009c84 <HAL_GPIO_DeInit+0x204>)
20009b00:	4293      	cmp	r3, r2
20009b02:	d013      	beq.n	20009b2c <HAL_GPIO_DeInit+0xac>
20009b04:	687b      	ldr	r3, [r7, #4]
20009b06:	4a60      	ldr	r2, [pc, #384]	@ (20009c88 <HAL_GPIO_DeInit+0x208>)
20009b08:	4293      	cmp	r3, r2
20009b0a:	d00d      	beq.n	20009b28 <HAL_GPIO_DeInit+0xa8>
20009b0c:	687b      	ldr	r3, [r7, #4]
20009b0e:	4a5f      	ldr	r2, [pc, #380]	@ (20009c8c <HAL_GPIO_DeInit+0x20c>)
20009b10:	4293      	cmp	r3, r2
20009b12:	d007      	beq.n	20009b24 <HAL_GPIO_DeInit+0xa4>
20009b14:	687b      	ldr	r3, [r7, #4]
20009b16:	4a5e      	ldr	r2, [pc, #376]	@ (20009c90 <HAL_GPIO_DeInit+0x210>)
20009b18:	4293      	cmp	r3, r2
20009b1a:	d101      	bne.n	20009b20 <HAL_GPIO_DeInit+0xa0>
20009b1c:	2309      	movs	r3, #9
20009b1e:	e012      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b20:	230a      	movs	r3, #10
20009b22:	e010      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b24:	2308      	movs	r3, #8
20009b26:	e00e      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b28:	2307      	movs	r3, #7
20009b2a:	e00c      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b2c:	2306      	movs	r3, #6
20009b2e:	e00a      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b30:	2305      	movs	r3, #5
20009b32:	e008      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b34:	2304      	movs	r3, #4
20009b36:	e006      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b38:	2303      	movs	r3, #3
20009b3a:	e004      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b3c:	2302      	movs	r3, #2
20009b3e:	e002      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b40:	2301      	movs	r3, #1
20009b42:	e000      	b.n	20009b46 <HAL_GPIO_DeInit+0xc6>
20009b44:	2300      	movs	r3, #0
20009b46:	697a      	ldr	r2, [r7, #20]
20009b48:	f002 0203 	and.w	r2, r2, #3
20009b4c:	0092      	lsls	r2, r2, #2
20009b4e:	4093      	lsls	r3, r2
20009b50:	68ba      	ldr	r2, [r7, #8]
20009b52:	429a      	cmp	r2, r3
20009b54:	d136      	bne.n	20009bc4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
20009b56:	693b      	ldr	r3, [r7, #16]
20009b58:	681a      	ldr	r2, [r3, #0]
20009b5a:	68fb      	ldr	r3, [r7, #12]
20009b5c:	43db      	mvns	r3, r3
20009b5e:	401a      	ands	r2, r3
20009b60:	693b      	ldr	r3, [r7, #16]
20009b62:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
20009b64:	693b      	ldr	r3, [r7, #16]
20009b66:	685a      	ldr	r2, [r3, #4]
20009b68:	68fb      	ldr	r3, [r7, #12]
20009b6a:	43db      	mvns	r3, r3
20009b6c:	401a      	ands	r2, r3
20009b6e:	693b      	ldr	r3, [r7, #16]
20009b70:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
20009b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20009b76:	685a      	ldr	r2, [r3, #4]
20009b78:	68fb      	ldr	r3, [r7, #12]
20009b7a:	43db      	mvns	r3, r3
20009b7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
20009b80:	4013      	ands	r3, r2
20009b82:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
20009b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20009b88:	681a      	ldr	r2, [r3, #0]
20009b8a:	68fb      	ldr	r3, [r7, #12]
20009b8c:	43db      	mvns	r3, r3
20009b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
20009b92:	4013      	ands	r3, r2
20009b94:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
20009b96:	697b      	ldr	r3, [r7, #20]
20009b98:	f003 0303 	and.w	r3, r3, #3
20009b9c:	009b      	lsls	r3, r3, #2
20009b9e:	220f      	movs	r2, #15
20009ba0:	fa02 f303 	lsl.w	r3, r2, r3
20009ba4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
20009ba6:	4a30      	ldr	r2, [pc, #192]	@ (20009c68 <HAL_GPIO_DeInit+0x1e8>)
20009ba8:	697b      	ldr	r3, [r7, #20]
20009baa:	089b      	lsrs	r3, r3, #2
20009bac:	3302      	adds	r3, #2
20009bae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
20009bb2:	68bb      	ldr	r3, [r7, #8]
20009bb4:	43da      	mvns	r2, r3
20009bb6:	482c      	ldr	r0, [pc, #176]	@ (20009c68 <HAL_GPIO_DeInit+0x1e8>)
20009bb8:	697b      	ldr	r3, [r7, #20]
20009bba:	089b      	lsrs	r3, r3, #2
20009bbc:	400a      	ands	r2, r1
20009bbe:	3302      	adds	r3, #2
20009bc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
20009bc4:	687b      	ldr	r3, [r7, #4]
20009bc6:	681a      	ldr	r2, [r3, #0]
20009bc8:	697b      	ldr	r3, [r7, #20]
20009bca:	005b      	lsls	r3, r3, #1
20009bcc:	2103      	movs	r1, #3
20009bce:	fa01 f303 	lsl.w	r3, r1, r3
20009bd2:	431a      	orrs	r2, r3
20009bd4:	687b      	ldr	r3, [r7, #4]
20009bd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
20009bd8:	697b      	ldr	r3, [r7, #20]
20009bda:	08da      	lsrs	r2, r3, #3
20009bdc:	687b      	ldr	r3, [r7, #4]
20009bde:	3208      	adds	r2, #8
20009be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
20009be4:	697b      	ldr	r3, [r7, #20]
20009be6:	f003 0307 	and.w	r3, r3, #7
20009bea:	009b      	lsls	r3, r3, #2
20009bec:	220f      	movs	r2, #15
20009bee:	fa02 f303 	lsl.w	r3, r2, r3
20009bf2:	43db      	mvns	r3, r3
20009bf4:	697a      	ldr	r2, [r7, #20]
20009bf6:	08d2      	lsrs	r2, r2, #3
20009bf8:	4019      	ands	r1, r3
20009bfa:	687b      	ldr	r3, [r7, #4]
20009bfc:	3208      	adds	r2, #8
20009bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
20009c02:	687b      	ldr	r3, [r7, #4]
20009c04:	68da      	ldr	r2, [r3, #12]
20009c06:	697b      	ldr	r3, [r7, #20]
20009c08:	005b      	lsls	r3, r3, #1
20009c0a:	2103      	movs	r1, #3
20009c0c:	fa01 f303 	lsl.w	r3, r1, r3
20009c10:	43db      	mvns	r3, r3
20009c12:	401a      	ands	r2, r3
20009c14:	687b      	ldr	r3, [r7, #4]
20009c16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
20009c18:	687b      	ldr	r3, [r7, #4]
20009c1a:	685a      	ldr	r2, [r3, #4]
20009c1c:	2101      	movs	r1, #1
20009c1e:	697b      	ldr	r3, [r7, #20]
20009c20:	fa01 f303 	lsl.w	r3, r1, r3
20009c24:	43db      	mvns	r3, r3
20009c26:	401a      	ands	r2, r3
20009c28:	687b      	ldr	r3, [r7, #4]
20009c2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
20009c2c:	687b      	ldr	r3, [r7, #4]
20009c2e:	689a      	ldr	r2, [r3, #8]
20009c30:	697b      	ldr	r3, [r7, #20]
20009c32:	005b      	lsls	r3, r3, #1
20009c34:	2103      	movs	r1, #3
20009c36:	fa01 f303 	lsl.w	r3, r1, r3
20009c3a:	43db      	mvns	r3, r3
20009c3c:	401a      	ands	r2, r3
20009c3e:	687b      	ldr	r3, [r7, #4]
20009c40:	609a      	str	r2, [r3, #8]
    }

    position++;
20009c42:	697b      	ldr	r3, [r7, #20]
20009c44:	3301      	adds	r3, #1
20009c46:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
20009c48:	683a      	ldr	r2, [r7, #0]
20009c4a:	697b      	ldr	r3, [r7, #20]
20009c4c:	fa22 f303 	lsr.w	r3, r2, r3
20009c50:	2b00      	cmp	r3, #0
20009c52:	f47f af1f 	bne.w	20009a94 <HAL_GPIO_DeInit+0x14>
  }
}
20009c56:	bf00      	nop
20009c58:	bf00      	nop
20009c5a:	371c      	adds	r7, #28
20009c5c:	46bd      	mov	sp, r7
20009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009c62:	4770      	bx	lr
20009c64:	58000080 	.word	0x58000080
20009c68:	58000400 	.word	0x58000400
20009c6c:	58020000 	.word	0x58020000
20009c70:	58020400 	.word	0x58020400
20009c74:	58020800 	.word	0x58020800
20009c78:	58020c00 	.word	0x58020c00
20009c7c:	58021000 	.word	0x58021000
20009c80:	58021400 	.word	0x58021400
20009c84:	58021800 	.word	0x58021800
20009c88:	58021c00 	.word	0x58021c00
20009c8c:	58022000 	.word	0x58022000
20009c90:	58022400 	.word	0x58022400

20009c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
20009c94:	b480      	push	{r7}
20009c96:	b085      	sub	sp, #20
20009c98:	af00      	add	r7, sp, #0
20009c9a:	6078      	str	r0, [r7, #4]
20009c9c:	460b      	mov	r3, r1
20009c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
20009ca0:	687b      	ldr	r3, [r7, #4]
20009ca2:	691a      	ldr	r2, [r3, #16]
20009ca4:	887b      	ldrh	r3, [r7, #2]
20009ca6:	4013      	ands	r3, r2
20009ca8:	2b00      	cmp	r3, #0
20009caa:	d002      	beq.n	20009cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20009cac:	2301      	movs	r3, #1
20009cae:	73fb      	strb	r3, [r7, #15]
20009cb0:	e001      	b.n	20009cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20009cb2:	2300      	movs	r3, #0
20009cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
20009cb6:	7bfb      	ldrb	r3, [r7, #15]
}
20009cb8:	4618      	mov	r0, r3
20009cba:	3714      	adds	r7, #20
20009cbc:	46bd      	mov	sp, r7
20009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
20009cc2:	4770      	bx	lr

20009cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20009cc4:	b480      	push	{r7}
20009cc6:	b083      	sub	sp, #12
20009cc8:	af00      	add	r7, sp, #0
20009cca:	6078      	str	r0, [r7, #4]
20009ccc:	460b      	mov	r3, r1
20009cce:	807b      	strh	r3, [r7, #2]
20009cd0:	4613      	mov	r3, r2
20009cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
20009cd4:	787b      	ldrb	r3, [r7, #1]
20009cd6:	2b00      	cmp	r3, #0
20009cd8:	d003      	beq.n	20009ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20009cda:	887a      	ldrh	r2, [r7, #2]
20009cdc:	687b      	ldr	r3, [r7, #4]
20009cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
20009ce0:	e003      	b.n	20009cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
20009ce2:	887b      	ldrh	r3, [r7, #2]
20009ce4:	041a      	lsls	r2, r3, #16
20009ce6:	687b      	ldr	r3, [r7, #4]
20009ce8:	619a      	str	r2, [r3, #24]
}
20009cea:	bf00      	nop
20009cec:	370c      	adds	r7, #12
20009cee:	46bd      	mov	sp, r7
20009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
20009cf4:	4770      	bx	lr

20009cf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
20009cf6:	b480      	push	{r7}
20009cf8:	b085      	sub	sp, #20
20009cfa:	af00      	add	r7, sp, #0
20009cfc:	6078      	str	r0, [r7, #4]
20009cfe:	460b      	mov	r3, r1
20009d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
20009d02:	687b      	ldr	r3, [r7, #4]
20009d04:	695b      	ldr	r3, [r3, #20]
20009d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
20009d08:	887a      	ldrh	r2, [r7, #2]
20009d0a:	68fb      	ldr	r3, [r7, #12]
20009d0c:	4013      	ands	r3, r2
20009d0e:	041a      	lsls	r2, r3, #16
20009d10:	68fb      	ldr	r3, [r7, #12]
20009d12:	43d9      	mvns	r1, r3
20009d14:	887b      	ldrh	r3, [r7, #2]
20009d16:	400b      	ands	r3, r1
20009d18:	431a      	orrs	r2, r3
20009d1a:	687b      	ldr	r3, [r7, #4]
20009d1c:	619a      	str	r2, [r3, #24]
}
20009d1e:	bf00      	nop
20009d20:	3714      	adds	r7, #20
20009d22:	46bd      	mov	sp, r7
20009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
20009d28:	4770      	bx	lr

20009d2a <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
20009d2a:	b480      	push	{r7}
20009d2c:	b085      	sub	sp, #20
20009d2e:	af00      	add	r7, sp, #0
20009d30:	6078      	str	r0, [r7, #4]
20009d32:	460b      	mov	r3, r1
20009d34:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
20009d36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20009d3a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
20009d3c:	887a      	ldrh	r2, [r7, #2]
20009d3e:	68fb      	ldr	r3, [r7, #12]
20009d40:	4313      	orrs	r3, r2
20009d42:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20009d44:	68fa      	ldr	r2, [r7, #12]
20009d46:	687b      	ldr	r3, [r7, #4]
20009d48:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
20009d4a:	887a      	ldrh	r2, [r7, #2]
20009d4c:	687b      	ldr	r3, [r7, #4]
20009d4e:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20009d50:	68fa      	ldr	r2, [r7, #12]
20009d52:	687b      	ldr	r3, [r7, #4]
20009d54:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence*/
  tmp = GPIOx->LCKR;
20009d56:	687b      	ldr	r3, [r7, #4]
20009d58:	69db      	ldr	r3, [r3, #28]
20009d5a:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00U)
20009d5c:	687b      	ldr	r3, [r7, #4]
20009d5e:	69db      	ldr	r3, [r3, #28]
20009d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20009d64:	2b00      	cmp	r3, #0
20009d66:	d001      	beq.n	20009d6c <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
20009d68:	2300      	movs	r3, #0
20009d6a:	e000      	b.n	20009d6e <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
20009d6c:	2301      	movs	r3, #1
  }
}
20009d6e:	4618      	mov	r0, r3
20009d70:	3714      	adds	r7, #20
20009d72:	46bd      	mov	sp, r7
20009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
20009d78:	4770      	bx	lr

20009d7a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
20009d7a:	b580      	push	{r7, lr}
20009d7c:	b082      	sub	sp, #8
20009d7e:	af00      	add	r7, sp, #0
20009d80:	4603      	mov	r3, r0
20009d82:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
20009d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20009d88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
20009d8c:	88fb      	ldrh	r3, [r7, #6]
20009d8e:	4013      	ands	r3, r2
20009d90:	2b00      	cmp	r3, #0
20009d92:	d008      	beq.n	20009da6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
20009d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20009d98:	88fb      	ldrh	r3, [r7, #6]
20009d9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
20009d9e:	88fb      	ldrh	r3, [r7, #6]
20009da0:	4618      	mov	r0, r3
20009da2:	f000 f804 	bl	20009dae <HAL_GPIO_EXTI_Callback>
  }
#endif
}
20009da6:	bf00      	nop
20009da8:	3708      	adds	r7, #8
20009daa:	46bd      	mov	sp, r7
20009dac:	bd80      	pop	{r7, pc}

20009dae <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
20009dae:	b480      	push	{r7}
20009db0:	b083      	sub	sp, #12
20009db2:	af00      	add	r7, sp, #0
20009db4:	4603      	mov	r3, r0
20009db6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
20009db8:	bf00      	nop
20009dba:	370c      	adds	r7, #12
20009dbc:	46bd      	mov	sp, r7
20009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
20009dc2:	4770      	bx	lr

20009dc4 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
20009dc4:	b480      	push	{r7}
20009dc6:	b083      	sub	sp, #12
20009dc8:	af00      	add	r7, sp, #0
20009dca:	6078      	str	r0, [r7, #4]
20009dcc:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
20009dce:	490c      	ldr	r1, [pc, #48]	@ (20009e00 <HAL_HSEM_Take+0x3c>)
20009dd0:	683a      	ldr	r2, [r7, #0]
20009dd2:	4b0c      	ldr	r3, [pc, #48]	@ (20009e04 <HAL_HSEM_Take+0x40>)
20009dd4:	4313      	orrs	r3, r2
20009dd6:	687a      	ldr	r2, [r7, #4]
20009dd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
20009ddc:	4a08      	ldr	r2, [pc, #32]	@ (20009e00 <HAL_HSEM_Take+0x3c>)
20009dde:	687b      	ldr	r3, [r7, #4]
20009de0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20009de4:	6839      	ldr	r1, [r7, #0]
20009de6:	4b07      	ldr	r3, [pc, #28]	@ (20009e04 <HAL_HSEM_Take+0x40>)
20009de8:	430b      	orrs	r3, r1
20009dea:	429a      	cmp	r2, r3
20009dec:	d101      	bne.n	20009df2 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
20009dee:	2300      	movs	r3, #0
20009df0:	e000      	b.n	20009df4 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
20009df2:	2301      	movs	r3, #1
}
20009df4:	4618      	mov	r0, r3
20009df6:	370c      	adds	r7, #12
20009df8:	46bd      	mov	sp, r7
20009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
20009dfe:	4770      	bx	lr
20009e00:	58026400 	.word	0x58026400
20009e04:	80000300 	.word	0x80000300

20009e08 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
20009e08:	b480      	push	{r7}
20009e0a:	b083      	sub	sp, #12
20009e0c:	af00      	add	r7, sp, #0
20009e0e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
20009e10:	4a08      	ldr	r2, [pc, #32]	@ (20009e34 <HAL_HSEM_FastTake+0x2c>)
20009e12:	687b      	ldr	r3, [r7, #4]
20009e14:	3320      	adds	r3, #32
20009e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20009e1a:	4a07      	ldr	r2, [pc, #28]	@ (20009e38 <HAL_HSEM_FastTake+0x30>)
20009e1c:	4293      	cmp	r3, r2
20009e1e:	d101      	bne.n	20009e24 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
20009e20:	2300      	movs	r3, #0
20009e22:	e000      	b.n	20009e26 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
20009e24:	2301      	movs	r3, #1
}
20009e26:	4618      	mov	r0, r3
20009e28:	370c      	adds	r7, #12
20009e2a:	46bd      	mov	sp, r7
20009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20009e30:	4770      	bx	lr
20009e32:	bf00      	nop
20009e34:	58026400 	.word	0x58026400
20009e38:	80000300 	.word	0x80000300

20009e3c <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
20009e3c:	b480      	push	{r7}
20009e3e:	b083      	sub	sp, #12
20009e40:	af00      	add	r7, sp, #0
20009e42:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
20009e44:	4a07      	ldr	r2, [pc, #28]	@ (20009e64 <HAL_HSEM_IsSemTaken+0x28>)
20009e46:	687b      	ldr	r3, [r7, #4]
20009e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20009e4c:	2b00      	cmp	r3, #0
20009e4e:	da01      	bge.n	20009e54 <HAL_HSEM_IsSemTaken+0x18>
20009e50:	2301      	movs	r3, #1
20009e52:	e000      	b.n	20009e56 <HAL_HSEM_IsSemTaken+0x1a>
20009e54:	2300      	movs	r3, #0
}
20009e56:	4618      	mov	r0, r3
20009e58:	370c      	adds	r7, #12
20009e5a:	46bd      	mov	sp, r7
20009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
20009e60:	4770      	bx	lr
20009e62:	bf00      	nop
20009e64:	58026400 	.word	0x58026400

20009e68 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
20009e68:	b480      	push	{r7}
20009e6a:	b083      	sub	sp, #12
20009e6c:	af00      	add	r7, sp, #0
20009e6e:	6078      	str	r0, [r7, #4]
20009e70:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
20009e72:	4906      	ldr	r1, [pc, #24]	@ (20009e8c <HAL_HSEM_Release+0x24>)
20009e74:	683b      	ldr	r3, [r7, #0]
20009e76:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
20009e7a:	687b      	ldr	r3, [r7, #4]
20009e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
20009e80:	bf00      	nop
20009e82:	370c      	adds	r7, #12
20009e84:	46bd      	mov	sp, r7
20009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
20009e8a:	4770      	bx	lr
20009e8c:	58026400 	.word	0x58026400

20009e90 <HAL_HSEM_ReleaseAll>:
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @param  CoreID: CoreID of the CPU that is using semaphores to be released
  * @retval None
  */
void HAL_HSEM_ReleaseAll(uint32_t Key, uint32_t CoreID)
{
20009e90:	b480      	push	{r7}
20009e92:	b083      	sub	sp, #12
20009e94:	af00      	add	r7, sp, #0
20009e96:	6078      	str	r0, [r7, #4]
20009e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_KEY(Key));
  assert_param(IS_HSEM_COREID(CoreID));

  HSEM->CR = ((Key << HSEM_CR_KEY_Pos) | (CoreID << HSEM_CR_COREID_Pos));
20009e9a:	687b      	ldr	r3, [r7, #4]
20009e9c:	041a      	lsls	r2, r3, #16
20009e9e:	683b      	ldr	r3, [r7, #0]
20009ea0:	021b      	lsls	r3, r3, #8
20009ea2:	4905      	ldr	r1, [pc, #20]	@ (20009eb8 <HAL_HSEM_ReleaseAll+0x28>)
20009ea4:	4313      	orrs	r3, r2
20009ea6:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140
}
20009eaa:	bf00      	nop
20009eac:	370c      	adds	r7, #12
20009eae:	46bd      	mov	sp, r7
20009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
20009eb4:	4770      	bx	lr
20009eb6:	bf00      	nop
20009eb8:	58026400 	.word	0x58026400

20009ebc <HAL_HSEM_SetClearKey>:
  * @brief  Set semaphore Key .
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @retval None
  */
void  HAL_HSEM_SetClearKey(uint32_t Key)
{
20009ebc:	b480      	push	{r7}
20009ebe:	b083      	sub	sp, #12
20009ec0:	af00      	add	r7, sp, #0
20009ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_HSEM_KEY(Key));

  MODIFY_REG(HSEM->KEYR, HSEM_KEYR_KEY, (Key << HSEM_KEYR_KEY_Pos));
20009ec4:	4b07      	ldr	r3, [pc, #28]	@ (20009ee4 <HAL_HSEM_SetClearKey+0x28>)
20009ec6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
20009eca:	b29a      	uxth	r2, r3
20009ecc:	687b      	ldr	r3, [r7, #4]
20009ece:	041b      	lsls	r3, r3, #16
20009ed0:	4904      	ldr	r1, [pc, #16]	@ (20009ee4 <HAL_HSEM_SetClearKey+0x28>)
20009ed2:	4313      	orrs	r3, r2
20009ed4:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144

}
20009ed8:	bf00      	nop
20009eda:	370c      	adds	r7, #12
20009edc:	46bd      	mov	sp, r7
20009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
20009ee2:	4770      	bx	lr
20009ee4:	58026400 	.word	0x58026400

20009ee8 <HAL_HSEM_GetClearKey>:
/**
  * @brief  Get semaphore Key .
  * @retval Semaphore Key , value from 0 to 0xFFFF
  */
uint32_t HAL_HSEM_GetClearKey(void)
{
20009ee8:	b480      	push	{r7}
20009eea:	af00      	add	r7, sp, #0
  return (HSEM->KEYR >> HSEM_KEYR_KEY_Pos);
20009eec:	4b04      	ldr	r3, [pc, #16]	@ (20009f00 <HAL_HSEM_GetClearKey+0x18>)
20009eee:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
20009ef2:	0c1b      	lsrs	r3, r3, #16
}
20009ef4:	4618      	mov	r0, r3
20009ef6:	46bd      	mov	sp, r7
20009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
20009efc:	4770      	bx	lr
20009efe:	bf00      	nop
20009f00:	58026400 	.word	0x58026400

20009f04 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
20009f04:	b480      	push	{r7}
20009f06:	b083      	sub	sp, #12
20009f08:	af00      	add	r7, sp, #0
20009f0a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
20009f0c:	4b05      	ldr	r3, [pc, #20]	@ (20009f24 <HAL_HSEM_ActivateNotification+0x20>)
20009f0e:	681a      	ldr	r2, [r3, #0]
20009f10:	4904      	ldr	r1, [pc, #16]	@ (20009f24 <HAL_HSEM_ActivateNotification+0x20>)
20009f12:	687b      	ldr	r3, [r7, #4]
20009f14:	4313      	orrs	r3, r2
20009f16:	600b      	str	r3, [r1, #0]
#endif
}
20009f18:	bf00      	nop
20009f1a:	370c      	adds	r7, #12
20009f1c:	46bd      	mov	sp, r7
20009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009f22:	4770      	bx	lr
20009f24:	58026500 	.word	0x58026500

20009f28 <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
20009f28:	b480      	push	{r7}
20009f2a:	b083      	sub	sp, #12
20009f2c:	af00      	add	r7, sp, #0
20009f2e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
20009f30:	4b06      	ldr	r3, [pc, #24]	@ (20009f4c <HAL_HSEM_DeactivateNotification+0x24>)
20009f32:	681a      	ldr	r2, [r3, #0]
20009f34:	687b      	ldr	r3, [r7, #4]
20009f36:	43db      	mvns	r3, r3
20009f38:	4904      	ldr	r1, [pc, #16]	@ (20009f4c <HAL_HSEM_DeactivateNotification+0x24>)
20009f3a:	4013      	ands	r3, r2
20009f3c:	600b      	str	r3, [r1, #0]
#endif
}
20009f3e:	bf00      	nop
20009f40:	370c      	adds	r7, #12
20009f42:	46bd      	mov	sp, r7
20009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
20009f48:	4770      	bx	lr
20009f4a:	bf00      	nop
20009f4c:	58026500 	.word	0x58026500

20009f50 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
20009f50:	b580      	push	{r7, lr}
20009f52:	b082      	sub	sp, #8
20009f54:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
20009f56:	4b0a      	ldr	r3, [pc, #40]	@ (20009f80 <HAL_HSEM_IRQHandler+0x30>)
20009f58:	68db      	ldr	r3, [r3, #12]
20009f5a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
20009f5c:	4b08      	ldr	r3, [pc, #32]	@ (20009f80 <HAL_HSEM_IRQHandler+0x30>)
20009f5e:	681a      	ldr	r2, [r3, #0]
20009f60:	687b      	ldr	r3, [r7, #4]
20009f62:	43db      	mvns	r3, r3
20009f64:	4906      	ldr	r1, [pc, #24]	@ (20009f80 <HAL_HSEM_IRQHandler+0x30>)
20009f66:	4013      	ands	r3, r2
20009f68:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
20009f6a:	4a05      	ldr	r2, [pc, #20]	@ (20009f80 <HAL_HSEM_IRQHandler+0x30>)
20009f6c:	687b      	ldr	r3, [r7, #4]
20009f6e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
20009f70:	6878      	ldr	r0, [r7, #4]
20009f72:	f000 f807 	bl	20009f84 <HAL_HSEM_FreeCallback>
}
20009f76:	bf00      	nop
20009f78:	3708      	adds	r7, #8
20009f7a:	46bd      	mov	sp, r7
20009f7c:	bd80      	pop	{r7, pc}
20009f7e:	bf00      	nop
20009f80:	58026500 	.word	0x58026500

20009f84 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
20009f84:	b480      	push	{r7}
20009f86:	b083      	sub	sp, #12
20009f88:	af00      	add	r7, sp, #0
20009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
20009f8c:	bf00      	nop
20009f8e:	370c      	adds	r7, #12
20009f90:	46bd      	mov	sp, r7
20009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
20009f96:	4770      	bx	lr

20009f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
20009f98:	b580      	push	{r7, lr}
20009f9a:	b082      	sub	sp, #8
20009f9c:	af00      	add	r7, sp, #0
20009f9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
20009fa0:	687b      	ldr	r3, [r7, #4]
20009fa2:	2b00      	cmp	r3, #0
20009fa4:	d101      	bne.n	20009faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
20009fa6:	2301      	movs	r3, #1
20009fa8:	e08b      	b.n	2000a0c2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
20009faa:	687b      	ldr	r3, [r7, #4]
20009fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20009fb0:	b2db      	uxtb	r3, r3
20009fb2:	2b00      	cmp	r3, #0
20009fb4:	d106      	bne.n	20009fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
20009fb6:	687b      	ldr	r3, [r7, #4]
20009fb8:	2200      	movs	r2, #0
20009fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
20009fbe:	6878      	ldr	r0, [r7, #4]
20009fc0:	f000 f8b5 	bl	2000a12e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
20009fc4:	687b      	ldr	r3, [r7, #4]
20009fc6:	2224      	movs	r2, #36	@ 0x24
20009fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
20009fcc:	687b      	ldr	r3, [r7, #4]
20009fce:	681b      	ldr	r3, [r3, #0]
20009fd0:	681a      	ldr	r2, [r3, #0]
20009fd2:	687b      	ldr	r3, [r7, #4]
20009fd4:	681b      	ldr	r3, [r3, #0]
20009fd6:	f022 0201 	bic.w	r2, r2, #1
20009fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
20009fdc:	687b      	ldr	r3, [r7, #4]
20009fde:	685a      	ldr	r2, [r3, #4]
20009fe0:	687b      	ldr	r3, [r7, #4]
20009fe2:	681b      	ldr	r3, [r3, #0]
20009fe4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
20009fe8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
20009fea:	687b      	ldr	r3, [r7, #4]
20009fec:	681b      	ldr	r3, [r3, #0]
20009fee:	689a      	ldr	r2, [r3, #8]
20009ff0:	687b      	ldr	r3, [r7, #4]
20009ff2:	681b      	ldr	r3, [r3, #0]
20009ff4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
20009ff8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
20009ffa:	687b      	ldr	r3, [r7, #4]
20009ffc:	68db      	ldr	r3, [r3, #12]
20009ffe:	2b01      	cmp	r3, #1
2000a000:	d107      	bne.n	2000a012 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2000a002:	687b      	ldr	r3, [r7, #4]
2000a004:	689a      	ldr	r2, [r3, #8]
2000a006:	687b      	ldr	r3, [r7, #4]
2000a008:	681b      	ldr	r3, [r3, #0]
2000a00a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a00e:	609a      	str	r2, [r3, #8]
2000a010:	e006      	b.n	2000a020 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
2000a012:	687b      	ldr	r3, [r7, #4]
2000a014:	689a      	ldr	r2, [r3, #8]
2000a016:	687b      	ldr	r3, [r7, #4]
2000a018:	681b      	ldr	r3, [r3, #0]
2000a01a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
2000a01e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2000a020:	687b      	ldr	r3, [r7, #4]
2000a022:	68db      	ldr	r3, [r3, #12]
2000a024:	2b02      	cmp	r3, #2
2000a026:	d108      	bne.n	2000a03a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
2000a028:	687b      	ldr	r3, [r7, #4]
2000a02a:	681b      	ldr	r3, [r3, #0]
2000a02c:	685a      	ldr	r2, [r3, #4]
2000a02e:	687b      	ldr	r3, [r7, #4]
2000a030:	681b      	ldr	r3, [r3, #0]
2000a032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
2000a036:	605a      	str	r2, [r3, #4]
2000a038:	e007      	b.n	2000a04a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
2000a03a:	687b      	ldr	r3, [r7, #4]
2000a03c:	681b      	ldr	r3, [r3, #0]
2000a03e:	685a      	ldr	r2, [r3, #4]
2000a040:	687b      	ldr	r3, [r7, #4]
2000a042:	681b      	ldr	r3, [r3, #0]
2000a044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
2000a048:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2000a04a:	687b      	ldr	r3, [r7, #4]
2000a04c:	681b      	ldr	r3, [r3, #0]
2000a04e:	6859      	ldr	r1, [r3, #4]
2000a050:	687b      	ldr	r3, [r7, #4]
2000a052:	681a      	ldr	r2, [r3, #0]
2000a054:	4b1d      	ldr	r3, [pc, #116]	@ (2000a0cc <HAL_I2C_Init+0x134>)
2000a056:	430b      	orrs	r3, r1
2000a058:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
2000a05a:	687b      	ldr	r3, [r7, #4]
2000a05c:	681b      	ldr	r3, [r3, #0]
2000a05e:	68da      	ldr	r2, [r3, #12]
2000a060:	687b      	ldr	r3, [r7, #4]
2000a062:	681b      	ldr	r3, [r3, #0]
2000a064:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000a068:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2000a06a:	687b      	ldr	r3, [r7, #4]
2000a06c:	691a      	ldr	r2, [r3, #16]
2000a06e:	687b      	ldr	r3, [r7, #4]
2000a070:	695b      	ldr	r3, [r3, #20]
2000a072:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
2000a076:	687b      	ldr	r3, [r7, #4]
2000a078:	699b      	ldr	r3, [r3, #24]
2000a07a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2000a07c:	687b      	ldr	r3, [r7, #4]
2000a07e:	681b      	ldr	r3, [r3, #0]
2000a080:	430a      	orrs	r2, r1
2000a082:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2000a084:	687b      	ldr	r3, [r7, #4]
2000a086:	69d9      	ldr	r1, [r3, #28]
2000a088:	687b      	ldr	r3, [r7, #4]
2000a08a:	6a1a      	ldr	r2, [r3, #32]
2000a08c:	687b      	ldr	r3, [r7, #4]
2000a08e:	681b      	ldr	r3, [r3, #0]
2000a090:	430a      	orrs	r2, r1
2000a092:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
2000a094:	687b      	ldr	r3, [r7, #4]
2000a096:	681b      	ldr	r3, [r3, #0]
2000a098:	681a      	ldr	r2, [r3, #0]
2000a09a:	687b      	ldr	r3, [r7, #4]
2000a09c:	681b      	ldr	r3, [r3, #0]
2000a09e:	f042 0201 	orr.w	r2, r2, #1
2000a0a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000a0a4:	687b      	ldr	r3, [r7, #4]
2000a0a6:	2200      	movs	r2, #0
2000a0a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
2000a0aa:	687b      	ldr	r3, [r7, #4]
2000a0ac:	2220      	movs	r2, #32
2000a0ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2000a0b2:	687b      	ldr	r3, [r7, #4]
2000a0b4:	2200      	movs	r2, #0
2000a0b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2000a0b8:	687b      	ldr	r3, [r7, #4]
2000a0ba:	2200      	movs	r2, #0
2000a0bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
2000a0c0:	2300      	movs	r3, #0
}
2000a0c2:	4618      	mov	r0, r3
2000a0c4:	3708      	adds	r7, #8
2000a0c6:	46bd      	mov	sp, r7
2000a0c8:	bd80      	pop	{r7, pc}
2000a0ca:	bf00      	nop
2000a0cc:	02008000 	.word	0x02008000

2000a0d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
2000a0d0:	b580      	push	{r7, lr}
2000a0d2:	b082      	sub	sp, #8
2000a0d4:	af00      	add	r7, sp, #0
2000a0d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
2000a0d8:	687b      	ldr	r3, [r7, #4]
2000a0da:	2b00      	cmp	r3, #0
2000a0dc:	d101      	bne.n	2000a0e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
2000a0de:	2301      	movs	r3, #1
2000a0e0:	e021      	b.n	2000a126 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
2000a0e2:	687b      	ldr	r3, [r7, #4]
2000a0e4:	2224      	movs	r2, #36	@ 0x24
2000a0e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
2000a0ea:	687b      	ldr	r3, [r7, #4]
2000a0ec:	681b      	ldr	r3, [r3, #0]
2000a0ee:	681a      	ldr	r2, [r3, #0]
2000a0f0:	687b      	ldr	r3, [r7, #4]
2000a0f2:	681b      	ldr	r3, [r3, #0]
2000a0f4:	f022 0201 	bic.w	r2, r2, #1
2000a0f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
2000a0fa:	6878      	ldr	r0, [r7, #4]
2000a0fc:	f000 f821 	bl	2000a142 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000a100:	687b      	ldr	r3, [r7, #4]
2000a102:	2200      	movs	r2, #0
2000a104:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
2000a106:	687b      	ldr	r3, [r7, #4]
2000a108:	2200      	movs	r2, #0
2000a10a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2000a10e:	687b      	ldr	r3, [r7, #4]
2000a110:	2200      	movs	r2, #0
2000a112:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2000a114:	687b      	ldr	r3, [r7, #4]
2000a116:	2200      	movs	r2, #0
2000a118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
2000a11c:	687b      	ldr	r3, [r7, #4]
2000a11e:	2200      	movs	r2, #0
2000a120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2000a124:	2300      	movs	r3, #0
}
2000a126:	4618      	mov	r0, r3
2000a128:	3708      	adds	r7, #8
2000a12a:	46bd      	mov	sp, r7
2000a12c:	bd80      	pop	{r7, pc}

2000a12e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
2000a12e:	b480      	push	{r7}
2000a130:	b083      	sub	sp, #12
2000a132:	af00      	add	r7, sp, #0
2000a134:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
2000a136:	bf00      	nop
2000a138:	370c      	adds	r7, #12
2000a13a:	46bd      	mov	sp, r7
2000a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a140:	4770      	bx	lr

2000a142 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
2000a142:	b480      	push	{r7}
2000a144:	b083      	sub	sp, #12
2000a146:	af00      	add	r7, sp, #0
2000a148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
2000a14a:	bf00      	nop
2000a14c:	370c      	adds	r7, #12
2000a14e:	46bd      	mov	sp, r7
2000a150:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a154:	4770      	bx	lr
	...

2000a158 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
2000a158:	b580      	push	{r7, lr}
2000a15a:	b088      	sub	sp, #32
2000a15c:	af02      	add	r7, sp, #8
2000a15e:	60f8      	str	r0, [r7, #12]
2000a160:	607a      	str	r2, [r7, #4]
2000a162:	461a      	mov	r2, r3
2000a164:	460b      	mov	r3, r1
2000a166:	817b      	strh	r3, [r7, #10]
2000a168:	4613      	mov	r3, r2
2000a16a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000a16c:	68fb      	ldr	r3, [r7, #12]
2000a16e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000a172:	b2db      	uxtb	r3, r3
2000a174:	2b20      	cmp	r3, #32
2000a176:	f040 80fd 	bne.w	2000a374 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000a17a:	68fb      	ldr	r3, [r7, #12]
2000a17c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000a180:	2b01      	cmp	r3, #1
2000a182:	d101      	bne.n	2000a188 <HAL_I2C_Master_Transmit+0x30>
2000a184:	2302      	movs	r3, #2
2000a186:	e0f6      	b.n	2000a376 <HAL_I2C_Master_Transmit+0x21e>
2000a188:	68fb      	ldr	r3, [r7, #12]
2000a18a:	2201      	movs	r2, #1
2000a18c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2000a190:	f7f8 f896 	bl	200022c0 <HAL_GetTick>
2000a194:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2000a196:	693b      	ldr	r3, [r7, #16]
2000a198:	9300      	str	r3, [sp, #0]
2000a19a:	2319      	movs	r3, #25
2000a19c:	2201      	movs	r2, #1
2000a19e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000a1a2:	68f8      	ldr	r0, [r7, #12]
2000a1a4:	f005 f92c 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a1a8:	4603      	mov	r3, r0
2000a1aa:	2b00      	cmp	r3, #0
2000a1ac:	d001      	beq.n	2000a1b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
2000a1ae:	2301      	movs	r3, #1
2000a1b0:	e0e1      	b.n	2000a376 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2000a1b2:	68fb      	ldr	r3, [r7, #12]
2000a1b4:	2221      	movs	r2, #33	@ 0x21
2000a1b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000a1ba:	68fb      	ldr	r3, [r7, #12]
2000a1bc:	2210      	movs	r2, #16
2000a1be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000a1c2:	68fb      	ldr	r3, [r7, #12]
2000a1c4:	2200      	movs	r2, #0
2000a1c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000a1c8:	68fb      	ldr	r3, [r7, #12]
2000a1ca:	687a      	ldr	r2, [r7, #4]
2000a1cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2000a1ce:	68fb      	ldr	r3, [r7, #12]
2000a1d0:	893a      	ldrh	r2, [r7, #8]
2000a1d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2000a1d4:	68fb      	ldr	r3, [r7, #12]
2000a1d6:	2200      	movs	r2, #0
2000a1d8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000a1da:	68fb      	ldr	r3, [r7, #12]
2000a1dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a1de:	b29b      	uxth	r3, r3
2000a1e0:	2bff      	cmp	r3, #255	@ 0xff
2000a1e2:	d906      	bls.n	2000a1f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000a1e4:	68fb      	ldr	r3, [r7, #12]
2000a1e6:	22ff      	movs	r2, #255	@ 0xff
2000a1e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000a1ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000a1ee:	617b      	str	r3, [r7, #20]
2000a1f0:	e007      	b.n	2000a202 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000a1f2:	68fb      	ldr	r3, [r7, #12]
2000a1f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a1f6:	b29a      	uxth	r2, r3
2000a1f8:	68fb      	ldr	r3, [r7, #12]
2000a1fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2000a1fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000a200:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2000a202:	68fb      	ldr	r3, [r7, #12]
2000a204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a206:	2b00      	cmp	r3, #0
2000a208:	d024      	beq.n	2000a254 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000a20a:	68fb      	ldr	r3, [r7, #12]
2000a20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a20e:	781a      	ldrb	r2, [r3, #0]
2000a210:	68fb      	ldr	r3, [r7, #12]
2000a212:	681b      	ldr	r3, [r3, #0]
2000a214:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000a216:	68fb      	ldr	r3, [r7, #12]
2000a218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a21a:	1c5a      	adds	r2, r3, #1
2000a21c:	68fb      	ldr	r3, [r7, #12]
2000a21e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000a220:	68fb      	ldr	r3, [r7, #12]
2000a222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a224:	b29b      	uxth	r3, r3
2000a226:	3b01      	subs	r3, #1
2000a228:	b29a      	uxth	r2, r3
2000a22a:	68fb      	ldr	r3, [r7, #12]
2000a22c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000a22e:	68fb      	ldr	r3, [r7, #12]
2000a230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a232:	3b01      	subs	r3, #1
2000a234:	b29a      	uxth	r2, r3
2000a236:	68fb      	ldr	r3, [r7, #12]
2000a238:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
2000a23a:	68fb      	ldr	r3, [r7, #12]
2000a23c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a23e:	b2db      	uxtb	r3, r3
2000a240:	3301      	adds	r3, #1
2000a242:	b2da      	uxtb	r2, r3
2000a244:	8979      	ldrh	r1, [r7, #10]
2000a246:	4b4e      	ldr	r3, [pc, #312]	@ (2000a380 <HAL_I2C_Master_Transmit+0x228>)
2000a248:	9300      	str	r3, [sp, #0]
2000a24a:	697b      	ldr	r3, [r7, #20]
2000a24c:	68f8      	ldr	r0, [r7, #12]
2000a24e:	f005 fb27 	bl	2000f8a0 <I2C_TransferConfig>
2000a252:	e066      	b.n	2000a322 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
2000a254:	68fb      	ldr	r3, [r7, #12]
2000a256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a258:	b2da      	uxtb	r2, r3
2000a25a:	8979      	ldrh	r1, [r7, #10]
2000a25c:	4b48      	ldr	r3, [pc, #288]	@ (2000a380 <HAL_I2C_Master_Transmit+0x228>)
2000a25e:	9300      	str	r3, [sp, #0]
2000a260:	697b      	ldr	r3, [r7, #20]
2000a262:	68f8      	ldr	r0, [r7, #12]
2000a264:	f005 fb1c 	bl	2000f8a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
2000a268:	e05b      	b.n	2000a322 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000a26a:	693a      	ldr	r2, [r7, #16]
2000a26c:	6a39      	ldr	r1, [r7, #32]
2000a26e:	68f8      	ldr	r0, [r7, #12]
2000a270:	f005 f91f 	bl	2000f4b2 <I2C_WaitOnTXISFlagUntilTimeout>
2000a274:	4603      	mov	r3, r0
2000a276:	2b00      	cmp	r3, #0
2000a278:	d001      	beq.n	2000a27e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
2000a27a:	2301      	movs	r3, #1
2000a27c:	e07b      	b.n	2000a376 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000a27e:	68fb      	ldr	r3, [r7, #12]
2000a280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a282:	781a      	ldrb	r2, [r3, #0]
2000a284:	68fb      	ldr	r3, [r7, #12]
2000a286:	681b      	ldr	r3, [r3, #0]
2000a288:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000a28a:	68fb      	ldr	r3, [r7, #12]
2000a28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a28e:	1c5a      	adds	r2, r3, #1
2000a290:	68fb      	ldr	r3, [r7, #12]
2000a292:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000a294:	68fb      	ldr	r3, [r7, #12]
2000a296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a298:	b29b      	uxth	r3, r3
2000a29a:	3b01      	subs	r3, #1
2000a29c:	b29a      	uxth	r2, r3
2000a29e:	68fb      	ldr	r3, [r7, #12]
2000a2a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000a2a2:	68fb      	ldr	r3, [r7, #12]
2000a2a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a2a6:	3b01      	subs	r3, #1
2000a2a8:	b29a      	uxth	r2, r3
2000a2aa:	68fb      	ldr	r3, [r7, #12]
2000a2ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000a2ae:	68fb      	ldr	r3, [r7, #12]
2000a2b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a2b2:	b29b      	uxth	r3, r3
2000a2b4:	2b00      	cmp	r3, #0
2000a2b6:	d034      	beq.n	2000a322 <HAL_I2C_Master_Transmit+0x1ca>
2000a2b8:	68fb      	ldr	r3, [r7, #12]
2000a2ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a2bc:	2b00      	cmp	r3, #0
2000a2be:	d130      	bne.n	2000a322 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2000a2c0:	693b      	ldr	r3, [r7, #16]
2000a2c2:	9300      	str	r3, [sp, #0]
2000a2c4:	6a3b      	ldr	r3, [r7, #32]
2000a2c6:	2200      	movs	r2, #0
2000a2c8:	2180      	movs	r1, #128	@ 0x80
2000a2ca:	68f8      	ldr	r0, [r7, #12]
2000a2cc:	f005 f898 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a2d0:	4603      	mov	r3, r0
2000a2d2:	2b00      	cmp	r3, #0
2000a2d4:	d001      	beq.n	2000a2da <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
2000a2d6:	2301      	movs	r3, #1
2000a2d8:	e04d      	b.n	2000a376 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000a2da:	68fb      	ldr	r3, [r7, #12]
2000a2dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a2de:	b29b      	uxth	r3, r3
2000a2e0:	2bff      	cmp	r3, #255	@ 0xff
2000a2e2:	d90e      	bls.n	2000a302 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2000a2e4:	68fb      	ldr	r3, [r7, #12]
2000a2e6:	22ff      	movs	r2, #255	@ 0xff
2000a2e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2000a2ea:	68fb      	ldr	r3, [r7, #12]
2000a2ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a2ee:	b2da      	uxtb	r2, r3
2000a2f0:	8979      	ldrh	r1, [r7, #10]
2000a2f2:	2300      	movs	r3, #0
2000a2f4:	9300      	str	r3, [sp, #0]
2000a2f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000a2fa:	68f8      	ldr	r0, [r7, #12]
2000a2fc:	f005 fad0 	bl	2000f8a0 <I2C_TransferConfig>
2000a300:	e00f      	b.n	2000a322 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2000a302:	68fb      	ldr	r3, [r7, #12]
2000a304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a306:	b29a      	uxth	r2, r3
2000a308:	68fb      	ldr	r3, [r7, #12]
2000a30a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000a30c:	68fb      	ldr	r3, [r7, #12]
2000a30e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a310:	b2da      	uxtb	r2, r3
2000a312:	8979      	ldrh	r1, [r7, #10]
2000a314:	2300      	movs	r3, #0
2000a316:	9300      	str	r3, [sp, #0]
2000a318:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000a31c:	68f8      	ldr	r0, [r7, #12]
2000a31e:	f005 fabf 	bl	2000f8a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2000a322:	68fb      	ldr	r3, [r7, #12]
2000a324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a326:	b29b      	uxth	r3, r3
2000a328:	2b00      	cmp	r3, #0
2000a32a:	d19e      	bne.n	2000a26a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000a32c:	693a      	ldr	r2, [r7, #16]
2000a32e:	6a39      	ldr	r1, [r7, #32]
2000a330:	68f8      	ldr	r0, [r7, #12]
2000a332:	f005 f905 	bl	2000f540 <I2C_WaitOnSTOPFlagUntilTimeout>
2000a336:	4603      	mov	r3, r0
2000a338:	2b00      	cmp	r3, #0
2000a33a:	d001      	beq.n	2000a340 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
2000a33c:	2301      	movs	r3, #1
2000a33e:	e01a      	b.n	2000a376 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000a340:	68fb      	ldr	r3, [r7, #12]
2000a342:	681b      	ldr	r3, [r3, #0]
2000a344:	2220      	movs	r2, #32
2000a346:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2000a348:	68fb      	ldr	r3, [r7, #12]
2000a34a:	681b      	ldr	r3, [r3, #0]
2000a34c:	6859      	ldr	r1, [r3, #4]
2000a34e:	68fb      	ldr	r3, [r7, #12]
2000a350:	681a      	ldr	r2, [r3, #0]
2000a352:	4b0c      	ldr	r3, [pc, #48]	@ (2000a384 <HAL_I2C_Master_Transmit+0x22c>)
2000a354:	400b      	ands	r3, r1
2000a356:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2000a358:	68fb      	ldr	r3, [r7, #12]
2000a35a:	2220      	movs	r2, #32
2000a35c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2000a360:	68fb      	ldr	r3, [r7, #12]
2000a362:	2200      	movs	r2, #0
2000a364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000a368:	68fb      	ldr	r3, [r7, #12]
2000a36a:	2200      	movs	r2, #0
2000a36c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000a370:	2300      	movs	r3, #0
2000a372:	e000      	b.n	2000a376 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
2000a374:	2302      	movs	r3, #2
  }
}
2000a376:	4618      	mov	r0, r3
2000a378:	3718      	adds	r7, #24
2000a37a:	46bd      	mov	sp, r7
2000a37c:	bd80      	pop	{r7, pc}
2000a37e:	bf00      	nop
2000a380:	80002000 	.word	0x80002000
2000a384:	fe00e800 	.word	0xfe00e800

2000a388 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
2000a388:	b580      	push	{r7, lr}
2000a38a:	b088      	sub	sp, #32
2000a38c:	af02      	add	r7, sp, #8
2000a38e:	60f8      	str	r0, [r7, #12]
2000a390:	607a      	str	r2, [r7, #4]
2000a392:	461a      	mov	r2, r3
2000a394:	460b      	mov	r3, r1
2000a396:	817b      	strh	r3, [r7, #10]
2000a398:	4613      	mov	r3, r2
2000a39a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000a39c:	68fb      	ldr	r3, [r7, #12]
2000a39e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000a3a2:	b2db      	uxtb	r3, r3
2000a3a4:	2b20      	cmp	r3, #32
2000a3a6:	f040 80db 	bne.w	2000a560 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000a3aa:	68fb      	ldr	r3, [r7, #12]
2000a3ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000a3b0:	2b01      	cmp	r3, #1
2000a3b2:	d101      	bne.n	2000a3b8 <HAL_I2C_Master_Receive+0x30>
2000a3b4:	2302      	movs	r3, #2
2000a3b6:	e0d4      	b.n	2000a562 <HAL_I2C_Master_Receive+0x1da>
2000a3b8:	68fb      	ldr	r3, [r7, #12]
2000a3ba:	2201      	movs	r2, #1
2000a3bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2000a3c0:	f7f7 ff7e 	bl	200022c0 <HAL_GetTick>
2000a3c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2000a3c6:	697b      	ldr	r3, [r7, #20]
2000a3c8:	9300      	str	r3, [sp, #0]
2000a3ca:	2319      	movs	r3, #25
2000a3cc:	2201      	movs	r2, #1
2000a3ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000a3d2:	68f8      	ldr	r0, [r7, #12]
2000a3d4:	f005 f814 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a3d8:	4603      	mov	r3, r0
2000a3da:	2b00      	cmp	r3, #0
2000a3dc:	d001      	beq.n	2000a3e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
2000a3de:	2301      	movs	r3, #1
2000a3e0:	e0bf      	b.n	2000a562 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2000a3e2:	68fb      	ldr	r3, [r7, #12]
2000a3e4:	2222      	movs	r2, #34	@ 0x22
2000a3e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000a3ea:	68fb      	ldr	r3, [r7, #12]
2000a3ec:	2210      	movs	r2, #16
2000a3ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000a3f2:	68fb      	ldr	r3, [r7, #12]
2000a3f4:	2200      	movs	r2, #0
2000a3f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000a3f8:	68fb      	ldr	r3, [r7, #12]
2000a3fa:	687a      	ldr	r2, [r7, #4]
2000a3fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2000a3fe:	68fb      	ldr	r3, [r7, #12]
2000a400:	893a      	ldrh	r2, [r7, #8]
2000a402:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2000a404:	68fb      	ldr	r3, [r7, #12]
2000a406:	2200      	movs	r2, #0
2000a408:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000a40a:	68fb      	ldr	r3, [r7, #12]
2000a40c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a40e:	b29b      	uxth	r3, r3
2000a410:	2bff      	cmp	r3, #255	@ 0xff
2000a412:	d90e      	bls.n	2000a432 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000a414:	68fb      	ldr	r3, [r7, #12]
2000a416:	22ff      	movs	r2, #255	@ 0xff
2000a418:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2000a41a:	68fb      	ldr	r3, [r7, #12]
2000a41c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a41e:	b2da      	uxtb	r2, r3
2000a420:	8979      	ldrh	r1, [r7, #10]
2000a422:	4b52      	ldr	r3, [pc, #328]	@ (2000a56c <HAL_I2C_Master_Receive+0x1e4>)
2000a424:	9300      	str	r3, [sp, #0]
2000a426:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000a42a:	68f8      	ldr	r0, [r7, #12]
2000a42c:	f005 fa38 	bl	2000f8a0 <I2C_TransferConfig>
2000a430:	e06d      	b.n	2000a50e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000a432:	68fb      	ldr	r3, [r7, #12]
2000a434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a436:	b29a      	uxth	r2, r3
2000a438:	68fb      	ldr	r3, [r7, #12]
2000a43a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000a43c:	68fb      	ldr	r3, [r7, #12]
2000a43e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a440:	b2da      	uxtb	r2, r3
2000a442:	8979      	ldrh	r1, [r7, #10]
2000a444:	4b49      	ldr	r3, [pc, #292]	@ (2000a56c <HAL_I2C_Master_Receive+0x1e4>)
2000a446:	9300      	str	r3, [sp, #0]
2000a448:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000a44c:	68f8      	ldr	r0, [r7, #12]
2000a44e:	f005 fa27 	bl	2000f8a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
2000a452:	e05c      	b.n	2000a50e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000a454:	697a      	ldr	r2, [r7, #20]
2000a456:	6a39      	ldr	r1, [r7, #32]
2000a458:	68f8      	ldr	r0, [r7, #12]
2000a45a:	f005 f8b5 	bl	2000f5c8 <I2C_WaitOnRXNEFlagUntilTimeout>
2000a45e:	4603      	mov	r3, r0
2000a460:	2b00      	cmp	r3, #0
2000a462:	d001      	beq.n	2000a468 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
2000a464:	2301      	movs	r3, #1
2000a466:	e07c      	b.n	2000a562 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000a468:	68fb      	ldr	r3, [r7, #12]
2000a46a:	681b      	ldr	r3, [r3, #0]
2000a46c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000a46e:	68fb      	ldr	r3, [r7, #12]
2000a470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a472:	b2d2      	uxtb	r2, r2
2000a474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000a476:	68fb      	ldr	r3, [r7, #12]
2000a478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a47a:	1c5a      	adds	r2, r3, #1
2000a47c:	68fb      	ldr	r3, [r7, #12]
2000a47e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2000a480:	68fb      	ldr	r3, [r7, #12]
2000a482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a484:	3b01      	subs	r3, #1
2000a486:	b29a      	uxth	r2, r3
2000a488:	68fb      	ldr	r3, [r7, #12]
2000a48a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2000a48c:	68fb      	ldr	r3, [r7, #12]
2000a48e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a490:	b29b      	uxth	r3, r3
2000a492:	3b01      	subs	r3, #1
2000a494:	b29a      	uxth	r2, r3
2000a496:	68fb      	ldr	r3, [r7, #12]
2000a498:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000a49a:	68fb      	ldr	r3, [r7, #12]
2000a49c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a49e:	b29b      	uxth	r3, r3
2000a4a0:	2b00      	cmp	r3, #0
2000a4a2:	d034      	beq.n	2000a50e <HAL_I2C_Master_Receive+0x186>
2000a4a4:	68fb      	ldr	r3, [r7, #12]
2000a4a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a4a8:	2b00      	cmp	r3, #0
2000a4aa:	d130      	bne.n	2000a50e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2000a4ac:	697b      	ldr	r3, [r7, #20]
2000a4ae:	9300      	str	r3, [sp, #0]
2000a4b0:	6a3b      	ldr	r3, [r7, #32]
2000a4b2:	2200      	movs	r2, #0
2000a4b4:	2180      	movs	r1, #128	@ 0x80
2000a4b6:	68f8      	ldr	r0, [r7, #12]
2000a4b8:	f004 ffa2 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a4bc:	4603      	mov	r3, r0
2000a4be:	2b00      	cmp	r3, #0
2000a4c0:	d001      	beq.n	2000a4c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
2000a4c2:	2301      	movs	r3, #1
2000a4c4:	e04d      	b.n	2000a562 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000a4c6:	68fb      	ldr	r3, [r7, #12]
2000a4c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a4ca:	b29b      	uxth	r3, r3
2000a4cc:	2bff      	cmp	r3, #255	@ 0xff
2000a4ce:	d90e      	bls.n	2000a4ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2000a4d0:	68fb      	ldr	r3, [r7, #12]
2000a4d2:	22ff      	movs	r2, #255	@ 0xff
2000a4d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2000a4d6:	68fb      	ldr	r3, [r7, #12]
2000a4d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a4da:	b2da      	uxtb	r2, r3
2000a4dc:	8979      	ldrh	r1, [r7, #10]
2000a4de:	2300      	movs	r3, #0
2000a4e0:	9300      	str	r3, [sp, #0]
2000a4e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000a4e6:	68f8      	ldr	r0, [r7, #12]
2000a4e8:	f005 f9da 	bl	2000f8a0 <I2C_TransferConfig>
2000a4ec:	e00f      	b.n	2000a50e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2000a4ee:	68fb      	ldr	r3, [r7, #12]
2000a4f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a4f2:	b29a      	uxth	r2, r3
2000a4f4:	68fb      	ldr	r3, [r7, #12]
2000a4f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000a4f8:	68fb      	ldr	r3, [r7, #12]
2000a4fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a4fc:	b2da      	uxtb	r2, r3
2000a4fe:	8979      	ldrh	r1, [r7, #10]
2000a500:	2300      	movs	r3, #0
2000a502:	9300      	str	r3, [sp, #0]
2000a504:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000a508:	68f8      	ldr	r0, [r7, #12]
2000a50a:	f005 f9c9 	bl	2000f8a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2000a50e:	68fb      	ldr	r3, [r7, #12]
2000a510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a512:	b29b      	uxth	r3, r3
2000a514:	2b00      	cmp	r3, #0
2000a516:	d19d      	bne.n	2000a454 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000a518:	697a      	ldr	r2, [r7, #20]
2000a51a:	6a39      	ldr	r1, [r7, #32]
2000a51c:	68f8      	ldr	r0, [r7, #12]
2000a51e:	f005 f80f 	bl	2000f540 <I2C_WaitOnSTOPFlagUntilTimeout>
2000a522:	4603      	mov	r3, r0
2000a524:	2b00      	cmp	r3, #0
2000a526:	d001      	beq.n	2000a52c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
2000a528:	2301      	movs	r3, #1
2000a52a:	e01a      	b.n	2000a562 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000a52c:	68fb      	ldr	r3, [r7, #12]
2000a52e:	681b      	ldr	r3, [r3, #0]
2000a530:	2220      	movs	r2, #32
2000a532:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2000a534:	68fb      	ldr	r3, [r7, #12]
2000a536:	681b      	ldr	r3, [r3, #0]
2000a538:	6859      	ldr	r1, [r3, #4]
2000a53a:	68fb      	ldr	r3, [r7, #12]
2000a53c:	681a      	ldr	r2, [r3, #0]
2000a53e:	4b0c      	ldr	r3, [pc, #48]	@ (2000a570 <HAL_I2C_Master_Receive+0x1e8>)
2000a540:	400b      	ands	r3, r1
2000a542:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2000a544:	68fb      	ldr	r3, [r7, #12]
2000a546:	2220      	movs	r2, #32
2000a548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2000a54c:	68fb      	ldr	r3, [r7, #12]
2000a54e:	2200      	movs	r2, #0
2000a550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000a554:	68fb      	ldr	r3, [r7, #12]
2000a556:	2200      	movs	r2, #0
2000a558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000a55c:	2300      	movs	r3, #0
2000a55e:	e000      	b.n	2000a562 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
2000a560:	2302      	movs	r3, #2
  }
}
2000a562:	4618      	mov	r0, r3
2000a564:	3718      	adds	r7, #24
2000a566:	46bd      	mov	sp, r7
2000a568:	bd80      	pop	{r7, pc}
2000a56a:	bf00      	nop
2000a56c:	80002400 	.word	0x80002400
2000a570:	fe00e800 	.word	0xfe00e800

2000a574 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
2000a574:	b580      	push	{r7, lr}
2000a576:	b088      	sub	sp, #32
2000a578:	af02      	add	r7, sp, #8
2000a57a:	60f8      	str	r0, [r7, #12]
2000a57c:	60b9      	str	r1, [r7, #8]
2000a57e:	603b      	str	r3, [r7, #0]
2000a580:	4613      	mov	r3, r2
2000a582:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000a584:	68fb      	ldr	r3, [r7, #12]
2000a586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000a58a:	b2db      	uxtb	r3, r3
2000a58c:	2b20      	cmp	r3, #32
2000a58e:	f040 8130 	bne.w	2000a7f2 <HAL_I2C_Slave_Transmit+0x27e>
  {
    if ((pData == NULL) || (Size == 0U))
2000a592:	68bb      	ldr	r3, [r7, #8]
2000a594:	2b00      	cmp	r3, #0
2000a596:	d002      	beq.n	2000a59e <HAL_I2C_Slave_Transmit+0x2a>
2000a598:	88fb      	ldrh	r3, [r7, #6]
2000a59a:	2b00      	cmp	r3, #0
2000a59c:	d105      	bne.n	2000a5aa <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000a59e:	68fb      	ldr	r3, [r7, #12]
2000a5a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000a5a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000a5a6:	2301      	movs	r3, #1
2000a5a8:	e124      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000a5aa:	68fb      	ldr	r3, [r7, #12]
2000a5ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000a5b0:	2b01      	cmp	r3, #1
2000a5b2:	d101      	bne.n	2000a5b8 <HAL_I2C_Slave_Transmit+0x44>
2000a5b4:	2302      	movs	r3, #2
2000a5b6:	e11d      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
2000a5b8:	68fb      	ldr	r3, [r7, #12]
2000a5ba:	2201      	movs	r2, #1
2000a5bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2000a5c0:	f7f7 fe7e 	bl	200022c0 <HAL_GetTick>
2000a5c4:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2000a5c6:	68fb      	ldr	r3, [r7, #12]
2000a5c8:	2221      	movs	r2, #33	@ 0x21
2000a5ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2000a5ce:	68fb      	ldr	r3, [r7, #12]
2000a5d0:	2220      	movs	r2, #32
2000a5d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000a5d6:	68fb      	ldr	r3, [r7, #12]
2000a5d8:	2200      	movs	r2, #0
2000a5da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000a5dc:	68fb      	ldr	r3, [r7, #12]
2000a5de:	68ba      	ldr	r2, [r7, #8]
2000a5e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2000a5e2:	68fb      	ldr	r3, [r7, #12]
2000a5e4:	88fa      	ldrh	r2, [r7, #6]
2000a5e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2000a5e8:	68fb      	ldr	r3, [r7, #12]
2000a5ea:	2200      	movs	r2, #0
2000a5ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000a5ee:	68fb      	ldr	r3, [r7, #12]
2000a5f0:	681b      	ldr	r3, [r3, #0]
2000a5f2:	685a      	ldr	r2, [r3, #4]
2000a5f4:	68fb      	ldr	r3, [r7, #12]
2000a5f6:	681b      	ldr	r3, [r3, #0]
2000a5f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000a5fc:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2000a5fe:	697b      	ldr	r3, [r7, #20]
2000a600:	9300      	str	r3, [sp, #0]
2000a602:	683b      	ldr	r3, [r7, #0]
2000a604:	2200      	movs	r2, #0
2000a606:	2108      	movs	r1, #8
2000a608:	68f8      	ldr	r0, [r7, #12]
2000a60a:	f004 fef9 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a60e:	4603      	mov	r3, r0
2000a610:	2b00      	cmp	r3, #0
2000a612:	d009      	beq.n	2000a628 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a614:	68fb      	ldr	r3, [r7, #12]
2000a616:	681b      	ldr	r3, [r3, #0]
2000a618:	685a      	ldr	r2, [r3, #4]
2000a61a:	68fb      	ldr	r3, [r7, #12]
2000a61c:	681b      	ldr	r3, [r3, #0]
2000a61e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a622:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2000a624:	2301      	movs	r3, #1
2000a626:	e0e5      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
    }

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2000a628:	68fb      	ldr	r3, [r7, #12]
2000a62a:	6a1b      	ldr	r3, [r3, #32]
2000a62c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2000a630:	d111      	bne.n	2000a656 <HAL_I2C_Slave_Transmit+0xe2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000a632:	68fb      	ldr	r3, [r7, #12]
2000a634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a636:	781a      	ldrb	r2, [r3, #0]
2000a638:	68fb      	ldr	r3, [r7, #12]
2000a63a:	681b      	ldr	r3, [r3, #0]
2000a63c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000a63e:	68fb      	ldr	r3, [r7, #12]
2000a640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a642:	1c5a      	adds	r2, r3, #1
2000a644:	68fb      	ldr	r3, [r7, #12]
2000a646:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000a648:	68fb      	ldr	r3, [r7, #12]
2000a64a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a64c:	b29b      	uxth	r3, r3
2000a64e:	3b01      	subs	r3, #1
2000a650:	b29a      	uxth	r2, r3
2000a652:	68fb      	ldr	r3, [r7, #12]
2000a654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000a656:	68fb      	ldr	r3, [r7, #12]
2000a658:	681b      	ldr	r3, [r3, #0]
2000a65a:	2208      	movs	r2, #8
2000a65c:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2000a65e:	68fb      	ldr	r3, [r7, #12]
2000a660:	68db      	ldr	r3, [r3, #12]
2000a662:	2b02      	cmp	r3, #2
2000a664:	d118      	bne.n	2000a698 <HAL_I2C_Slave_Transmit+0x124>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2000a666:	697b      	ldr	r3, [r7, #20]
2000a668:	9300      	str	r3, [sp, #0]
2000a66a:	683b      	ldr	r3, [r7, #0]
2000a66c:	2200      	movs	r2, #0
2000a66e:	2108      	movs	r1, #8
2000a670:	68f8      	ldr	r0, [r7, #12]
2000a672:	f004 fec5 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a676:	4603      	mov	r3, r0
2000a678:	2b00      	cmp	r3, #0
2000a67a:	d009      	beq.n	2000a690 <HAL_I2C_Slave_Transmit+0x11c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a67c:	68fb      	ldr	r3, [r7, #12]
2000a67e:	681b      	ldr	r3, [r3, #0]
2000a680:	685a      	ldr	r2, [r3, #4]
2000a682:	68fb      	ldr	r3, [r7, #12]
2000a684:	681b      	ldr	r3, [r3, #0]
2000a686:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a68a:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2000a68c:	2301      	movs	r3, #1
2000a68e:	e0b1      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000a690:	68fb      	ldr	r3, [r7, #12]
2000a692:	681b      	ldr	r3, [r3, #0]
2000a694:	2208      	movs	r2, #8
2000a696:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
2000a698:	697b      	ldr	r3, [r7, #20]
2000a69a:	9300      	str	r3, [sp, #0]
2000a69c:	683b      	ldr	r3, [r7, #0]
2000a69e:	2200      	movs	r2, #0
2000a6a0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
2000a6a4:	68f8      	ldr	r0, [r7, #12]
2000a6a6:	f004 feab 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a6aa:	4603      	mov	r3, r0
2000a6ac:	2b00      	cmp	r3, #0
2000a6ae:	d02d      	beq.n	2000a70c <HAL_I2C_Slave_Transmit+0x198>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a6b0:	68fb      	ldr	r3, [r7, #12]
2000a6b2:	681b      	ldr	r3, [r3, #0]
2000a6b4:	685a      	ldr	r2, [r3, #4]
2000a6b6:	68fb      	ldr	r3, [r7, #12]
2000a6b8:	681b      	ldr	r3, [r3, #0]
2000a6ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a6be:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2000a6c0:	2301      	movs	r3, #1
2000a6c2:	e097      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000a6c4:	697a      	ldr	r2, [r7, #20]
2000a6c6:	6839      	ldr	r1, [r7, #0]
2000a6c8:	68f8      	ldr	r0, [r7, #12]
2000a6ca:	f004 fef2 	bl	2000f4b2 <I2C_WaitOnTXISFlagUntilTimeout>
2000a6ce:	4603      	mov	r3, r0
2000a6d0:	2b00      	cmp	r3, #0
2000a6d2:	d009      	beq.n	2000a6e8 <HAL_I2C_Slave_Transmit+0x174>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a6d4:	68fb      	ldr	r3, [r7, #12]
2000a6d6:	681b      	ldr	r3, [r3, #0]
2000a6d8:	685a      	ldr	r2, [r3, #4]
2000a6da:	68fb      	ldr	r3, [r7, #12]
2000a6dc:	681b      	ldr	r3, [r3, #0]
2000a6de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a6e2:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2000a6e4:	2301      	movs	r3, #1
2000a6e6:	e085      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000a6e8:	68fb      	ldr	r3, [r7, #12]
2000a6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a6ec:	781a      	ldrb	r2, [r3, #0]
2000a6ee:	68fb      	ldr	r3, [r7, #12]
2000a6f0:	681b      	ldr	r3, [r3, #0]
2000a6f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000a6f4:	68fb      	ldr	r3, [r7, #12]
2000a6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a6f8:	1c5a      	adds	r2, r3, #1
2000a6fa:	68fb      	ldr	r3, [r7, #12]
2000a6fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000a6fe:	68fb      	ldr	r3, [r7, #12]
2000a700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a702:	b29b      	uxth	r3, r3
2000a704:	3b01      	subs	r3, #1
2000a706:	b29a      	uxth	r2, r3
2000a708:	68fb      	ldr	r3, [r7, #12]
2000a70a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
2000a70c:	68fb      	ldr	r3, [r7, #12]
2000a70e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a710:	b29b      	uxth	r3, r3
2000a712:	2b00      	cmp	r3, #0
2000a714:	d1d6      	bne.n	2000a6c4 <HAL_I2C_Slave_Transmit+0x150>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
2000a716:	697b      	ldr	r3, [r7, #20]
2000a718:	9300      	str	r3, [sp, #0]
2000a71a:	683b      	ldr	r3, [r7, #0]
2000a71c:	2200      	movs	r2, #0
2000a71e:	2110      	movs	r1, #16
2000a720:	68f8      	ldr	r0, [r7, #12]
2000a722:	f004 fe6d 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a726:	4603      	mov	r3, r0
2000a728:	74fb      	strb	r3, [r7, #19]

    if (error != HAL_OK)
2000a72a:	7cfb      	ldrb	r3, [r7, #19]
2000a72c:	2b00      	cmp	r3, #0
2000a72e:	d017      	beq.n	2000a760 <HAL_I2C_Slave_Transmit+0x1ec>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
2000a730:	68fb      	ldr	r3, [r7, #12]
2000a732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a734:	823b      	strh	r3, [r7, #16]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
2000a736:	68fb      	ldr	r3, [r7, #12]
2000a738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000a73a:	2b04      	cmp	r3, #4
2000a73c:	d106      	bne.n	2000a74c <HAL_I2C_Slave_Transmit+0x1d8>
2000a73e:	8a3b      	ldrh	r3, [r7, #16]
2000a740:	2b00      	cmp	r3, #0
2000a742:	d103      	bne.n	2000a74c <HAL_I2C_Slave_Transmit+0x1d8>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000a744:	68fb      	ldr	r3, [r7, #12]
2000a746:	2200      	movs	r2, #0
2000a748:	645a      	str	r2, [r3, #68]	@ 0x44
2000a74a:	e026      	b.n	2000a79a <HAL_I2C_Slave_Transmit+0x226>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a74c:	68fb      	ldr	r3, [r7, #12]
2000a74e:	681b      	ldr	r3, [r3, #0]
2000a750:	685a      	ldr	r2, [r3, #4]
2000a752:	68fb      	ldr	r3, [r7, #12]
2000a754:	681b      	ldr	r3, [r3, #0]
2000a756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a75a:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2000a75c:	2301      	movs	r3, #1
2000a75e:	e049      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
2000a760:	68f8      	ldr	r0, [r7, #12]
2000a762:	f004 fb68 	bl	2000ee36 <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000a766:	68fb      	ldr	r3, [r7, #12]
2000a768:	681b      	ldr	r3, [r3, #0]
2000a76a:	2210      	movs	r2, #16
2000a76c:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000a76e:	697a      	ldr	r2, [r7, #20]
2000a770:	6839      	ldr	r1, [r7, #0]
2000a772:	68f8      	ldr	r0, [r7, #12]
2000a774:	f004 fee4 	bl	2000f540 <I2C_WaitOnSTOPFlagUntilTimeout>
2000a778:	4603      	mov	r3, r0
2000a77a:	2b00      	cmp	r3, #0
2000a77c:	d009      	beq.n	2000a792 <HAL_I2C_Slave_Transmit+0x21e>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a77e:	68fb      	ldr	r3, [r7, #12]
2000a780:	681b      	ldr	r3, [r3, #0]
2000a782:	685a      	ldr	r2, [r3, #4]
2000a784:	68fb      	ldr	r3, [r7, #12]
2000a786:	681b      	ldr	r3, [r3, #0]
2000a788:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a78c:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
2000a78e:	2301      	movs	r3, #1
2000a790:	e030      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000a792:	68fb      	ldr	r3, [r7, #12]
2000a794:	681b      	ldr	r3, [r3, #0]
2000a796:	2220      	movs	r2, #32
2000a798:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2000a79a:	697b      	ldr	r3, [r7, #20]
2000a79c:	9300      	str	r3, [sp, #0]
2000a79e:	683b      	ldr	r3, [r7, #0]
2000a7a0:	2201      	movs	r2, #1
2000a7a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000a7a6:	68f8      	ldr	r0, [r7, #12]
2000a7a8:	f004 fe2a 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a7ac:	4603      	mov	r3, r0
2000a7ae:	2b00      	cmp	r3, #0
2000a7b0:	d009      	beq.n	2000a7c6 <HAL_I2C_Slave_Transmit+0x252>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a7b2:	68fb      	ldr	r3, [r7, #12]
2000a7b4:	681b      	ldr	r3, [r3, #0]
2000a7b6:	685a      	ldr	r2, [r3, #4]
2000a7b8:	68fb      	ldr	r3, [r7, #12]
2000a7ba:	681b      	ldr	r3, [r3, #0]
2000a7bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a7c0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2000a7c2:	2301      	movs	r3, #1
2000a7c4:	e016      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a7c6:	68fb      	ldr	r3, [r7, #12]
2000a7c8:	681b      	ldr	r3, [r3, #0]
2000a7ca:	685a      	ldr	r2, [r3, #4]
2000a7cc:	68fb      	ldr	r3, [r7, #12]
2000a7ce:	681b      	ldr	r3, [r3, #0]
2000a7d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a7d4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2000a7d6:	68fb      	ldr	r3, [r7, #12]
2000a7d8:	2220      	movs	r2, #32
2000a7da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2000a7de:	68fb      	ldr	r3, [r7, #12]
2000a7e0:	2200      	movs	r2, #0
2000a7e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000a7e6:	68fb      	ldr	r3, [r7, #12]
2000a7e8:	2200      	movs	r2, #0
2000a7ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000a7ee:	2300      	movs	r3, #0
2000a7f0:	e000      	b.n	2000a7f4 <HAL_I2C_Slave_Transmit+0x280>
  }
  else
  {
    return HAL_BUSY;
2000a7f2:	2302      	movs	r3, #2
  }
}
2000a7f4:	4618      	mov	r0, r3
2000a7f6:	3718      	adds	r7, #24
2000a7f8:	46bd      	mov	sp, r7
2000a7fa:	bd80      	pop	{r7, pc}

2000a7fc <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
2000a7fc:	b580      	push	{r7, lr}
2000a7fe:	b088      	sub	sp, #32
2000a800:	af02      	add	r7, sp, #8
2000a802:	60f8      	str	r0, [r7, #12]
2000a804:	60b9      	str	r1, [r7, #8]
2000a806:	603b      	str	r3, [r7, #0]
2000a808:	4613      	mov	r3, r2
2000a80a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000a80c:	68fb      	ldr	r3, [r7, #12]
2000a80e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000a812:	b2db      	uxtb	r3, r3
2000a814:	2b20      	cmp	r3, #32
2000a816:	f040 80fc 	bne.w	2000aa12 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
2000a81a:	68bb      	ldr	r3, [r7, #8]
2000a81c:	2b00      	cmp	r3, #0
2000a81e:	d002      	beq.n	2000a826 <HAL_I2C_Slave_Receive+0x2a>
2000a820:	88fb      	ldrh	r3, [r7, #6]
2000a822:	2b00      	cmp	r3, #0
2000a824:	d105      	bne.n	2000a832 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000a826:	68fb      	ldr	r3, [r7, #12]
2000a828:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000a82c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000a82e:	2301      	movs	r3, #1
2000a830:	e0f0      	b.n	2000aa14 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000a832:	68fb      	ldr	r3, [r7, #12]
2000a834:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000a838:	2b01      	cmp	r3, #1
2000a83a:	d101      	bne.n	2000a840 <HAL_I2C_Slave_Receive+0x44>
2000a83c:	2302      	movs	r3, #2
2000a83e:	e0e9      	b.n	2000aa14 <HAL_I2C_Slave_Receive+0x218>
2000a840:	68fb      	ldr	r3, [r7, #12]
2000a842:	2201      	movs	r2, #1
2000a844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2000a848:	f7f7 fd3a 	bl	200022c0 <HAL_GetTick>
2000a84c:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2000a84e:	68fb      	ldr	r3, [r7, #12]
2000a850:	2222      	movs	r2, #34	@ 0x22
2000a852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2000a856:	68fb      	ldr	r3, [r7, #12]
2000a858:	2220      	movs	r2, #32
2000a85a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000a85e:	68fb      	ldr	r3, [r7, #12]
2000a860:	2200      	movs	r2, #0
2000a862:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000a864:	68fb      	ldr	r3, [r7, #12]
2000a866:	68ba      	ldr	r2, [r7, #8]
2000a868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2000a86a:	68fb      	ldr	r3, [r7, #12]
2000a86c:	88fa      	ldrh	r2, [r7, #6]
2000a86e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize = hi2c->XferCount;
2000a870:	68fb      	ldr	r3, [r7, #12]
2000a872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a874:	b29a      	uxth	r2, r3
2000a876:	68fb      	ldr	r3, [r7, #12]
2000a878:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferISR   = NULL;
2000a87a:	68fb      	ldr	r3, [r7, #12]
2000a87c:	2200      	movs	r2, #0
2000a87e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000a880:	68fb      	ldr	r3, [r7, #12]
2000a882:	681b      	ldr	r3, [r3, #0]
2000a884:	685a      	ldr	r2, [r3, #4]
2000a886:	68fb      	ldr	r3, [r7, #12]
2000a888:	681b      	ldr	r3, [r3, #0]
2000a88a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000a88e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2000a890:	697b      	ldr	r3, [r7, #20]
2000a892:	9300      	str	r3, [sp, #0]
2000a894:	683b      	ldr	r3, [r7, #0]
2000a896:	2200      	movs	r2, #0
2000a898:	2108      	movs	r1, #8
2000a89a:	68f8      	ldr	r0, [r7, #12]
2000a89c:	f004 fdb0 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a8a0:	4603      	mov	r3, r0
2000a8a2:	2b00      	cmp	r3, #0
2000a8a4:	d009      	beq.n	2000a8ba <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a8a6:	68fb      	ldr	r3, [r7, #12]
2000a8a8:	681b      	ldr	r3, [r3, #0]
2000a8aa:	685a      	ldr	r2, [r3, #4]
2000a8ac:	68fb      	ldr	r3, [r7, #12]
2000a8ae:	681b      	ldr	r3, [r3, #0]
2000a8b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a8b4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2000a8b6:	2301      	movs	r3, #1
2000a8b8:	e0ac      	b.n	2000aa14 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000a8ba:	68fb      	ldr	r3, [r7, #12]
2000a8bc:	681b      	ldr	r3, [r3, #0]
2000a8be:	2208      	movs	r2, #8
2000a8c0:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
2000a8c2:	697b      	ldr	r3, [r7, #20]
2000a8c4:	9300      	str	r3, [sp, #0]
2000a8c6:	683b      	ldr	r3, [r7, #0]
2000a8c8:	2201      	movs	r2, #1
2000a8ca:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
2000a8ce:	68f8      	ldr	r0, [r7, #12]
2000a8d0:	f004 fd96 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a8d4:	4603      	mov	r3, r0
2000a8d6:	2b00      	cmp	r3, #0
2000a8d8:	d054      	beq.n	2000a984 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a8da:	68fb      	ldr	r3, [r7, #12]
2000a8dc:	681b      	ldr	r3, [r3, #0]
2000a8de:	685a      	ldr	r2, [r3, #4]
2000a8e0:	68fb      	ldr	r3, [r7, #12]
2000a8e2:	681b      	ldr	r3, [r3, #0]
2000a8e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a8e8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2000a8ea:	2301      	movs	r3, #1
2000a8ec:	e092      	b.n	2000aa14 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000a8ee:	697a      	ldr	r2, [r7, #20]
2000a8f0:	6839      	ldr	r1, [r7, #0]
2000a8f2:	68f8      	ldr	r0, [r7, #12]
2000a8f4:	f004 fe68 	bl	2000f5c8 <I2C_WaitOnRXNEFlagUntilTimeout>
2000a8f8:	4603      	mov	r3, r0
2000a8fa:	2b00      	cmp	r3, #0
2000a8fc:	d029      	beq.n	2000a952 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a8fe:	68fb      	ldr	r3, [r7, #12]
2000a900:	681b      	ldr	r3, [r3, #0]
2000a902:	685a      	ldr	r2, [r3, #4]
2000a904:	68fb      	ldr	r3, [r7, #12]
2000a906:	681b      	ldr	r3, [r3, #0]
2000a908:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a90c:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
2000a90e:	68fb      	ldr	r3, [r7, #12]
2000a910:	681b      	ldr	r3, [r3, #0]
2000a912:	699b      	ldr	r3, [r3, #24]
2000a914:	f003 0304 	and.w	r3, r3, #4
2000a918:	2b04      	cmp	r3, #4
2000a91a:	d118      	bne.n	2000a94e <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000a91c:	68fb      	ldr	r3, [r7, #12]
2000a91e:	681b      	ldr	r3, [r3, #0]
2000a920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000a922:	68fb      	ldr	r3, [r7, #12]
2000a924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a926:	b2d2      	uxtb	r2, r2
2000a928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
2000a92a:	68fb      	ldr	r3, [r7, #12]
2000a92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a92e:	1c5a      	adds	r2, r3, #1
2000a930:	68fb      	ldr	r3, [r7, #12]
2000a932:	625a      	str	r2, [r3, #36]	@ 0x24

          hi2c->XferCount--;
2000a934:	68fb      	ldr	r3, [r7, #12]
2000a936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a938:	b29b      	uxth	r3, r3
2000a93a:	3b01      	subs	r3, #1
2000a93c:	b29a      	uxth	r2, r3
2000a93e:	68fb      	ldr	r3, [r7, #12]
2000a940:	855a      	strh	r2, [r3, #42]	@ 0x2a
          hi2c->XferSize--;
2000a942:	68fb      	ldr	r3, [r7, #12]
2000a944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a946:	3b01      	subs	r3, #1
2000a948:	b29a      	uxth	r2, r3
2000a94a:	68fb      	ldr	r3, [r7, #12]
2000a94c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }

        return HAL_ERROR;
2000a94e:	2301      	movs	r3, #1
2000a950:	e060      	b.n	2000aa14 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000a952:	68fb      	ldr	r3, [r7, #12]
2000a954:	681b      	ldr	r3, [r3, #0]
2000a956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000a958:	68fb      	ldr	r3, [r7, #12]
2000a95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a95c:	b2d2      	uxtb	r2, r2
2000a95e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000a960:	68fb      	ldr	r3, [r7, #12]
2000a962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000a964:	1c5a      	adds	r2, r3, #1
2000a966:	68fb      	ldr	r3, [r7, #12]
2000a968:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000a96a:	68fb      	ldr	r3, [r7, #12]
2000a96c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a96e:	b29b      	uxth	r3, r3
2000a970:	3b01      	subs	r3, #1
2000a972:	b29a      	uxth	r2, r3
2000a974:	68fb      	ldr	r3, [r7, #12]
2000a976:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000a978:	68fb      	ldr	r3, [r7, #12]
2000a97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000a97c:	3b01      	subs	r3, #1
2000a97e:	b29a      	uxth	r2, r3
2000a980:	68fb      	ldr	r3, [r7, #12]
2000a982:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
2000a984:	68fb      	ldr	r3, [r7, #12]
2000a986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000a988:	b29b      	uxth	r3, r3
2000a98a:	2b00      	cmp	r3, #0
2000a98c:	d1af      	bne.n	2000a8ee <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000a98e:	697a      	ldr	r2, [r7, #20]
2000a990:	6839      	ldr	r1, [r7, #0]
2000a992:	68f8      	ldr	r0, [r7, #12]
2000a994:	f004 fdd4 	bl	2000f540 <I2C_WaitOnSTOPFlagUntilTimeout>
2000a998:	4603      	mov	r3, r0
2000a99a:	2b00      	cmp	r3, #0
2000a99c:	d009      	beq.n	2000a9b2 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a99e:	68fb      	ldr	r3, [r7, #12]
2000a9a0:	681b      	ldr	r3, [r3, #0]
2000a9a2:	685a      	ldr	r2, [r3, #4]
2000a9a4:	68fb      	ldr	r3, [r7, #12]
2000a9a6:	681b      	ldr	r3, [r3, #0]
2000a9a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a9ac:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2000a9ae:	2301      	movs	r3, #1
2000a9b0:	e030      	b.n	2000aa14 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000a9b2:	68fb      	ldr	r3, [r7, #12]
2000a9b4:	681b      	ldr	r3, [r3, #0]
2000a9b6:	2220      	movs	r2, #32
2000a9b8:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2000a9ba:	697b      	ldr	r3, [r7, #20]
2000a9bc:	9300      	str	r3, [sp, #0]
2000a9be:	683b      	ldr	r3, [r7, #0]
2000a9c0:	2201      	movs	r2, #1
2000a9c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000a9c6:	68f8      	ldr	r0, [r7, #12]
2000a9c8:	f004 fd1a 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000a9cc:	4603      	mov	r3, r0
2000a9ce:	2b00      	cmp	r3, #0
2000a9d0:	d009      	beq.n	2000a9e6 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a9d2:	68fb      	ldr	r3, [r7, #12]
2000a9d4:	681b      	ldr	r3, [r3, #0]
2000a9d6:	685a      	ldr	r2, [r3, #4]
2000a9d8:	68fb      	ldr	r3, [r7, #12]
2000a9da:	681b      	ldr	r3, [r3, #0]
2000a9dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a9e0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2000a9e2:	2301      	movs	r3, #1
2000a9e4:	e016      	b.n	2000aa14 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a9e6:	68fb      	ldr	r3, [r7, #12]
2000a9e8:	681b      	ldr	r3, [r3, #0]
2000a9ea:	685a      	ldr	r2, [r3, #4]
2000a9ec:	68fb      	ldr	r3, [r7, #12]
2000a9ee:	681b      	ldr	r3, [r3, #0]
2000a9f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000a9f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2000a9f6:	68fb      	ldr	r3, [r7, #12]
2000a9f8:	2220      	movs	r2, #32
2000a9fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2000a9fe:	68fb      	ldr	r3, [r7, #12]
2000aa00:	2200      	movs	r2, #0
2000aa02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000aa06:	68fb      	ldr	r3, [r7, #12]
2000aa08:	2200      	movs	r2, #0
2000aa0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000aa0e:	2300      	movs	r3, #0
2000aa10:	e000      	b.n	2000aa14 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
2000aa12:	2302      	movs	r3, #2
  }
}
2000aa14:	4618      	mov	r0, r3
2000aa16:	3718      	adds	r7, #24
2000aa18:	46bd      	mov	sp, r7
2000aa1a:	bd80      	pop	{r7, pc}

2000aa1c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2000aa1c:	b580      	push	{r7, lr}
2000aa1e:	b088      	sub	sp, #32
2000aa20:	af02      	add	r7, sp, #8
2000aa22:	60f8      	str	r0, [r7, #12]
2000aa24:	607a      	str	r2, [r7, #4]
2000aa26:	461a      	mov	r2, r3
2000aa28:	460b      	mov	r3, r1
2000aa2a:	817b      	strh	r3, [r7, #10]
2000aa2c:	4613      	mov	r3, r2
2000aa2e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000aa30:	68fb      	ldr	r3, [r7, #12]
2000aa32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000aa36:	b2db      	uxtb	r3, r3
2000aa38:	2b20      	cmp	r3, #32
2000aa3a:	d17c      	bne.n	2000ab36 <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000aa3c:	68fb      	ldr	r3, [r7, #12]
2000aa3e:	681b      	ldr	r3, [r3, #0]
2000aa40:	699b      	ldr	r3, [r3, #24]
2000aa42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000aa46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000aa4a:	d101      	bne.n	2000aa50 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
2000aa4c:	2302      	movs	r3, #2
2000aa4e:	e073      	b.n	2000ab38 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000aa50:	68fb      	ldr	r3, [r7, #12]
2000aa52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000aa56:	2b01      	cmp	r3, #1
2000aa58:	d101      	bne.n	2000aa5e <HAL_I2C_Master_Transmit_IT+0x42>
2000aa5a:	2302      	movs	r3, #2
2000aa5c:	e06c      	b.n	2000ab38 <HAL_I2C_Master_Transmit_IT+0x11c>
2000aa5e:	68fb      	ldr	r3, [r7, #12]
2000aa60:	2201      	movs	r2, #1
2000aa62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000aa66:	68fb      	ldr	r3, [r7, #12]
2000aa68:	2221      	movs	r2, #33	@ 0x21
2000aa6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2000aa6e:	68fb      	ldr	r3, [r7, #12]
2000aa70:	2210      	movs	r2, #16
2000aa72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000aa76:	68fb      	ldr	r3, [r7, #12]
2000aa78:	2200      	movs	r2, #0
2000aa7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000aa7c:	68fb      	ldr	r3, [r7, #12]
2000aa7e:	687a      	ldr	r2, [r7, #4]
2000aa80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000aa82:	68fb      	ldr	r3, [r7, #12]
2000aa84:	893a      	ldrh	r2, [r7, #8]
2000aa86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000aa88:	68fb      	ldr	r3, [r7, #12]
2000aa8a:	4a2d      	ldr	r2, [pc, #180]	@ (2000ab40 <HAL_I2C_Master_Transmit_IT+0x124>)
2000aa8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2000aa8e:	68fb      	ldr	r3, [r7, #12]
2000aa90:	4a2c      	ldr	r2, [pc, #176]	@ (2000ab44 <HAL_I2C_Master_Transmit_IT+0x128>)
2000aa92:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000aa94:	68fb      	ldr	r3, [r7, #12]
2000aa96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000aa98:	b29b      	uxth	r3, r3
2000aa9a:	2bff      	cmp	r3, #255	@ 0xff
2000aa9c:	d906      	bls.n	2000aaac <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000aa9e:	68fb      	ldr	r3, [r7, #12]
2000aaa0:	22ff      	movs	r2, #255	@ 0xff
2000aaa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000aaa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000aaa8:	617b      	str	r3, [r7, #20]
2000aaaa:	e007      	b.n	2000aabc <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000aaac:	68fb      	ldr	r3, [r7, #12]
2000aaae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000aab0:	b29a      	uxth	r2, r3
2000aab2:	68fb      	ldr	r3, [r7, #12]
2000aab4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2000aab6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000aaba:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
2000aabc:	68fb      	ldr	r3, [r7, #12]
2000aabe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000aac0:	2b00      	cmp	r3, #0
2000aac2:	d024      	beq.n	2000ab0e <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000aac4:	68fb      	ldr	r3, [r7, #12]
2000aac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000aac8:	781a      	ldrb	r2, [r3, #0]
2000aaca:	68fb      	ldr	r3, [r7, #12]
2000aacc:	681b      	ldr	r3, [r3, #0]
2000aace:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000aad0:	68fb      	ldr	r3, [r7, #12]
2000aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000aad4:	1c5a      	adds	r2, r3, #1
2000aad6:	68fb      	ldr	r3, [r7, #12]
2000aad8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000aada:	68fb      	ldr	r3, [r7, #12]
2000aadc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000aade:	b29b      	uxth	r3, r3
2000aae0:	3b01      	subs	r3, #1
2000aae2:	b29a      	uxth	r2, r3
2000aae4:	68fb      	ldr	r3, [r7, #12]
2000aae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000aae8:	68fb      	ldr	r3, [r7, #12]
2000aaea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000aaec:	3b01      	subs	r3, #1
2000aaee:	b29a      	uxth	r2, r3
2000aaf0:	68fb      	ldr	r3, [r7, #12]
2000aaf2:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
2000aaf4:	68fb      	ldr	r3, [r7, #12]
2000aaf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000aaf8:	b2db      	uxtb	r3, r3
2000aafa:	3301      	adds	r3, #1
2000aafc:	b2da      	uxtb	r2, r3
2000aafe:	8979      	ldrh	r1, [r7, #10]
2000ab00:	4b11      	ldr	r3, [pc, #68]	@ (2000ab48 <HAL_I2C_Master_Transmit_IT+0x12c>)
2000ab02:	9300      	str	r3, [sp, #0]
2000ab04:	697b      	ldr	r3, [r7, #20]
2000ab06:	68f8      	ldr	r0, [r7, #12]
2000ab08:	f004 feca 	bl	2000f8a0 <I2C_TransferConfig>
2000ab0c:	e009      	b.n	2000ab22 <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
2000ab0e:	68fb      	ldr	r3, [r7, #12]
2000ab10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000ab12:	b2da      	uxtb	r2, r3
2000ab14:	8979      	ldrh	r1, [r7, #10]
2000ab16:	4b0c      	ldr	r3, [pc, #48]	@ (2000ab48 <HAL_I2C_Master_Transmit_IT+0x12c>)
2000ab18:	9300      	str	r3, [sp, #0]
2000ab1a:	697b      	ldr	r3, [r7, #20]
2000ab1c:	68f8      	ldr	r0, [r7, #12]
2000ab1e:	f004 febf 	bl	2000f8a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000ab22:	68fb      	ldr	r3, [r7, #12]
2000ab24:	2200      	movs	r2, #0
2000ab26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000ab2a:	2101      	movs	r1, #1
2000ab2c:	68f8      	ldr	r0, [r7, #12]
2000ab2e:	f004 fee9 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000ab32:	2300      	movs	r3, #0
2000ab34:	e000      	b.n	2000ab38 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
2000ab36:	2302      	movs	r3, #2
  }
}
2000ab38:	4618      	mov	r0, r3
2000ab3a:	3718      	adds	r7, #24
2000ab3c:	46bd      	mov	sp, r7
2000ab3e:	bd80      	pop	{r7, pc}
2000ab40:	ffff0000 	.word	0xffff0000
2000ab44:	2000d33b 	.word	0x2000d33b
2000ab48:	80002000 	.word	0x80002000

2000ab4c <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
2000ab4c:	b580      	push	{r7, lr}
2000ab4e:	b088      	sub	sp, #32
2000ab50:	af02      	add	r7, sp, #8
2000ab52:	60f8      	str	r0, [r7, #12]
2000ab54:	607a      	str	r2, [r7, #4]
2000ab56:	461a      	mov	r2, r3
2000ab58:	460b      	mov	r3, r1
2000ab5a:	817b      	strh	r3, [r7, #10]
2000ab5c:	4613      	mov	r3, r2
2000ab5e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000ab60:	68fb      	ldr	r3, [r7, #12]
2000ab62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ab66:	b2db      	uxtb	r3, r3
2000ab68:	2b20      	cmp	r3, #32
2000ab6a:	d153      	bne.n	2000ac14 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000ab6c:	68fb      	ldr	r3, [r7, #12]
2000ab6e:	681b      	ldr	r3, [r3, #0]
2000ab70:	699b      	ldr	r3, [r3, #24]
2000ab72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000ab76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000ab7a:	d101      	bne.n	2000ab80 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
2000ab7c:	2302      	movs	r3, #2
2000ab7e:	e04a      	b.n	2000ac16 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000ab80:	68fb      	ldr	r3, [r7, #12]
2000ab82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000ab86:	2b01      	cmp	r3, #1
2000ab88:	d101      	bne.n	2000ab8e <HAL_I2C_Master_Receive_IT+0x42>
2000ab8a:	2302      	movs	r3, #2
2000ab8c:	e043      	b.n	2000ac16 <HAL_I2C_Master_Receive_IT+0xca>
2000ab8e:	68fb      	ldr	r3, [r7, #12]
2000ab90:	2201      	movs	r2, #1
2000ab92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000ab96:	68fb      	ldr	r3, [r7, #12]
2000ab98:	2222      	movs	r2, #34	@ 0x22
2000ab9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2000ab9e:	68fb      	ldr	r3, [r7, #12]
2000aba0:	2210      	movs	r2, #16
2000aba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000aba6:	68fb      	ldr	r3, [r7, #12]
2000aba8:	2200      	movs	r2, #0
2000abaa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000abac:	68fb      	ldr	r3, [r7, #12]
2000abae:	687a      	ldr	r2, [r7, #4]
2000abb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000abb2:	68fb      	ldr	r3, [r7, #12]
2000abb4:	893a      	ldrh	r2, [r7, #8]
2000abb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000abb8:	68fb      	ldr	r3, [r7, #12]
2000abba:	4a19      	ldr	r2, [pc, #100]	@ (2000ac20 <HAL_I2C_Master_Receive_IT+0xd4>)
2000abbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2000abbe:	68fb      	ldr	r3, [r7, #12]
2000abc0:	4a18      	ldr	r2, [pc, #96]	@ (2000ac24 <HAL_I2C_Master_Receive_IT+0xd8>)
2000abc2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000abc4:	68fb      	ldr	r3, [r7, #12]
2000abc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000abc8:	b29b      	uxth	r3, r3
2000abca:	2bff      	cmp	r3, #255	@ 0xff
2000abcc:	d906      	bls.n	2000abdc <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000abce:	68fb      	ldr	r3, [r7, #12]
2000abd0:	22ff      	movs	r2, #255	@ 0xff
2000abd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000abd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000abd8:	617b      	str	r3, [r7, #20]
2000abda:	e007      	b.n	2000abec <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000abdc:	68fb      	ldr	r3, [r7, #12]
2000abde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000abe0:	b29a      	uxth	r2, r3
2000abe2:	68fb      	ldr	r3, [r7, #12]
2000abe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2000abe6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000abea:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2000abec:	68fb      	ldr	r3, [r7, #12]
2000abee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000abf0:	b2da      	uxtb	r2, r3
2000abf2:	8979      	ldrh	r1, [r7, #10]
2000abf4:	4b0c      	ldr	r3, [pc, #48]	@ (2000ac28 <HAL_I2C_Master_Receive_IT+0xdc>)
2000abf6:	9300      	str	r3, [sp, #0]
2000abf8:	697b      	ldr	r3, [r7, #20]
2000abfa:	68f8      	ldr	r0, [r7, #12]
2000abfc:	f004 fe50 	bl	2000f8a0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000ac00:	68fb      	ldr	r3, [r7, #12]
2000ac02:	2200      	movs	r2, #0
2000ac04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2000ac08:	2102      	movs	r1, #2
2000ac0a:	68f8      	ldr	r0, [r7, #12]
2000ac0c:	f004 fe7a 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000ac10:	2300      	movs	r3, #0
2000ac12:	e000      	b.n	2000ac16 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2000ac14:	2302      	movs	r3, #2
  }
}
2000ac16:	4618      	mov	r0, r3
2000ac18:	3718      	adds	r7, #24
2000ac1a:	46bd      	mov	sp, r7
2000ac1c:	bd80      	pop	{r7, pc}
2000ac1e:	bf00      	nop
2000ac20:	ffff0000 	.word	0xffff0000
2000ac24:	2000d33b 	.word	0x2000d33b
2000ac28:	80002400 	.word	0x80002400

2000ac2c <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2000ac2c:	b580      	push	{r7, lr}
2000ac2e:	b084      	sub	sp, #16
2000ac30:	af00      	add	r7, sp, #0
2000ac32:	60f8      	str	r0, [r7, #12]
2000ac34:	60b9      	str	r1, [r7, #8]
2000ac36:	4613      	mov	r3, r2
2000ac38:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2000ac3a:	68fb      	ldr	r3, [r7, #12]
2000ac3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ac40:	b2db      	uxtb	r3, r3
2000ac42:	2b20      	cmp	r3, #32
2000ac44:	d156      	bne.n	2000acf4 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000ac46:	68fb      	ldr	r3, [r7, #12]
2000ac48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000ac4c:	2b01      	cmp	r3, #1
2000ac4e:	d101      	bne.n	2000ac54 <HAL_I2C_Slave_Transmit_IT+0x28>
2000ac50:	2302      	movs	r3, #2
2000ac52:	e050      	b.n	2000acf6 <HAL_I2C_Slave_Transmit_IT+0xca>
2000ac54:	68fb      	ldr	r3, [r7, #12]
2000ac56:	2201      	movs	r2, #1
2000ac58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000ac5c:	68fb      	ldr	r3, [r7, #12]
2000ac5e:	2221      	movs	r2, #33	@ 0x21
2000ac60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2000ac64:	68fb      	ldr	r3, [r7, #12]
2000ac66:	2220      	movs	r2, #32
2000ac68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000ac6c:	68fb      	ldr	r3, [r7, #12]
2000ac6e:	2200      	movs	r2, #0
2000ac70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000ac72:	68fb      	ldr	r3, [r7, #12]
2000ac74:	681b      	ldr	r3, [r3, #0]
2000ac76:	685a      	ldr	r2, [r3, #4]
2000ac78:	68fb      	ldr	r3, [r7, #12]
2000ac7a:	681b      	ldr	r3, [r3, #0]
2000ac7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000ac80:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000ac82:	68fb      	ldr	r3, [r7, #12]
2000ac84:	68ba      	ldr	r2, [r7, #8]
2000ac86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000ac88:	68fb      	ldr	r3, [r7, #12]
2000ac8a:	88fa      	ldrh	r2, [r7, #6]
2000ac8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000ac8e:	68fb      	ldr	r3, [r7, #12]
2000ac90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ac92:	b29a      	uxth	r2, r3
2000ac94:	68fb      	ldr	r3, [r7, #12]
2000ac96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000ac98:	68fb      	ldr	r3, [r7, #12]
2000ac9a:	4a19      	ldr	r2, [pc, #100]	@ (2000ad00 <HAL_I2C_Slave_Transmit_IT+0xd4>)
2000ac9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2000ac9e:	68fb      	ldr	r3, [r7, #12]
2000aca0:	4a18      	ldr	r2, [pc, #96]	@ (2000ad04 <HAL_I2C_Slave_Transmit_IT+0xd8>)
2000aca2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2000aca4:	68fb      	ldr	r3, [r7, #12]
2000aca6:	6a1b      	ldr	r3, [r3, #32]
2000aca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2000acac:	d117      	bne.n	2000acde <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000acae:	68fb      	ldr	r3, [r7, #12]
2000acb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000acb2:	781a      	ldrb	r2, [r3, #0]
2000acb4:	68fb      	ldr	r3, [r7, #12]
2000acb6:	681b      	ldr	r3, [r3, #0]
2000acb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000acba:	68fb      	ldr	r3, [r7, #12]
2000acbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000acbe:	1c5a      	adds	r2, r3, #1
2000acc0:	68fb      	ldr	r3, [r7, #12]
2000acc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000acc4:	68fb      	ldr	r3, [r7, #12]
2000acc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000acc8:	b29b      	uxth	r3, r3
2000acca:	3b01      	subs	r3, #1
2000accc:	b29a      	uxth	r2, r3
2000acce:	68fb      	ldr	r3, [r7, #12]
2000acd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000acd2:	68fb      	ldr	r3, [r7, #12]
2000acd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000acd6:	3b01      	subs	r3, #1
2000acd8:	b29a      	uxth	r2, r3
2000acda:	68fb      	ldr	r3, [r7, #12]
2000acdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000acde:	68fb      	ldr	r3, [r7, #12]
2000ace0:	2200      	movs	r2, #0
2000ace2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2000ace6:	f248 0101 	movw	r1, #32769	@ 0x8001
2000acea:	68f8      	ldr	r0, [r7, #12]
2000acec:	f004 fe0a 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000acf0:	2300      	movs	r3, #0
2000acf2:	e000      	b.n	2000acf6 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2000acf4:	2302      	movs	r3, #2
  }
}
2000acf6:	4618      	mov	r0, r3
2000acf8:	3710      	adds	r7, #16
2000acfa:	46bd      	mov	sp, r7
2000acfc:	bd80      	pop	{r7, pc}
2000acfe:	bf00      	nop
2000ad00:	ffff0000 	.word	0xffff0000
2000ad04:	2000d7d5 	.word	0x2000d7d5

2000ad08 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2000ad08:	b580      	push	{r7, lr}
2000ad0a:	b084      	sub	sp, #16
2000ad0c:	af00      	add	r7, sp, #0
2000ad0e:	60f8      	str	r0, [r7, #12]
2000ad10:	60b9      	str	r1, [r7, #8]
2000ad12:	4613      	mov	r3, r2
2000ad14:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2000ad16:	68fb      	ldr	r3, [r7, #12]
2000ad18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ad1c:	b2db      	uxtb	r3, r3
2000ad1e:	2b20      	cmp	r3, #32
2000ad20:	d139      	bne.n	2000ad96 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000ad22:	68fb      	ldr	r3, [r7, #12]
2000ad24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000ad28:	2b01      	cmp	r3, #1
2000ad2a:	d101      	bne.n	2000ad30 <HAL_I2C_Slave_Receive_IT+0x28>
2000ad2c:	2302      	movs	r3, #2
2000ad2e:	e033      	b.n	2000ad98 <HAL_I2C_Slave_Receive_IT+0x90>
2000ad30:	68fb      	ldr	r3, [r7, #12]
2000ad32:	2201      	movs	r2, #1
2000ad34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000ad38:	68fb      	ldr	r3, [r7, #12]
2000ad3a:	2222      	movs	r2, #34	@ 0x22
2000ad3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2000ad40:	68fb      	ldr	r3, [r7, #12]
2000ad42:	2220      	movs	r2, #32
2000ad44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000ad48:	68fb      	ldr	r3, [r7, #12]
2000ad4a:	2200      	movs	r2, #0
2000ad4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000ad4e:	68fb      	ldr	r3, [r7, #12]
2000ad50:	681b      	ldr	r3, [r3, #0]
2000ad52:	685a      	ldr	r2, [r3, #4]
2000ad54:	68fb      	ldr	r3, [r7, #12]
2000ad56:	681b      	ldr	r3, [r3, #0]
2000ad58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000ad5c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000ad5e:	68fb      	ldr	r3, [r7, #12]
2000ad60:	68ba      	ldr	r2, [r7, #8]
2000ad62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000ad64:	68fb      	ldr	r3, [r7, #12]
2000ad66:	88fa      	ldrh	r2, [r7, #6]
2000ad68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000ad6a:	68fb      	ldr	r3, [r7, #12]
2000ad6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ad6e:	b29a      	uxth	r2, r3
2000ad70:	68fb      	ldr	r3, [r7, #12]
2000ad72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000ad74:	68fb      	ldr	r3, [r7, #12]
2000ad76:	4a0a      	ldr	r2, [pc, #40]	@ (2000ada0 <HAL_I2C_Slave_Receive_IT+0x98>)
2000ad78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2000ad7a:	68fb      	ldr	r3, [r7, #12]
2000ad7c:	4a09      	ldr	r2, [pc, #36]	@ (2000ada4 <HAL_I2C_Slave_Receive_IT+0x9c>)
2000ad7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000ad80:	68fb      	ldr	r3, [r7, #12]
2000ad82:	2200      	movs	r2, #0
2000ad84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2000ad88:	f248 0102 	movw	r1, #32770	@ 0x8002
2000ad8c:	68f8      	ldr	r0, [r7, #12]
2000ad8e:	f004 fdb9 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000ad92:	2300      	movs	r3, #0
2000ad94:	e000      	b.n	2000ad98 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2000ad96:	2302      	movs	r3, #2
  }
}
2000ad98:	4618      	mov	r0, r3
2000ad9a:	3710      	adds	r7, #16
2000ad9c:	46bd      	mov	sp, r7
2000ad9e:	bd80      	pop	{r7, pc}
2000ada0:	ffff0000 	.word	0xffff0000
2000ada4:	2000d7d5 	.word	0x2000d7d5

2000ada8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
2000ada8:	b580      	push	{r7, lr}
2000adaa:	b08a      	sub	sp, #40	@ 0x28
2000adac:	af02      	add	r7, sp, #8
2000adae:	60f8      	str	r0, [r7, #12]
2000adb0:	607a      	str	r2, [r7, #4]
2000adb2:	461a      	mov	r2, r3
2000adb4:	460b      	mov	r3, r1
2000adb6:	817b      	strh	r3, [r7, #10]
2000adb8:	4613      	mov	r3, r2
2000adba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
2000adbc:	2300      	movs	r3, #0
2000adbe:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
2000adc0:	68fb      	ldr	r3, [r7, #12]
2000adc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000adc6:	b2db      	uxtb	r3, r3
2000adc8:	2b20      	cmp	r3, #32
2000adca:	f040 80ef 	bne.w	2000afac <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000adce:	68fb      	ldr	r3, [r7, #12]
2000add0:	681b      	ldr	r3, [r3, #0]
2000add2:	699b      	ldr	r3, [r3, #24]
2000add4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000add8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000addc:	d101      	bne.n	2000ade2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
2000adde:	2302      	movs	r3, #2
2000ade0:	e0e5      	b.n	2000afae <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000ade2:	68fb      	ldr	r3, [r7, #12]
2000ade4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000ade8:	2b01      	cmp	r3, #1
2000adea:	d101      	bne.n	2000adf0 <HAL_I2C_Master_Transmit_DMA+0x48>
2000adec:	2302      	movs	r3, #2
2000adee:	e0de      	b.n	2000afae <HAL_I2C_Master_Transmit_DMA+0x206>
2000adf0:	68fb      	ldr	r3, [r7, #12]
2000adf2:	2201      	movs	r2, #1
2000adf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000adf8:	68fb      	ldr	r3, [r7, #12]
2000adfa:	2221      	movs	r2, #33	@ 0x21
2000adfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2000ae00:	68fb      	ldr	r3, [r7, #12]
2000ae02:	2210      	movs	r2, #16
2000ae04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000ae08:	68fb      	ldr	r3, [r7, #12]
2000ae0a:	2200      	movs	r2, #0
2000ae0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000ae0e:	68fb      	ldr	r3, [r7, #12]
2000ae10:	687a      	ldr	r2, [r7, #4]
2000ae12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000ae14:	68fb      	ldr	r3, [r7, #12]
2000ae16:	893a      	ldrh	r2, [r7, #8]
2000ae18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000ae1a:	68fb      	ldr	r3, [r7, #12]
2000ae1c:	4a66      	ldr	r2, [pc, #408]	@ (2000afb8 <HAL_I2C_Master_Transmit_DMA+0x210>)
2000ae1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2000ae20:	68fb      	ldr	r3, [r7, #12]
2000ae22:	4a66      	ldr	r2, [pc, #408]	@ (2000afbc <HAL_I2C_Master_Transmit_DMA+0x214>)
2000ae24:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000ae26:	68fb      	ldr	r3, [r7, #12]
2000ae28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ae2a:	b29b      	uxth	r3, r3
2000ae2c:	2bff      	cmp	r3, #255	@ 0xff
2000ae2e:	d906      	bls.n	2000ae3e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000ae30:	68fb      	ldr	r3, [r7, #12]
2000ae32:	22ff      	movs	r2, #255	@ 0xff
2000ae34:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000ae36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000ae3a:	61fb      	str	r3, [r7, #28]
2000ae3c:	e007      	b.n	2000ae4e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000ae3e:	68fb      	ldr	r3, [r7, #12]
2000ae40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ae42:	b29a      	uxth	r2, r3
2000ae44:	68fb      	ldr	r3, [r7, #12]
2000ae46:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2000ae48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000ae4c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
2000ae4e:	68fb      	ldr	r3, [r7, #12]
2000ae50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000ae52:	2b00      	cmp	r3, #0
2000ae54:	d01a      	beq.n	2000ae8c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000ae56:	68fb      	ldr	r3, [r7, #12]
2000ae58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000ae5a:	781a      	ldrb	r2, [r3, #0]
2000ae5c:	68fb      	ldr	r3, [r7, #12]
2000ae5e:	681b      	ldr	r3, [r3, #0]
2000ae60:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000ae62:	68fb      	ldr	r3, [r7, #12]
2000ae64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000ae66:	1c5a      	adds	r2, r3, #1
2000ae68:	68fb      	ldr	r3, [r7, #12]
2000ae6a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
2000ae6c:	68fb      	ldr	r3, [r7, #12]
2000ae6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000ae70:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
2000ae72:	68fb      	ldr	r3, [r7, #12]
2000ae74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ae76:	b29b      	uxth	r3, r3
2000ae78:	3b01      	subs	r3, #1
2000ae7a:	b29a      	uxth	r2, r3
2000ae7c:	68fb      	ldr	r3, [r7, #12]
2000ae7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000ae80:	68fb      	ldr	r3, [r7, #12]
2000ae82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000ae84:	3b01      	subs	r3, #1
2000ae86:	b29a      	uxth	r2, r3
2000ae88:	68fb      	ldr	r3, [r7, #12]
2000ae8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
2000ae8c:	68fb      	ldr	r3, [r7, #12]
2000ae8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000ae90:	2b00      	cmp	r3, #0
2000ae92:	d074      	beq.n	2000af7e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
2000ae94:	68fb      	ldr	r3, [r7, #12]
2000ae96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ae98:	2b00      	cmp	r3, #0
2000ae9a:	d022      	beq.n	2000aee2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2000ae9c:	68fb      	ldr	r3, [r7, #12]
2000ae9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000aea0:	4a47      	ldr	r2, [pc, #284]	@ (2000afc0 <HAL_I2C_Master_Transmit_DMA+0x218>)
2000aea2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2000aea4:	68fb      	ldr	r3, [r7, #12]
2000aea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000aea8:	4a46      	ldr	r2, [pc, #280]	@ (2000afc4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
2000aeaa:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2000aeac:	68fb      	ldr	r3, [r7, #12]
2000aeae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000aeb0:	2200      	movs	r2, #0
2000aeb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2000aeb4:	68fb      	ldr	r3, [r7, #12]
2000aeb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000aeb8:	2200      	movs	r2, #0
2000aeba:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2000aebc:	68fb      	ldr	r3, [r7, #12]
2000aebe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2000aec0:	68fb      	ldr	r3, [r7, #12]
2000aec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000aec4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2000aec6:	68fb      	ldr	r3, [r7, #12]
2000aec8:	681b      	ldr	r3, [r3, #0]
2000aeca:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2000aecc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2000aece:	68fb      	ldr	r3, [r7, #12]
2000aed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2000aed2:	f7f8 ffb7 	bl	20003e44 <HAL_DMA_Start_IT>
2000aed6:	4603      	mov	r3, r0
2000aed8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2000aeda:	7dfb      	ldrb	r3, [r7, #23]
2000aedc:	2b00      	cmp	r3, #0
2000aede:	d13a      	bne.n	2000af56 <HAL_I2C_Master_Transmit_DMA+0x1ae>
2000aee0:	e013      	b.n	2000af0a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
2000aee2:	68fb      	ldr	r3, [r7, #12]
2000aee4:	2220      	movs	r2, #32
2000aee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000aeea:	68fb      	ldr	r3, [r7, #12]
2000aeec:	2200      	movs	r2, #0
2000aeee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000aef2:	68fb      	ldr	r3, [r7, #12]
2000aef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000aef6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000aefa:	68fb      	ldr	r3, [r7, #12]
2000aefc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2000aefe:	68fb      	ldr	r3, [r7, #12]
2000af00:	2200      	movs	r2, #0
2000af02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2000af06:	2301      	movs	r3, #1
2000af08:	e051      	b.n	2000afae <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
2000af0a:	68fb      	ldr	r3, [r7, #12]
2000af0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000af0e:	b2db      	uxtb	r3, r3
2000af10:	3301      	adds	r3, #1
2000af12:	b2da      	uxtb	r2, r3
2000af14:	8979      	ldrh	r1, [r7, #10]
2000af16:	4b2c      	ldr	r3, [pc, #176]	@ (2000afc8 <HAL_I2C_Master_Transmit_DMA+0x220>)
2000af18:	9300      	str	r3, [sp, #0]
2000af1a:	69fb      	ldr	r3, [r7, #28]
2000af1c:	68f8      	ldr	r0, [r7, #12]
2000af1e:	f004 fcbf 	bl	2000f8a0 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2000af22:	68fb      	ldr	r3, [r7, #12]
2000af24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000af26:	b29a      	uxth	r2, r3
2000af28:	68fb      	ldr	r3, [r7, #12]
2000af2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000af2c:	1ad3      	subs	r3, r2, r3
2000af2e:	b29a      	uxth	r2, r3
2000af30:	68fb      	ldr	r3, [r7, #12]
2000af32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000af34:	68fb      	ldr	r3, [r7, #12]
2000af36:	2200      	movs	r2, #0
2000af38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2000af3c:	2110      	movs	r1, #16
2000af3e:	68f8      	ldr	r0, [r7, #12]
2000af40:	f004 fce0 	bl	2000f904 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2000af44:	68fb      	ldr	r3, [r7, #12]
2000af46:	681b      	ldr	r3, [r3, #0]
2000af48:	681a      	ldr	r2, [r3, #0]
2000af4a:	68fb      	ldr	r3, [r7, #12]
2000af4c:	681b      	ldr	r3, [r3, #0]
2000af4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000af52:	601a      	str	r2, [r3, #0]
2000af54:	e028      	b.n	2000afa8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2000af56:	68fb      	ldr	r3, [r7, #12]
2000af58:	2220      	movs	r2, #32
2000af5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000af5e:	68fb      	ldr	r3, [r7, #12]
2000af60:	2200      	movs	r2, #0
2000af62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000af66:	68fb      	ldr	r3, [r7, #12]
2000af68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000af6a:	f043 0210 	orr.w	r2, r3, #16
2000af6e:	68fb      	ldr	r3, [r7, #12]
2000af70:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000af72:	68fb      	ldr	r3, [r7, #12]
2000af74:	2200      	movs	r2, #0
2000af76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2000af7a:	2301      	movs	r3, #1
2000af7c:	e017      	b.n	2000afae <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2000af7e:	68fb      	ldr	r3, [r7, #12]
2000af80:	4a12      	ldr	r2, [pc, #72]	@ (2000afcc <HAL_I2C_Master_Transmit_DMA+0x224>)
2000af82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
2000af84:	69bb      	ldr	r3, [r7, #24]
2000af86:	b2da      	uxtb	r2, r3
2000af88:	8979      	ldrh	r1, [r7, #10]
2000af8a:	4b0f      	ldr	r3, [pc, #60]	@ (2000afc8 <HAL_I2C_Master_Transmit_DMA+0x220>)
2000af8c:	9300      	str	r3, [sp, #0]
2000af8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000af92:	68f8      	ldr	r0, [r7, #12]
2000af94:	f004 fc84 	bl	2000f8a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000af98:	68fb      	ldr	r3, [r7, #12]
2000af9a:	2200      	movs	r2, #0
2000af9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000afa0:	2101      	movs	r1, #1
2000afa2:	68f8      	ldr	r0, [r7, #12]
2000afa4:	f004 fcae 	bl	2000f904 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2000afa8:	2300      	movs	r3, #0
2000afaa:	e000      	b.n	2000afae <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
2000afac:	2302      	movs	r3, #2
  }
}
2000afae:	4618      	mov	r0, r3
2000afb0:	3720      	adds	r7, #32
2000afb2:	46bd      	mov	sp, r7
2000afb4:	bd80      	pop	{r7, pc}
2000afb6:	bf00      	nop
2000afb8:	ffff0000 	.word	0xffff0000
2000afbc:	2000d9c7 	.word	0x2000d9c7
2000afc0:	2000ee7f 	.word	0x2000ee7f
2000afc4:	2000f151 	.word	0x2000f151
2000afc8:	80002000 	.word	0x80002000
2000afcc:	2000d33b 	.word	0x2000d33b

2000afd0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2000afd0:	b580      	push	{r7, lr}
2000afd2:	b088      	sub	sp, #32
2000afd4:	af02      	add	r7, sp, #8
2000afd6:	60f8      	str	r0, [r7, #12]
2000afd8:	607a      	str	r2, [r7, #4]
2000afda:	461a      	mov	r2, r3
2000afdc:	460b      	mov	r3, r1
2000afde:	817b      	strh	r3, [r7, #10]
2000afe0:	4613      	mov	r3, r2
2000afe2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000afe4:	68fb      	ldr	r3, [r7, #12]
2000afe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000afea:	b2db      	uxtb	r3, r3
2000afec:	2b20      	cmp	r3, #32
2000afee:	f040 80cd 	bne.w	2000b18c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000aff2:	68fb      	ldr	r3, [r7, #12]
2000aff4:	681b      	ldr	r3, [r3, #0]
2000aff6:	699b      	ldr	r3, [r3, #24]
2000aff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000affc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000b000:	d101      	bne.n	2000b006 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
2000b002:	2302      	movs	r3, #2
2000b004:	e0c3      	b.n	2000b18e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000b006:	68fb      	ldr	r3, [r7, #12]
2000b008:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000b00c:	2b01      	cmp	r3, #1
2000b00e:	d101      	bne.n	2000b014 <HAL_I2C_Master_Receive_DMA+0x44>
2000b010:	2302      	movs	r3, #2
2000b012:	e0bc      	b.n	2000b18e <HAL_I2C_Master_Receive_DMA+0x1be>
2000b014:	68fb      	ldr	r3, [r7, #12]
2000b016:	2201      	movs	r2, #1
2000b018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000b01c:	68fb      	ldr	r3, [r7, #12]
2000b01e:	2222      	movs	r2, #34	@ 0x22
2000b020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2000b024:	68fb      	ldr	r3, [r7, #12]
2000b026:	2210      	movs	r2, #16
2000b028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000b02c:	68fb      	ldr	r3, [r7, #12]
2000b02e:	2200      	movs	r2, #0
2000b030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000b032:	68fb      	ldr	r3, [r7, #12]
2000b034:	687a      	ldr	r2, [r7, #4]
2000b036:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000b038:	68fb      	ldr	r3, [r7, #12]
2000b03a:	893a      	ldrh	r2, [r7, #8]
2000b03c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000b03e:	68fb      	ldr	r3, [r7, #12]
2000b040:	4a55      	ldr	r2, [pc, #340]	@ (2000b198 <HAL_I2C_Master_Receive_DMA+0x1c8>)
2000b042:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2000b044:	68fb      	ldr	r3, [r7, #12]
2000b046:	4a55      	ldr	r2, [pc, #340]	@ (2000b19c <HAL_I2C_Master_Receive_DMA+0x1cc>)
2000b048:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000b04a:	68fb      	ldr	r3, [r7, #12]
2000b04c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b04e:	b29b      	uxth	r3, r3
2000b050:	2bff      	cmp	r3, #255	@ 0xff
2000b052:	d906      	bls.n	2000b062 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000b054:	68fb      	ldr	r3, [r7, #12]
2000b056:	22ff      	movs	r2, #255	@ 0xff
2000b058:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000b05a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000b05e:	617b      	str	r3, [r7, #20]
2000b060:	e007      	b.n	2000b072 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000b062:	68fb      	ldr	r3, [r7, #12]
2000b064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b066:	b29a      	uxth	r2, r3
2000b068:	68fb      	ldr	r3, [r7, #12]
2000b06a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2000b06c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000b070:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2000b072:	68fb      	ldr	r3, [r7, #12]
2000b074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b076:	2b00      	cmp	r3, #0
2000b078:	d070      	beq.n	2000b15c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
2000b07a:	68fb      	ldr	r3, [r7, #12]
2000b07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b07e:	2b00      	cmp	r3, #0
2000b080:	d020      	beq.n	2000b0c4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2000b082:	68fb      	ldr	r3, [r7, #12]
2000b084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b086:	4a46      	ldr	r2, [pc, #280]	@ (2000b1a0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
2000b088:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2000b08a:	68fb      	ldr	r3, [r7, #12]
2000b08c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b08e:	4a45      	ldr	r2, [pc, #276]	@ (2000b1a4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
2000b090:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2000b092:	68fb      	ldr	r3, [r7, #12]
2000b094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b096:	2200      	movs	r2, #0
2000b098:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2000b09a:	68fb      	ldr	r3, [r7, #12]
2000b09c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b09e:	2200      	movs	r2, #0
2000b0a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000b0a2:	68fb      	ldr	r3, [r7, #12]
2000b0a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2000b0a6:	68fb      	ldr	r3, [r7, #12]
2000b0a8:	681b      	ldr	r3, [r3, #0]
2000b0aa:	3324      	adds	r3, #36	@ 0x24
2000b0ac:	4619      	mov	r1, r3
2000b0ae:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2000b0b0:	68fb      	ldr	r3, [r7, #12]
2000b0b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000b0b4:	f7f8 fec6 	bl	20003e44 <HAL_DMA_Start_IT>
2000b0b8:	4603      	mov	r3, r0
2000b0ba:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2000b0bc:	7cfb      	ldrb	r3, [r7, #19]
2000b0be:	2b00      	cmp	r3, #0
2000b0c0:	d138      	bne.n	2000b134 <HAL_I2C_Master_Receive_DMA+0x164>
2000b0c2:	e013      	b.n	2000b0ec <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2000b0c4:	68fb      	ldr	r3, [r7, #12]
2000b0c6:	2220      	movs	r2, #32
2000b0c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000b0cc:	68fb      	ldr	r3, [r7, #12]
2000b0ce:	2200      	movs	r2, #0
2000b0d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000b0d4:	68fb      	ldr	r3, [r7, #12]
2000b0d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000b0d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000b0dc:	68fb      	ldr	r3, [r7, #12]
2000b0de:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2000b0e0:	68fb      	ldr	r3, [r7, #12]
2000b0e2:	2200      	movs	r2, #0
2000b0e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2000b0e8:	2301      	movs	r3, #1
2000b0ea:	e050      	b.n	2000b18e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2000b0ec:	68fb      	ldr	r3, [r7, #12]
2000b0ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b0f0:	b2da      	uxtb	r2, r3
2000b0f2:	8979      	ldrh	r1, [r7, #10]
2000b0f4:	4b2c      	ldr	r3, [pc, #176]	@ (2000b1a8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2000b0f6:	9300      	str	r3, [sp, #0]
2000b0f8:	697b      	ldr	r3, [r7, #20]
2000b0fa:	68f8      	ldr	r0, [r7, #12]
2000b0fc:	f004 fbd0 	bl	2000f8a0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2000b100:	68fb      	ldr	r3, [r7, #12]
2000b102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b104:	b29a      	uxth	r2, r3
2000b106:	68fb      	ldr	r3, [r7, #12]
2000b108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b10a:	1ad3      	subs	r3, r2, r3
2000b10c:	b29a      	uxth	r2, r3
2000b10e:	68fb      	ldr	r3, [r7, #12]
2000b110:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000b112:	68fb      	ldr	r3, [r7, #12]
2000b114:	2200      	movs	r2, #0
2000b116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2000b11a:	2110      	movs	r1, #16
2000b11c:	68f8      	ldr	r0, [r7, #12]
2000b11e:	f004 fbf1 	bl	2000f904 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2000b122:	68fb      	ldr	r3, [r7, #12]
2000b124:	681b      	ldr	r3, [r3, #0]
2000b126:	681a      	ldr	r2, [r3, #0]
2000b128:	68fb      	ldr	r3, [r7, #12]
2000b12a:	681b      	ldr	r3, [r3, #0]
2000b12c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000b130:	601a      	str	r2, [r3, #0]
2000b132:	e029      	b.n	2000b188 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2000b134:	68fb      	ldr	r3, [r7, #12]
2000b136:	2220      	movs	r2, #32
2000b138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000b13c:	68fb      	ldr	r3, [r7, #12]
2000b13e:	2200      	movs	r2, #0
2000b140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000b144:	68fb      	ldr	r3, [r7, #12]
2000b146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000b148:	f043 0210 	orr.w	r2, r3, #16
2000b14c:	68fb      	ldr	r3, [r7, #12]
2000b14e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000b150:	68fb      	ldr	r3, [r7, #12]
2000b152:	2200      	movs	r2, #0
2000b154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2000b158:	2301      	movs	r3, #1
2000b15a:	e018      	b.n	2000b18e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2000b15c:	68fb      	ldr	r3, [r7, #12]
2000b15e:	4a13      	ldr	r2, [pc, #76]	@ (2000b1ac <HAL_I2C_Master_Receive_DMA+0x1dc>)
2000b160:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000b162:	68fb      	ldr	r3, [r7, #12]
2000b164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b166:	b2da      	uxtb	r2, r3
2000b168:	8979      	ldrh	r1, [r7, #10]
2000b16a:	4b0f      	ldr	r3, [pc, #60]	@ (2000b1a8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2000b16c:	9300      	str	r3, [sp, #0]
2000b16e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000b172:	68f8      	ldr	r0, [r7, #12]
2000b174:	f004 fb94 	bl	2000f8a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000b178:	68fb      	ldr	r3, [r7, #12]
2000b17a:	2200      	movs	r2, #0
2000b17c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2000b180:	2102      	movs	r1, #2
2000b182:	68f8      	ldr	r0, [r7, #12]
2000b184:	f004 fbbe 	bl	2000f904 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2000b188:	2300      	movs	r3, #0
2000b18a:	e000      	b.n	2000b18e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2000b18c:	2302      	movs	r3, #2
  }
}
2000b18e:	4618      	mov	r0, r3
2000b190:	3718      	adds	r7, #24
2000b192:	46bd      	mov	sp, r7
2000b194:	bd80      	pop	{r7, pc}
2000b196:	bf00      	nop
2000b198:	ffff0000 	.word	0xffff0000
2000b19c:	2000d9c7 	.word	0x2000d9c7
2000b1a0:	2000ef55 	.word	0x2000ef55
2000b1a4:	2000f151 	.word	0x2000f151
2000b1a8:	80002400 	.word	0x80002400
2000b1ac:	2000d33b 	.word	0x2000d33b

2000b1b0 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2000b1b0:	b580      	push	{r7, lr}
2000b1b2:	b086      	sub	sp, #24
2000b1b4:	af00      	add	r7, sp, #0
2000b1b6:	60f8      	str	r0, [r7, #12]
2000b1b8:	60b9      	str	r1, [r7, #8]
2000b1ba:	4613      	mov	r3, r2
2000b1bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000b1be:	68fb      	ldr	r3, [r7, #12]
2000b1c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000b1c4:	b2db      	uxtb	r3, r3
2000b1c6:	2b20      	cmp	r3, #32
2000b1c8:	f040 80d1 	bne.w	2000b36e <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
2000b1cc:	68bb      	ldr	r3, [r7, #8]
2000b1ce:	2b00      	cmp	r3, #0
2000b1d0:	d002      	beq.n	2000b1d8 <HAL_I2C_Slave_Transmit_DMA+0x28>
2000b1d2:	88fb      	ldrh	r3, [r7, #6]
2000b1d4:	2b00      	cmp	r3, #0
2000b1d6:	d105      	bne.n	2000b1e4 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000b1d8:	68fb      	ldr	r3, [r7, #12]
2000b1da:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000b1de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000b1e0:	2301      	movs	r3, #1
2000b1e2:	e0c5      	b.n	2000b370 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000b1e4:	68fb      	ldr	r3, [r7, #12]
2000b1e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000b1ea:	2b01      	cmp	r3, #1
2000b1ec:	d101      	bne.n	2000b1f2 <HAL_I2C_Slave_Transmit_DMA+0x42>
2000b1ee:	2302      	movs	r3, #2
2000b1f0:	e0be      	b.n	2000b370 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
2000b1f2:	68fb      	ldr	r3, [r7, #12]
2000b1f4:	2201      	movs	r2, #1
2000b1f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000b1fa:	68fb      	ldr	r3, [r7, #12]
2000b1fc:	2221      	movs	r2, #33	@ 0x21
2000b1fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2000b202:	68fb      	ldr	r3, [r7, #12]
2000b204:	2220      	movs	r2, #32
2000b206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000b20a:	68fb      	ldr	r3, [r7, #12]
2000b20c:	2200      	movs	r2, #0
2000b20e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000b210:	68fb      	ldr	r3, [r7, #12]
2000b212:	68ba      	ldr	r2, [r7, #8]
2000b214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000b216:	68fb      	ldr	r3, [r7, #12]
2000b218:	88fa      	ldrh	r2, [r7, #6]
2000b21a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000b21c:	68fb      	ldr	r3, [r7, #12]
2000b21e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b220:	b29a      	uxth	r2, r3
2000b222:	68fb      	ldr	r3, [r7, #12]
2000b224:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000b226:	68fb      	ldr	r3, [r7, #12]
2000b228:	4a53      	ldr	r2, [pc, #332]	@ (2000b378 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
2000b22a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2000b22c:	68fb      	ldr	r3, [r7, #12]
2000b22e:	4a53      	ldr	r2, [pc, #332]	@ (2000b37c <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
2000b230:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2000b232:	68fb      	ldr	r3, [r7, #12]
2000b234:	6a1b      	ldr	r3, [r3, #32]
2000b236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2000b23a:	d117      	bne.n	2000b26c <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000b23c:	68fb      	ldr	r3, [r7, #12]
2000b23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000b240:	781a      	ldrb	r2, [r3, #0]
2000b242:	68fb      	ldr	r3, [r7, #12]
2000b244:	681b      	ldr	r3, [r3, #0]
2000b246:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000b248:	68fb      	ldr	r3, [r7, #12]
2000b24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000b24c:	1c5a      	adds	r2, r3, #1
2000b24e:	68fb      	ldr	r3, [r7, #12]
2000b250:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000b252:	68fb      	ldr	r3, [r7, #12]
2000b254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b256:	b29b      	uxth	r3, r3
2000b258:	3b01      	subs	r3, #1
2000b25a:	b29a      	uxth	r2, r3
2000b25c:	68fb      	ldr	r3, [r7, #12]
2000b25e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000b260:	68fb      	ldr	r3, [r7, #12]
2000b262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b264:	3b01      	subs	r3, #1
2000b266:	b29a      	uxth	r2, r3
2000b268:	68fb      	ldr	r3, [r7, #12]
2000b26a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
2000b26c:	68fb      	ldr	r3, [r7, #12]
2000b26e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b270:	b29b      	uxth	r3, r3
2000b272:	2b00      	cmp	r3, #0
2000b274:	d068      	beq.n	2000b348 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
2000b276:	68fb      	ldr	r3, [r7, #12]
2000b278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000b27a:	2b00      	cmp	r3, #0
2000b27c:	d022      	beq.n	2000b2c4 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2000b27e:	68fb      	ldr	r3, [r7, #12]
2000b280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000b282:	4a3f      	ldr	r2, [pc, #252]	@ (2000b380 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
2000b284:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2000b286:	68fb      	ldr	r3, [r7, #12]
2000b288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000b28a:	4a3e      	ldr	r2, [pc, #248]	@ (2000b384 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
2000b28c:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2000b28e:	68fb      	ldr	r3, [r7, #12]
2000b290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000b292:	2200      	movs	r2, #0
2000b294:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2000b296:	68fb      	ldr	r3, [r7, #12]
2000b298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000b29a:	2200      	movs	r2, #0
2000b29c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2000b29e:	68fb      	ldr	r3, [r7, #12]
2000b2a0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2000b2a2:	68fb      	ldr	r3, [r7, #12]
2000b2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2000b2a6:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2000b2a8:	68fb      	ldr	r3, [r7, #12]
2000b2aa:	681b      	ldr	r3, [r3, #0]
2000b2ac:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2000b2ae:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2000b2b0:	68fb      	ldr	r3, [r7, #12]
2000b2b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2000b2b4:	f7f8 fdc6 	bl	20003e44 <HAL_DMA_Start_IT>
2000b2b8:	4603      	mov	r3, r0
2000b2ba:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2000b2bc:	7dfb      	ldrb	r3, [r7, #23]
2000b2be:	2b00      	cmp	r3, #0
2000b2c0:	d12e      	bne.n	2000b320 <HAL_I2C_Slave_Transmit_DMA+0x170>
2000b2c2:	e013      	b.n	2000b2ec <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
2000b2c4:	68fb      	ldr	r3, [r7, #12]
2000b2c6:	2228      	movs	r2, #40	@ 0x28
2000b2c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000b2cc:	68fb      	ldr	r3, [r7, #12]
2000b2ce:	2200      	movs	r2, #0
2000b2d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000b2d4:	68fb      	ldr	r3, [r7, #12]
2000b2d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000b2d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000b2dc:	68fb      	ldr	r3, [r7, #12]
2000b2de:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2000b2e0:	68fb      	ldr	r3, [r7, #12]
2000b2e2:	2200      	movs	r2, #0
2000b2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2000b2e8:	2301      	movs	r3, #1
2000b2ea:	e041      	b.n	2000b370 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000b2ec:	68fb      	ldr	r3, [r7, #12]
2000b2ee:	681b      	ldr	r3, [r3, #0]
2000b2f0:	685a      	ldr	r2, [r3, #4]
2000b2f2:	68fb      	ldr	r3, [r7, #12]
2000b2f4:	681b      	ldr	r3, [r3, #0]
2000b2f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000b2fa:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000b2fc:	68fb      	ldr	r3, [r7, #12]
2000b2fe:	2200      	movs	r2, #0
2000b300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000b304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000b308:	68f8      	ldr	r0, [r7, #12]
2000b30a:	f004 fafb 	bl	2000f904 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2000b30e:	68fb      	ldr	r3, [r7, #12]
2000b310:	681b      	ldr	r3, [r3, #0]
2000b312:	681a      	ldr	r2, [r3, #0]
2000b314:	68fb      	ldr	r3, [r7, #12]
2000b316:	681b      	ldr	r3, [r3, #0]
2000b318:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000b31c:	601a      	str	r2, [r3, #0]
2000b31e:	e024      	b.n	2000b36a <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
2000b320:	68fb      	ldr	r3, [r7, #12]
2000b322:	2228      	movs	r2, #40	@ 0x28
2000b324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000b328:	68fb      	ldr	r3, [r7, #12]
2000b32a:	2200      	movs	r2, #0
2000b32c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000b330:	68fb      	ldr	r3, [r7, #12]
2000b332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000b334:	f043 0210 	orr.w	r2, r3, #16
2000b338:	68fb      	ldr	r3, [r7, #12]
2000b33a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000b33c:	68fb      	ldr	r3, [r7, #12]
2000b33e:	2200      	movs	r2, #0
2000b340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2000b344:	2301      	movs	r3, #1
2000b346:	e013      	b.n	2000b370 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000b348:	68fb      	ldr	r3, [r7, #12]
2000b34a:	681b      	ldr	r3, [r3, #0]
2000b34c:	685a      	ldr	r2, [r3, #4]
2000b34e:	68fb      	ldr	r3, [r7, #12]
2000b350:	681b      	ldr	r3, [r3, #0]
2000b352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000b356:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000b358:	68fb      	ldr	r3, [r7, #12]
2000b35a:	2200      	movs	r2, #0
2000b35c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000b360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000b364:	68f8      	ldr	r0, [r7, #12]
2000b366:	f004 facd 	bl	2000f904 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2000b36a:	2300      	movs	r3, #0
2000b36c:	e000      	b.n	2000b370 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
2000b36e:	2302      	movs	r3, #2
  }
}
2000b370:	4618      	mov	r0, r3
2000b372:	3718      	adds	r7, #24
2000b374:	46bd      	mov	sp, r7
2000b376:	bd80      	pop	{r7, pc}
2000b378:	ffff0000 	.word	0xffff0000
2000b37c:	2000dde9 	.word	0x2000dde9
2000b380:	2000ef15 	.word	0x2000ef15
2000b384:	2000f151 	.word	0x2000f151

2000b388 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2000b388:	b580      	push	{r7, lr}
2000b38a:	b086      	sub	sp, #24
2000b38c:	af00      	add	r7, sp, #0
2000b38e:	60f8      	str	r0, [r7, #12]
2000b390:	60b9      	str	r1, [r7, #8]
2000b392:	4613      	mov	r3, r2
2000b394:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000b396:	68fb      	ldr	r3, [r7, #12]
2000b398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000b39c:	b2db      	uxtb	r3, r3
2000b39e:	2b20      	cmp	r3, #32
2000b3a0:	f040 809b 	bne.w	2000b4da <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2000b3a4:	68bb      	ldr	r3, [r7, #8]
2000b3a6:	2b00      	cmp	r3, #0
2000b3a8:	d002      	beq.n	2000b3b0 <HAL_I2C_Slave_Receive_DMA+0x28>
2000b3aa:	88fb      	ldrh	r3, [r7, #6]
2000b3ac:	2b00      	cmp	r3, #0
2000b3ae:	d105      	bne.n	2000b3bc <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000b3b0:	68fb      	ldr	r3, [r7, #12]
2000b3b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000b3b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000b3b8:	2301      	movs	r3, #1
2000b3ba:	e08f      	b.n	2000b4dc <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000b3bc:	68fb      	ldr	r3, [r7, #12]
2000b3be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000b3c2:	2b01      	cmp	r3, #1
2000b3c4:	d101      	bne.n	2000b3ca <HAL_I2C_Slave_Receive_DMA+0x42>
2000b3c6:	2302      	movs	r3, #2
2000b3c8:	e088      	b.n	2000b4dc <HAL_I2C_Slave_Receive_DMA+0x154>
2000b3ca:	68fb      	ldr	r3, [r7, #12]
2000b3cc:	2201      	movs	r2, #1
2000b3ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000b3d2:	68fb      	ldr	r3, [r7, #12]
2000b3d4:	2222      	movs	r2, #34	@ 0x22
2000b3d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2000b3da:	68fb      	ldr	r3, [r7, #12]
2000b3dc:	2220      	movs	r2, #32
2000b3de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000b3e2:	68fb      	ldr	r3, [r7, #12]
2000b3e4:	2200      	movs	r2, #0
2000b3e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000b3e8:	68fb      	ldr	r3, [r7, #12]
2000b3ea:	68ba      	ldr	r2, [r7, #8]
2000b3ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000b3ee:	68fb      	ldr	r3, [r7, #12]
2000b3f0:	88fa      	ldrh	r2, [r7, #6]
2000b3f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000b3f4:	68fb      	ldr	r3, [r7, #12]
2000b3f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b3f8:	b29a      	uxth	r2, r3
2000b3fa:	68fb      	ldr	r3, [r7, #12]
2000b3fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000b3fe:	68fb      	ldr	r3, [r7, #12]
2000b400:	4a38      	ldr	r2, [pc, #224]	@ (2000b4e4 <HAL_I2C_Slave_Receive_DMA+0x15c>)
2000b402:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2000b404:	68fb      	ldr	r3, [r7, #12]
2000b406:	4a38      	ldr	r2, [pc, #224]	@ (2000b4e8 <HAL_I2C_Slave_Receive_DMA+0x160>)
2000b408:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
2000b40a:	68fb      	ldr	r3, [r7, #12]
2000b40c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b40e:	2b00      	cmp	r3, #0
2000b410:	d020      	beq.n	2000b454 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2000b412:	68fb      	ldr	r3, [r7, #12]
2000b414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b416:	4a35      	ldr	r2, [pc, #212]	@ (2000b4ec <HAL_I2C_Slave_Receive_DMA+0x164>)
2000b418:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2000b41a:	68fb      	ldr	r3, [r7, #12]
2000b41c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b41e:	4a34      	ldr	r2, [pc, #208]	@ (2000b4f0 <HAL_I2C_Slave_Receive_DMA+0x168>)
2000b420:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2000b422:	68fb      	ldr	r3, [r7, #12]
2000b424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b426:	2200      	movs	r2, #0
2000b428:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2000b42a:	68fb      	ldr	r3, [r7, #12]
2000b42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000b42e:	2200      	movs	r2, #0
2000b430:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000b432:	68fb      	ldr	r3, [r7, #12]
2000b434:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2000b436:	68fb      	ldr	r3, [r7, #12]
2000b438:	681b      	ldr	r3, [r3, #0]
2000b43a:	3324      	adds	r3, #36	@ 0x24
2000b43c:	4619      	mov	r1, r3
2000b43e:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
2000b440:	68fb      	ldr	r3, [r7, #12]
2000b442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000b444:	f7f8 fcfe 	bl	20003e44 <HAL_DMA_Start_IT>
2000b448:	4603      	mov	r3, r0
2000b44a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2000b44c:	7dfb      	ldrb	r3, [r7, #23]
2000b44e:	2b00      	cmp	r3, #0
2000b450:	d12f      	bne.n	2000b4b2 <HAL_I2C_Slave_Receive_DMA+0x12a>
2000b452:	e013      	b.n	2000b47c <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000b454:	68fb      	ldr	r3, [r7, #12]
2000b456:	2228      	movs	r2, #40	@ 0x28
2000b458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000b45c:	68fb      	ldr	r3, [r7, #12]
2000b45e:	2200      	movs	r2, #0
2000b460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000b464:	68fb      	ldr	r3, [r7, #12]
2000b466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000b468:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000b46c:	68fb      	ldr	r3, [r7, #12]
2000b46e:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000b470:	68fb      	ldr	r3, [r7, #12]
2000b472:	2200      	movs	r2, #0
2000b474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000b478:	2301      	movs	r3, #1
2000b47a:	e02f      	b.n	2000b4dc <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000b47c:	68fb      	ldr	r3, [r7, #12]
2000b47e:	681b      	ldr	r3, [r3, #0]
2000b480:	685a      	ldr	r2, [r3, #4]
2000b482:	68fb      	ldr	r3, [r7, #12]
2000b484:	681b      	ldr	r3, [r3, #0]
2000b486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000b48a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000b48c:	68fb      	ldr	r3, [r7, #12]
2000b48e:	2200      	movs	r2, #0
2000b490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000b494:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000b498:	68f8      	ldr	r0, [r7, #12]
2000b49a:	f004 fa33 	bl	2000f904 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2000b49e:	68fb      	ldr	r3, [r7, #12]
2000b4a0:	681b      	ldr	r3, [r3, #0]
2000b4a2:	681a      	ldr	r2, [r3, #0]
2000b4a4:	68fb      	ldr	r3, [r7, #12]
2000b4a6:	681b      	ldr	r3, [r3, #0]
2000b4a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000b4ac:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2000b4ae:	2300      	movs	r3, #0
2000b4b0:	e014      	b.n	2000b4dc <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000b4b2:	68fb      	ldr	r3, [r7, #12]
2000b4b4:	2228      	movs	r2, #40	@ 0x28
2000b4b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000b4ba:	68fb      	ldr	r3, [r7, #12]
2000b4bc:	2200      	movs	r2, #0
2000b4be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000b4c2:	68fb      	ldr	r3, [r7, #12]
2000b4c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000b4c6:	f043 0210 	orr.w	r2, r3, #16
2000b4ca:	68fb      	ldr	r3, [r7, #12]
2000b4cc:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000b4ce:	68fb      	ldr	r3, [r7, #12]
2000b4d0:	2200      	movs	r2, #0
2000b4d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000b4d6:	2301      	movs	r3, #1
2000b4d8:	e000      	b.n	2000b4dc <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2000b4da:	2302      	movs	r3, #2
  }
}
2000b4dc:	4618      	mov	r0, r3
2000b4de:	3718      	adds	r7, #24
2000b4e0:	46bd      	mov	sp, r7
2000b4e2:	bd80      	pop	{r7, pc}
2000b4e4:	ffff0000 	.word	0xffff0000
2000b4e8:	2000dde9 	.word	0x2000dde9
2000b4ec:	2000efed 	.word	0x2000efed
2000b4f0:	2000f151 	.word	0x2000f151

2000b4f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2000b4f4:	b580      	push	{r7, lr}
2000b4f6:	b088      	sub	sp, #32
2000b4f8:	af02      	add	r7, sp, #8
2000b4fa:	60f8      	str	r0, [r7, #12]
2000b4fc:	4608      	mov	r0, r1
2000b4fe:	4611      	mov	r1, r2
2000b500:	461a      	mov	r2, r3
2000b502:	4603      	mov	r3, r0
2000b504:	817b      	strh	r3, [r7, #10]
2000b506:	460b      	mov	r3, r1
2000b508:	813b      	strh	r3, [r7, #8]
2000b50a:	4613      	mov	r3, r2
2000b50c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000b50e:	68fb      	ldr	r3, [r7, #12]
2000b510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000b514:	b2db      	uxtb	r3, r3
2000b516:	2b20      	cmp	r3, #32
2000b518:	f040 80f9 	bne.w	2000b70e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
2000b51c:	6a3b      	ldr	r3, [r7, #32]
2000b51e:	2b00      	cmp	r3, #0
2000b520:	d002      	beq.n	2000b528 <HAL_I2C_Mem_Write+0x34>
2000b522:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
2000b524:	2b00      	cmp	r3, #0
2000b526:	d105      	bne.n	2000b534 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000b528:	68fb      	ldr	r3, [r7, #12]
2000b52a:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000b52e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000b530:	2301      	movs	r3, #1
2000b532:	e0ed      	b.n	2000b710 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000b534:	68fb      	ldr	r3, [r7, #12]
2000b536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000b53a:	2b01      	cmp	r3, #1
2000b53c:	d101      	bne.n	2000b542 <HAL_I2C_Mem_Write+0x4e>
2000b53e:	2302      	movs	r3, #2
2000b540:	e0e6      	b.n	2000b710 <HAL_I2C_Mem_Write+0x21c>
2000b542:	68fb      	ldr	r3, [r7, #12]
2000b544:	2201      	movs	r2, #1
2000b546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2000b54a:	f7f6 feb9 	bl	200022c0 <HAL_GetTick>
2000b54e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2000b550:	697b      	ldr	r3, [r7, #20]
2000b552:	9300      	str	r3, [sp, #0]
2000b554:	2319      	movs	r3, #25
2000b556:	2201      	movs	r2, #1
2000b558:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000b55c:	68f8      	ldr	r0, [r7, #12]
2000b55e:	f003 ff4f 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000b562:	4603      	mov	r3, r0
2000b564:	2b00      	cmp	r3, #0
2000b566:	d001      	beq.n	2000b56c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
2000b568:	2301      	movs	r3, #1
2000b56a:	e0d1      	b.n	2000b710 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2000b56c:	68fb      	ldr	r3, [r7, #12]
2000b56e:	2221      	movs	r2, #33	@ 0x21
2000b570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2000b574:	68fb      	ldr	r3, [r7, #12]
2000b576:	2240      	movs	r2, #64	@ 0x40
2000b578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000b57c:	68fb      	ldr	r3, [r7, #12]
2000b57e:	2200      	movs	r2, #0
2000b580:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000b582:	68fb      	ldr	r3, [r7, #12]
2000b584:	6a3a      	ldr	r2, [r7, #32]
2000b586:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2000b588:	68fb      	ldr	r3, [r7, #12]
2000b58a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
2000b58c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2000b58e:	68fb      	ldr	r3, [r7, #12]
2000b590:	2200      	movs	r2, #0
2000b592:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2000b594:	88f8      	ldrh	r0, [r7, #6]
2000b596:	893a      	ldrh	r2, [r7, #8]
2000b598:	8979      	ldrh	r1, [r7, #10]
2000b59a:	697b      	ldr	r3, [r7, #20]
2000b59c:	9301      	str	r3, [sp, #4]
2000b59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000b5a0:	9300      	str	r3, [sp, #0]
2000b5a2:	4603      	mov	r3, r0
2000b5a4:	68f8      	ldr	r0, [r7, #12]
2000b5a6:	f002 fdf9 	bl	2000e19c <I2C_RequestMemoryWrite>
2000b5aa:	4603      	mov	r3, r0
2000b5ac:	2b00      	cmp	r3, #0
2000b5ae:	d005      	beq.n	2000b5bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000b5b0:	68fb      	ldr	r3, [r7, #12]
2000b5b2:	2200      	movs	r2, #0
2000b5b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000b5b8:	2301      	movs	r3, #1
2000b5ba:	e0a9      	b.n	2000b710 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000b5bc:	68fb      	ldr	r3, [r7, #12]
2000b5be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b5c0:	b29b      	uxth	r3, r3
2000b5c2:	2bff      	cmp	r3, #255	@ 0xff
2000b5c4:	d90e      	bls.n	2000b5e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000b5c6:	68fb      	ldr	r3, [r7, #12]
2000b5c8:	22ff      	movs	r2, #255	@ 0xff
2000b5ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2000b5cc:	68fb      	ldr	r3, [r7, #12]
2000b5ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b5d0:	b2da      	uxtb	r2, r3
2000b5d2:	8979      	ldrh	r1, [r7, #10]
2000b5d4:	2300      	movs	r3, #0
2000b5d6:	9300      	str	r3, [sp, #0]
2000b5d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000b5dc:	68f8      	ldr	r0, [r7, #12]
2000b5de:	f004 f95f 	bl	2000f8a0 <I2C_TransferConfig>
2000b5e2:	e00f      	b.n	2000b604 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000b5e4:	68fb      	ldr	r3, [r7, #12]
2000b5e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b5e8:	b29a      	uxth	r2, r3
2000b5ea:	68fb      	ldr	r3, [r7, #12]
2000b5ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
2000b5ee:	68fb      	ldr	r3, [r7, #12]
2000b5f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b5f2:	b2da      	uxtb	r2, r3
2000b5f4:	8979      	ldrh	r1, [r7, #10]
2000b5f6:	2300      	movs	r3, #0
2000b5f8:	9300      	str	r3, [sp, #0]
2000b5fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000b5fe:	68f8      	ldr	r0, [r7, #12]
2000b600:	f004 f94e 	bl	2000f8a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000b604:	697a      	ldr	r2, [r7, #20]
2000b606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
2000b608:	68f8      	ldr	r0, [r7, #12]
2000b60a:	f003 ff52 	bl	2000f4b2 <I2C_WaitOnTXISFlagUntilTimeout>
2000b60e:	4603      	mov	r3, r0
2000b610:	2b00      	cmp	r3, #0
2000b612:	d001      	beq.n	2000b618 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
2000b614:	2301      	movs	r3, #1
2000b616:	e07b      	b.n	2000b710 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000b618:	68fb      	ldr	r3, [r7, #12]
2000b61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000b61c:	781a      	ldrb	r2, [r3, #0]
2000b61e:	68fb      	ldr	r3, [r7, #12]
2000b620:	681b      	ldr	r3, [r3, #0]
2000b622:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000b624:	68fb      	ldr	r3, [r7, #12]
2000b626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000b628:	1c5a      	adds	r2, r3, #1
2000b62a:	68fb      	ldr	r3, [r7, #12]
2000b62c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000b62e:	68fb      	ldr	r3, [r7, #12]
2000b630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b632:	b29b      	uxth	r3, r3
2000b634:	3b01      	subs	r3, #1
2000b636:	b29a      	uxth	r2, r3
2000b638:	68fb      	ldr	r3, [r7, #12]
2000b63a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000b63c:	68fb      	ldr	r3, [r7, #12]
2000b63e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b640:	3b01      	subs	r3, #1
2000b642:	b29a      	uxth	r2, r3
2000b644:	68fb      	ldr	r3, [r7, #12]
2000b646:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000b648:	68fb      	ldr	r3, [r7, #12]
2000b64a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b64c:	b29b      	uxth	r3, r3
2000b64e:	2b00      	cmp	r3, #0
2000b650:	d034      	beq.n	2000b6bc <HAL_I2C_Mem_Write+0x1c8>
2000b652:	68fb      	ldr	r3, [r7, #12]
2000b654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b656:	2b00      	cmp	r3, #0
2000b658:	d130      	bne.n	2000b6bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2000b65a:	697b      	ldr	r3, [r7, #20]
2000b65c:	9300      	str	r3, [sp, #0]
2000b65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000b660:	2200      	movs	r2, #0
2000b662:	2180      	movs	r1, #128	@ 0x80
2000b664:	68f8      	ldr	r0, [r7, #12]
2000b666:	f003 fecb 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000b66a:	4603      	mov	r3, r0
2000b66c:	2b00      	cmp	r3, #0
2000b66e:	d001      	beq.n	2000b674 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
2000b670:	2301      	movs	r3, #1
2000b672:	e04d      	b.n	2000b710 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000b674:	68fb      	ldr	r3, [r7, #12]
2000b676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b678:	b29b      	uxth	r3, r3
2000b67a:	2bff      	cmp	r3, #255	@ 0xff
2000b67c:	d90e      	bls.n	2000b69c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2000b67e:	68fb      	ldr	r3, [r7, #12]
2000b680:	22ff      	movs	r2, #255	@ 0xff
2000b682:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2000b684:	68fb      	ldr	r3, [r7, #12]
2000b686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b688:	b2da      	uxtb	r2, r3
2000b68a:	8979      	ldrh	r1, [r7, #10]
2000b68c:	2300      	movs	r3, #0
2000b68e:	9300      	str	r3, [sp, #0]
2000b690:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000b694:	68f8      	ldr	r0, [r7, #12]
2000b696:	f004 f903 	bl	2000f8a0 <I2C_TransferConfig>
2000b69a:	e00f      	b.n	2000b6bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2000b69c:	68fb      	ldr	r3, [r7, #12]
2000b69e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b6a0:	b29a      	uxth	r2, r3
2000b6a2:	68fb      	ldr	r3, [r7, #12]
2000b6a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000b6a6:	68fb      	ldr	r3, [r7, #12]
2000b6a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b6aa:	b2da      	uxtb	r2, r3
2000b6ac:	8979      	ldrh	r1, [r7, #10]
2000b6ae:	2300      	movs	r3, #0
2000b6b0:	9300      	str	r3, [sp, #0]
2000b6b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000b6b6:	68f8      	ldr	r0, [r7, #12]
2000b6b8:	f004 f8f2 	bl	2000f8a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
2000b6bc:	68fb      	ldr	r3, [r7, #12]
2000b6be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b6c0:	b29b      	uxth	r3, r3
2000b6c2:	2b00      	cmp	r3, #0
2000b6c4:	d19e      	bne.n	2000b604 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000b6c6:	697a      	ldr	r2, [r7, #20]
2000b6c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
2000b6ca:	68f8      	ldr	r0, [r7, #12]
2000b6cc:	f003 ff38 	bl	2000f540 <I2C_WaitOnSTOPFlagUntilTimeout>
2000b6d0:	4603      	mov	r3, r0
2000b6d2:	2b00      	cmp	r3, #0
2000b6d4:	d001      	beq.n	2000b6da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
2000b6d6:	2301      	movs	r3, #1
2000b6d8:	e01a      	b.n	2000b710 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000b6da:	68fb      	ldr	r3, [r7, #12]
2000b6dc:	681b      	ldr	r3, [r3, #0]
2000b6de:	2220      	movs	r2, #32
2000b6e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2000b6e2:	68fb      	ldr	r3, [r7, #12]
2000b6e4:	681b      	ldr	r3, [r3, #0]
2000b6e6:	6859      	ldr	r1, [r3, #4]
2000b6e8:	68fb      	ldr	r3, [r7, #12]
2000b6ea:	681a      	ldr	r2, [r3, #0]
2000b6ec:	4b0a      	ldr	r3, [pc, #40]	@ (2000b718 <HAL_I2C_Mem_Write+0x224>)
2000b6ee:	400b      	ands	r3, r1
2000b6f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2000b6f2:	68fb      	ldr	r3, [r7, #12]
2000b6f4:	2220      	movs	r2, #32
2000b6f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2000b6fa:	68fb      	ldr	r3, [r7, #12]
2000b6fc:	2200      	movs	r2, #0
2000b6fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000b702:	68fb      	ldr	r3, [r7, #12]
2000b704:	2200      	movs	r2, #0
2000b706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000b70a:	2300      	movs	r3, #0
2000b70c:	e000      	b.n	2000b710 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
2000b70e:	2302      	movs	r3, #2
  }
}
2000b710:	4618      	mov	r0, r3
2000b712:	3718      	adds	r7, #24
2000b714:	46bd      	mov	sp, r7
2000b716:	bd80      	pop	{r7, pc}
2000b718:	fe00e800 	.word	0xfe00e800

2000b71c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2000b71c:	b580      	push	{r7, lr}
2000b71e:	b088      	sub	sp, #32
2000b720:	af02      	add	r7, sp, #8
2000b722:	60f8      	str	r0, [r7, #12]
2000b724:	4608      	mov	r0, r1
2000b726:	4611      	mov	r1, r2
2000b728:	461a      	mov	r2, r3
2000b72a:	4603      	mov	r3, r0
2000b72c:	817b      	strh	r3, [r7, #10]
2000b72e:	460b      	mov	r3, r1
2000b730:	813b      	strh	r3, [r7, #8]
2000b732:	4613      	mov	r3, r2
2000b734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000b736:	68fb      	ldr	r3, [r7, #12]
2000b738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000b73c:	b2db      	uxtb	r3, r3
2000b73e:	2b20      	cmp	r3, #32
2000b740:	f040 80fd 	bne.w	2000b93e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
2000b744:	6a3b      	ldr	r3, [r7, #32]
2000b746:	2b00      	cmp	r3, #0
2000b748:	d002      	beq.n	2000b750 <HAL_I2C_Mem_Read+0x34>
2000b74a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
2000b74c:	2b00      	cmp	r3, #0
2000b74e:	d105      	bne.n	2000b75c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000b750:	68fb      	ldr	r3, [r7, #12]
2000b752:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000b756:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000b758:	2301      	movs	r3, #1
2000b75a:	e0f1      	b.n	2000b940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000b75c:	68fb      	ldr	r3, [r7, #12]
2000b75e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000b762:	2b01      	cmp	r3, #1
2000b764:	d101      	bne.n	2000b76a <HAL_I2C_Mem_Read+0x4e>
2000b766:	2302      	movs	r3, #2
2000b768:	e0ea      	b.n	2000b940 <HAL_I2C_Mem_Read+0x224>
2000b76a:	68fb      	ldr	r3, [r7, #12]
2000b76c:	2201      	movs	r2, #1
2000b76e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2000b772:	f7f6 fda5 	bl	200022c0 <HAL_GetTick>
2000b776:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2000b778:	697b      	ldr	r3, [r7, #20]
2000b77a:	9300      	str	r3, [sp, #0]
2000b77c:	2319      	movs	r3, #25
2000b77e:	2201      	movs	r2, #1
2000b780:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000b784:	68f8      	ldr	r0, [r7, #12]
2000b786:	f003 fe3b 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000b78a:	4603      	mov	r3, r0
2000b78c:	2b00      	cmp	r3, #0
2000b78e:	d001      	beq.n	2000b794 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
2000b790:	2301      	movs	r3, #1
2000b792:	e0d5      	b.n	2000b940 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2000b794:	68fb      	ldr	r3, [r7, #12]
2000b796:	2222      	movs	r2, #34	@ 0x22
2000b798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2000b79c:	68fb      	ldr	r3, [r7, #12]
2000b79e:	2240      	movs	r2, #64	@ 0x40
2000b7a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000b7a4:	68fb      	ldr	r3, [r7, #12]
2000b7a6:	2200      	movs	r2, #0
2000b7a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000b7aa:	68fb      	ldr	r3, [r7, #12]
2000b7ac:	6a3a      	ldr	r2, [r7, #32]
2000b7ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2000b7b0:	68fb      	ldr	r3, [r7, #12]
2000b7b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
2000b7b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2000b7b6:	68fb      	ldr	r3, [r7, #12]
2000b7b8:	2200      	movs	r2, #0
2000b7ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2000b7bc:	88f8      	ldrh	r0, [r7, #6]
2000b7be:	893a      	ldrh	r2, [r7, #8]
2000b7c0:	8979      	ldrh	r1, [r7, #10]
2000b7c2:	697b      	ldr	r3, [r7, #20]
2000b7c4:	9301      	str	r3, [sp, #4]
2000b7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000b7c8:	9300      	str	r3, [sp, #0]
2000b7ca:	4603      	mov	r3, r0
2000b7cc:	68f8      	ldr	r0, [r7, #12]
2000b7ce:	f002 fd39 	bl	2000e244 <I2C_RequestMemoryRead>
2000b7d2:	4603      	mov	r3, r0
2000b7d4:	2b00      	cmp	r3, #0
2000b7d6:	d005      	beq.n	2000b7e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000b7d8:	68fb      	ldr	r3, [r7, #12]
2000b7da:	2200      	movs	r2, #0
2000b7dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000b7e0:	2301      	movs	r3, #1
2000b7e2:	e0ad      	b.n	2000b940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000b7e4:	68fb      	ldr	r3, [r7, #12]
2000b7e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b7e8:	b29b      	uxth	r3, r3
2000b7ea:	2bff      	cmp	r3, #255	@ 0xff
2000b7ec:	d90e      	bls.n	2000b80c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000b7ee:	68fb      	ldr	r3, [r7, #12]
2000b7f0:	22ff      	movs	r2, #255	@ 0xff
2000b7f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2000b7f4:	68fb      	ldr	r3, [r7, #12]
2000b7f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b7f8:	b2da      	uxtb	r2, r3
2000b7fa:	8979      	ldrh	r1, [r7, #10]
2000b7fc:	4b52      	ldr	r3, [pc, #328]	@ (2000b948 <HAL_I2C_Mem_Read+0x22c>)
2000b7fe:	9300      	str	r3, [sp, #0]
2000b800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000b804:	68f8      	ldr	r0, [r7, #12]
2000b806:	f004 f84b 	bl	2000f8a0 <I2C_TransferConfig>
2000b80a:	e00f      	b.n	2000b82c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000b80c:	68fb      	ldr	r3, [r7, #12]
2000b80e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b810:	b29a      	uxth	r2, r3
2000b812:	68fb      	ldr	r3, [r7, #12]
2000b814:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000b816:	68fb      	ldr	r3, [r7, #12]
2000b818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b81a:	b2da      	uxtb	r2, r3
2000b81c:	8979      	ldrh	r1, [r7, #10]
2000b81e:	4b4a      	ldr	r3, [pc, #296]	@ (2000b948 <HAL_I2C_Mem_Read+0x22c>)
2000b820:	9300      	str	r3, [sp, #0]
2000b822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000b826:	68f8      	ldr	r0, [r7, #12]
2000b828:	f004 f83a 	bl	2000f8a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
2000b82c:	697b      	ldr	r3, [r7, #20]
2000b82e:	9300      	str	r3, [sp, #0]
2000b830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000b832:	2200      	movs	r2, #0
2000b834:	2104      	movs	r1, #4
2000b836:	68f8      	ldr	r0, [r7, #12]
2000b838:	f003 fde2 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000b83c:	4603      	mov	r3, r0
2000b83e:	2b00      	cmp	r3, #0
2000b840:	d001      	beq.n	2000b846 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
2000b842:	2301      	movs	r3, #1
2000b844:	e07c      	b.n	2000b940 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000b846:	68fb      	ldr	r3, [r7, #12]
2000b848:	681b      	ldr	r3, [r3, #0]
2000b84a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000b84c:	68fb      	ldr	r3, [r7, #12]
2000b84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000b850:	b2d2      	uxtb	r2, r2
2000b852:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000b854:	68fb      	ldr	r3, [r7, #12]
2000b856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000b858:	1c5a      	adds	r2, r3, #1
2000b85a:	68fb      	ldr	r3, [r7, #12]
2000b85c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2000b85e:	68fb      	ldr	r3, [r7, #12]
2000b860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b862:	3b01      	subs	r3, #1
2000b864:	b29a      	uxth	r2, r3
2000b866:	68fb      	ldr	r3, [r7, #12]
2000b868:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2000b86a:	68fb      	ldr	r3, [r7, #12]
2000b86c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b86e:	b29b      	uxth	r3, r3
2000b870:	3b01      	subs	r3, #1
2000b872:	b29a      	uxth	r2, r3
2000b874:	68fb      	ldr	r3, [r7, #12]
2000b876:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000b878:	68fb      	ldr	r3, [r7, #12]
2000b87a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b87c:	b29b      	uxth	r3, r3
2000b87e:	2b00      	cmp	r3, #0
2000b880:	d034      	beq.n	2000b8ec <HAL_I2C_Mem_Read+0x1d0>
2000b882:	68fb      	ldr	r3, [r7, #12]
2000b884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b886:	2b00      	cmp	r3, #0
2000b888:	d130      	bne.n	2000b8ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2000b88a:	697b      	ldr	r3, [r7, #20]
2000b88c:	9300      	str	r3, [sp, #0]
2000b88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000b890:	2200      	movs	r2, #0
2000b892:	2180      	movs	r1, #128	@ 0x80
2000b894:	68f8      	ldr	r0, [r7, #12]
2000b896:	f003 fdb3 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000b89a:	4603      	mov	r3, r0
2000b89c:	2b00      	cmp	r3, #0
2000b89e:	d001      	beq.n	2000b8a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
2000b8a0:	2301      	movs	r3, #1
2000b8a2:	e04d      	b.n	2000b940 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000b8a4:	68fb      	ldr	r3, [r7, #12]
2000b8a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b8a8:	b29b      	uxth	r3, r3
2000b8aa:	2bff      	cmp	r3, #255	@ 0xff
2000b8ac:	d90e      	bls.n	2000b8cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2000b8ae:	68fb      	ldr	r3, [r7, #12]
2000b8b0:	22ff      	movs	r2, #255	@ 0xff
2000b8b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
2000b8b4:	68fb      	ldr	r3, [r7, #12]
2000b8b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b8b8:	b2da      	uxtb	r2, r3
2000b8ba:	8979      	ldrh	r1, [r7, #10]
2000b8bc:	2300      	movs	r3, #0
2000b8be:	9300      	str	r3, [sp, #0]
2000b8c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000b8c4:	68f8      	ldr	r0, [r7, #12]
2000b8c6:	f003 ffeb 	bl	2000f8a0 <I2C_TransferConfig>
2000b8ca:	e00f      	b.n	2000b8ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2000b8cc:	68fb      	ldr	r3, [r7, #12]
2000b8ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b8d0:	b29a      	uxth	r2, r3
2000b8d2:	68fb      	ldr	r3, [r7, #12]
2000b8d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000b8d6:	68fb      	ldr	r3, [r7, #12]
2000b8d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000b8da:	b2da      	uxtb	r2, r3
2000b8dc:	8979      	ldrh	r1, [r7, #10]
2000b8de:	2300      	movs	r3, #0
2000b8e0:	9300      	str	r3, [sp, #0]
2000b8e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000b8e6:	68f8      	ldr	r0, [r7, #12]
2000b8e8:	f003 ffda 	bl	2000f8a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
2000b8ec:	68fb      	ldr	r3, [r7, #12]
2000b8ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000b8f0:	b29b      	uxth	r3, r3
2000b8f2:	2b00      	cmp	r3, #0
2000b8f4:	d19a      	bne.n	2000b82c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000b8f6:	697a      	ldr	r2, [r7, #20]
2000b8f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
2000b8fa:	68f8      	ldr	r0, [r7, #12]
2000b8fc:	f003 fe20 	bl	2000f540 <I2C_WaitOnSTOPFlagUntilTimeout>
2000b900:	4603      	mov	r3, r0
2000b902:	2b00      	cmp	r3, #0
2000b904:	d001      	beq.n	2000b90a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
2000b906:	2301      	movs	r3, #1
2000b908:	e01a      	b.n	2000b940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000b90a:	68fb      	ldr	r3, [r7, #12]
2000b90c:	681b      	ldr	r3, [r3, #0]
2000b90e:	2220      	movs	r2, #32
2000b910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2000b912:	68fb      	ldr	r3, [r7, #12]
2000b914:	681b      	ldr	r3, [r3, #0]
2000b916:	6859      	ldr	r1, [r3, #4]
2000b918:	68fb      	ldr	r3, [r7, #12]
2000b91a:	681a      	ldr	r2, [r3, #0]
2000b91c:	4b0b      	ldr	r3, [pc, #44]	@ (2000b94c <HAL_I2C_Mem_Read+0x230>)
2000b91e:	400b      	ands	r3, r1
2000b920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2000b922:	68fb      	ldr	r3, [r7, #12]
2000b924:	2220      	movs	r2, #32
2000b926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2000b92a:	68fb      	ldr	r3, [r7, #12]
2000b92c:	2200      	movs	r2, #0
2000b92e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000b932:	68fb      	ldr	r3, [r7, #12]
2000b934:	2200      	movs	r2, #0
2000b936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000b93a:	2300      	movs	r3, #0
2000b93c:	e000      	b.n	2000b940 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
2000b93e:	2302      	movs	r3, #2
  }
}
2000b940:	4618      	mov	r0, r3
2000b942:	3718      	adds	r7, #24
2000b944:	46bd      	mov	sp, r7
2000b946:	bd80      	pop	{r7, pc}
2000b948:	80002400 	.word	0x80002400
2000b94c:	fe00e800 	.word	0xfe00e800

2000b950 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2000b950:	b580      	push	{r7, lr}
2000b952:	b086      	sub	sp, #24
2000b954:	af02      	add	r7, sp, #8
2000b956:	60f8      	str	r0, [r7, #12]
2000b958:	4608      	mov	r0, r1
2000b95a:	4611      	mov	r1, r2
2000b95c:	461a      	mov	r2, r3
2000b95e:	4603      	mov	r3, r0
2000b960:	817b      	strh	r3, [r7, #10]
2000b962:	460b      	mov	r3, r1
2000b964:	813b      	strh	r3, [r7, #8]
2000b966:	4613      	mov	r3, r2
2000b968:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000b96a:	68fb      	ldr	r3, [r7, #12]
2000b96c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000b970:	b2db      	uxtb	r3, r3
2000b972:	2b20      	cmp	r3, #32
2000b974:	d16a      	bne.n	2000ba4c <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
2000b976:	69bb      	ldr	r3, [r7, #24]
2000b978:	2b00      	cmp	r3, #0
2000b97a:	d002      	beq.n	2000b982 <HAL_I2C_Mem_Write_IT+0x32>
2000b97c:	8bbb      	ldrh	r3, [r7, #28]
2000b97e:	2b00      	cmp	r3, #0
2000b980:	d105      	bne.n	2000b98e <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000b982:	68fb      	ldr	r3, [r7, #12]
2000b984:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000b988:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000b98a:	2301      	movs	r3, #1
2000b98c:	e05f      	b.n	2000ba4e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000b98e:	68fb      	ldr	r3, [r7, #12]
2000b990:	681b      	ldr	r3, [r3, #0]
2000b992:	699b      	ldr	r3, [r3, #24]
2000b994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000b998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000b99c:	d101      	bne.n	2000b9a2 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
2000b99e:	2302      	movs	r3, #2
2000b9a0:	e055      	b.n	2000ba4e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000b9a2:	68fb      	ldr	r3, [r7, #12]
2000b9a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000b9a8:	2b01      	cmp	r3, #1
2000b9aa:	d101      	bne.n	2000b9b0 <HAL_I2C_Mem_Write_IT+0x60>
2000b9ac:	2302      	movs	r3, #2
2000b9ae:	e04e      	b.n	2000ba4e <HAL_I2C_Mem_Write_IT+0xfe>
2000b9b0:	68fb      	ldr	r3, [r7, #12]
2000b9b2:	2201      	movs	r2, #1
2000b9b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000b9b8:	68fb      	ldr	r3, [r7, #12]
2000b9ba:	2221      	movs	r2, #33	@ 0x21
2000b9bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2000b9c0:	68fb      	ldr	r3, [r7, #12]
2000b9c2:	2240      	movs	r2, #64	@ 0x40
2000b9c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000b9c8:	68fb      	ldr	r3, [r7, #12]
2000b9ca:	2200      	movs	r2, #0
2000b9cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
2000b9ce:	68fb      	ldr	r3, [r7, #12]
2000b9d0:	2200      	movs	r2, #0
2000b9d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
2000b9d4:	68fb      	ldr	r3, [r7, #12]
2000b9d6:	69ba      	ldr	r2, [r7, #24]
2000b9d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000b9da:	68fb      	ldr	r3, [r7, #12]
2000b9dc:	8bba      	ldrh	r2, [r7, #28]
2000b9de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000b9e0:	68fb      	ldr	r3, [r7, #12]
2000b9e2:	4a1d      	ldr	r2, [pc, #116]	@ (2000ba58 <HAL_I2C_Mem_Write_IT+0x108>)
2000b9e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
2000b9e6:	68fb      	ldr	r3, [r7, #12]
2000b9e8:	4a1c      	ldr	r2, [pc, #112]	@ (2000ba5c <HAL_I2C_Mem_Write_IT+0x10c>)
2000b9ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
2000b9ec:	897a      	ldrh	r2, [r7, #10]
2000b9ee:	68fb      	ldr	r3, [r7, #12]
2000b9f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2000b9f2:	88fb      	ldrh	r3, [r7, #6]
2000b9f4:	2b01      	cmp	r3, #1
2000b9f6:	d109      	bne.n	2000ba0c <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000b9f8:	893b      	ldrh	r3, [r7, #8]
2000b9fa:	b2da      	uxtb	r2, r3
2000b9fc:	68fb      	ldr	r3, [r7, #12]
2000b9fe:	681b      	ldr	r3, [r3, #0]
2000ba00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2000ba02:	68fb      	ldr	r3, [r7, #12]
2000ba04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
2000ba08:	651a      	str	r2, [r3, #80]	@ 0x50
2000ba0a:	e00b      	b.n	2000ba24 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000ba0c:	893b      	ldrh	r3, [r7, #8]
2000ba0e:	0a1b      	lsrs	r3, r3, #8
2000ba10:	b29b      	uxth	r3, r3
2000ba12:	b2da      	uxtb	r2, r3
2000ba14:	68fb      	ldr	r3, [r7, #12]
2000ba16:	681b      	ldr	r3, [r3, #0]
2000ba18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2000ba1a:	893b      	ldrh	r3, [r7, #8]
2000ba1c:	b2db      	uxtb	r3, r3
2000ba1e:	461a      	mov	r2, r3
2000ba20:	68fb      	ldr	r3, [r7, #12]
2000ba22:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2000ba24:	88fb      	ldrh	r3, [r7, #6]
2000ba26:	b2da      	uxtb	r2, r3
2000ba28:	8979      	ldrh	r1, [r7, #10]
2000ba2a:	4b0d      	ldr	r3, [pc, #52]	@ (2000ba60 <HAL_I2C_Mem_Write_IT+0x110>)
2000ba2c:	9300      	str	r3, [sp, #0]
2000ba2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000ba32:	68f8      	ldr	r0, [r7, #12]
2000ba34:	f003 ff34 	bl	2000f8a0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000ba38:	68fb      	ldr	r3, [r7, #12]
2000ba3a:	2200      	movs	r2, #0
2000ba3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000ba40:	2101      	movs	r1, #1
2000ba42:	68f8      	ldr	r0, [r7, #12]
2000ba44:	f003 ff5e 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000ba48:	2300      	movs	r3, #0
2000ba4a:	e000      	b.n	2000ba4e <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
2000ba4c:	2302      	movs	r3, #2
  }
}
2000ba4e:	4618      	mov	r0, r3
2000ba50:	3710      	adds	r7, #16
2000ba52:	46bd      	mov	sp, r7
2000ba54:	bd80      	pop	{r7, pc}
2000ba56:	bf00      	nop
2000ba58:	ffff0000 	.word	0xffff0000
2000ba5c:	2000d589 	.word	0x2000d589
2000ba60:	80002000 	.word	0x80002000

2000ba64 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2000ba64:	b580      	push	{r7, lr}
2000ba66:	b086      	sub	sp, #24
2000ba68:	af02      	add	r7, sp, #8
2000ba6a:	60f8      	str	r0, [r7, #12]
2000ba6c:	4608      	mov	r0, r1
2000ba6e:	4611      	mov	r1, r2
2000ba70:	461a      	mov	r2, r3
2000ba72:	4603      	mov	r3, r0
2000ba74:	817b      	strh	r3, [r7, #10]
2000ba76:	460b      	mov	r3, r1
2000ba78:	813b      	strh	r3, [r7, #8]
2000ba7a:	4613      	mov	r3, r2
2000ba7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000ba7e:	68fb      	ldr	r3, [r7, #12]
2000ba80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ba84:	b2db      	uxtb	r3, r3
2000ba86:	2b20      	cmp	r3, #32
2000ba88:	d166      	bne.n	2000bb58 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
2000ba8a:	69bb      	ldr	r3, [r7, #24]
2000ba8c:	2b00      	cmp	r3, #0
2000ba8e:	d002      	beq.n	2000ba96 <HAL_I2C_Mem_Read_IT+0x32>
2000ba90:	8bbb      	ldrh	r3, [r7, #28]
2000ba92:	2b00      	cmp	r3, #0
2000ba94:	d105      	bne.n	2000baa2 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000ba96:	68fb      	ldr	r3, [r7, #12]
2000ba98:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000ba9c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000ba9e:	2301      	movs	r3, #1
2000baa0:	e05b      	b.n	2000bb5a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000baa2:	68fb      	ldr	r3, [r7, #12]
2000baa4:	681b      	ldr	r3, [r3, #0]
2000baa6:	699b      	ldr	r3, [r3, #24]
2000baa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000baac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000bab0:	d101      	bne.n	2000bab6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
2000bab2:	2302      	movs	r3, #2
2000bab4:	e051      	b.n	2000bb5a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000bab6:	68fb      	ldr	r3, [r7, #12]
2000bab8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000babc:	2b01      	cmp	r3, #1
2000babe:	d101      	bne.n	2000bac4 <HAL_I2C_Mem_Read_IT+0x60>
2000bac0:	2302      	movs	r3, #2
2000bac2:	e04a      	b.n	2000bb5a <HAL_I2C_Mem_Read_IT+0xf6>
2000bac4:	68fb      	ldr	r3, [r7, #12]
2000bac6:	2201      	movs	r2, #1
2000bac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000bacc:	68fb      	ldr	r3, [r7, #12]
2000bace:	2222      	movs	r2, #34	@ 0x22
2000bad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2000bad4:	68fb      	ldr	r3, [r7, #12]
2000bad6:	2240      	movs	r2, #64	@ 0x40
2000bad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000badc:	68fb      	ldr	r3, [r7, #12]
2000bade:	2200      	movs	r2, #0
2000bae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000bae2:	68fb      	ldr	r3, [r7, #12]
2000bae4:	69ba      	ldr	r2, [r7, #24]
2000bae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000bae8:	68fb      	ldr	r3, [r7, #12]
2000baea:	8bba      	ldrh	r2, [r7, #28]
2000baec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000baee:	68fb      	ldr	r3, [r7, #12]
2000baf0:	4a1c      	ldr	r2, [pc, #112]	@ (2000bb64 <HAL_I2C_Mem_Read_IT+0x100>)
2000baf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
2000baf4:	68fb      	ldr	r3, [r7, #12]
2000baf6:	4a1c      	ldr	r2, [pc, #112]	@ (2000bb68 <HAL_I2C_Mem_Read_IT+0x104>)
2000baf8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
2000bafa:	897a      	ldrh	r2, [r7, #10]
2000bafc:	68fb      	ldr	r3, [r7, #12]
2000bafe:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2000bb00:	88fb      	ldrh	r3, [r7, #6]
2000bb02:	2b01      	cmp	r3, #1
2000bb04:	d109      	bne.n	2000bb1a <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000bb06:	893b      	ldrh	r3, [r7, #8]
2000bb08:	b2da      	uxtb	r2, r3
2000bb0a:	68fb      	ldr	r3, [r7, #12]
2000bb0c:	681b      	ldr	r3, [r3, #0]
2000bb0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2000bb10:	68fb      	ldr	r3, [r7, #12]
2000bb12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
2000bb16:	651a      	str	r2, [r3, #80]	@ 0x50
2000bb18:	e00b      	b.n	2000bb32 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000bb1a:	893b      	ldrh	r3, [r7, #8]
2000bb1c:	0a1b      	lsrs	r3, r3, #8
2000bb1e:	b29b      	uxth	r3, r3
2000bb20:	b2da      	uxtb	r2, r3
2000bb22:	68fb      	ldr	r3, [r7, #12]
2000bb24:	681b      	ldr	r3, [r3, #0]
2000bb26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2000bb28:	893b      	ldrh	r3, [r7, #8]
2000bb2a:	b2db      	uxtb	r3, r3
2000bb2c:	461a      	mov	r2, r3
2000bb2e:	68fb      	ldr	r3, [r7, #12]
2000bb30:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2000bb32:	88fb      	ldrh	r3, [r7, #6]
2000bb34:	b2da      	uxtb	r2, r3
2000bb36:	8979      	ldrh	r1, [r7, #10]
2000bb38:	4b0c      	ldr	r3, [pc, #48]	@ (2000bb6c <HAL_I2C_Mem_Read_IT+0x108>)
2000bb3a:	9300      	str	r3, [sp, #0]
2000bb3c:	2300      	movs	r3, #0
2000bb3e:	68f8      	ldr	r0, [r7, #12]
2000bb40:	f003 feae 	bl	2000f8a0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000bb44:	68fb      	ldr	r3, [r7, #12]
2000bb46:	2200      	movs	r2, #0
2000bb48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000bb4c:	2101      	movs	r1, #1
2000bb4e:	68f8      	ldr	r0, [r7, #12]
2000bb50:	f003 fed8 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000bb54:	2300      	movs	r3, #0
2000bb56:	e000      	b.n	2000bb5a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2000bb58:	2302      	movs	r3, #2
  }
}
2000bb5a:	4618      	mov	r0, r3
2000bb5c:	3710      	adds	r7, #16
2000bb5e:	46bd      	mov	sp, r7
2000bb60:	bd80      	pop	{r7, pc}
2000bb62:	bf00      	nop
2000bb64:	ffff0000 	.word	0xffff0000
2000bb68:	2000d589 	.word	0x2000d589
2000bb6c:	80002000 	.word	0x80002000

2000bb70 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2000bb70:	b580      	push	{r7, lr}
2000bb72:	b088      	sub	sp, #32
2000bb74:	af02      	add	r7, sp, #8
2000bb76:	60f8      	str	r0, [r7, #12]
2000bb78:	4608      	mov	r0, r1
2000bb7a:	4611      	mov	r1, r2
2000bb7c:	461a      	mov	r2, r3
2000bb7e:	4603      	mov	r3, r0
2000bb80:	817b      	strh	r3, [r7, #10]
2000bb82:	460b      	mov	r3, r1
2000bb84:	813b      	strh	r3, [r7, #8]
2000bb86:	4613      	mov	r3, r2
2000bb88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000bb8a:	68fb      	ldr	r3, [r7, #12]
2000bb8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000bb90:	b2db      	uxtb	r3, r3
2000bb92:	2b20      	cmp	r3, #32
2000bb94:	f040 80c3 	bne.w	2000bd1e <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
2000bb98:	6a3b      	ldr	r3, [r7, #32]
2000bb9a:	2b00      	cmp	r3, #0
2000bb9c:	d002      	beq.n	2000bba4 <HAL_I2C_Mem_Write_DMA+0x34>
2000bb9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
2000bba0:	2b00      	cmp	r3, #0
2000bba2:	d105      	bne.n	2000bbb0 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000bba4:	68fb      	ldr	r3, [r7, #12]
2000bba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000bbaa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000bbac:	2301      	movs	r3, #1
2000bbae:	e0b7      	b.n	2000bd20 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000bbb0:	68fb      	ldr	r3, [r7, #12]
2000bbb2:	681b      	ldr	r3, [r3, #0]
2000bbb4:	699b      	ldr	r3, [r3, #24]
2000bbb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000bbba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000bbbe:	d101      	bne.n	2000bbc4 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
2000bbc0:	2302      	movs	r3, #2
2000bbc2:	e0ad      	b.n	2000bd20 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000bbc4:	68fb      	ldr	r3, [r7, #12]
2000bbc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000bbca:	2b01      	cmp	r3, #1
2000bbcc:	d101      	bne.n	2000bbd2 <HAL_I2C_Mem_Write_DMA+0x62>
2000bbce:	2302      	movs	r3, #2
2000bbd0:	e0a6      	b.n	2000bd20 <HAL_I2C_Mem_Write_DMA+0x1b0>
2000bbd2:	68fb      	ldr	r3, [r7, #12]
2000bbd4:	2201      	movs	r2, #1
2000bbd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000bbda:	68fb      	ldr	r3, [r7, #12]
2000bbdc:	2221      	movs	r2, #33	@ 0x21
2000bbde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2000bbe2:	68fb      	ldr	r3, [r7, #12]
2000bbe4:	2240      	movs	r2, #64	@ 0x40
2000bbe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000bbea:	68fb      	ldr	r3, [r7, #12]
2000bbec:	2200      	movs	r2, #0
2000bbee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000bbf0:	68fb      	ldr	r3, [r7, #12]
2000bbf2:	6a3a      	ldr	r2, [r7, #32]
2000bbf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000bbf6:	68fb      	ldr	r3, [r7, #12]
2000bbf8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
2000bbfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000bbfc:	68fb      	ldr	r3, [r7, #12]
2000bbfe:	4a4a      	ldr	r2, [pc, #296]	@ (2000bd28 <HAL_I2C_Mem_Write_DMA+0x1b8>)
2000bc00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
2000bc02:	68fb      	ldr	r3, [r7, #12]
2000bc04:	4a49      	ldr	r2, [pc, #292]	@ (2000bd2c <HAL_I2C_Mem_Write_DMA+0x1bc>)
2000bc06:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
2000bc08:	897a      	ldrh	r2, [r7, #10]
2000bc0a:	68fb      	ldr	r3, [r7, #12]
2000bc0c:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000bc0e:	68fb      	ldr	r3, [r7, #12]
2000bc10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000bc12:	b29b      	uxth	r3, r3
2000bc14:	2bff      	cmp	r3, #255	@ 0xff
2000bc16:	d903      	bls.n	2000bc20 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000bc18:	68fb      	ldr	r3, [r7, #12]
2000bc1a:	22ff      	movs	r2, #255	@ 0xff
2000bc1c:	851a      	strh	r2, [r3, #40]	@ 0x28
2000bc1e:	e004      	b.n	2000bc2a <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000bc20:	68fb      	ldr	r3, [r7, #12]
2000bc22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000bc24:	b29a      	uxth	r2, r3
2000bc26:	68fb      	ldr	r3, [r7, #12]
2000bc28:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2000bc2a:	88fb      	ldrh	r3, [r7, #6]
2000bc2c:	2b01      	cmp	r3, #1
2000bc2e:	d109      	bne.n	2000bc44 <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000bc30:	893b      	ldrh	r3, [r7, #8]
2000bc32:	b2da      	uxtb	r2, r3
2000bc34:	68fb      	ldr	r3, [r7, #12]
2000bc36:	681b      	ldr	r3, [r3, #0]
2000bc38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2000bc3a:	68fb      	ldr	r3, [r7, #12]
2000bc3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
2000bc40:	651a      	str	r2, [r3, #80]	@ 0x50
2000bc42:	e00b      	b.n	2000bc5c <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000bc44:	893b      	ldrh	r3, [r7, #8]
2000bc46:	0a1b      	lsrs	r3, r3, #8
2000bc48:	b29b      	uxth	r3, r3
2000bc4a:	b2da      	uxtb	r2, r3
2000bc4c:	68fb      	ldr	r3, [r7, #12]
2000bc4e:	681b      	ldr	r3, [r3, #0]
2000bc50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2000bc52:	893b      	ldrh	r3, [r7, #8]
2000bc54:	b2db      	uxtb	r3, r3
2000bc56:	461a      	mov	r2, r3
2000bc58:	68fb      	ldr	r3, [r7, #12]
2000bc5a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
2000bc5c:	68fb      	ldr	r3, [r7, #12]
2000bc5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000bc60:	2b00      	cmp	r3, #0
2000bc62:	d020      	beq.n	2000bca6 <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2000bc64:	68fb      	ldr	r3, [r7, #12]
2000bc66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000bc68:	4a31      	ldr	r2, [pc, #196]	@ (2000bd30 <HAL_I2C_Mem_Write_DMA+0x1c0>)
2000bc6a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2000bc6c:	68fb      	ldr	r3, [r7, #12]
2000bc6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000bc70:	4a30      	ldr	r2, [pc, #192]	@ (2000bd34 <HAL_I2C_Mem_Write_DMA+0x1c4>)
2000bc72:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2000bc74:	68fb      	ldr	r3, [r7, #12]
2000bc76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000bc78:	2200      	movs	r2, #0
2000bc7a:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2000bc7c:	68fb      	ldr	r3, [r7, #12]
2000bc7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000bc80:	2200      	movs	r2, #0
2000bc82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2000bc84:	68fb      	ldr	r3, [r7, #12]
2000bc86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2000bc88:	6a39      	ldr	r1, [r7, #32]
2000bc8a:	68fb      	ldr	r3, [r7, #12]
2000bc8c:	681b      	ldr	r3, [r3, #0]
2000bc8e:	3328      	adds	r3, #40	@ 0x28
2000bc90:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2000bc92:	68fb      	ldr	r3, [r7, #12]
2000bc94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2000bc96:	f7f8 f8d5 	bl	20003e44 <HAL_DMA_Start_IT>
2000bc9a:	4603      	mov	r3, r0
2000bc9c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2000bc9e:	7dfb      	ldrb	r3, [r7, #23]
2000bca0:	2b00      	cmp	r3, #0
2000bca2:	d128      	bne.n	2000bcf6 <HAL_I2C_Mem_Write_DMA+0x186>
2000bca4:	e013      	b.n	2000bcce <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
2000bca6:	68fb      	ldr	r3, [r7, #12]
2000bca8:	2220      	movs	r2, #32
2000bcaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000bcae:	68fb      	ldr	r3, [r7, #12]
2000bcb0:	2200      	movs	r2, #0
2000bcb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000bcb6:	68fb      	ldr	r3, [r7, #12]
2000bcb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000bcba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000bcbe:	68fb      	ldr	r3, [r7, #12]
2000bcc0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000bcc2:	68fb      	ldr	r3, [r7, #12]
2000bcc4:	2200      	movs	r2, #0
2000bcc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000bcca:	2301      	movs	r3, #1
2000bccc:	e028      	b.n	2000bd20 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2000bcce:	88fb      	ldrh	r3, [r7, #6]
2000bcd0:	b2da      	uxtb	r2, r3
2000bcd2:	8979      	ldrh	r1, [r7, #10]
2000bcd4:	4b18      	ldr	r3, [pc, #96]	@ (2000bd38 <HAL_I2C_Mem_Write_DMA+0x1c8>)
2000bcd6:	9300      	str	r3, [sp, #0]
2000bcd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000bcdc:	68f8      	ldr	r0, [r7, #12]
2000bcde:	f003 fddf 	bl	2000f8a0 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000bce2:	68fb      	ldr	r3, [r7, #12]
2000bce4:	2200      	movs	r2, #0
2000bce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000bcea:	2101      	movs	r1, #1
2000bcec:	68f8      	ldr	r0, [r7, #12]
2000bcee:	f003 fe09 	bl	2000f904 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2000bcf2:	2300      	movs	r3, #0
2000bcf4:	e014      	b.n	2000bd20 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
2000bcf6:	68fb      	ldr	r3, [r7, #12]
2000bcf8:	2220      	movs	r2, #32
2000bcfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000bcfe:	68fb      	ldr	r3, [r7, #12]
2000bd00:	2200      	movs	r2, #0
2000bd02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000bd06:	68fb      	ldr	r3, [r7, #12]
2000bd08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000bd0a:	f043 0210 	orr.w	r2, r3, #16
2000bd0e:	68fb      	ldr	r3, [r7, #12]
2000bd10:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000bd12:	68fb      	ldr	r3, [r7, #12]
2000bd14:	2200      	movs	r2, #0
2000bd16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000bd1a:	2301      	movs	r3, #1
2000bd1c:	e000      	b.n	2000bd20 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
2000bd1e:	2302      	movs	r3, #2
  }
}
2000bd20:	4618      	mov	r0, r3
2000bd22:	3718      	adds	r7, #24
2000bd24:	46bd      	mov	sp, r7
2000bd26:	bd80      	pop	{r7, pc}
2000bd28:	ffff0000 	.word	0xffff0000
2000bd2c:	2000db9d 	.word	0x2000db9d
2000bd30:	2000ee7f 	.word	0x2000ee7f
2000bd34:	2000f151 	.word	0x2000f151
2000bd38:	80002000 	.word	0x80002000

2000bd3c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2000bd3c:	b580      	push	{r7, lr}
2000bd3e:	b088      	sub	sp, #32
2000bd40:	af02      	add	r7, sp, #8
2000bd42:	60f8      	str	r0, [r7, #12]
2000bd44:	4608      	mov	r0, r1
2000bd46:	4611      	mov	r1, r2
2000bd48:	461a      	mov	r2, r3
2000bd4a:	4603      	mov	r3, r0
2000bd4c:	817b      	strh	r3, [r7, #10]
2000bd4e:	460b      	mov	r3, r1
2000bd50:	813b      	strh	r3, [r7, #8]
2000bd52:	4613      	mov	r3, r2
2000bd54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000bd56:	68fb      	ldr	r3, [r7, #12]
2000bd58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000bd5c:	b2db      	uxtb	r3, r3
2000bd5e:	2b20      	cmp	r3, #32
2000bd60:	f040 80c2 	bne.w	2000bee8 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
2000bd64:	6a3b      	ldr	r3, [r7, #32]
2000bd66:	2b00      	cmp	r3, #0
2000bd68:	d002      	beq.n	2000bd70 <HAL_I2C_Mem_Read_DMA+0x34>
2000bd6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
2000bd6c:	2b00      	cmp	r3, #0
2000bd6e:	d105      	bne.n	2000bd7c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000bd70:	68fb      	ldr	r3, [r7, #12]
2000bd72:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000bd76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000bd78:	2301      	movs	r3, #1
2000bd7a:	e0b6      	b.n	2000beea <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000bd7c:	68fb      	ldr	r3, [r7, #12]
2000bd7e:	681b      	ldr	r3, [r3, #0]
2000bd80:	699b      	ldr	r3, [r3, #24]
2000bd82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000bd86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000bd8a:	d101      	bne.n	2000bd90 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
2000bd8c:	2302      	movs	r3, #2
2000bd8e:	e0ac      	b.n	2000beea <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000bd90:	68fb      	ldr	r3, [r7, #12]
2000bd92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000bd96:	2b01      	cmp	r3, #1
2000bd98:	d101      	bne.n	2000bd9e <HAL_I2C_Mem_Read_DMA+0x62>
2000bd9a:	2302      	movs	r3, #2
2000bd9c:	e0a5      	b.n	2000beea <HAL_I2C_Mem_Read_DMA+0x1ae>
2000bd9e:	68fb      	ldr	r3, [r7, #12]
2000bda0:	2201      	movs	r2, #1
2000bda2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000bda6:	68fb      	ldr	r3, [r7, #12]
2000bda8:	2222      	movs	r2, #34	@ 0x22
2000bdaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2000bdae:	68fb      	ldr	r3, [r7, #12]
2000bdb0:	2240      	movs	r2, #64	@ 0x40
2000bdb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000bdb6:	68fb      	ldr	r3, [r7, #12]
2000bdb8:	2200      	movs	r2, #0
2000bdba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000bdbc:	68fb      	ldr	r3, [r7, #12]
2000bdbe:	6a3a      	ldr	r2, [r7, #32]
2000bdc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000bdc2:	68fb      	ldr	r3, [r7, #12]
2000bdc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
2000bdc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000bdc8:	68fb      	ldr	r3, [r7, #12]
2000bdca:	4a4a      	ldr	r2, [pc, #296]	@ (2000bef4 <HAL_I2C_Mem_Read_DMA+0x1b8>)
2000bdcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
2000bdce:	68fb      	ldr	r3, [r7, #12]
2000bdd0:	4a49      	ldr	r2, [pc, #292]	@ (2000bef8 <HAL_I2C_Mem_Read_DMA+0x1bc>)
2000bdd2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
2000bdd4:	897a      	ldrh	r2, [r7, #10]
2000bdd6:	68fb      	ldr	r3, [r7, #12]
2000bdd8:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000bdda:	68fb      	ldr	r3, [r7, #12]
2000bddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000bdde:	b29b      	uxth	r3, r3
2000bde0:	2bff      	cmp	r3, #255	@ 0xff
2000bde2:	d903      	bls.n	2000bdec <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000bde4:	68fb      	ldr	r3, [r7, #12]
2000bde6:	22ff      	movs	r2, #255	@ 0xff
2000bde8:	851a      	strh	r2, [r3, #40]	@ 0x28
2000bdea:	e004      	b.n	2000bdf6 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000bdec:	68fb      	ldr	r3, [r7, #12]
2000bdee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000bdf0:	b29a      	uxth	r2, r3
2000bdf2:	68fb      	ldr	r3, [r7, #12]
2000bdf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2000bdf6:	88fb      	ldrh	r3, [r7, #6]
2000bdf8:	2b01      	cmp	r3, #1
2000bdfa:	d109      	bne.n	2000be10 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000bdfc:	893b      	ldrh	r3, [r7, #8]
2000bdfe:	b2da      	uxtb	r2, r3
2000be00:	68fb      	ldr	r3, [r7, #12]
2000be02:	681b      	ldr	r3, [r3, #0]
2000be04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2000be06:	68fb      	ldr	r3, [r7, #12]
2000be08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
2000be0c:	651a      	str	r2, [r3, #80]	@ 0x50
2000be0e:	e00b      	b.n	2000be28 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000be10:	893b      	ldrh	r3, [r7, #8]
2000be12:	0a1b      	lsrs	r3, r3, #8
2000be14:	b29b      	uxth	r3, r3
2000be16:	b2da      	uxtb	r2, r3
2000be18:	68fb      	ldr	r3, [r7, #12]
2000be1a:	681b      	ldr	r3, [r3, #0]
2000be1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2000be1e:	893b      	ldrh	r3, [r7, #8]
2000be20:	b2db      	uxtb	r3, r3
2000be22:	461a      	mov	r2, r3
2000be24:	68fb      	ldr	r3, [r7, #12]
2000be26:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
2000be28:	68fb      	ldr	r3, [r7, #12]
2000be2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000be2c:	2b00      	cmp	r3, #0
2000be2e:	d020      	beq.n	2000be72 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2000be30:	68fb      	ldr	r3, [r7, #12]
2000be32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000be34:	4a31      	ldr	r2, [pc, #196]	@ (2000befc <HAL_I2C_Mem_Read_DMA+0x1c0>)
2000be36:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2000be38:	68fb      	ldr	r3, [r7, #12]
2000be3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000be3c:	4a30      	ldr	r2, [pc, #192]	@ (2000bf00 <HAL_I2C_Mem_Read_DMA+0x1c4>)
2000be3e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2000be40:	68fb      	ldr	r3, [r7, #12]
2000be42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000be44:	2200      	movs	r2, #0
2000be46:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2000be48:	68fb      	ldr	r3, [r7, #12]
2000be4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000be4c:	2200      	movs	r2, #0
2000be4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000be50:	68fb      	ldr	r3, [r7, #12]
2000be52:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2000be54:	68fb      	ldr	r3, [r7, #12]
2000be56:	681b      	ldr	r3, [r3, #0]
2000be58:	3324      	adds	r3, #36	@ 0x24
2000be5a:	4619      	mov	r1, r3
2000be5c:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
2000be5e:	68fb      	ldr	r3, [r7, #12]
2000be60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000be62:	f7f7 ffef 	bl	20003e44 <HAL_DMA_Start_IT>
2000be66:	4603      	mov	r3, r0
2000be68:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2000be6a:	7dfb      	ldrb	r3, [r7, #23]
2000be6c:	2b00      	cmp	r3, #0
2000be6e:	d127      	bne.n	2000bec0 <HAL_I2C_Mem_Read_DMA+0x184>
2000be70:	e013      	b.n	2000be9a <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
2000be72:	68fb      	ldr	r3, [r7, #12]
2000be74:	2220      	movs	r2, #32
2000be76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000be7a:	68fb      	ldr	r3, [r7, #12]
2000be7c:	2200      	movs	r2, #0
2000be7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000be82:	68fb      	ldr	r3, [r7, #12]
2000be84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000be86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000be8a:	68fb      	ldr	r3, [r7, #12]
2000be8c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000be8e:	68fb      	ldr	r3, [r7, #12]
2000be90:	2200      	movs	r2, #0
2000be92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000be96:	2301      	movs	r3, #1
2000be98:	e027      	b.n	2000beea <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2000be9a:	88fb      	ldrh	r3, [r7, #6]
2000be9c:	b2da      	uxtb	r2, r3
2000be9e:	8979      	ldrh	r1, [r7, #10]
2000bea0:	4b18      	ldr	r3, [pc, #96]	@ (2000bf04 <HAL_I2C_Mem_Read_DMA+0x1c8>)
2000bea2:	9300      	str	r3, [sp, #0]
2000bea4:	2300      	movs	r3, #0
2000bea6:	68f8      	ldr	r0, [r7, #12]
2000bea8:	f003 fcfa 	bl	2000f8a0 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000beac:	68fb      	ldr	r3, [r7, #12]
2000beae:	2200      	movs	r2, #0
2000beb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000beb4:	2101      	movs	r1, #1
2000beb6:	68f8      	ldr	r0, [r7, #12]
2000beb8:	f003 fd24 	bl	2000f904 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2000bebc:	2300      	movs	r3, #0
2000bebe:	e014      	b.n	2000beea <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
2000bec0:	68fb      	ldr	r3, [r7, #12]
2000bec2:	2220      	movs	r2, #32
2000bec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000bec8:	68fb      	ldr	r3, [r7, #12]
2000beca:	2200      	movs	r2, #0
2000becc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000bed0:	68fb      	ldr	r3, [r7, #12]
2000bed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000bed4:	f043 0210 	orr.w	r2, r3, #16
2000bed8:	68fb      	ldr	r3, [r7, #12]
2000beda:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000bedc:	68fb      	ldr	r3, [r7, #12]
2000bede:	2200      	movs	r2, #0
2000bee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000bee4:	2301      	movs	r3, #1
2000bee6:	e000      	b.n	2000beea <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
2000bee8:	2302      	movs	r3, #2
  }
}
2000beea:	4618      	mov	r0, r3
2000beec:	3718      	adds	r7, #24
2000beee:	46bd      	mov	sp, r7
2000bef0:	bd80      	pop	{r7, pc}
2000bef2:	bf00      	nop
2000bef4:	ffff0000 	.word	0xffff0000
2000bef8:	2000db9d 	.word	0x2000db9d
2000befc:	2000ef55 	.word	0x2000ef55
2000bf00:	2000f151 	.word	0x2000f151
2000bf04:	80002000 	.word	0x80002000

2000bf08 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
2000bf08:	b580      	push	{r7, lr}
2000bf0a:	b08a      	sub	sp, #40	@ 0x28
2000bf0c:	af02      	add	r7, sp, #8
2000bf0e:	60f8      	str	r0, [r7, #12]
2000bf10:	607a      	str	r2, [r7, #4]
2000bf12:	603b      	str	r3, [r7, #0]
2000bf14:	460b      	mov	r3, r1
2000bf16:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
2000bf18:	2300      	movs	r3, #0
2000bf1a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000bf1c:	68fb      	ldr	r3, [r7, #12]
2000bf1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000bf22:	b2db      	uxtb	r3, r3
2000bf24:	2b20      	cmp	r3, #32
2000bf26:	f040 80d2 	bne.w	2000c0ce <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000bf2a:	68fb      	ldr	r3, [r7, #12]
2000bf2c:	681b      	ldr	r3, [r3, #0]
2000bf2e:	699b      	ldr	r3, [r3, #24]
2000bf30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000bf34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000bf38:	d101      	bne.n	2000bf3e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
2000bf3a:	2302      	movs	r3, #2
2000bf3c:	e0c8      	b.n	2000c0d0 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000bf3e:	68fb      	ldr	r3, [r7, #12]
2000bf40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000bf44:	2b01      	cmp	r3, #1
2000bf46:	d101      	bne.n	2000bf4c <HAL_I2C_IsDeviceReady+0x44>
2000bf48:	2302      	movs	r3, #2
2000bf4a:	e0c1      	b.n	2000c0d0 <HAL_I2C_IsDeviceReady+0x1c8>
2000bf4c:	68fb      	ldr	r3, [r7, #12]
2000bf4e:	2201      	movs	r2, #1
2000bf50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2000bf54:	68fb      	ldr	r3, [r7, #12]
2000bf56:	2224      	movs	r2, #36	@ 0x24
2000bf58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000bf5c:	68fb      	ldr	r3, [r7, #12]
2000bf5e:	2200      	movs	r2, #0
2000bf60:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
2000bf62:	68fb      	ldr	r3, [r7, #12]
2000bf64:	68db      	ldr	r3, [r3, #12]
2000bf66:	2b01      	cmp	r3, #1
2000bf68:	d105      	bne.n	2000bf76 <HAL_I2C_IsDeviceReady+0x6e>
2000bf6a:	897b      	ldrh	r3, [r7, #10]
2000bf6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
2000bf70:	4b59      	ldr	r3, [pc, #356]	@ (2000c0d8 <HAL_I2C_IsDeviceReady+0x1d0>)
2000bf72:	4313      	orrs	r3, r2
2000bf74:	e004      	b.n	2000bf80 <HAL_I2C_IsDeviceReady+0x78>
2000bf76:	897b      	ldrh	r3, [r7, #10]
2000bf78:	f3c3 0209 	ubfx	r2, r3, #0, #10
2000bf7c:	4b57      	ldr	r3, [pc, #348]	@ (2000c0dc <HAL_I2C_IsDeviceReady+0x1d4>)
2000bf7e:	4313      	orrs	r3, r2
2000bf80:	68fa      	ldr	r2, [r7, #12]
2000bf82:	6812      	ldr	r2, [r2, #0]
2000bf84:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
2000bf86:	f7f6 f99b 	bl	200022c0 <HAL_GetTick>
2000bf8a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2000bf8c:	68fb      	ldr	r3, [r7, #12]
2000bf8e:	681b      	ldr	r3, [r3, #0]
2000bf90:	699b      	ldr	r3, [r3, #24]
2000bf92:	f003 0320 	and.w	r3, r3, #32
2000bf96:	2b20      	cmp	r3, #32
2000bf98:	bf0c      	ite	eq
2000bf9a:	2301      	moveq	r3, #1
2000bf9c:	2300      	movne	r3, #0
2000bf9e:	b2db      	uxtb	r3, r3
2000bfa0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2000bfa2:	68fb      	ldr	r3, [r7, #12]
2000bfa4:	681b      	ldr	r3, [r3, #0]
2000bfa6:	699b      	ldr	r3, [r3, #24]
2000bfa8:	f003 0310 	and.w	r3, r3, #16
2000bfac:	2b10      	cmp	r3, #16
2000bfae:	bf0c      	ite	eq
2000bfb0:	2301      	moveq	r3, #1
2000bfb2:	2300      	movne	r3, #0
2000bfb4:	b2db      	uxtb	r3, r3
2000bfb6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
2000bfb8:	e034      	b.n	2000c024 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
2000bfba:	683b      	ldr	r3, [r7, #0]
2000bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
2000bfc0:	d01a      	beq.n	2000bff8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2000bfc2:	f7f6 f97d 	bl	200022c0 <HAL_GetTick>
2000bfc6:	4602      	mov	r2, r0
2000bfc8:	69bb      	ldr	r3, [r7, #24]
2000bfca:	1ad3      	subs	r3, r2, r3
2000bfcc:	683a      	ldr	r2, [r7, #0]
2000bfce:	429a      	cmp	r2, r3
2000bfd0:	d302      	bcc.n	2000bfd8 <HAL_I2C_IsDeviceReady+0xd0>
2000bfd2:	683b      	ldr	r3, [r7, #0]
2000bfd4:	2b00      	cmp	r3, #0
2000bfd6:	d10f      	bne.n	2000bff8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
2000bfd8:	68fb      	ldr	r3, [r7, #12]
2000bfda:	2220      	movs	r2, #32
2000bfdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000bfe0:	68fb      	ldr	r3, [r7, #12]
2000bfe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000bfe4:	f043 0220 	orr.w	r2, r3, #32
2000bfe8:	68fb      	ldr	r3, [r7, #12]
2000bfea:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
2000bfec:	68fb      	ldr	r3, [r7, #12]
2000bfee:	2200      	movs	r2, #0
2000bff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
2000bff4:	2301      	movs	r3, #1
2000bff6:	e06b      	b.n	2000c0d0 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2000bff8:	68fb      	ldr	r3, [r7, #12]
2000bffa:	681b      	ldr	r3, [r3, #0]
2000bffc:	699b      	ldr	r3, [r3, #24]
2000bffe:	f003 0320 	and.w	r3, r3, #32
2000c002:	2b20      	cmp	r3, #32
2000c004:	bf0c      	ite	eq
2000c006:	2301      	moveq	r3, #1
2000c008:	2300      	movne	r3, #0
2000c00a:	b2db      	uxtb	r3, r3
2000c00c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2000c00e:	68fb      	ldr	r3, [r7, #12]
2000c010:	681b      	ldr	r3, [r3, #0]
2000c012:	699b      	ldr	r3, [r3, #24]
2000c014:	f003 0310 	and.w	r3, r3, #16
2000c018:	2b10      	cmp	r3, #16
2000c01a:	bf0c      	ite	eq
2000c01c:	2301      	moveq	r3, #1
2000c01e:	2300      	movne	r3, #0
2000c020:	b2db      	uxtb	r3, r3
2000c022:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
2000c024:	7ffb      	ldrb	r3, [r7, #31]
2000c026:	2b00      	cmp	r3, #0
2000c028:	d102      	bne.n	2000c030 <HAL_I2C_IsDeviceReady+0x128>
2000c02a:	7fbb      	ldrb	r3, [r7, #30]
2000c02c:	2b00      	cmp	r3, #0
2000c02e:	d0c4      	beq.n	2000bfba <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
2000c030:	68fb      	ldr	r3, [r7, #12]
2000c032:	681b      	ldr	r3, [r3, #0]
2000c034:	699b      	ldr	r3, [r3, #24]
2000c036:	f003 0310 	and.w	r3, r3, #16
2000c03a:	2b10      	cmp	r3, #16
2000c03c:	d01a      	beq.n	2000c074 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2000c03e:	69bb      	ldr	r3, [r7, #24]
2000c040:	9300      	str	r3, [sp, #0]
2000c042:	683b      	ldr	r3, [r7, #0]
2000c044:	2200      	movs	r2, #0
2000c046:	2120      	movs	r1, #32
2000c048:	68f8      	ldr	r0, [r7, #12]
2000c04a:	f003 f9d9 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000c04e:	4603      	mov	r3, r0
2000c050:	2b00      	cmp	r3, #0
2000c052:	d001      	beq.n	2000c058 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
2000c054:	2301      	movs	r3, #1
2000c056:	e03b      	b.n	2000c0d0 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000c058:	68fb      	ldr	r3, [r7, #12]
2000c05a:	681b      	ldr	r3, [r3, #0]
2000c05c:	2220      	movs	r2, #32
2000c05e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
2000c060:	68fb      	ldr	r3, [r7, #12]
2000c062:	2220      	movs	r2, #32
2000c064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000c068:	68fb      	ldr	r3, [r7, #12]
2000c06a:	2200      	movs	r2, #0
2000c06c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
2000c070:	2300      	movs	r3, #0
2000c072:	e02d      	b.n	2000c0d0 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2000c074:	69bb      	ldr	r3, [r7, #24]
2000c076:	9300      	str	r3, [sp, #0]
2000c078:	683b      	ldr	r3, [r7, #0]
2000c07a:	2200      	movs	r2, #0
2000c07c:	2120      	movs	r1, #32
2000c07e:	68f8      	ldr	r0, [r7, #12]
2000c080:	f003 f9be 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000c084:	4603      	mov	r3, r0
2000c086:	2b00      	cmp	r3, #0
2000c088:	d001      	beq.n	2000c08e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
2000c08a:	2301      	movs	r3, #1
2000c08c:	e020      	b.n	2000c0d0 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000c08e:	68fb      	ldr	r3, [r7, #12]
2000c090:	681b      	ldr	r3, [r3, #0]
2000c092:	2210      	movs	r2, #16
2000c094:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000c096:	68fb      	ldr	r3, [r7, #12]
2000c098:	681b      	ldr	r3, [r3, #0]
2000c09a:	2220      	movs	r2, #32
2000c09c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
2000c09e:	697b      	ldr	r3, [r7, #20]
2000c0a0:	3301      	adds	r3, #1
2000c0a2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
2000c0a4:	697b      	ldr	r3, [r7, #20]
2000c0a6:	687a      	ldr	r2, [r7, #4]
2000c0a8:	429a      	cmp	r2, r3
2000c0aa:	f63f af5a 	bhi.w	2000bf62 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
2000c0ae:	68fb      	ldr	r3, [r7, #12]
2000c0b0:	2220      	movs	r2, #32
2000c0b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000c0b6:	68fb      	ldr	r3, [r7, #12]
2000c0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000c0ba:	f043 0220 	orr.w	r2, r3, #32
2000c0be:	68fb      	ldr	r3, [r7, #12]
2000c0c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000c0c2:	68fb      	ldr	r3, [r7, #12]
2000c0c4:	2200      	movs	r2, #0
2000c0c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
2000c0ca:	2301      	movs	r3, #1
2000c0cc:	e000      	b.n	2000c0d0 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
2000c0ce:	2302      	movs	r3, #2
  }
}
2000c0d0:	4618      	mov	r0, r3
2000c0d2:	3720      	adds	r7, #32
2000c0d4:	46bd      	mov	sp, r7
2000c0d6:	bd80      	pop	{r7, pc}
2000c0d8:	02002000 	.word	0x02002000
2000c0dc:	02002800 	.word	0x02002800

2000c0e0 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2000c0e0:	b580      	push	{r7, lr}
2000c0e2:	b08a      	sub	sp, #40	@ 0x28
2000c0e4:	af02      	add	r7, sp, #8
2000c0e6:	60f8      	str	r0, [r7, #12]
2000c0e8:	607a      	str	r2, [r7, #4]
2000c0ea:	461a      	mov	r2, r3
2000c0ec:	460b      	mov	r3, r1
2000c0ee:	817b      	strh	r3, [r7, #10]
2000c0f0:	4613      	mov	r3, r2
2000c0f2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2000c0f4:	4b57      	ldr	r3, [pc, #348]	@ (2000c254 <HAL_I2C_Master_Seq_Transmit_IT+0x174>)
2000c0f6:	61bb      	str	r3, [r7, #24]
  uint32_t sizetoxfer = 0U;
2000c0f8:	2300      	movs	r3, #0
2000c0fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000c0fc:	68fb      	ldr	r3, [r7, #12]
2000c0fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000c102:	b2db      	uxtb	r3, r3
2000c104:	2b20      	cmp	r3, #32
2000c106:	f040 809f 	bne.w	2000c248 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000c10a:	68fb      	ldr	r3, [r7, #12]
2000c10c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000c110:	2b01      	cmp	r3, #1
2000c112:	d101      	bne.n	2000c118 <HAL_I2C_Master_Seq_Transmit_IT+0x38>
2000c114:	2302      	movs	r3, #2
2000c116:	e098      	b.n	2000c24a <HAL_I2C_Master_Seq_Transmit_IT+0x16a>
2000c118:	68fb      	ldr	r3, [r7, #12]
2000c11a:	2201      	movs	r2, #1
2000c11c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2000c120:	68fb      	ldr	r3, [r7, #12]
2000c122:	2221      	movs	r2, #33	@ 0x21
2000c124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000c128:	68fb      	ldr	r3, [r7, #12]
2000c12a:	2210      	movs	r2, #16
2000c12c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000c130:	68fb      	ldr	r3, [r7, #12]
2000c132:	2200      	movs	r2, #0
2000c134:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000c136:	68fb      	ldr	r3, [r7, #12]
2000c138:	687a      	ldr	r2, [r7, #4]
2000c13a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000c13c:	68fb      	ldr	r3, [r7, #12]
2000c13e:	893a      	ldrh	r2, [r7, #8]
2000c140:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
2000c142:	68fb      	ldr	r3, [r7, #12]
2000c144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
2000c146:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2000c148:	68fb      	ldr	r3, [r7, #12]
2000c14a:	4a43      	ldr	r2, [pc, #268]	@ (2000c258 <HAL_I2C_Master_Seq_Transmit_IT+0x178>)
2000c14c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000c14e:	68fb      	ldr	r3, [r7, #12]
2000c150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c152:	b29b      	uxth	r3, r3
2000c154:	2bff      	cmp	r3, #255	@ 0xff
2000c156:	d906      	bls.n	2000c166 <HAL_I2C_Master_Seq_Transmit_IT+0x86>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000c158:	68fb      	ldr	r3, [r7, #12]
2000c15a:	22ff      	movs	r2, #255	@ 0xff
2000c15c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000c15e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000c162:	61fb      	str	r3, [r7, #28]
2000c164:	e007      	b.n	2000c176 <HAL_I2C_Master_Seq_Transmit_IT+0x96>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000c166:	68fb      	ldr	r3, [r7, #12]
2000c168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c16a:	b29a      	uxth	r2, r3
2000c16c:	68fb      	ldr	r3, [r7, #12]
2000c16e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
2000c170:	68fb      	ldr	r3, [r7, #12]
2000c172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c174:	61fb      	str	r3, [r7, #28]
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
2000c176:	68fb      	ldr	r3, [r7, #12]
2000c178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c17a:	2b00      	cmp	r3, #0
2000c17c:	d021      	beq.n	2000c1c2 <HAL_I2C_Master_Seq_Transmit_IT+0xe2>
2000c17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c180:	2b00      	cmp	r3, #0
2000c182:	d003      	beq.n	2000c18c <HAL_I2C_Master_Seq_Transmit_IT+0xac>
2000c184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000c18a:	d11a      	bne.n	2000c1c2 <HAL_I2C_Master_Seq_Transmit_IT+0xe2>
                                  (XferOptions == I2C_FIRST_AND_LAST_FRAME)))
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000c18c:	68fb      	ldr	r3, [r7, #12]
2000c18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000c190:	781a      	ldrb	r2, [r3, #0]
2000c192:	68fb      	ldr	r3, [r7, #12]
2000c194:	681b      	ldr	r3, [r3, #0]
2000c196:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000c198:	68fb      	ldr	r3, [r7, #12]
2000c19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000c19c:	1c5a      	adds	r2, r3, #1
2000c19e:	68fb      	ldr	r3, [r7, #12]
2000c1a0:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
2000c1a2:	68fb      	ldr	r3, [r7, #12]
2000c1a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c1a6:	617b      	str	r3, [r7, #20]
      hi2c->XferCount--;
2000c1a8:	68fb      	ldr	r3, [r7, #12]
2000c1aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c1ac:	b29b      	uxth	r3, r3
2000c1ae:	3b01      	subs	r3, #1
2000c1b0:	b29a      	uxth	r2, r3
2000c1b2:	68fb      	ldr	r3, [r7, #12]
2000c1b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000c1b6:	68fb      	ldr	r3, [r7, #12]
2000c1b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c1ba:	3b01      	subs	r3, #1
2000c1bc:	b29a      	uxth	r2, r3
2000c1be:	68fb      	ldr	r3, [r7, #12]
2000c1c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2000c1c2:	68fb      	ldr	r3, [r7, #12]
2000c1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000c1c6:	2b11      	cmp	r3, #17
2000c1c8:	d10e      	bne.n	2000c1e8 <HAL_I2C_Master_Seq_Transmit_IT+0x108>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2000c1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c1cc:	2baa      	cmp	r3, #170	@ 0xaa
2000c1ce:	d003      	beq.n	2000c1d8 <HAL_I2C_Master_Seq_Transmit_IT+0xf8>
2000c1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c1d2:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2000c1d6:	d101      	bne.n	2000c1dc <HAL_I2C_Master_Seq_Transmit_IT+0xfc>
2000c1d8:	2301      	movs	r3, #1
2000c1da:	e000      	b.n	2000c1de <HAL_I2C_Master_Seq_Transmit_IT+0xfe>
2000c1dc:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2000c1de:	2b00      	cmp	r3, #0
2000c1e0:	d102      	bne.n	2000c1e8 <HAL_I2C_Master_Seq_Transmit_IT+0x108>
    {
      xferrequest = I2C_NO_STARTSTOP;
2000c1e2:	2300      	movs	r3, #0
2000c1e4:	61bb      	str	r3, [r7, #24]
2000c1e6:	e00a      	b.n	2000c1fe <HAL_I2C_Master_Seq_Transmit_IT+0x11e>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2000c1e8:	68f8      	ldr	r0, [r7, #12]
2000c1ea:	f003 fc6d 	bl	2000fac8 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2000c1ee:	68fb      	ldr	r3, [r7, #12]
2000c1f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c1f2:	b29b      	uxth	r3, r3
2000c1f4:	2bff      	cmp	r3, #255	@ 0xff
2000c1f6:	d802      	bhi.n	2000c1fe <HAL_I2C_Master_Seq_Transmit_IT+0x11e>
      {
        xfermode = hi2c->XferOptions;
2000c1f8:	68fb      	ldr	r3, [r7, #12]
2000c1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c1fc:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
2000c1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c200:	2b00      	cmp	r3, #0
2000c202:	d003      	beq.n	2000c20c <HAL_I2C_Master_Seq_Transmit_IT+0x12c>
2000c204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000c20a:	d109      	bne.n	2000c220 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
2000c20c:	697b      	ldr	r3, [r7, #20]
2000c20e:	b2da      	uxtb	r2, r3
2000c210:	8979      	ldrh	r1, [r7, #10]
2000c212:	69bb      	ldr	r3, [r7, #24]
2000c214:	9300      	str	r3, [sp, #0]
2000c216:	69fb      	ldr	r3, [r7, #28]
2000c218:	68f8      	ldr	r0, [r7, #12]
2000c21a:	f003 fb41 	bl	2000f8a0 <I2C_TransferConfig>
2000c21e:	e009      	b.n	2000c234 <HAL_I2C_Master_Seq_Transmit_IT+0x154>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2000c220:	68fb      	ldr	r3, [r7, #12]
2000c222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c224:	b2da      	uxtb	r2, r3
2000c226:	8979      	ldrh	r1, [r7, #10]
2000c228:	69bb      	ldr	r3, [r7, #24]
2000c22a:	9300      	str	r3, [sp, #0]
2000c22c:	69fb      	ldr	r3, [r7, #28]
2000c22e:	68f8      	ldr	r0, [r7, #12]
2000c230:	f003 fb36 	bl	2000f8a0 <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000c234:	68fb      	ldr	r3, [r7, #12]
2000c236:	2200      	movs	r2, #0
2000c238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              process unlock */
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
       I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000c23c:	2101      	movs	r1, #1
2000c23e:	68f8      	ldr	r0, [r7, #12]
2000c240:	f003 fb60 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000c244:	2300      	movs	r3, #0
2000c246:	e000      	b.n	2000c24a <HAL_I2C_Master_Seq_Transmit_IT+0x16a>
  }
  else
  {
    return HAL_BUSY;
2000c248:	2302      	movs	r3, #2
  }
}
2000c24a:	4618      	mov	r0, r3
2000c24c:	3720      	adds	r7, #32
2000c24e:	46bd      	mov	sp, r7
2000c250:	bd80      	pop	{r7, pc}
2000c252:	bf00      	nop
2000c254:	80002000 	.word	0x80002000
2000c258:	2000d33b 	.word	0x2000d33b

2000c25c <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
2000c25c:	b580      	push	{r7, lr}
2000c25e:	b08a      	sub	sp, #40	@ 0x28
2000c260:	af02      	add	r7, sp, #8
2000c262:	60f8      	str	r0, [r7, #12]
2000c264:	607a      	str	r2, [r7, #4]
2000c266:	461a      	mov	r2, r3
2000c268:	460b      	mov	r3, r1
2000c26a:	817b      	strh	r3, [r7, #10]
2000c26c:	4613      	mov	r3, r2
2000c26e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2000c270:	4b90      	ldr	r3, [pc, #576]	@ (2000c4b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x258>)
2000c272:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
2000c274:	2300      	movs	r3, #0
2000c276:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000c278:	68fb      	ldr	r3, [r7, #12]
2000c27a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000c27e:	b2db      	uxtb	r3, r3
2000c280:	2b20      	cmp	r3, #32
2000c282:	f040 8135 	bne.w	2000c4f0 <HAL_I2C_Master_Seq_Transmit_DMA+0x294>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000c286:	68fb      	ldr	r3, [r7, #12]
2000c288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000c28c:	2b01      	cmp	r3, #1
2000c28e:	d101      	bne.n	2000c294 <HAL_I2C_Master_Seq_Transmit_DMA+0x38>
2000c290:	2302      	movs	r3, #2
2000c292:	e12e      	b.n	2000c4f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
2000c294:	68fb      	ldr	r3, [r7, #12]
2000c296:	2201      	movs	r2, #1
2000c298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2000c29c:	68fb      	ldr	r3, [r7, #12]
2000c29e:	2221      	movs	r2, #33	@ 0x21
2000c2a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000c2a4:	68fb      	ldr	r3, [r7, #12]
2000c2a6:	2210      	movs	r2, #16
2000c2a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000c2ac:	68fb      	ldr	r3, [r7, #12]
2000c2ae:	2200      	movs	r2, #0
2000c2b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000c2b2:	68fb      	ldr	r3, [r7, #12]
2000c2b4:	687a      	ldr	r2, [r7, #4]
2000c2b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000c2b8:	68fb      	ldr	r3, [r7, #12]
2000c2ba:	893a      	ldrh	r2, [r7, #8]
2000c2bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
2000c2be:	68fb      	ldr	r3, [r7, #12]
2000c2c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
2000c2c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2000c2c4:	68fb      	ldr	r3, [r7, #12]
2000c2c6:	4a7c      	ldr	r2, [pc, #496]	@ (2000c4b8 <HAL_I2C_Master_Seq_Transmit_DMA+0x25c>)
2000c2c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000c2ca:	68fb      	ldr	r3, [r7, #12]
2000c2cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c2ce:	b29b      	uxth	r3, r3
2000c2d0:	2bff      	cmp	r3, #255	@ 0xff
2000c2d2:	d906      	bls.n	2000c2e2 <HAL_I2C_Master_Seq_Transmit_DMA+0x86>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000c2d4:	68fb      	ldr	r3, [r7, #12]
2000c2d6:	22ff      	movs	r2, #255	@ 0xff
2000c2d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000c2da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000c2de:	61fb      	str	r3, [r7, #28]
2000c2e0:	e007      	b.n	2000c2f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x96>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000c2e2:	68fb      	ldr	r3, [r7, #12]
2000c2e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c2e6:	b29a      	uxth	r2, r3
2000c2e8:	68fb      	ldr	r3, [r7, #12]
2000c2ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
2000c2ec:	68fb      	ldr	r3, [r7, #12]
2000c2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c2f0:	61fb      	str	r3, [r7, #28]
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
2000c2f2:	68fb      	ldr	r3, [r7, #12]
2000c2f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c2f6:	2b00      	cmp	r3, #0
2000c2f8:	d021      	beq.n	2000c33e <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
2000c2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c2fc:	2b00      	cmp	r3, #0
2000c2fe:	d003      	beq.n	2000c308 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
2000c300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000c306:	d11a      	bne.n	2000c33e <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
                                  (XferOptions == I2C_FIRST_AND_LAST_FRAME)))
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000c308:	68fb      	ldr	r3, [r7, #12]
2000c30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000c30c:	781a      	ldrb	r2, [r3, #0]
2000c30e:	68fb      	ldr	r3, [r7, #12]
2000c310:	681b      	ldr	r3, [r3, #0]
2000c312:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000c314:	68fb      	ldr	r3, [r7, #12]
2000c316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000c318:	1c5a      	adds	r2, r3, #1
2000c31a:	68fb      	ldr	r3, [r7, #12]
2000c31c:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
2000c31e:	68fb      	ldr	r3, [r7, #12]
2000c320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c322:	617b      	str	r3, [r7, #20]
      hi2c->XferCount--;
2000c324:	68fb      	ldr	r3, [r7, #12]
2000c326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c328:	b29b      	uxth	r3, r3
2000c32a:	3b01      	subs	r3, #1
2000c32c:	b29a      	uxth	r2, r3
2000c32e:	68fb      	ldr	r3, [r7, #12]
2000c330:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000c332:	68fb      	ldr	r3, [r7, #12]
2000c334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c336:	3b01      	subs	r3, #1
2000c338:	b29a      	uxth	r2, r3
2000c33a:	68fb      	ldr	r3, [r7, #12]
2000c33c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2000c33e:	68fb      	ldr	r3, [r7, #12]
2000c340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000c342:	2b11      	cmp	r3, #17
2000c344:	d10e      	bne.n	2000c364 <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2000c346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c348:	2baa      	cmp	r3, #170	@ 0xaa
2000c34a:	d003      	beq.n	2000c354 <HAL_I2C_Master_Seq_Transmit_DMA+0xf8>
2000c34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c34e:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2000c352:	d101      	bne.n	2000c358 <HAL_I2C_Master_Seq_Transmit_DMA+0xfc>
2000c354:	2301      	movs	r3, #1
2000c356:	e000      	b.n	2000c35a <HAL_I2C_Master_Seq_Transmit_DMA+0xfe>
2000c358:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2000c35a:	2b00      	cmp	r3, #0
2000c35c:	d102      	bne.n	2000c364 <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
    {
      xferrequest = I2C_NO_STARTSTOP;
2000c35e:	2300      	movs	r3, #0
2000c360:	61bb      	str	r3, [r7, #24]
2000c362:	e00a      	b.n	2000c37a <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2000c364:	68f8      	ldr	r0, [r7, #12]
2000c366:	f003 fbaf 	bl	2000fac8 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2000c36a:	68fb      	ldr	r3, [r7, #12]
2000c36c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c36e:	b29b      	uxth	r3, r3
2000c370:	2bff      	cmp	r3, #255	@ 0xff
2000c372:	d802      	bhi.n	2000c37a <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
      {
        xfermode = hi2c->XferOptions;
2000c374:	68fb      	ldr	r3, [r7, #12]
2000c376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c378:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2000c37a:	68fb      	ldr	r3, [r7, #12]
2000c37c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c37e:	2b00      	cmp	r3, #0
2000c380:	f000 8084 	beq.w	2000c48c <HAL_I2C_Master_Seq_Transmit_DMA+0x230>
    {
      if (hi2c->hdmatx != NULL)
2000c384:	68fb      	ldr	r3, [r7, #12]
2000c386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000c388:	2b00      	cmp	r3, #0
2000c38a:	d022      	beq.n	2000c3d2 <HAL_I2C_Master_Seq_Transmit_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2000c38c:	68fb      	ldr	r3, [r7, #12]
2000c38e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000c390:	4a4a      	ldr	r2, [pc, #296]	@ (2000c4bc <HAL_I2C_Master_Seq_Transmit_DMA+0x260>)
2000c392:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2000c394:	68fb      	ldr	r3, [r7, #12]
2000c396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000c398:	4a49      	ldr	r2, [pc, #292]	@ (2000c4c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x264>)
2000c39a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2000c39c:	68fb      	ldr	r3, [r7, #12]
2000c39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000c3a0:	2200      	movs	r2, #0
2000c3a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2000c3a4:	68fb      	ldr	r3, [r7, #12]
2000c3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000c3a8:	2200      	movs	r2, #0
2000c3aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2000c3ac:	68fb      	ldr	r3, [r7, #12]
2000c3ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2000c3b0:	68fb      	ldr	r3, [r7, #12]
2000c3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000c3b4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2000c3b6:	68fb      	ldr	r3, [r7, #12]
2000c3b8:	681b      	ldr	r3, [r3, #0]
2000c3ba:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2000c3bc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2000c3be:	68fb      	ldr	r3, [r7, #12]
2000c3c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2000c3c2:	f7f7 fd3f 	bl	20003e44 <HAL_DMA_Start_IT>
2000c3c6:	4603      	mov	r3, r0
2000c3c8:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2000c3ca:	7cfb      	ldrb	r3, [r7, #19]
2000c3cc:	2b00      	cmp	r3, #0
2000c3ce:	d149      	bne.n	2000c464 <HAL_I2C_Master_Seq_Transmit_DMA+0x208>
2000c3d0:	e013      	b.n	2000c3fa <HAL_I2C_Master_Seq_Transmit_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
2000c3d2:	68fb      	ldr	r3, [r7, #12]
2000c3d4:	2220      	movs	r2, #32
2000c3d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000c3da:	68fb      	ldr	r3, [r7, #12]
2000c3dc:	2200      	movs	r2, #0
2000c3de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000c3e2:	68fb      	ldr	r3, [r7, #12]
2000c3e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000c3e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000c3ea:	68fb      	ldr	r3, [r7, #12]
2000c3ec:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2000c3ee:	68fb      	ldr	r3, [r7, #12]
2000c3f0:	2200      	movs	r2, #0
2000c3f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2000c3f6:	2301      	movs	r3, #1
2000c3f8:	e07b      	b.n	2000c4f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      {
        /* Send Slave Address and set NBYTES to write */
        if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
2000c3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c3fc:	2b00      	cmp	r3, #0
2000c3fe:	d003      	beq.n	2000c408 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ac>
2000c400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c402:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000c406:	d109      	bne.n	2000c41c <HAL_I2C_Master_Seq_Transmit_DMA+0x1c0>
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
2000c408:	697b      	ldr	r3, [r7, #20]
2000c40a:	b2da      	uxtb	r2, r3
2000c40c:	8979      	ldrh	r1, [r7, #10]
2000c40e:	69bb      	ldr	r3, [r7, #24]
2000c410:	9300      	str	r3, [sp, #0]
2000c412:	69fb      	ldr	r3, [r7, #28]
2000c414:	68f8      	ldr	r0, [r7, #12]
2000c416:	f003 fa43 	bl	2000f8a0 <I2C_TransferConfig>
2000c41a:	e009      	b.n	2000c430 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
        }
        else
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2000c41c:	68fb      	ldr	r3, [r7, #12]
2000c41e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c420:	b2da      	uxtb	r2, r3
2000c422:	8979      	ldrh	r1, [r7, #10]
2000c424:	69bb      	ldr	r3, [r7, #24]
2000c426:	9300      	str	r3, [sp, #0]
2000c428:	69fb      	ldr	r3, [r7, #28]
2000c42a:	68f8      	ldr	r0, [r7, #12]
2000c42c:	f003 fa38 	bl	2000f8a0 <I2C_TransferConfig>
        }

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2000c430:	68fb      	ldr	r3, [r7, #12]
2000c432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c434:	b29a      	uxth	r2, r3
2000c436:	68fb      	ldr	r3, [r7, #12]
2000c438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c43a:	1ad3      	subs	r3, r2, r3
2000c43c:	b29a      	uxth	r2, r3
2000c43e:	68fb      	ldr	r3, [r7, #12]
2000c440:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000c442:	68fb      	ldr	r3, [r7, #12]
2000c444:	2200      	movs	r2, #0
2000c446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2000c44a:	2110      	movs	r1, #16
2000c44c:	68f8      	ldr	r0, [r7, #12]
2000c44e:	f003 fa59 	bl	2000f904 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2000c452:	68fb      	ldr	r3, [r7, #12]
2000c454:	681b      	ldr	r3, [r3, #0]
2000c456:	681a      	ldr	r2, [r3, #0]
2000c458:	68fb      	ldr	r3, [r7, #12]
2000c45a:	681b      	ldr	r3, [r3, #0]
2000c45c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000c460:	601a      	str	r2, [r3, #0]
2000c462:	e043      	b.n	2000c4ec <HAL_I2C_Master_Seq_Transmit_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2000c464:	68fb      	ldr	r3, [r7, #12]
2000c466:	2220      	movs	r2, #32
2000c468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000c46c:	68fb      	ldr	r3, [r7, #12]
2000c46e:	2200      	movs	r2, #0
2000c470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000c474:	68fb      	ldr	r3, [r7, #12]
2000c476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000c478:	f043 0210 	orr.w	r2, r3, #16
2000c47c:	68fb      	ldr	r3, [r7, #12]
2000c47e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000c480:	68fb      	ldr	r3, [r7, #12]
2000c482:	2200      	movs	r2, #0
2000c484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2000c488:	2301      	movs	r3, #1
2000c48a:	e032      	b.n	2000c4f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2000c48c:	68fb      	ldr	r3, [r7, #12]
2000c48e:	4a0d      	ldr	r2, [pc, #52]	@ (2000c4c4 <HAL_I2C_Master_Seq_Transmit_DMA+0x268>)
2000c490:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
2000c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c494:	2b00      	cmp	r3, #0
2000c496:	d003      	beq.n	2000c4a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x244>
2000c498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c49a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000c49e:	d113      	bne.n	2000c4c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
2000c4a0:	697b      	ldr	r3, [r7, #20]
2000c4a2:	b2da      	uxtb	r2, r3
2000c4a4:	8979      	ldrh	r1, [r7, #10]
2000c4a6:	69bb      	ldr	r3, [r7, #24]
2000c4a8:	9300      	str	r3, [sp, #0]
2000c4aa:	69fb      	ldr	r3, [r7, #28]
2000c4ac:	68f8      	ldr	r0, [r7, #12]
2000c4ae:	f003 f9f7 	bl	2000f8a0 <I2C_TransferConfig>
2000c4b2:	e013      	b.n	2000c4dc <HAL_I2C_Master_Seq_Transmit_DMA+0x280>
2000c4b4:	80002000 	.word	0x80002000
2000c4b8:	2000d9c7 	.word	0x2000d9c7
2000c4bc:	2000ee7f 	.word	0x2000ee7f
2000c4c0:	2000f151 	.word	0x2000f151
2000c4c4:	2000d33b 	.word	0x2000d33b
      }
      else
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2000c4c8:	68fb      	ldr	r3, [r7, #12]
2000c4ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c4cc:	b2da      	uxtb	r2, r3
2000c4ce:	8979      	ldrh	r1, [r7, #10]
2000c4d0:	69bb      	ldr	r3, [r7, #24]
2000c4d2:	9300      	str	r3, [sp, #0]
2000c4d4:	69fb      	ldr	r3, [r7, #28]
2000c4d6:	68f8      	ldr	r0, [r7, #12]
2000c4d8:	f003 f9e2 	bl	2000f8a0 <I2C_TransferConfig>
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000c4dc:	68fb      	ldr	r3, [r7, #12]
2000c4de:	2200      	movs	r2, #0
2000c4e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000c4e4:	2101      	movs	r1, #1
2000c4e6:	68f8      	ldr	r0, [r7, #12]
2000c4e8:	f003 fa0c 	bl	2000f904 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2000c4ec:	2300      	movs	r3, #0
2000c4ee:	e000      	b.n	2000c4f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
  }
  else
  {
    return HAL_BUSY;
2000c4f0:	2302      	movs	r3, #2
  }
}
2000c4f2:	4618      	mov	r0, r3
2000c4f4:	3720      	adds	r7, #32
2000c4f6:	46bd      	mov	sp, r7
2000c4f8:	bd80      	pop	{r7, pc}
2000c4fa:	bf00      	nop

2000c4fc <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
2000c4fc:	b580      	push	{r7, lr}
2000c4fe:	b088      	sub	sp, #32
2000c500:	af02      	add	r7, sp, #8
2000c502:	60f8      	str	r0, [r7, #12]
2000c504:	607a      	str	r2, [r7, #4]
2000c506:	461a      	mov	r2, r3
2000c508:	460b      	mov	r3, r1
2000c50a:	817b      	strh	r3, [r7, #10]
2000c50c:	4613      	mov	r3, r2
2000c50e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2000c510:	4b3a      	ldr	r3, [pc, #232]	@ (2000c5fc <HAL_I2C_Master_Seq_Receive_IT+0x100>)
2000c512:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000c514:	68fb      	ldr	r3, [r7, #12]
2000c516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000c51a:	b2db      	uxtb	r3, r3
2000c51c:	2b20      	cmp	r3, #32
2000c51e:	d167      	bne.n	2000c5f0 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000c520:	68fb      	ldr	r3, [r7, #12]
2000c522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000c526:	2b01      	cmp	r3, #1
2000c528:	d101      	bne.n	2000c52e <HAL_I2C_Master_Seq_Receive_IT+0x32>
2000c52a:	2302      	movs	r3, #2
2000c52c:	e061      	b.n	2000c5f2 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
2000c52e:	68fb      	ldr	r3, [r7, #12]
2000c530:	2201      	movs	r2, #1
2000c532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2000c536:	68fb      	ldr	r3, [r7, #12]
2000c538:	2222      	movs	r2, #34	@ 0x22
2000c53a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000c53e:	68fb      	ldr	r3, [r7, #12]
2000c540:	2210      	movs	r2, #16
2000c542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000c546:	68fb      	ldr	r3, [r7, #12]
2000c548:	2200      	movs	r2, #0
2000c54a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000c54c:	68fb      	ldr	r3, [r7, #12]
2000c54e:	687a      	ldr	r2, [r7, #4]
2000c550:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000c552:	68fb      	ldr	r3, [r7, #12]
2000c554:	893a      	ldrh	r2, [r7, #8]
2000c556:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
2000c558:	68fb      	ldr	r3, [r7, #12]
2000c55a:	6a3a      	ldr	r2, [r7, #32]
2000c55c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2000c55e:	68fb      	ldr	r3, [r7, #12]
2000c560:	4a27      	ldr	r2, [pc, #156]	@ (2000c600 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
2000c562:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000c564:	68fb      	ldr	r3, [r7, #12]
2000c566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c568:	b29b      	uxth	r3, r3
2000c56a:	2bff      	cmp	r3, #255	@ 0xff
2000c56c:	d906      	bls.n	2000c57c <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000c56e:	68fb      	ldr	r3, [r7, #12]
2000c570:	22ff      	movs	r2, #255	@ 0xff
2000c572:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000c574:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000c578:	617b      	str	r3, [r7, #20]
2000c57a:	e007      	b.n	2000c58c <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000c57c:	68fb      	ldr	r3, [r7, #12]
2000c57e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c580:	b29a      	uxth	r2, r3
2000c582:	68fb      	ldr	r3, [r7, #12]
2000c584:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
2000c586:	68fb      	ldr	r3, [r7, #12]
2000c588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c58a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2000c58c:	68fb      	ldr	r3, [r7, #12]
2000c58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000c590:	2b12      	cmp	r3, #18
2000c592:	d10e      	bne.n	2000c5b2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2000c594:	6a3b      	ldr	r3, [r7, #32]
2000c596:	2baa      	cmp	r3, #170	@ 0xaa
2000c598:	d003      	beq.n	2000c5a2 <HAL_I2C_Master_Seq_Receive_IT+0xa6>
2000c59a:	6a3b      	ldr	r3, [r7, #32]
2000c59c:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2000c5a0:	d101      	bne.n	2000c5a6 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
2000c5a2:	2301      	movs	r3, #1
2000c5a4:	e000      	b.n	2000c5a8 <HAL_I2C_Master_Seq_Receive_IT+0xac>
2000c5a6:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2000c5a8:	2b00      	cmp	r3, #0
2000c5aa:	d102      	bne.n	2000c5b2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2000c5ac:	2300      	movs	r3, #0
2000c5ae:	613b      	str	r3, [r7, #16]
2000c5b0:	e00a      	b.n	2000c5c8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2000c5b2:	68f8      	ldr	r0, [r7, #12]
2000c5b4:	f003 fa88 	bl	2000fac8 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2000c5b8:	68fb      	ldr	r3, [r7, #12]
2000c5ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c5bc:	b29b      	uxth	r3, r3
2000c5be:	2bff      	cmp	r3, #255	@ 0xff
2000c5c0:	d802      	bhi.n	2000c5c8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2000c5c2:	68fb      	ldr	r3, [r7, #12]
2000c5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c5c6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2000c5c8:	68fb      	ldr	r3, [r7, #12]
2000c5ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c5cc:	b2da      	uxtb	r2, r3
2000c5ce:	8979      	ldrh	r1, [r7, #10]
2000c5d0:	693b      	ldr	r3, [r7, #16]
2000c5d2:	9300      	str	r3, [sp, #0]
2000c5d4:	697b      	ldr	r3, [r7, #20]
2000c5d6:	68f8      	ldr	r0, [r7, #12]
2000c5d8:	f003 f962 	bl	2000f8a0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000c5dc:	68fb      	ldr	r3, [r7, #12]
2000c5de:	2200      	movs	r2, #0
2000c5e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2000c5e4:	2102      	movs	r1, #2
2000c5e6:	68f8      	ldr	r0, [r7, #12]
2000c5e8:	f003 f98c 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000c5ec:	2300      	movs	r3, #0
2000c5ee:	e000      	b.n	2000c5f2 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2000c5f0:	2302      	movs	r3, #2
  }
}
2000c5f2:	4618      	mov	r0, r3
2000c5f4:	3718      	adds	r7, #24
2000c5f6:	46bd      	mov	sp, r7
2000c5f8:	bd80      	pop	{r7, pc}
2000c5fa:	bf00      	nop
2000c5fc:	80002400 	.word	0x80002400
2000c600:	2000d33b 	.word	0x2000d33b

2000c604 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2000c604:	b580      	push	{r7, lr}
2000c606:	b08a      	sub	sp, #40	@ 0x28
2000c608:	af02      	add	r7, sp, #8
2000c60a:	60f8      	str	r0, [r7, #12]
2000c60c:	607a      	str	r2, [r7, #4]
2000c60e:	461a      	mov	r2, r3
2000c610:	460b      	mov	r3, r1
2000c612:	817b      	strh	r3, [r7, #10]
2000c614:	4613      	mov	r3, r2
2000c616:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2000c618:	4b77      	ldr	r3, [pc, #476]	@ (2000c7f8 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2000c61a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000c61c:	68fb      	ldr	r3, [r7, #12]
2000c61e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000c622:	b2db      	uxtb	r3, r3
2000c624:	2b20      	cmp	r3, #32
2000c626:	f040 80e1 	bne.w	2000c7ec <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000c62a:	68fb      	ldr	r3, [r7, #12]
2000c62c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000c630:	2b01      	cmp	r3, #1
2000c632:	d101      	bne.n	2000c638 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
2000c634:	2302      	movs	r3, #2
2000c636:	e0da      	b.n	2000c7ee <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
2000c638:	68fb      	ldr	r3, [r7, #12]
2000c63a:	2201      	movs	r2, #1
2000c63c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2000c640:	68fb      	ldr	r3, [r7, #12]
2000c642:	2222      	movs	r2, #34	@ 0x22
2000c644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000c648:	68fb      	ldr	r3, [r7, #12]
2000c64a:	2210      	movs	r2, #16
2000c64c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000c650:	68fb      	ldr	r3, [r7, #12]
2000c652:	2200      	movs	r2, #0
2000c654:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000c656:	68fb      	ldr	r3, [r7, #12]
2000c658:	687a      	ldr	r2, [r7, #4]
2000c65a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000c65c:	68fb      	ldr	r3, [r7, #12]
2000c65e:	893a      	ldrh	r2, [r7, #8]
2000c660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
2000c662:	68fb      	ldr	r3, [r7, #12]
2000c664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
2000c666:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2000c668:	68fb      	ldr	r3, [r7, #12]
2000c66a:	4a64      	ldr	r2, [pc, #400]	@ (2000c7fc <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
2000c66c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000c66e:	68fb      	ldr	r3, [r7, #12]
2000c670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c672:	b29b      	uxth	r3, r3
2000c674:	2bff      	cmp	r3, #255	@ 0xff
2000c676:	d906      	bls.n	2000c686 <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000c678:	68fb      	ldr	r3, [r7, #12]
2000c67a:	22ff      	movs	r2, #255	@ 0xff
2000c67c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2000c67e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000c682:	61fb      	str	r3, [r7, #28]
2000c684:	e007      	b.n	2000c696 <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000c686:	68fb      	ldr	r3, [r7, #12]
2000c688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c68a:	b29a      	uxth	r2, r3
2000c68c:	68fb      	ldr	r3, [r7, #12]
2000c68e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
2000c690:	68fb      	ldr	r3, [r7, #12]
2000c692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c694:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2000c696:	68fb      	ldr	r3, [r7, #12]
2000c698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000c69a:	2b12      	cmp	r3, #18
2000c69c:	d10e      	bne.n	2000c6bc <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2000c69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c6a0:	2baa      	cmp	r3, #170	@ 0xaa
2000c6a2:	d003      	beq.n	2000c6ac <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
2000c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000c6a6:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2000c6aa:	d101      	bne.n	2000c6b0 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
2000c6ac:	2301      	movs	r3, #1
2000c6ae:	e000      	b.n	2000c6b2 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
2000c6b0:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2000c6b2:	2b00      	cmp	r3, #0
2000c6b4:	d102      	bne.n	2000c6bc <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2000c6b6:	2300      	movs	r3, #0
2000c6b8:	61bb      	str	r3, [r7, #24]
2000c6ba:	e00a      	b.n	2000c6d2 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2000c6bc:	68f8      	ldr	r0, [r7, #12]
2000c6be:	f003 fa03 	bl	2000fac8 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2000c6c2:	68fb      	ldr	r3, [r7, #12]
2000c6c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c6c6:	b29b      	uxth	r3, r3
2000c6c8:	2bff      	cmp	r3, #255	@ 0xff
2000c6ca:	d802      	bhi.n	2000c6d2 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2000c6cc:	68fb      	ldr	r3, [r7, #12]
2000c6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000c6d0:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2000c6d2:	68fb      	ldr	r3, [r7, #12]
2000c6d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c6d6:	2b00      	cmp	r3, #0
2000c6d8:	d070      	beq.n	2000c7bc <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
2000c6da:	68fb      	ldr	r3, [r7, #12]
2000c6dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c6de:	2b00      	cmp	r3, #0
2000c6e0:	d020      	beq.n	2000c724 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2000c6e2:	68fb      	ldr	r3, [r7, #12]
2000c6e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c6e6:	4a46      	ldr	r2, [pc, #280]	@ (2000c800 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
2000c6e8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2000c6ea:	68fb      	ldr	r3, [r7, #12]
2000c6ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c6ee:	4a45      	ldr	r2, [pc, #276]	@ (2000c804 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
2000c6f0:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2000c6f2:	68fb      	ldr	r3, [r7, #12]
2000c6f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c6f6:	2200      	movs	r2, #0
2000c6f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2000c6fa:	68fb      	ldr	r3, [r7, #12]
2000c6fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c6fe:	2200      	movs	r2, #0
2000c700:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000c702:	68fb      	ldr	r3, [r7, #12]
2000c704:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2000c706:	68fb      	ldr	r3, [r7, #12]
2000c708:	681b      	ldr	r3, [r3, #0]
2000c70a:	3324      	adds	r3, #36	@ 0x24
2000c70c:	4619      	mov	r1, r3
2000c70e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2000c710:	68fb      	ldr	r3, [r7, #12]
2000c712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000c714:	f7f7 fb96 	bl	20003e44 <HAL_DMA_Start_IT>
2000c718:	4603      	mov	r3, r0
2000c71a:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2000c71c:	7dfb      	ldrb	r3, [r7, #23]
2000c71e:	2b00      	cmp	r3, #0
2000c720:	d138      	bne.n	2000c794 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
2000c722:	e013      	b.n	2000c74c <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2000c724:	68fb      	ldr	r3, [r7, #12]
2000c726:	2220      	movs	r2, #32
2000c728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000c72c:	68fb      	ldr	r3, [r7, #12]
2000c72e:	2200      	movs	r2, #0
2000c730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000c734:	68fb      	ldr	r3, [r7, #12]
2000c736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000c738:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000c73c:	68fb      	ldr	r3, [r7, #12]
2000c73e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2000c740:	68fb      	ldr	r3, [r7, #12]
2000c742:	2200      	movs	r2, #0
2000c744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2000c748:	2301      	movs	r3, #1
2000c74a:	e050      	b.n	2000c7ee <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2000c74c:	68fb      	ldr	r3, [r7, #12]
2000c74e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c750:	b2da      	uxtb	r2, r3
2000c752:	8979      	ldrh	r1, [r7, #10]
2000c754:	69bb      	ldr	r3, [r7, #24]
2000c756:	9300      	str	r3, [sp, #0]
2000c758:	69fb      	ldr	r3, [r7, #28]
2000c75a:	68f8      	ldr	r0, [r7, #12]
2000c75c:	f003 f8a0 	bl	2000f8a0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2000c760:	68fb      	ldr	r3, [r7, #12]
2000c762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c764:	b29a      	uxth	r2, r3
2000c766:	68fb      	ldr	r3, [r7, #12]
2000c768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c76a:	1ad3      	subs	r3, r2, r3
2000c76c:	b29a      	uxth	r2, r3
2000c76e:	68fb      	ldr	r3, [r7, #12]
2000c770:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000c772:	68fb      	ldr	r3, [r7, #12]
2000c774:	2200      	movs	r2, #0
2000c776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2000c77a:	2110      	movs	r1, #16
2000c77c:	68f8      	ldr	r0, [r7, #12]
2000c77e:	f003 f8c1 	bl	2000f904 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2000c782:	68fb      	ldr	r3, [r7, #12]
2000c784:	681b      	ldr	r3, [r3, #0]
2000c786:	681a      	ldr	r2, [r3, #0]
2000c788:	68fb      	ldr	r3, [r7, #12]
2000c78a:	681b      	ldr	r3, [r3, #0]
2000c78c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000c790:	601a      	str	r2, [r3, #0]
2000c792:	e029      	b.n	2000c7e8 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2000c794:	68fb      	ldr	r3, [r7, #12]
2000c796:	2220      	movs	r2, #32
2000c798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000c79c:	68fb      	ldr	r3, [r7, #12]
2000c79e:	2200      	movs	r2, #0
2000c7a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000c7a4:	68fb      	ldr	r3, [r7, #12]
2000c7a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000c7a8:	f043 0210 	orr.w	r2, r3, #16
2000c7ac:	68fb      	ldr	r3, [r7, #12]
2000c7ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000c7b0:	68fb      	ldr	r3, [r7, #12]
2000c7b2:	2200      	movs	r2, #0
2000c7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2000c7b8:	2301      	movs	r3, #1
2000c7ba:	e018      	b.n	2000c7ee <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2000c7bc:	68fb      	ldr	r3, [r7, #12]
2000c7be:	4a12      	ldr	r2, [pc, #72]	@ (2000c808 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
2000c7c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000c7c2:	68fb      	ldr	r3, [r7, #12]
2000c7c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000c7c6:	b2da      	uxtb	r2, r3
2000c7c8:	8979      	ldrh	r1, [r7, #10]
2000c7ca:	4b0b      	ldr	r3, [pc, #44]	@ (2000c7f8 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2000c7cc:	9300      	str	r3, [sp, #0]
2000c7ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000c7d2:	68f8      	ldr	r0, [r7, #12]
2000c7d4:	f003 f864 	bl	2000f8a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000c7d8:	68fb      	ldr	r3, [r7, #12]
2000c7da:	2200      	movs	r2, #0
2000c7dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2000c7e0:	2102      	movs	r1, #2
2000c7e2:	68f8      	ldr	r0, [r7, #12]
2000c7e4:	f003 f88e 	bl	2000f904 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2000c7e8:	2300      	movs	r3, #0
2000c7ea:	e000      	b.n	2000c7ee <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2000c7ec:	2302      	movs	r3, #2
  }
}
2000c7ee:	4618      	mov	r0, r3
2000c7f0:	3720      	adds	r7, #32
2000c7f2:	46bd      	mov	sp, r7
2000c7f4:	bd80      	pop	{r7, pc}
2000c7f6:	bf00      	nop
2000c7f8:	80002400 	.word	0x80002400
2000c7fc:	2000d9c7 	.word	0x2000d9c7
2000c800:	2000ef55 	.word	0x2000ef55
2000c804:	2000f151 	.word	0x2000f151
2000c808:	2000d33b 	.word	0x2000d33b

2000c80c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2000c80c:	b580      	push	{r7, lr}
2000c80e:	b086      	sub	sp, #24
2000c810:	af00      	add	r7, sp, #0
2000c812:	60f8      	str	r0, [r7, #12]
2000c814:	60b9      	str	r1, [r7, #8]
2000c816:	603b      	str	r3, [r7, #0]
2000c818:	4613      	mov	r3, r2
2000c81a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2000c81c:	68fb      	ldr	r3, [r7, #12]
2000c81e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000c822:	b2db      	uxtb	r3, r3
2000c824:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2000c828:	2b28      	cmp	r3, #40	@ 0x28
2000c82a:	f040 8098 	bne.w	2000c95e <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2000c82e:	68bb      	ldr	r3, [r7, #8]
2000c830:	2b00      	cmp	r3, #0
2000c832:	d002      	beq.n	2000c83a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
2000c834:	88fb      	ldrh	r3, [r7, #6]
2000c836:	2b00      	cmp	r3, #0
2000c838:	d105      	bne.n	2000c846 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000c83a:	68fb      	ldr	r3, [r7, #12]
2000c83c:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000c840:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000c842:	2301      	movs	r3, #1
2000c844:	e08c      	b.n	2000c960 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2000c846:	f248 0101 	movw	r1, #32769	@ 0x8001
2000c84a:	68f8      	ldr	r0, [r7, #12]
2000c84c:	f003 f8de 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000c850:	68fb      	ldr	r3, [r7, #12]
2000c852:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000c856:	2b01      	cmp	r3, #1
2000c858:	d101      	bne.n	2000c85e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
2000c85a:	2302      	movs	r3, #2
2000c85c:	e080      	b.n	2000c960 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
2000c85e:	68fb      	ldr	r3, [r7, #12]
2000c860:	2201      	movs	r2, #1
2000c862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2000c866:	68fb      	ldr	r3, [r7, #12]
2000c868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000c86c:	b2db      	uxtb	r3, r3
2000c86e:	2b2a      	cmp	r3, #42	@ 0x2a
2000c870:	d12a      	bne.n	2000c8c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2000c872:	2102      	movs	r1, #2
2000c874:	68f8      	ldr	r0, [r7, #12]
2000c876:	f003 f8c9 	bl	2000fa0c <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2000c87a:	68fb      	ldr	r3, [r7, #12]
2000c87c:	681b      	ldr	r3, [r3, #0]
2000c87e:	681b      	ldr	r3, [r3, #0]
2000c880:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000c884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000c888:	d11e      	bne.n	2000c8c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000c88a:	68fb      	ldr	r3, [r7, #12]
2000c88c:	681b      	ldr	r3, [r3, #0]
2000c88e:	681a      	ldr	r2, [r3, #0]
2000c890:	68fb      	ldr	r3, [r7, #12]
2000c892:	681b      	ldr	r3, [r3, #0]
2000c894:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000c898:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
2000c89a:	68fb      	ldr	r3, [r7, #12]
2000c89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c89e:	2b00      	cmp	r3, #0
2000c8a0:	d012      	beq.n	2000c8c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2000c8a2:	68fb      	ldr	r3, [r7, #12]
2000c8a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c8a6:	4a30      	ldr	r2, [pc, #192]	@ (2000c968 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
2000c8a8:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2000c8aa:	68fb      	ldr	r3, [r7, #12]
2000c8ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c8ae:	4618      	mov	r0, r3
2000c8b0:	f7f8 f850 	bl	20004954 <HAL_DMA_Abort_IT>
2000c8b4:	4603      	mov	r3, r0
2000c8b6:	2b00      	cmp	r3, #0
2000c8b8:	d006      	beq.n	2000c8c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000c8ba:	68fb      	ldr	r3, [r7, #12]
2000c8bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c8be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000c8c0:	68fa      	ldr	r2, [r7, #12]
2000c8c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2000c8c4:	4610      	mov	r0, r2
2000c8c6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2000c8c8:	68fb      	ldr	r3, [r7, #12]
2000c8ca:	2229      	movs	r2, #41	@ 0x29
2000c8cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2000c8d0:	68fb      	ldr	r3, [r7, #12]
2000c8d2:	2220      	movs	r2, #32
2000c8d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000c8d8:	68fb      	ldr	r3, [r7, #12]
2000c8da:	2200      	movs	r2, #0
2000c8dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000c8de:	68fb      	ldr	r3, [r7, #12]
2000c8e0:	681b      	ldr	r3, [r3, #0]
2000c8e2:	685a      	ldr	r2, [r3, #4]
2000c8e4:	68fb      	ldr	r3, [r7, #12]
2000c8e6:	681b      	ldr	r3, [r3, #0]
2000c8e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000c8ec:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000c8ee:	68fb      	ldr	r3, [r7, #12]
2000c8f0:	68ba      	ldr	r2, [r7, #8]
2000c8f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000c8f4:	68fb      	ldr	r3, [r7, #12]
2000c8f6:	88fa      	ldrh	r2, [r7, #6]
2000c8f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000c8fa:	68fb      	ldr	r3, [r7, #12]
2000c8fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000c8fe:	b29a      	uxth	r2, r3
2000c900:	68fb      	ldr	r3, [r7, #12]
2000c902:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
2000c904:	68fb      	ldr	r3, [r7, #12]
2000c906:	683a      	ldr	r2, [r7, #0]
2000c908:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2000c90a:	68fb      	ldr	r3, [r7, #12]
2000c90c:	4a17      	ldr	r2, [pc, #92]	@ (2000c96c <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
2000c90e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2000c910:	68fb      	ldr	r3, [r7, #12]
2000c912:	681b      	ldr	r3, [r3, #0]
2000c914:	699b      	ldr	r3, [r3, #24]
2000c916:	f003 0308 	and.w	r3, r3, #8
2000c91a:	2b08      	cmp	r3, #8
2000c91c:	bf0c      	ite	eq
2000c91e:	2301      	moveq	r3, #1
2000c920:	2300      	movne	r3, #0
2000c922:	b2db      	uxtb	r3, r3
2000c924:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2000c926:	68fb      	ldr	r3, [r7, #12]
2000c928:	681b      	ldr	r3, [r3, #0]
2000c92a:	699b      	ldr	r3, [r3, #24]
2000c92c:	0c1b      	lsrs	r3, r3, #16
2000c92e:	b2db      	uxtb	r3, r3
2000c930:	f003 0301 	and.w	r3, r3, #1
2000c934:	b2db      	uxtb	r3, r3
2000c936:	2b01      	cmp	r3, #1
2000c938:	d106      	bne.n	2000c948 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
2000c93a:	7dfb      	ldrb	r3, [r7, #23]
2000c93c:	2b00      	cmp	r3, #0
2000c93e:	d003      	beq.n	2000c948 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000c940:	68fb      	ldr	r3, [r7, #12]
2000c942:	681b      	ldr	r3, [r3, #0]
2000c944:	2208      	movs	r2, #8
2000c946:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000c948:	68fb      	ldr	r3, [r7, #12]
2000c94a:	2200      	movs	r2, #0
2000c94c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2000c950:	f248 0101 	movw	r1, #32769	@ 0x8001
2000c954:	68f8      	ldr	r0, [r7, #12]
2000c956:	f002 ffd5 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000c95a:	2300      	movs	r3, #0
2000c95c:	e000      	b.n	2000c960 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
2000c95e:	2301      	movs	r3, #1
  }
}
2000c960:	4618      	mov	r0, r3
2000c962:	3718      	adds	r7, #24
2000c964:	46bd      	mov	sp, r7
2000c966:	bd80      	pop	{r7, pc}
2000c968:	2000f3c5 	.word	0x2000f3c5
2000c96c:	2000d7d5 	.word	0x2000d7d5

2000c970 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                 uint32_t XferOptions)
{
2000c970:	b580      	push	{r7, lr}
2000c972:	b086      	sub	sp, #24
2000c974:	af00      	add	r7, sp, #0
2000c976:	60f8      	str	r0, [r7, #12]
2000c978:	60b9      	str	r1, [r7, #8]
2000c97a:	603b      	str	r3, [r7, #0]
2000c97c:	4613      	mov	r3, r2
2000c97e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2000c980:	68fb      	ldr	r3, [r7, #12]
2000c982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000c986:	b2db      	uxtb	r3, r3
2000c988:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2000c98c:	2b28      	cmp	r3, #40	@ 0x28
2000c98e:	f040 8128 	bne.w	2000cbe2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>
  {
    if ((pData == NULL) || (Size == 0U))
2000c992:	68bb      	ldr	r3, [r7, #8]
2000c994:	2b00      	cmp	r3, #0
2000c996:	d002      	beq.n	2000c99e <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
2000c998:	88fb      	ldrh	r3, [r7, #6]
2000c99a:	2b00      	cmp	r3, #0
2000c99c:	d105      	bne.n	2000c9aa <HAL_I2C_Slave_Seq_Transmit_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000c99e:	68fb      	ldr	r3, [r7, #12]
2000c9a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000c9a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000c9a6:	2301      	movs	r3, #1
2000c9a8:	e11c      	b.n	2000cbe4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000c9aa:	68fb      	ldr	r3, [r7, #12]
2000c9ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000c9b0:	2b01      	cmp	r3, #1
2000c9b2:	d101      	bne.n	2000c9b8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x48>
2000c9b4:	2302      	movs	r3, #2
2000c9b6:	e115      	b.n	2000cbe4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
2000c9b8:	68fb      	ldr	r3, [r7, #12]
2000c9ba:	2201      	movs	r2, #1
2000c9bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2000c9c0:	f248 0101 	movw	r1, #32769	@ 0x8001
2000c9c4:	68f8      	ldr	r0, [r7, #12]
2000c9c6:	f003 f821 	bl	2000fa0c <I2C_Disable_IRQ>

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2000c9ca:	68fb      	ldr	r3, [r7, #12]
2000c9cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000c9d0:	b2db      	uxtb	r3, r3
2000c9d2:	2b2a      	cmp	r3, #42	@ 0x2a
2000c9d4:	d12b      	bne.n	2000ca2e <HAL_I2C_Slave_Seq_Transmit_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2000c9d6:	2102      	movs	r1, #2
2000c9d8:	68f8      	ldr	r0, [r7, #12]
2000c9da:	f003 f817 	bl	2000fa0c <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2000c9de:	68fb      	ldr	r3, [r7, #12]
2000c9e0:	681b      	ldr	r3, [r3, #0]
2000c9e2:	681b      	ldr	r3, [r3, #0]
2000c9e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000c9e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000c9ec:	d14c      	bne.n	2000ca88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2000c9ee:	68fb      	ldr	r3, [r7, #12]
2000c9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000c9f2:	2b00      	cmp	r3, #0
2000c9f4:	d048      	beq.n	2000ca88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000c9f6:	68fb      	ldr	r3, [r7, #12]
2000c9f8:	681b      	ldr	r3, [r3, #0]
2000c9fa:	681a      	ldr	r2, [r3, #0]
2000c9fc:	68fb      	ldr	r3, [r7, #12]
2000c9fe:	681b      	ldr	r3, [r3, #0]
2000ca00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000ca04:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
          will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2000ca06:	68fb      	ldr	r3, [r7, #12]
2000ca08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ca0a:	4a78      	ldr	r2, [pc, #480]	@ (2000cbec <HAL_I2C_Slave_Seq_Transmit_DMA+0x27c>)
2000ca0c:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2000ca0e:	68fb      	ldr	r3, [r7, #12]
2000ca10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ca12:	4618      	mov	r0, r3
2000ca14:	f7f7 ff9e 	bl	20004954 <HAL_DMA_Abort_IT>
2000ca18:	4603      	mov	r3, r0
2000ca1a:	2b00      	cmp	r3, #0
2000ca1c:	d034      	beq.n	2000ca88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000ca1e:	68fb      	ldr	r3, [r7, #12]
2000ca20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ca22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000ca24:	68fa      	ldr	r2, [r7, #12]
2000ca26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2000ca28:	4610      	mov	r0, r2
2000ca2a:	4798      	blx	r3
2000ca2c:	e02c      	b.n	2000ca88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2000ca2e:	68fb      	ldr	r3, [r7, #12]
2000ca30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ca34:	b2db      	uxtb	r3, r3
2000ca36:	2b29      	cmp	r3, #41	@ 0x29
2000ca38:	d126      	bne.n	2000ca88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2000ca3a:	68fb      	ldr	r3, [r7, #12]
2000ca3c:	681b      	ldr	r3, [r3, #0]
2000ca3e:	681b      	ldr	r3, [r3, #0]
2000ca40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000ca44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2000ca48:	d11e      	bne.n	2000ca88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000ca4a:	68fb      	ldr	r3, [r7, #12]
2000ca4c:	681b      	ldr	r3, [r3, #0]
2000ca4e:	681a      	ldr	r2, [r3, #0]
2000ca50:	68fb      	ldr	r3, [r7, #12]
2000ca52:	681b      	ldr	r3, [r3, #0]
2000ca54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2000ca58:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2000ca5a:	68fb      	ldr	r3, [r7, #12]
2000ca5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ca5e:	2b00      	cmp	r3, #0
2000ca60:	d012      	beq.n	2000ca88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
          will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2000ca62:	68fb      	ldr	r3, [r7, #12]
2000ca64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ca66:	4a61      	ldr	r2, [pc, #388]	@ (2000cbec <HAL_I2C_Slave_Seq_Transmit_DMA+0x27c>)
2000ca68:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2000ca6a:	68fb      	ldr	r3, [r7, #12]
2000ca6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ca6e:	4618      	mov	r0, r3
2000ca70:	f7f7 ff70 	bl	20004954 <HAL_DMA_Abort_IT>
2000ca74:	4603      	mov	r3, r0
2000ca76:	2b00      	cmp	r3, #0
2000ca78:	d006      	beq.n	2000ca88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2000ca7a:	68fb      	ldr	r3, [r7, #12]
2000ca7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ca7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000ca80:	68fa      	ldr	r2, [r7, #12]
2000ca82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2000ca84:	4610      	mov	r0, r2
2000ca86:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2000ca88:	68fb      	ldr	r3, [r7, #12]
2000ca8a:	2229      	movs	r2, #41	@ 0x29
2000ca8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2000ca90:	68fb      	ldr	r3, [r7, #12]
2000ca92:	2220      	movs	r2, #32
2000ca94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000ca98:	68fb      	ldr	r3, [r7, #12]
2000ca9a:	2200      	movs	r2, #0
2000ca9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000ca9e:	68fb      	ldr	r3, [r7, #12]
2000caa0:	681b      	ldr	r3, [r3, #0]
2000caa2:	685a      	ldr	r2, [r3, #4]
2000caa4:	68fb      	ldr	r3, [r7, #12]
2000caa6:	681b      	ldr	r3, [r3, #0]
2000caa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000caac:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000caae:	68fb      	ldr	r3, [r7, #12]
2000cab0:	68ba      	ldr	r2, [r7, #8]
2000cab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000cab4:	68fb      	ldr	r3, [r7, #12]
2000cab6:	88fa      	ldrh	r2, [r7, #6]
2000cab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000caba:	68fb      	ldr	r3, [r7, #12]
2000cabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000cabe:	b29a      	uxth	r2, r3
2000cac0:	68fb      	ldr	r3, [r7, #12]
2000cac2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
2000cac4:	68fb      	ldr	r3, [r7, #12]
2000cac6:	683a      	ldr	r2, [r7, #0]
2000cac8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2000caca:	68fb      	ldr	r3, [r7, #12]
2000cacc:	4a48      	ldr	r2, [pc, #288]	@ (2000cbf0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x280>)
2000cace:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmatx != NULL)
2000cad0:	68fb      	ldr	r3, [r7, #12]
2000cad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000cad4:	2b00      	cmp	r3, #0
2000cad6:	d020      	beq.n	2000cb1a <HAL_I2C_Slave_Seq_Transmit_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2000cad8:	68fb      	ldr	r3, [r7, #12]
2000cada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000cadc:	4a45      	ldr	r2, [pc, #276]	@ (2000cbf4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x284>)
2000cade:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2000cae0:	68fb      	ldr	r3, [r7, #12]
2000cae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000cae4:	4a44      	ldr	r2, [pc, #272]	@ (2000cbf8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x288>)
2000cae6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2000cae8:	68fb      	ldr	r3, [r7, #12]
2000caea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000caec:	2200      	movs	r2, #0
2000caee:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2000caf0:	68fb      	ldr	r3, [r7, #12]
2000caf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000caf4:	2200      	movs	r2, #0
2000caf6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2000caf8:	68fb      	ldr	r3, [r7, #12]
2000cafa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2000cafc:	68b9      	ldr	r1, [r7, #8]
2000cafe:	68fb      	ldr	r3, [r7, #12]
2000cb00:	681b      	ldr	r3, [r3, #0]
2000cb02:	3328      	adds	r3, #40	@ 0x28
2000cb04:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2000cb06:	68fb      	ldr	r3, [r7, #12]
2000cb08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2000cb0a:	f7f7 f99b 	bl	20003e44 <HAL_DMA_Start_IT>
2000cb0e:	4603      	mov	r3, r0
2000cb10:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2000cb12:	7dfb      	ldrb	r3, [r7, #23]
2000cb14:	2b00      	cmp	r3, #0
2000cb16:	d136      	bne.n	2000cb86 <HAL_I2C_Slave_Seq_Transmit_DMA+0x216>
2000cb18:	e013      	b.n	2000cb42 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000cb1a:	68fb      	ldr	r3, [r7, #12]
2000cb1c:	2228      	movs	r2, #40	@ 0x28
2000cb1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000cb22:	68fb      	ldr	r3, [r7, #12]
2000cb24:	2200      	movs	r2, #0
2000cb26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000cb2a:	68fb      	ldr	r3, [r7, #12]
2000cb2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000cb2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000cb32:	68fb      	ldr	r3, [r7, #12]
2000cb34:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000cb36:	68fb      	ldr	r3, [r7, #12]
2000cb38:	2200      	movs	r2, #0
2000cb3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000cb3e:	2301      	movs	r3, #1
2000cb40:	e050      	b.n	2000cbe4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2000cb42:	68fb      	ldr	r3, [r7, #12]
2000cb44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000cb46:	b29a      	uxth	r2, r3
2000cb48:	68fb      	ldr	r3, [r7, #12]
2000cb4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000cb4c:	1ad3      	subs	r3, r2, r3
2000cb4e:	b29a      	uxth	r2, r3
2000cb50:	68fb      	ldr	r3, [r7, #12]
2000cb52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2000cb54:	68fb      	ldr	r3, [r7, #12]
2000cb56:	2200      	movs	r2, #0
2000cb58:	851a      	strh	r2, [r3, #40]	@ 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2000cb5a:	68fb      	ldr	r3, [r7, #12]
2000cb5c:	681b      	ldr	r3, [r3, #0]
2000cb5e:	699b      	ldr	r3, [r3, #24]
2000cb60:	f003 0308 	and.w	r3, r3, #8
2000cb64:	2b08      	cmp	r3, #8
2000cb66:	bf0c      	ite	eq
2000cb68:	2301      	moveq	r3, #1
2000cb6a:	2300      	movne	r3, #0
2000cb6c:	b2db      	uxtb	r3, r3
2000cb6e:	75bb      	strb	r3, [r7, #22]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2000cb70:	68fb      	ldr	r3, [r7, #12]
2000cb72:	681b      	ldr	r3, [r3, #0]
2000cb74:	699b      	ldr	r3, [r3, #24]
2000cb76:	0c1b      	lsrs	r3, r3, #16
2000cb78:	b2db      	uxtb	r3, r3
2000cb7a:	f003 0301 	and.w	r3, r3, #1
2000cb7e:	b2db      	uxtb	r3, r3
2000cb80:	2b01      	cmp	r3, #1
2000cb82:	d11b      	bne.n	2000cbbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x24c>
2000cb84:	e013      	b.n	2000cbae <HAL_I2C_Slave_Seq_Transmit_DMA+0x23e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000cb86:	68fb      	ldr	r3, [r7, #12]
2000cb88:	2228      	movs	r2, #40	@ 0x28
2000cb8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000cb8e:	68fb      	ldr	r3, [r7, #12]
2000cb90:	2200      	movs	r2, #0
2000cb92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000cb96:	68fb      	ldr	r3, [r7, #12]
2000cb98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000cb9a:	f043 0210 	orr.w	r2, r3, #16
2000cb9e:	68fb      	ldr	r3, [r7, #12]
2000cba0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000cba2:	68fb      	ldr	r3, [r7, #12]
2000cba4:	2200      	movs	r2, #0
2000cba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000cbaa:	2301      	movs	r3, #1
2000cbac:	e01a      	b.n	2000cbe4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2000cbae:	7dbb      	ldrb	r3, [r7, #22]
2000cbb0:	2b00      	cmp	r3, #0
2000cbb2:	d003      	beq.n	2000cbbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x24c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000cbb4:	68fb      	ldr	r3, [r7, #12]
2000cbb6:	681b      	ldr	r3, [r3, #0]
2000cbb8:	2208      	movs	r2, #8
2000cbba:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000cbbc:	68fb      	ldr	r3, [r7, #12]
2000cbbe:	2200      	movs	r2, #0
2000cbc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2000cbc4:	68fb      	ldr	r3, [r7, #12]
2000cbc6:	681b      	ldr	r3, [r3, #0]
2000cbc8:	681a      	ldr	r2, [r3, #0]
2000cbca:	68fb      	ldr	r3, [r7, #12]
2000cbcc:	681b      	ldr	r3, [r3, #0]
2000cbce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000cbd2:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* Enable ERR, STOP, NACK, ADDR interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000cbd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000cbd8:	68f8      	ldr	r0, [r7, #12]
2000cbda:	f002 fe93 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000cbde:	2300      	movs	r3, #0
2000cbe0:	e000      	b.n	2000cbe4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
  }
  else
  {
    return HAL_ERROR;
2000cbe2:	2301      	movs	r3, #1
  }
}
2000cbe4:	4618      	mov	r0, r3
2000cbe6:	3718      	adds	r7, #24
2000cbe8:	46bd      	mov	sp, r7
2000cbea:	bd80      	pop	{r7, pc}
2000cbec:	2000f3c5 	.word	0x2000f3c5
2000cbf0:	2000dde9 	.word	0x2000dde9
2000cbf4:	2000ef15 	.word	0x2000ef15
2000cbf8:	2000f151 	.word	0x2000f151

2000cbfc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
2000cbfc:	b580      	push	{r7, lr}
2000cbfe:	b086      	sub	sp, #24
2000cc00:	af00      	add	r7, sp, #0
2000cc02:	60f8      	str	r0, [r7, #12]
2000cc04:	60b9      	str	r1, [r7, #8]
2000cc06:	603b      	str	r3, [r7, #0]
2000cc08:	4613      	mov	r3, r2
2000cc0a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2000cc0c:	68fb      	ldr	r3, [r7, #12]
2000cc0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000cc12:	b2db      	uxtb	r3, r3
2000cc14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2000cc18:	2b28      	cmp	r3, #40	@ 0x28
2000cc1a:	f040 8098 	bne.w	2000cd4e <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2000cc1e:	68bb      	ldr	r3, [r7, #8]
2000cc20:	2b00      	cmp	r3, #0
2000cc22:	d002      	beq.n	2000cc2a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
2000cc24:	88fb      	ldrh	r3, [r7, #6]
2000cc26:	2b00      	cmp	r3, #0
2000cc28:	d105      	bne.n	2000cc36 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000cc2a:	68fb      	ldr	r3, [r7, #12]
2000cc2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000cc30:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000cc32:	2301      	movs	r3, #1
2000cc34:	e08c      	b.n	2000cd50 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2000cc36:	f248 0102 	movw	r1, #32770	@ 0x8002
2000cc3a:	68f8      	ldr	r0, [r7, #12]
2000cc3c:	f002 fee6 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000cc40:	68fb      	ldr	r3, [r7, #12]
2000cc42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000cc46:	2b01      	cmp	r3, #1
2000cc48:	d101      	bne.n	2000cc4e <HAL_I2C_Slave_Seq_Receive_IT+0x52>
2000cc4a:	2302      	movs	r3, #2
2000cc4c:	e080      	b.n	2000cd50 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
2000cc4e:	68fb      	ldr	r3, [r7, #12]
2000cc50:	2201      	movs	r2, #1
2000cc52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2000cc56:	68fb      	ldr	r3, [r7, #12]
2000cc58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000cc5c:	b2db      	uxtb	r3, r3
2000cc5e:	2b29      	cmp	r3, #41	@ 0x29
2000cc60:	d12a      	bne.n	2000ccb8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000cc62:	2101      	movs	r1, #1
2000cc64:	68f8      	ldr	r0, [r7, #12]
2000cc66:	f002 fed1 	bl	2000fa0c <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2000cc6a:	68fb      	ldr	r3, [r7, #12]
2000cc6c:	681b      	ldr	r3, [r3, #0]
2000cc6e:	681b      	ldr	r3, [r3, #0]
2000cc70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000cc74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2000cc78:	d11e      	bne.n	2000ccb8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000cc7a:	68fb      	ldr	r3, [r7, #12]
2000cc7c:	681b      	ldr	r3, [r3, #0]
2000cc7e:	681a      	ldr	r2, [r3, #0]
2000cc80:	68fb      	ldr	r3, [r7, #12]
2000cc82:	681b      	ldr	r3, [r3, #0]
2000cc84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2000cc88:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2000cc8a:	68fb      	ldr	r3, [r7, #12]
2000cc8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000cc8e:	2b00      	cmp	r3, #0
2000cc90:	d012      	beq.n	2000ccb8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2000cc92:	68fb      	ldr	r3, [r7, #12]
2000cc94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000cc96:	4a30      	ldr	r2, [pc, #192]	@ (2000cd58 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
2000cc98:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2000cc9a:	68fb      	ldr	r3, [r7, #12]
2000cc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000cc9e:	4618      	mov	r0, r3
2000cca0:	f7f7 fe58 	bl	20004954 <HAL_DMA_Abort_IT>
2000cca4:	4603      	mov	r3, r0
2000cca6:	2b00      	cmp	r3, #0
2000cca8:	d006      	beq.n	2000ccb8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2000ccaa:	68fb      	ldr	r3, [r7, #12]
2000ccac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ccae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000ccb0:	68fa      	ldr	r2, [r7, #12]
2000ccb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2000ccb4:	4610      	mov	r0, r2
2000ccb6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2000ccb8:	68fb      	ldr	r3, [r7, #12]
2000ccba:	222a      	movs	r2, #42	@ 0x2a
2000ccbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2000ccc0:	68fb      	ldr	r3, [r7, #12]
2000ccc2:	2220      	movs	r2, #32
2000ccc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000ccc8:	68fb      	ldr	r3, [r7, #12]
2000ccca:	2200      	movs	r2, #0
2000cccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000ccce:	68fb      	ldr	r3, [r7, #12]
2000ccd0:	681b      	ldr	r3, [r3, #0]
2000ccd2:	685a      	ldr	r2, [r3, #4]
2000ccd4:	68fb      	ldr	r3, [r7, #12]
2000ccd6:	681b      	ldr	r3, [r3, #0]
2000ccd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000ccdc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000ccde:	68fb      	ldr	r3, [r7, #12]
2000cce0:	68ba      	ldr	r2, [r7, #8]
2000cce2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000cce4:	68fb      	ldr	r3, [r7, #12]
2000cce6:	88fa      	ldrh	r2, [r7, #6]
2000cce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000ccea:	68fb      	ldr	r3, [r7, #12]
2000ccec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ccee:	b29a      	uxth	r2, r3
2000ccf0:	68fb      	ldr	r3, [r7, #12]
2000ccf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
2000ccf4:	68fb      	ldr	r3, [r7, #12]
2000ccf6:	683a      	ldr	r2, [r7, #0]
2000ccf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2000ccfa:	68fb      	ldr	r3, [r7, #12]
2000ccfc:	4a17      	ldr	r2, [pc, #92]	@ (2000cd5c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
2000ccfe:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2000cd00:	68fb      	ldr	r3, [r7, #12]
2000cd02:	681b      	ldr	r3, [r3, #0]
2000cd04:	699b      	ldr	r3, [r3, #24]
2000cd06:	f003 0308 	and.w	r3, r3, #8
2000cd0a:	2b08      	cmp	r3, #8
2000cd0c:	bf0c      	ite	eq
2000cd0e:	2301      	moveq	r3, #1
2000cd10:	2300      	movne	r3, #0
2000cd12:	b2db      	uxtb	r3, r3
2000cd14:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2000cd16:	68fb      	ldr	r3, [r7, #12]
2000cd18:	681b      	ldr	r3, [r3, #0]
2000cd1a:	699b      	ldr	r3, [r3, #24]
2000cd1c:	0c1b      	lsrs	r3, r3, #16
2000cd1e:	b2db      	uxtb	r3, r3
2000cd20:	f003 0301 	and.w	r3, r3, #1
2000cd24:	b2db      	uxtb	r3, r3
2000cd26:	2b00      	cmp	r3, #0
2000cd28:	d106      	bne.n	2000cd38 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
2000cd2a:	7dfb      	ldrb	r3, [r7, #23]
2000cd2c:	2b00      	cmp	r3, #0
2000cd2e:	d003      	beq.n	2000cd38 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000cd30:	68fb      	ldr	r3, [r7, #12]
2000cd32:	681b      	ldr	r3, [r3, #0]
2000cd34:	2208      	movs	r2, #8
2000cd36:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000cd38:	68fb      	ldr	r3, [r7, #12]
2000cd3a:	2200      	movs	r2, #0
2000cd3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2000cd40:	f248 0102 	movw	r1, #32770	@ 0x8002
2000cd44:	68f8      	ldr	r0, [r7, #12]
2000cd46:	f002 fddd 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000cd4a:	2300      	movs	r3, #0
2000cd4c:	e000      	b.n	2000cd50 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
2000cd4e:	2301      	movs	r3, #1
  }
}
2000cd50:	4618      	mov	r0, r3
2000cd52:	3718      	adds	r7, #24
2000cd54:	46bd      	mov	sp, r7
2000cd56:	bd80      	pop	{r7, pc}
2000cd58:	2000f3c5 	.word	0x2000f3c5
2000cd5c:	2000d7d5 	.word	0x2000d7d5

2000cd60 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2000cd60:	b580      	push	{r7, lr}
2000cd62:	b086      	sub	sp, #24
2000cd64:	af00      	add	r7, sp, #0
2000cd66:	60f8      	str	r0, [r7, #12]
2000cd68:	60b9      	str	r1, [r7, #8]
2000cd6a:	603b      	str	r3, [r7, #0]
2000cd6c:	4613      	mov	r3, r2
2000cd6e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2000cd70:	68fb      	ldr	r3, [r7, #12]
2000cd72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000cd76:	b2db      	uxtb	r3, r3
2000cd78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2000cd7c:	2b28      	cmp	r3, #40	@ 0x28
2000cd7e:	f040 8128 	bne.w	2000cfd2 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>
  {
    if ((pData == NULL) || (Size == 0U))
2000cd82:	68bb      	ldr	r3, [r7, #8]
2000cd84:	2b00      	cmp	r3, #0
2000cd86:	d002      	beq.n	2000cd8e <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
2000cd88:	88fb      	ldrh	r3, [r7, #6]
2000cd8a:	2b00      	cmp	r3, #0
2000cd8c:	d105      	bne.n	2000cd9a <HAL_I2C_Slave_Seq_Receive_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000cd8e:	68fb      	ldr	r3, [r7, #12]
2000cd90:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000cd94:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2000cd96:	2301      	movs	r3, #1
2000cd98:	e11c      	b.n	2000cfd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2000cd9a:	f248 0102 	movw	r1, #32770	@ 0x8002
2000cd9e:	68f8      	ldr	r0, [r7, #12]
2000cda0:	f002 fe34 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000cda4:	68fb      	ldr	r3, [r7, #12]
2000cda6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000cdaa:	2b01      	cmp	r3, #1
2000cdac:	d101      	bne.n	2000cdb2 <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
2000cdae:	2302      	movs	r3, #2
2000cdb0:	e110      	b.n	2000cfd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
2000cdb2:	68fb      	ldr	r3, [r7, #12]
2000cdb4:	2201      	movs	r2, #1
2000cdb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2000cdba:	68fb      	ldr	r3, [r7, #12]
2000cdbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000cdc0:	b2db      	uxtb	r3, r3
2000cdc2:	2b29      	cmp	r3, #41	@ 0x29
2000cdc4:	d12b      	bne.n	2000ce1e <HAL_I2C_Slave_Seq_Receive_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000cdc6:	2101      	movs	r1, #1
2000cdc8:	68f8      	ldr	r0, [r7, #12]
2000cdca:	f002 fe1f 	bl	2000fa0c <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2000cdce:	68fb      	ldr	r3, [r7, #12]
2000cdd0:	681b      	ldr	r3, [r3, #0]
2000cdd2:	681b      	ldr	r3, [r3, #0]
2000cdd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000cdd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2000cddc:	d14c      	bne.n	2000ce78 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2000cdde:	68fb      	ldr	r3, [r7, #12]
2000cde0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000cde2:	2b00      	cmp	r3, #0
2000cde4:	d048      	beq.n	2000ce78 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000cde6:	68fb      	ldr	r3, [r7, #12]
2000cde8:	681b      	ldr	r3, [r3, #0]
2000cdea:	681a      	ldr	r2, [r3, #0]
2000cdec:	68fb      	ldr	r3, [r7, #12]
2000cdee:	681b      	ldr	r3, [r3, #0]
2000cdf0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2000cdf4:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2000cdf6:	68fb      	ldr	r3, [r7, #12]
2000cdf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000cdfa:	4a78      	ldr	r2, [pc, #480]	@ (2000cfdc <HAL_I2C_Slave_Seq_Receive_DMA+0x27c>)
2000cdfc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2000cdfe:	68fb      	ldr	r3, [r7, #12]
2000ce00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ce02:	4618      	mov	r0, r3
2000ce04:	f7f7 fda6 	bl	20004954 <HAL_DMA_Abort_IT>
2000ce08:	4603      	mov	r3, r0
2000ce0a:	2b00      	cmp	r3, #0
2000ce0c:	d034      	beq.n	2000ce78 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2000ce0e:	68fb      	ldr	r3, [r7, #12]
2000ce10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ce12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000ce14:	68fa      	ldr	r2, [r7, #12]
2000ce16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2000ce18:	4610      	mov	r0, r2
2000ce1a:	4798      	blx	r3
2000ce1c:	e02c      	b.n	2000ce78 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2000ce1e:	68fb      	ldr	r3, [r7, #12]
2000ce20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ce24:	b2db      	uxtb	r3, r3
2000ce26:	2b2a      	cmp	r3, #42	@ 0x2a
2000ce28:	d126      	bne.n	2000ce78 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2000ce2a:	68fb      	ldr	r3, [r7, #12]
2000ce2c:	681b      	ldr	r3, [r3, #0]
2000ce2e:	681b      	ldr	r3, [r3, #0]
2000ce30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000ce34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000ce38:	d11e      	bne.n	2000ce78 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000ce3a:	68fb      	ldr	r3, [r7, #12]
2000ce3c:	681b      	ldr	r3, [r3, #0]
2000ce3e:	681a      	ldr	r2, [r3, #0]
2000ce40:	68fb      	ldr	r3, [r7, #12]
2000ce42:	681b      	ldr	r3, [r3, #0]
2000ce44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000ce48:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2000ce4a:	68fb      	ldr	r3, [r7, #12]
2000ce4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ce4e:	2b00      	cmp	r3, #0
2000ce50:	d012      	beq.n	2000ce78 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2000ce52:	68fb      	ldr	r3, [r7, #12]
2000ce54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ce56:	4a61      	ldr	r2, [pc, #388]	@ (2000cfdc <HAL_I2C_Slave_Seq_Receive_DMA+0x27c>)
2000ce58:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2000ce5a:	68fb      	ldr	r3, [r7, #12]
2000ce5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ce5e:	4618      	mov	r0, r3
2000ce60:	f7f7 fd78 	bl	20004954 <HAL_DMA_Abort_IT>
2000ce64:	4603      	mov	r3, r0
2000ce66:	2b00      	cmp	r3, #0
2000ce68:	d006      	beq.n	2000ce78 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000ce6a:	68fb      	ldr	r3, [r7, #12]
2000ce6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ce6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000ce70:	68fa      	ldr	r2, [r7, #12]
2000ce72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2000ce74:	4610      	mov	r0, r2
2000ce76:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2000ce78:	68fb      	ldr	r3, [r7, #12]
2000ce7a:	222a      	movs	r2, #42	@ 0x2a
2000ce7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2000ce80:	68fb      	ldr	r3, [r7, #12]
2000ce82:	2220      	movs	r2, #32
2000ce84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000ce88:	68fb      	ldr	r3, [r7, #12]
2000ce8a:	2200      	movs	r2, #0
2000ce8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000ce8e:	68fb      	ldr	r3, [r7, #12]
2000ce90:	681b      	ldr	r3, [r3, #0]
2000ce92:	685a      	ldr	r2, [r3, #4]
2000ce94:	68fb      	ldr	r3, [r7, #12]
2000ce96:	681b      	ldr	r3, [r3, #0]
2000ce98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000ce9c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000ce9e:	68fb      	ldr	r3, [r7, #12]
2000cea0:	68ba      	ldr	r2, [r7, #8]
2000cea2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2000cea4:	68fb      	ldr	r3, [r7, #12]
2000cea6:	88fa      	ldrh	r2, [r7, #6]
2000cea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000ceaa:	68fb      	ldr	r3, [r7, #12]
2000ceac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ceae:	b29a      	uxth	r2, r3
2000ceb0:	68fb      	ldr	r3, [r7, #12]
2000ceb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
2000ceb4:	68fb      	ldr	r3, [r7, #12]
2000ceb6:	683a      	ldr	r2, [r7, #0]
2000ceb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2000ceba:	68fb      	ldr	r3, [r7, #12]
2000cebc:	4a48      	ldr	r2, [pc, #288]	@ (2000cfe0 <HAL_I2C_Slave_Seq_Receive_DMA+0x280>)
2000cebe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
2000cec0:	68fb      	ldr	r3, [r7, #12]
2000cec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000cec4:	2b00      	cmp	r3, #0
2000cec6:	d020      	beq.n	2000cf0a <HAL_I2C_Slave_Seq_Receive_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2000cec8:	68fb      	ldr	r3, [r7, #12]
2000ceca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000cecc:	4a45      	ldr	r2, [pc, #276]	@ (2000cfe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x284>)
2000cece:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2000ced0:	68fb      	ldr	r3, [r7, #12]
2000ced2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ced4:	4a44      	ldr	r2, [pc, #272]	@ (2000cfe8 <HAL_I2C_Slave_Seq_Receive_DMA+0x288>)
2000ced6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2000ced8:	68fb      	ldr	r3, [r7, #12]
2000ceda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000cedc:	2200      	movs	r2, #0
2000cede:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2000cee0:	68fb      	ldr	r3, [r7, #12]
2000cee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000cee4:	2200      	movs	r2, #0
2000cee6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2000cee8:	68fb      	ldr	r3, [r7, #12]
2000ceea:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2000ceec:	68fb      	ldr	r3, [r7, #12]
2000ceee:	681b      	ldr	r3, [r3, #0]
2000cef0:	3324      	adds	r3, #36	@ 0x24
2000cef2:	4619      	mov	r1, r3
2000cef4:	68ba      	ldr	r2, [r7, #8]
                                       (uint32_t)pData, hi2c->XferSize);
2000cef6:	68fb      	ldr	r3, [r7, #12]
2000cef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2000cefa:	f7f6 ffa3 	bl	20003e44 <HAL_DMA_Start_IT>
2000cefe:	4603      	mov	r3, r0
2000cf00:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2000cf02:	7dfb      	ldrb	r3, [r7, #23]
2000cf04:	2b00      	cmp	r3, #0
2000cf06:	d136      	bne.n	2000cf76 <HAL_I2C_Slave_Seq_Receive_DMA+0x216>
2000cf08:	e013      	b.n	2000cf32 <HAL_I2C_Slave_Seq_Receive_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000cf0a:	68fb      	ldr	r3, [r7, #12]
2000cf0c:	2228      	movs	r2, #40	@ 0x28
2000cf0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000cf12:	68fb      	ldr	r3, [r7, #12]
2000cf14:	2200      	movs	r2, #0
2000cf16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000cf1a:	68fb      	ldr	r3, [r7, #12]
2000cf1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000cf1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2000cf22:	68fb      	ldr	r3, [r7, #12]
2000cf24:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000cf26:	68fb      	ldr	r3, [r7, #12]
2000cf28:	2200      	movs	r2, #0
2000cf2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000cf2e:	2301      	movs	r3, #1
2000cf30:	e050      	b.n	2000cfd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2000cf32:	68fb      	ldr	r3, [r7, #12]
2000cf34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000cf36:	b29a      	uxth	r2, r3
2000cf38:	68fb      	ldr	r3, [r7, #12]
2000cf3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000cf3c:	1ad3      	subs	r3, r2, r3
2000cf3e:	b29a      	uxth	r2, r3
2000cf40:	68fb      	ldr	r3, [r7, #12]
2000cf42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2000cf44:	68fb      	ldr	r3, [r7, #12]
2000cf46:	2200      	movs	r2, #0
2000cf48:	851a      	strh	r2, [r3, #40]	@ 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2000cf4a:	68fb      	ldr	r3, [r7, #12]
2000cf4c:	681b      	ldr	r3, [r3, #0]
2000cf4e:	699b      	ldr	r3, [r3, #24]
2000cf50:	f003 0308 	and.w	r3, r3, #8
2000cf54:	2b08      	cmp	r3, #8
2000cf56:	bf0c      	ite	eq
2000cf58:	2301      	moveq	r3, #1
2000cf5a:	2300      	movne	r3, #0
2000cf5c:	b2db      	uxtb	r3, r3
2000cf5e:	75bb      	strb	r3, [r7, #22]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2000cf60:	68fb      	ldr	r3, [r7, #12]
2000cf62:	681b      	ldr	r3, [r3, #0]
2000cf64:	699b      	ldr	r3, [r3, #24]
2000cf66:	0c1b      	lsrs	r3, r3, #16
2000cf68:	b2db      	uxtb	r3, r3
2000cf6a:	f003 0301 	and.w	r3, r3, #1
2000cf6e:	b2db      	uxtb	r3, r3
2000cf70:	2b00      	cmp	r3, #0
2000cf72:	d11b      	bne.n	2000cfac <HAL_I2C_Slave_Seq_Receive_DMA+0x24c>
2000cf74:	e013      	b.n	2000cf9e <HAL_I2C_Slave_Seq_Receive_DMA+0x23e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000cf76:	68fb      	ldr	r3, [r7, #12]
2000cf78:	2228      	movs	r2, #40	@ 0x28
2000cf7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000cf7e:	68fb      	ldr	r3, [r7, #12]
2000cf80:	2200      	movs	r2, #0
2000cf82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000cf86:	68fb      	ldr	r3, [r7, #12]
2000cf88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000cf8a:	f043 0210 	orr.w	r2, r3, #16
2000cf8e:	68fb      	ldr	r3, [r7, #12]
2000cf90:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2000cf92:	68fb      	ldr	r3, [r7, #12]
2000cf94:	2200      	movs	r2, #0
2000cf96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2000cf9a:	2301      	movs	r3, #1
2000cf9c:	e01a      	b.n	2000cfd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2000cf9e:	7dbb      	ldrb	r3, [r7, #22]
2000cfa0:	2b00      	cmp	r3, #0
2000cfa2:	d003      	beq.n	2000cfac <HAL_I2C_Slave_Seq_Receive_DMA+0x24c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000cfa4:	68fb      	ldr	r3, [r7, #12]
2000cfa6:	681b      	ldr	r3, [r3, #0]
2000cfa8:	2208      	movs	r2, #8
2000cfaa:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000cfac:	68fb      	ldr	r3, [r7, #12]
2000cfae:	2200      	movs	r2, #0
2000cfb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2000cfb4:	68fb      	ldr	r3, [r7, #12]
2000cfb6:	681b      	ldr	r3, [r3, #0]
2000cfb8:	681a      	ldr	r2, [r3, #0]
2000cfba:	68fb      	ldr	r3, [r7, #12]
2000cfbc:	681b      	ldr	r3, [r3, #0]
2000cfbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000cfc2:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2000cfc4:	f248 0102 	movw	r1, #32770	@ 0x8002
2000cfc8:	68f8      	ldr	r0, [r7, #12]
2000cfca:	f002 fc9b 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000cfce:	2300      	movs	r3, #0
2000cfd0:	e000      	b.n	2000cfd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
  }
  else
  {
    return HAL_ERROR;
2000cfd2:	2301      	movs	r3, #1
  }
}
2000cfd4:	4618      	mov	r0, r3
2000cfd6:	3718      	adds	r7, #24
2000cfd8:	46bd      	mov	sp, r7
2000cfda:	bd80      	pop	{r7, pc}
2000cfdc:	2000f3c5 	.word	0x2000f3c5
2000cfe0:	2000dde9 	.word	0x2000dde9
2000cfe4:	2000efed 	.word	0x2000efed
2000cfe8:	2000f151 	.word	0x2000f151

2000cfec <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
2000cfec:	b580      	push	{r7, lr}
2000cfee:	b082      	sub	sp, #8
2000cff0:	af00      	add	r7, sp, #0
2000cff2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
2000cff4:	687b      	ldr	r3, [r7, #4]
2000cff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000cffa:	b2db      	uxtb	r3, r3
2000cffc:	2b20      	cmp	r3, #32
2000cffe:	d10d      	bne.n	2000d01c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
2000d000:	687b      	ldr	r3, [r7, #4]
2000d002:	2228      	movs	r2, #40	@ 0x28
2000d004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
2000d008:	687b      	ldr	r3, [r7, #4]
2000d00a:	4a07      	ldr	r2, [pc, #28]	@ (2000d028 <HAL_I2C_EnableListen_IT+0x3c>)
2000d00c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000d00e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000d012:	6878      	ldr	r0, [r7, #4]
2000d014:	f002 fc76 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000d018:	2300      	movs	r3, #0
2000d01a:	e000      	b.n	2000d01e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
2000d01c:	2302      	movs	r3, #2
  }
}
2000d01e:	4618      	mov	r0, r3
2000d020:	3708      	adds	r7, #8
2000d022:	46bd      	mov	sp, r7
2000d024:	bd80      	pop	{r7, pc}
2000d026:	bf00      	nop
2000d028:	2000d7d5 	.word	0x2000d7d5

2000d02c <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
2000d02c:	b580      	push	{r7, lr}
2000d02e:	b084      	sub	sp, #16
2000d030:	af00      	add	r7, sp, #0
2000d032:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
2000d034:	687b      	ldr	r3, [r7, #4]
2000d036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000d03a:	b2db      	uxtb	r3, r3
2000d03c:	2b28      	cmp	r3, #40	@ 0x28
2000d03e:	d121      	bne.n	2000d084 <HAL_I2C_DisableListen_IT+0x58>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
2000d040:	687b      	ldr	r3, [r7, #4]
2000d042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000d046:	b2db      	uxtb	r3, r3
2000d048:	f003 0303 	and.w	r3, r3, #3
2000d04c:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
2000d04e:	687b      	ldr	r3, [r7, #4]
2000d050:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2000d054:	b2db      	uxtb	r3, r3
2000d056:	461a      	mov	r2, r3
2000d058:	68fb      	ldr	r3, [r7, #12]
2000d05a:	431a      	orrs	r2, r3
2000d05c:	687b      	ldr	r3, [r7, #4]
2000d05e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_READY;
2000d060:	687b      	ldr	r3, [r7, #4]
2000d062:	2220      	movs	r2, #32
2000d064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2000d068:	687b      	ldr	r3, [r7, #4]
2000d06a:	2200      	movs	r2, #0
2000d06c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->XferISR = NULL;
2000d070:	687b      	ldr	r3, [r7, #4]
2000d072:	2200      	movs	r2, #0
2000d074:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000d076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000d07a:	6878      	ldr	r0, [r7, #4]
2000d07c:	f002 fcc6 	bl	2000fa0c <I2C_Disable_IRQ>

    return HAL_OK;
2000d080:	2300      	movs	r3, #0
2000d082:	e000      	b.n	2000d086 <HAL_I2C_DisableListen_IT+0x5a>
  }
  else
  {
    return HAL_BUSY;
2000d084:	2302      	movs	r3, #2
  }
}
2000d086:	4618      	mov	r0, r3
2000d088:	3710      	adds	r7, #16
2000d08a:	46bd      	mov	sp, r7
2000d08c:	bd80      	pop	{r7, pc}
	...

2000d090 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
2000d090:	b580      	push	{r7, lr}
2000d092:	b084      	sub	sp, #16
2000d094:	af02      	add	r7, sp, #8
2000d096:	6078      	str	r0, [r7, #4]
2000d098:	460b      	mov	r3, r1
2000d09a:	807b      	strh	r3, [r7, #2]
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
2000d09c:	687b      	ldr	r3, [r7, #4]
2000d09e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2000d0a2:	b2db      	uxtb	r3, r3
2000d0a4:	2b10      	cmp	r3, #16
2000d0a6:	d13c      	bne.n	2000d122 <HAL_I2C_Master_Abort_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000d0a8:	687b      	ldr	r3, [r7, #4]
2000d0aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000d0ae:	2b01      	cmp	r3, #1
2000d0b0:	d101      	bne.n	2000d0b6 <HAL_I2C_Master_Abort_IT+0x26>
2000d0b2:	2302      	movs	r3, #2
2000d0b4:	e036      	b.n	2000d124 <HAL_I2C_Master_Abort_IT+0x94>
2000d0b6:	687b      	ldr	r3, [r7, #4]
2000d0b8:	2201      	movs	r2, #1
2000d0ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2000d0be:	687b      	ldr	r3, [r7, #4]
2000d0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000d0c4:	b2db      	uxtb	r3, r3
2000d0c6:	2b21      	cmp	r3, #33	@ 0x21
2000d0c8:	d107      	bne.n	2000d0da <HAL_I2C_Master_Abort_IT+0x4a>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000d0ca:	2101      	movs	r1, #1
2000d0cc:	6878      	ldr	r0, [r7, #4]
2000d0ce:	f002 fc9d 	bl	2000fa0c <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2000d0d2:	687b      	ldr	r3, [r7, #4]
2000d0d4:	2211      	movs	r2, #17
2000d0d6:	631a      	str	r2, [r3, #48]	@ 0x30
2000d0d8:	e00c      	b.n	2000d0f4 <HAL_I2C_Master_Abort_IT+0x64>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000d0da:	687b      	ldr	r3, [r7, #4]
2000d0dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000d0e0:	b2db      	uxtb	r3, r3
2000d0e2:	2b22      	cmp	r3, #34	@ 0x22
2000d0e4:	d106      	bne.n	2000d0f4 <HAL_I2C_Master_Abort_IT+0x64>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2000d0e6:	2102      	movs	r1, #2
2000d0e8:	6878      	ldr	r0, [r7, #4]
2000d0ea:	f002 fc8f 	bl	2000fa0c <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2000d0ee:	687b      	ldr	r3, [r7, #4]
2000d0f0:	2212      	movs	r2, #18
2000d0f2:	631a      	str	r2, [r3, #48]	@ 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
2000d0f4:	687b      	ldr	r3, [r7, #4]
2000d0f6:	2260      	movs	r2, #96	@ 0x60
2000d0f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
2000d0fc:	8879      	ldrh	r1, [r7, #2]
2000d0fe:	4b0b      	ldr	r3, [pc, #44]	@ (2000d12c <HAL_I2C_Master_Abort_IT+0x9c>)
2000d100:	9300      	str	r3, [sp, #0]
2000d102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000d106:	2201      	movs	r2, #1
2000d108:	6878      	ldr	r0, [r7, #4]
2000d10a:	f002 fbc9 	bl	2000f8a0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000d10e:	687b      	ldr	r3, [r7, #4]
2000d110:	2200      	movs	r2, #0
2000d112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2000d116:	2120      	movs	r1, #32
2000d118:	6878      	ldr	r0, [r7, #4]
2000d11a:	f002 fbf3 	bl	2000f904 <I2C_Enable_IRQ>

    return HAL_OK;
2000d11e:	2300      	movs	r3, #0
2000d120:	e000      	b.n	2000d124 <HAL_I2C_Master_Abort_IT+0x94>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
2000d122:	2301      	movs	r3, #1
  }
}
2000d124:	4618      	mov	r0, r3
2000d126:	3708      	adds	r7, #8
2000d128:	46bd      	mov	sp, r7
2000d12a:	bd80      	pop	{r7, pc}
2000d12c:	80004000 	.word	0x80004000

2000d130 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
2000d130:	b580      	push	{r7, lr}
2000d132:	b084      	sub	sp, #16
2000d134:	af00      	add	r7, sp, #0
2000d136:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2000d138:	687b      	ldr	r3, [r7, #4]
2000d13a:	681b      	ldr	r3, [r3, #0]
2000d13c:	699b      	ldr	r3, [r3, #24]
2000d13e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2000d140:	687b      	ldr	r3, [r7, #4]
2000d142:	681b      	ldr	r3, [r3, #0]
2000d144:	681b      	ldr	r3, [r3, #0]
2000d146:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
2000d148:	687b      	ldr	r3, [r7, #4]
2000d14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000d14c:	2b00      	cmp	r3, #0
2000d14e:	d005      	beq.n	2000d15c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
2000d150:	687b      	ldr	r3, [r7, #4]
2000d152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000d154:	68ba      	ldr	r2, [r7, #8]
2000d156:	68f9      	ldr	r1, [r7, #12]
2000d158:	6878      	ldr	r0, [r7, #4]
2000d15a:	4798      	blx	r3
  }
}
2000d15c:	bf00      	nop
2000d15e:	3710      	adds	r7, #16
2000d160:	46bd      	mov	sp, r7
2000d162:	bd80      	pop	{r7, pc}

2000d164 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2000d164:	b580      	push	{r7, lr}
2000d166:	b086      	sub	sp, #24
2000d168:	af00      	add	r7, sp, #0
2000d16a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2000d16c:	687b      	ldr	r3, [r7, #4]
2000d16e:	681b      	ldr	r3, [r3, #0]
2000d170:	699b      	ldr	r3, [r3, #24]
2000d172:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2000d174:	687b      	ldr	r3, [r7, #4]
2000d176:	681b      	ldr	r3, [r3, #0]
2000d178:	681b      	ldr	r3, [r3, #0]
2000d17a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2000d17c:	697b      	ldr	r3, [r7, #20]
2000d17e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000d182:	2b00      	cmp	r3, #0
2000d184:	d00f      	beq.n	2000d1a6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2000d186:	693b      	ldr	r3, [r7, #16]
2000d188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2000d18c:	2b00      	cmp	r3, #0
2000d18e:	d00a      	beq.n	2000d1a6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2000d190:	687b      	ldr	r3, [r7, #4]
2000d192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000d194:	f043 0201 	orr.w	r2, r3, #1
2000d198:	687b      	ldr	r3, [r7, #4]
2000d19a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2000d19c:	687b      	ldr	r3, [r7, #4]
2000d19e:	681b      	ldr	r3, [r3, #0]
2000d1a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
2000d1a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2000d1a6:	697b      	ldr	r3, [r7, #20]
2000d1a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
2000d1ac:	2b00      	cmp	r3, #0
2000d1ae:	d00f      	beq.n	2000d1d0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2000d1b0:	693b      	ldr	r3, [r7, #16]
2000d1b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2000d1b6:	2b00      	cmp	r3, #0
2000d1b8:	d00a      	beq.n	2000d1d0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2000d1ba:	687b      	ldr	r3, [r7, #4]
2000d1bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000d1be:	f043 0208 	orr.w	r2, r3, #8
2000d1c2:	687b      	ldr	r3, [r7, #4]
2000d1c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2000d1c6:	687b      	ldr	r3, [r7, #4]
2000d1c8:	681b      	ldr	r3, [r3, #0]
2000d1ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
2000d1ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2000d1d0:	697b      	ldr	r3, [r7, #20]
2000d1d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2000d1d6:	2b00      	cmp	r3, #0
2000d1d8:	d00f      	beq.n	2000d1fa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2000d1da:	693b      	ldr	r3, [r7, #16]
2000d1dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2000d1e0:	2b00      	cmp	r3, #0
2000d1e2:	d00a      	beq.n	2000d1fa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2000d1e4:	687b      	ldr	r3, [r7, #4]
2000d1e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000d1e8:	f043 0202 	orr.w	r2, r3, #2
2000d1ec:	687b      	ldr	r3, [r7, #4]
2000d1ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2000d1f0:	687b      	ldr	r3, [r7, #4]
2000d1f2:	681b      	ldr	r3, [r3, #0]
2000d1f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000d1f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2000d1fa:	687b      	ldr	r3, [r7, #4]
2000d1fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000d1fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2000d200:	68fb      	ldr	r3, [r7, #12]
2000d202:	f003 030b 	and.w	r3, r3, #11
2000d206:	2b00      	cmp	r3, #0
2000d208:	d003      	beq.n	2000d212 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
2000d20a:	68f9      	ldr	r1, [r7, #12]
2000d20c:	6878      	ldr	r0, [r7, #4]
2000d20e:	f001 fcfb 	bl	2000ec08 <I2C_ITError>
  }
}
2000d212:	bf00      	nop
2000d214:	3718      	adds	r7, #24
2000d216:	46bd      	mov	sp, r7
2000d218:	bd80      	pop	{r7, pc}

2000d21a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2000d21a:	b480      	push	{r7}
2000d21c:	b083      	sub	sp, #12
2000d21e:	af00      	add	r7, sp, #0
2000d220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
2000d222:	bf00      	nop
2000d224:	370c      	adds	r7, #12
2000d226:	46bd      	mov	sp, r7
2000d228:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d22c:	4770      	bx	lr

2000d22e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2000d22e:	b480      	push	{r7}
2000d230:	b083      	sub	sp, #12
2000d232:	af00      	add	r7, sp, #0
2000d234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
2000d236:	bf00      	nop
2000d238:	370c      	adds	r7, #12
2000d23a:	46bd      	mov	sp, r7
2000d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d240:	4770      	bx	lr

2000d242 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2000d242:	b480      	push	{r7}
2000d244:	b083      	sub	sp, #12
2000d246:	af00      	add	r7, sp, #0
2000d248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
2000d24a:	bf00      	nop
2000d24c:	370c      	adds	r7, #12
2000d24e:	46bd      	mov	sp, r7
2000d250:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d254:	4770      	bx	lr

2000d256 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2000d256:	b480      	push	{r7}
2000d258:	b083      	sub	sp, #12
2000d25a:	af00      	add	r7, sp, #0
2000d25c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
2000d25e:	bf00      	nop
2000d260:	370c      	adds	r7, #12
2000d262:	46bd      	mov	sp, r7
2000d264:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d268:	4770      	bx	lr

2000d26a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
2000d26a:	b480      	push	{r7}
2000d26c:	b083      	sub	sp, #12
2000d26e:	af00      	add	r7, sp, #0
2000d270:	6078      	str	r0, [r7, #4]
2000d272:	460b      	mov	r3, r1
2000d274:	70fb      	strb	r3, [r7, #3]
2000d276:	4613      	mov	r3, r2
2000d278:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
2000d27a:	bf00      	nop
2000d27c:	370c      	adds	r7, #12
2000d27e:	46bd      	mov	sp, r7
2000d280:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d284:	4770      	bx	lr

2000d286 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
2000d286:	b480      	push	{r7}
2000d288:	b083      	sub	sp, #12
2000d28a:	af00      	add	r7, sp, #0
2000d28c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
2000d28e:	bf00      	nop
2000d290:	370c      	adds	r7, #12
2000d292:	46bd      	mov	sp, r7
2000d294:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d298:	4770      	bx	lr

2000d29a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2000d29a:	b480      	push	{r7}
2000d29c:	b083      	sub	sp, #12
2000d29e:	af00      	add	r7, sp, #0
2000d2a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
2000d2a2:	bf00      	nop
2000d2a4:	370c      	adds	r7, #12
2000d2a6:	46bd      	mov	sp, r7
2000d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d2ac:	4770      	bx	lr

2000d2ae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2000d2ae:	b480      	push	{r7}
2000d2b0:	b083      	sub	sp, #12
2000d2b2:	af00      	add	r7, sp, #0
2000d2b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
2000d2b6:	bf00      	nop
2000d2b8:	370c      	adds	r7, #12
2000d2ba:	46bd      	mov	sp, r7
2000d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d2c0:	4770      	bx	lr

2000d2c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
2000d2c2:	b480      	push	{r7}
2000d2c4:	b083      	sub	sp, #12
2000d2c6:	af00      	add	r7, sp, #0
2000d2c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
2000d2ca:	bf00      	nop
2000d2cc:	370c      	adds	r7, #12
2000d2ce:	46bd      	mov	sp, r7
2000d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d2d4:	4770      	bx	lr

2000d2d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
2000d2d6:	b480      	push	{r7}
2000d2d8:	b083      	sub	sp, #12
2000d2da:	af00      	add	r7, sp, #0
2000d2dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
2000d2de:	bf00      	nop
2000d2e0:	370c      	adds	r7, #12
2000d2e2:	46bd      	mov	sp, r7
2000d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d2e8:	4770      	bx	lr

2000d2ea <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
2000d2ea:	b480      	push	{r7}
2000d2ec:	b083      	sub	sp, #12
2000d2ee:	af00      	add	r7, sp, #0
2000d2f0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
2000d2f2:	687b      	ldr	r3, [r7, #4]
2000d2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000d2f8:	b2db      	uxtb	r3, r3
}
2000d2fa:	4618      	mov	r0, r3
2000d2fc:	370c      	adds	r7, #12
2000d2fe:	46bd      	mov	sp, r7
2000d300:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d304:	4770      	bx	lr

2000d306 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(const I2C_HandleTypeDef *hi2c)
{
2000d306:	b480      	push	{r7}
2000d308:	b083      	sub	sp, #12
2000d30a:	af00      	add	r7, sp, #0
2000d30c:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
2000d30e:	687b      	ldr	r3, [r7, #4]
2000d310:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2000d314:	b2db      	uxtb	r3, r3
}
2000d316:	4618      	mov	r0, r3
2000d318:	370c      	adds	r7, #12
2000d31a:	46bd      	mov	sp, r7
2000d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d320:	4770      	bx	lr

2000d322 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
2000d322:	b480      	push	{r7}
2000d324:	b083      	sub	sp, #12
2000d326:	af00      	add	r7, sp, #0
2000d328:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
2000d32a:	687b      	ldr	r3, [r7, #4]
2000d32c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
2000d32e:	4618      	mov	r0, r3
2000d330:	370c      	adds	r7, #12
2000d332:	46bd      	mov	sp, r7
2000d334:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d338:	4770      	bx	lr

2000d33a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2000d33a:	b580      	push	{r7, lr}
2000d33c:	b088      	sub	sp, #32
2000d33e:	af02      	add	r7, sp, #8
2000d340:	60f8      	str	r0, [r7, #12]
2000d342:	60b9      	str	r1, [r7, #8]
2000d344:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
2000d346:	68bb      	ldr	r3, [r7, #8]
2000d348:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2000d34a:	68fb      	ldr	r3, [r7, #12]
2000d34c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000d350:	2b01      	cmp	r3, #1
2000d352:	d101      	bne.n	2000d358 <I2C_Master_ISR_IT+0x1e>
2000d354:	2302      	movs	r3, #2
2000d356:	e113      	b.n	2000d580 <I2C_Master_ISR_IT+0x246>
2000d358:	68fb      	ldr	r3, [r7, #12]
2000d35a:	2201      	movs	r2, #1
2000d35c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000d360:	697b      	ldr	r3, [r7, #20]
2000d362:	f003 0310 	and.w	r3, r3, #16
2000d366:	2b00      	cmp	r3, #0
2000d368:	d012      	beq.n	2000d390 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2000d36a:	687b      	ldr	r3, [r7, #4]
2000d36c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000d370:	2b00      	cmp	r3, #0
2000d372:	d00d      	beq.n	2000d390 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000d374:	68fb      	ldr	r3, [r7, #12]
2000d376:	681b      	ldr	r3, [r3, #0]
2000d378:	2210      	movs	r2, #16
2000d37a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000d37c:	68fb      	ldr	r3, [r7, #12]
2000d37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000d380:	f043 0204 	orr.w	r2, r3, #4
2000d384:	68fb      	ldr	r3, [r7, #12]
2000d386:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2000d388:	68f8      	ldr	r0, [r7, #12]
2000d38a:	f001 fd54 	bl	2000ee36 <I2C_Flush_TXDR>
2000d38e:	e0e4      	b.n	2000d55a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2000d390:	697b      	ldr	r3, [r7, #20]
2000d392:	f003 0304 	and.w	r3, r3, #4
2000d396:	2b00      	cmp	r3, #0
2000d398:	d022      	beq.n	2000d3e0 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2000d39a:	687b      	ldr	r3, [r7, #4]
2000d39c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2000d3a0:	2b00      	cmp	r3, #0
2000d3a2:	d01d      	beq.n	2000d3e0 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2000d3a4:	697b      	ldr	r3, [r7, #20]
2000d3a6:	f023 0304 	bic.w	r3, r3, #4
2000d3aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000d3ac:	68fb      	ldr	r3, [r7, #12]
2000d3ae:	681b      	ldr	r3, [r3, #0]
2000d3b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000d3b2:	68fb      	ldr	r3, [r7, #12]
2000d3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d3b6:	b2d2      	uxtb	r2, r2
2000d3b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2000d3ba:	68fb      	ldr	r3, [r7, #12]
2000d3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d3be:	1c5a      	adds	r2, r3, #1
2000d3c0:	68fb      	ldr	r3, [r7, #12]
2000d3c2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
2000d3c4:	68fb      	ldr	r3, [r7, #12]
2000d3c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d3c8:	3b01      	subs	r3, #1
2000d3ca:	b29a      	uxth	r2, r3
2000d3cc:	68fb      	ldr	r3, [r7, #12]
2000d3ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
2000d3d0:	68fb      	ldr	r3, [r7, #12]
2000d3d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d3d4:	b29b      	uxth	r3, r3
2000d3d6:	3b01      	subs	r3, #1
2000d3d8:	b29a      	uxth	r2, r3
2000d3da:	68fb      	ldr	r3, [r7, #12]
2000d3dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
2000d3de:	e0bc      	b.n	2000d55a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
2000d3e0:	697b      	ldr	r3, [r7, #20]
2000d3e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000d3e6:	2b00      	cmp	r3, #0
2000d3e8:	d128      	bne.n	2000d43c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2000d3ea:	697b      	ldr	r3, [r7, #20]
2000d3ec:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
2000d3f0:	2b00      	cmp	r3, #0
2000d3f2:	d023      	beq.n	2000d43c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
2000d3f4:	687b      	ldr	r3, [r7, #4]
2000d3f6:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2000d3fa:	2b00      	cmp	r3, #0
2000d3fc:	d01e      	beq.n	2000d43c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
2000d3fe:	68fb      	ldr	r3, [r7, #12]
2000d400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d402:	b29b      	uxth	r3, r3
2000d404:	2b00      	cmp	r3, #0
2000d406:	f000 80a8 	beq.w	2000d55a <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000d40a:	68fb      	ldr	r3, [r7, #12]
2000d40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d40e:	781a      	ldrb	r2, [r3, #0]
2000d410:	68fb      	ldr	r3, [r7, #12]
2000d412:	681b      	ldr	r3, [r3, #0]
2000d414:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000d416:	68fb      	ldr	r3, [r7, #12]
2000d418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d41a:	1c5a      	adds	r2, r3, #1
2000d41c:	68fb      	ldr	r3, [r7, #12]
2000d41e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2000d420:	68fb      	ldr	r3, [r7, #12]
2000d422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d424:	3b01      	subs	r3, #1
2000d426:	b29a      	uxth	r2, r3
2000d428:	68fb      	ldr	r3, [r7, #12]
2000d42a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2000d42c:	68fb      	ldr	r3, [r7, #12]
2000d42e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d430:	b29b      	uxth	r3, r3
2000d432:	3b01      	subs	r3, #1
2000d434:	b29a      	uxth	r2, r3
2000d436:	68fb      	ldr	r3, [r7, #12]
2000d438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
2000d43a:	e08e      	b.n	2000d55a <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2000d43c:	697b      	ldr	r3, [r7, #20]
2000d43e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000d442:	2b00      	cmp	r3, #0
2000d444:	d05c      	beq.n	2000d500 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2000d446:	687b      	ldr	r3, [r7, #4]
2000d448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2000d44c:	2b00      	cmp	r3, #0
2000d44e:	d057      	beq.n	2000d500 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000d450:	68fb      	ldr	r3, [r7, #12]
2000d452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d454:	b29b      	uxth	r3, r3
2000d456:	2b00      	cmp	r3, #0
2000d458:	d040      	beq.n	2000d4dc <I2C_Master_ISR_IT+0x1a2>
2000d45a:	68fb      	ldr	r3, [r7, #12]
2000d45c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d45e:	2b00      	cmp	r3, #0
2000d460:	d13c      	bne.n	2000d4dc <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2000d462:	68fb      	ldr	r3, [r7, #12]
2000d464:	681b      	ldr	r3, [r3, #0]
2000d466:	685b      	ldr	r3, [r3, #4]
2000d468:	b29b      	uxth	r3, r3
2000d46a:	f3c3 0309 	ubfx	r3, r3, #0, #10
2000d46e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000d470:	68fb      	ldr	r3, [r7, #12]
2000d472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d474:	b29b      	uxth	r3, r3
2000d476:	2bff      	cmp	r3, #255	@ 0xff
2000d478:	d90e      	bls.n	2000d498 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2000d47a:	68fb      	ldr	r3, [r7, #12]
2000d47c:	22ff      	movs	r2, #255	@ 0xff
2000d47e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2000d480:	68fb      	ldr	r3, [r7, #12]
2000d482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d484:	b2da      	uxtb	r2, r3
2000d486:	8a79      	ldrh	r1, [r7, #18]
2000d488:	2300      	movs	r3, #0
2000d48a:	9300      	str	r3, [sp, #0]
2000d48c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000d490:	68f8      	ldr	r0, [r7, #12]
2000d492:	f002 fa05 	bl	2000f8a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000d496:	e032      	b.n	2000d4fe <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2000d498:	68fb      	ldr	r3, [r7, #12]
2000d49a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d49c:	b29a      	uxth	r2, r3
2000d49e:	68fb      	ldr	r3, [r7, #12]
2000d4a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2000d4a2:	68fb      	ldr	r3, [r7, #12]
2000d4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000d4a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000d4aa:	d00b      	beq.n	2000d4c4 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2000d4ac:	68fb      	ldr	r3, [r7, #12]
2000d4ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d4b0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
2000d4b2:	68fb      	ldr	r3, [r7, #12]
2000d4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2000d4b6:	8a79      	ldrh	r1, [r7, #18]
2000d4b8:	2000      	movs	r0, #0
2000d4ba:	9000      	str	r0, [sp, #0]
2000d4bc:	68f8      	ldr	r0, [r7, #12]
2000d4be:	f002 f9ef 	bl	2000f8a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000d4c2:	e01c      	b.n	2000d4fe <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2000d4c4:	68fb      	ldr	r3, [r7, #12]
2000d4c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d4c8:	b2da      	uxtb	r2, r3
2000d4ca:	8a79      	ldrh	r1, [r7, #18]
2000d4cc:	2300      	movs	r3, #0
2000d4ce:	9300      	str	r3, [sp, #0]
2000d4d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000d4d4:	68f8      	ldr	r0, [r7, #12]
2000d4d6:	f002 f9e3 	bl	2000f8a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000d4da:	e010      	b.n	2000d4fe <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2000d4dc:	68fb      	ldr	r3, [r7, #12]
2000d4de:	681b      	ldr	r3, [r3, #0]
2000d4e0:	685b      	ldr	r3, [r3, #4]
2000d4e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000d4e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000d4ea:	d003      	beq.n	2000d4f4 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2000d4ec:	68f8      	ldr	r0, [r7, #12]
2000d4ee:	f000 ff81 	bl	2000e3f4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000d4f2:	e032      	b.n	2000d55a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2000d4f4:	2140      	movs	r1, #64	@ 0x40
2000d4f6:	68f8      	ldr	r0, [r7, #12]
2000d4f8:	f001 fb86 	bl	2000ec08 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000d4fc:	e02d      	b.n	2000d55a <I2C_Master_ISR_IT+0x220>
2000d4fe:	e02c      	b.n	2000d55a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2000d500:	697b      	ldr	r3, [r7, #20]
2000d502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000d506:	2b00      	cmp	r3, #0
2000d508:	d027      	beq.n	2000d55a <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2000d50a:	687b      	ldr	r3, [r7, #4]
2000d50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2000d510:	2b00      	cmp	r3, #0
2000d512:	d022      	beq.n	2000d55a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
2000d514:	68fb      	ldr	r3, [r7, #12]
2000d516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d518:	b29b      	uxth	r3, r3
2000d51a:	2b00      	cmp	r3, #0
2000d51c:	d119      	bne.n	2000d552 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2000d51e:	68fb      	ldr	r3, [r7, #12]
2000d520:	681b      	ldr	r3, [r3, #0]
2000d522:	685b      	ldr	r3, [r3, #4]
2000d524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000d528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000d52c:	d015      	beq.n	2000d55a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2000d52e:	68fb      	ldr	r3, [r7, #12]
2000d530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000d532:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000d536:	d108      	bne.n	2000d54a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2000d538:	68fb      	ldr	r3, [r7, #12]
2000d53a:	681b      	ldr	r3, [r3, #0]
2000d53c:	685a      	ldr	r2, [r3, #4]
2000d53e:	68fb      	ldr	r3, [r7, #12]
2000d540:	681b      	ldr	r3, [r3, #0]
2000d542:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000d546:	605a      	str	r2, [r3, #4]
2000d548:	e007      	b.n	2000d55a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2000d54a:	68f8      	ldr	r0, [r7, #12]
2000d54c:	f000 ff52 	bl	2000e3f4 <I2C_ITMasterSeqCplt>
2000d550:	e003      	b.n	2000d55a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2000d552:	2140      	movs	r1, #64	@ 0x40
2000d554:	68f8      	ldr	r0, [r7, #12]
2000d556:	f001 fb57 	bl	2000ec08 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2000d55a:	697b      	ldr	r3, [r7, #20]
2000d55c:	f003 0320 	and.w	r3, r3, #32
2000d560:	2b00      	cmp	r3, #0
2000d562:	d008      	beq.n	2000d576 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000d564:	687b      	ldr	r3, [r7, #4]
2000d566:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2000d56a:	2b00      	cmp	r3, #0
2000d56c:	d003      	beq.n	2000d576 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2000d56e:	6979      	ldr	r1, [r7, #20]
2000d570:	68f8      	ldr	r0, [r7, #12]
2000d572:	f000 ffd9 	bl	2000e528 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2000d576:	68fb      	ldr	r3, [r7, #12]
2000d578:	2200      	movs	r2, #0
2000d57a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2000d57e:	2300      	movs	r3, #0
}
2000d580:	4618      	mov	r0, r3
2000d582:	3718      	adds	r7, #24
2000d584:	46bd      	mov	sp, r7
2000d586:	bd80      	pop	{r7, pc}

2000d588 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
2000d588:	b580      	push	{r7, lr}
2000d58a:	b088      	sub	sp, #32
2000d58c:	af02      	add	r7, sp, #8
2000d58e:	60f8      	str	r0, [r7, #12]
2000d590:	60b9      	str	r1, [r7, #8]
2000d592:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
2000d594:	4b8d      	ldr	r3, [pc, #564]	@ (2000d7cc <I2C_Mem_ISR_IT+0x244>)
2000d596:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2000d598:	68bb      	ldr	r3, [r7, #8]
2000d59a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2000d59c:	68fb      	ldr	r3, [r7, #12]
2000d59e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000d5a2:	2b01      	cmp	r3, #1
2000d5a4:	d101      	bne.n	2000d5aa <I2C_Mem_ISR_IT+0x22>
2000d5a6:	2302      	movs	r3, #2
2000d5a8:	e10c      	b.n	2000d7c4 <I2C_Mem_ISR_IT+0x23c>
2000d5aa:	68fb      	ldr	r3, [r7, #12]
2000d5ac:	2201      	movs	r2, #1
2000d5ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000d5b2:	693b      	ldr	r3, [r7, #16]
2000d5b4:	f003 0310 	and.w	r3, r3, #16
2000d5b8:	2b00      	cmp	r3, #0
2000d5ba:	d012      	beq.n	2000d5e2 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2000d5bc:	687b      	ldr	r3, [r7, #4]
2000d5be:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000d5c2:	2b00      	cmp	r3, #0
2000d5c4:	d00d      	beq.n	2000d5e2 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000d5c6:	68fb      	ldr	r3, [r7, #12]
2000d5c8:	681b      	ldr	r3, [r3, #0]
2000d5ca:	2210      	movs	r2, #16
2000d5cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000d5ce:	68fb      	ldr	r3, [r7, #12]
2000d5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000d5d2:	f043 0204 	orr.w	r2, r3, #4
2000d5d6:	68fb      	ldr	r3, [r7, #12]
2000d5d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2000d5da:	68f8      	ldr	r0, [r7, #12]
2000d5dc:	f001 fc2b 	bl	2000ee36 <I2C_Flush_TXDR>
2000d5e0:	e0dd      	b.n	2000d79e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2000d5e2:	693b      	ldr	r3, [r7, #16]
2000d5e4:	f003 0304 	and.w	r3, r3, #4
2000d5e8:	2b00      	cmp	r3, #0
2000d5ea:	d022      	beq.n	2000d632 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2000d5ec:	687b      	ldr	r3, [r7, #4]
2000d5ee:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2000d5f2:	2b00      	cmp	r3, #0
2000d5f4:	d01d      	beq.n	2000d632 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2000d5f6:	693b      	ldr	r3, [r7, #16]
2000d5f8:	f023 0304 	bic.w	r3, r3, #4
2000d5fc:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000d5fe:	68fb      	ldr	r3, [r7, #12]
2000d600:	681b      	ldr	r3, [r3, #0]
2000d602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000d604:	68fb      	ldr	r3, [r7, #12]
2000d606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d608:	b2d2      	uxtb	r2, r2
2000d60a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2000d60c:	68fb      	ldr	r3, [r7, #12]
2000d60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d610:	1c5a      	adds	r2, r3, #1
2000d612:	68fb      	ldr	r3, [r7, #12]
2000d614:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
2000d616:	68fb      	ldr	r3, [r7, #12]
2000d618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d61a:	3b01      	subs	r3, #1
2000d61c:	b29a      	uxth	r2, r3
2000d61e:	68fb      	ldr	r3, [r7, #12]
2000d620:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
2000d622:	68fb      	ldr	r3, [r7, #12]
2000d624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d626:	b29b      	uxth	r3, r3
2000d628:	3b01      	subs	r3, #1
2000d62a:	b29a      	uxth	r2, r3
2000d62c:	68fb      	ldr	r3, [r7, #12]
2000d62e:	855a      	strh	r2, [r3, #42]	@ 0x2a
2000d630:	e0b5      	b.n	2000d79e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2000d632:	693b      	ldr	r3, [r7, #16]
2000d634:	f003 0302 	and.w	r3, r3, #2
2000d638:	2b00      	cmp	r3, #0
2000d63a:	d02c      	beq.n	2000d696 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2000d63c:	687b      	ldr	r3, [r7, #4]
2000d63e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2000d642:	2b00      	cmp	r3, #0
2000d644:	d027      	beq.n	2000d696 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2000d646:	68fb      	ldr	r3, [r7, #12]
2000d648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000d64a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
2000d64e:	d118      	bne.n	2000d682 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000d650:	68fb      	ldr	r3, [r7, #12]
2000d652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d654:	781a      	ldrb	r2, [r3, #0]
2000d656:	68fb      	ldr	r3, [r7, #12]
2000d658:	681b      	ldr	r3, [r3, #0]
2000d65a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000d65c:	68fb      	ldr	r3, [r7, #12]
2000d65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d660:	1c5a      	adds	r2, r3, #1
2000d662:	68fb      	ldr	r3, [r7, #12]
2000d664:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2000d666:	68fb      	ldr	r3, [r7, #12]
2000d668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d66a:	3b01      	subs	r3, #1
2000d66c:	b29a      	uxth	r2, r3
2000d66e:	68fb      	ldr	r3, [r7, #12]
2000d670:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2000d672:	68fb      	ldr	r3, [r7, #12]
2000d674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d676:	b29b      	uxth	r3, r3
2000d678:	3b01      	subs	r3, #1
2000d67a:	b29a      	uxth	r2, r3
2000d67c:	68fb      	ldr	r3, [r7, #12]
2000d67e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2000d680:	e08d      	b.n	2000d79e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
2000d682:	68fb      	ldr	r3, [r7, #12]
2000d684:	681b      	ldr	r3, [r3, #0]
2000d686:	68fa      	ldr	r2, [r7, #12]
2000d688:	6d12      	ldr	r2, [r2, #80]	@ 0x50
2000d68a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2000d68c:	68fb      	ldr	r3, [r7, #12]
2000d68e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
2000d692:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2000d694:	e083      	b.n	2000d79e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2000d696:	693b      	ldr	r3, [r7, #16]
2000d698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000d69c:	2b00      	cmp	r3, #0
2000d69e:	d03c      	beq.n	2000d71a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2000d6a0:	687b      	ldr	r3, [r7, #4]
2000d6a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2000d6a6:	2b00      	cmp	r3, #0
2000d6a8:	d037      	beq.n	2000d71a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000d6aa:	68fb      	ldr	r3, [r7, #12]
2000d6ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d6ae:	b29b      	uxth	r3, r3
2000d6b0:	2b00      	cmp	r3, #0
2000d6b2:	d02c      	beq.n	2000d70e <I2C_Mem_ISR_IT+0x186>
2000d6b4:	68fb      	ldr	r3, [r7, #12]
2000d6b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d6b8:	2b00      	cmp	r3, #0
2000d6ba:	d128      	bne.n	2000d70e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000d6bc:	68fb      	ldr	r3, [r7, #12]
2000d6be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d6c0:	b29b      	uxth	r3, r3
2000d6c2:	2bff      	cmp	r3, #255	@ 0xff
2000d6c4:	d910      	bls.n	2000d6e8 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2000d6c6:	68fb      	ldr	r3, [r7, #12]
2000d6c8:	22ff      	movs	r2, #255	@ 0xff
2000d6ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2000d6cc:	68fb      	ldr	r3, [r7, #12]
2000d6ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000d6d0:	b299      	uxth	r1, r3
2000d6d2:	68fb      	ldr	r3, [r7, #12]
2000d6d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d6d6:	b2da      	uxtb	r2, r3
2000d6d8:	2300      	movs	r3, #0
2000d6da:	9300      	str	r3, [sp, #0]
2000d6dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000d6e0:	68f8      	ldr	r0, [r7, #12]
2000d6e2:	f002 f8dd 	bl	2000f8a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000d6e6:	e017      	b.n	2000d718 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2000d6e8:	68fb      	ldr	r3, [r7, #12]
2000d6ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d6ec:	b29a      	uxth	r2, r3
2000d6ee:	68fb      	ldr	r3, [r7, #12]
2000d6f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2000d6f2:	68fb      	ldr	r3, [r7, #12]
2000d6f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000d6f6:	b299      	uxth	r1, r3
2000d6f8:	68fb      	ldr	r3, [r7, #12]
2000d6fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d6fc:	b2da      	uxtb	r2, r3
2000d6fe:	2300      	movs	r3, #0
2000d700:	9300      	str	r3, [sp, #0]
2000d702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000d706:	68f8      	ldr	r0, [r7, #12]
2000d708:	f002 f8ca 	bl	2000f8a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000d70c:	e004      	b.n	2000d718 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2000d70e:	2140      	movs	r1, #64	@ 0x40
2000d710:	68f8      	ldr	r0, [r7, #12]
2000d712:	f001 fa79 	bl	2000ec08 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000d716:	e042      	b.n	2000d79e <I2C_Mem_ISR_IT+0x216>
2000d718:	e041      	b.n	2000d79e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2000d71a:	693b      	ldr	r3, [r7, #16]
2000d71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000d720:	2b00      	cmp	r3, #0
2000d722:	d03c      	beq.n	2000d79e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2000d724:	687b      	ldr	r3, [r7, #4]
2000d726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2000d72a:	2b00      	cmp	r3, #0
2000d72c:	d037      	beq.n	2000d79e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000d72e:	2101      	movs	r1, #1
2000d730:	68f8      	ldr	r0, [r7, #12]
2000d732:	f002 f96b 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2000d736:	2102      	movs	r1, #2
2000d738:	68f8      	ldr	r0, [r7, #12]
2000d73a:	f002 f8e3 	bl	2000f904 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000d73e:	68fb      	ldr	r3, [r7, #12]
2000d740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000d744:	b2db      	uxtb	r3, r3
2000d746:	2b22      	cmp	r3, #34	@ 0x22
2000d748:	d101      	bne.n	2000d74e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
2000d74a:	4b21      	ldr	r3, [pc, #132]	@ (2000d7d0 <I2C_Mem_ISR_IT+0x248>)
2000d74c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000d74e:	68fb      	ldr	r3, [r7, #12]
2000d750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d752:	b29b      	uxth	r3, r3
2000d754:	2bff      	cmp	r3, #255	@ 0xff
2000d756:	d910      	bls.n	2000d77a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000d758:	68fb      	ldr	r3, [r7, #12]
2000d75a:	22ff      	movs	r2, #255	@ 0xff
2000d75c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2000d75e:	68fb      	ldr	r3, [r7, #12]
2000d760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000d762:	b299      	uxth	r1, r3
2000d764:	68fb      	ldr	r3, [r7, #12]
2000d766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d768:	b2da      	uxtb	r2, r3
2000d76a:	697b      	ldr	r3, [r7, #20]
2000d76c:	9300      	str	r3, [sp, #0]
2000d76e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000d772:	68f8      	ldr	r0, [r7, #12]
2000d774:	f002 f894 	bl	2000f8a0 <I2C_TransferConfig>
2000d778:	e011      	b.n	2000d79e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000d77a:	68fb      	ldr	r3, [r7, #12]
2000d77c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d77e:	b29a      	uxth	r2, r3
2000d780:	68fb      	ldr	r3, [r7, #12]
2000d782:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2000d784:	68fb      	ldr	r3, [r7, #12]
2000d786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000d788:	b299      	uxth	r1, r3
2000d78a:	68fb      	ldr	r3, [r7, #12]
2000d78c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d78e:	b2da      	uxtb	r2, r3
2000d790:	697b      	ldr	r3, [r7, #20]
2000d792:	9300      	str	r3, [sp, #0]
2000d794:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000d798:	68f8      	ldr	r0, [r7, #12]
2000d79a:	f002 f881 	bl	2000f8a0 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2000d79e:	693b      	ldr	r3, [r7, #16]
2000d7a0:	f003 0320 	and.w	r3, r3, #32
2000d7a4:	2b00      	cmp	r3, #0
2000d7a6:	d008      	beq.n	2000d7ba <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000d7a8:	687b      	ldr	r3, [r7, #4]
2000d7aa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2000d7ae:	2b00      	cmp	r3, #0
2000d7b0:	d003      	beq.n	2000d7ba <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2000d7b2:	6939      	ldr	r1, [r7, #16]
2000d7b4:	68f8      	ldr	r0, [r7, #12]
2000d7b6:	f000 feb7 	bl	2000e528 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2000d7ba:	68fb      	ldr	r3, [r7, #12]
2000d7bc:	2200      	movs	r2, #0
2000d7be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2000d7c2:	2300      	movs	r3, #0
}
2000d7c4:	4618      	mov	r0, r3
2000d7c6:	3718      	adds	r7, #24
2000d7c8:	46bd      	mov	sp, r7
2000d7ca:	bd80      	pop	{r7, pc}
2000d7cc:	80002000 	.word	0x80002000
2000d7d0:	80002400 	.word	0x80002400

2000d7d4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
2000d7d4:	b580      	push	{r7, lr}
2000d7d6:	b086      	sub	sp, #24
2000d7d8:	af00      	add	r7, sp, #0
2000d7da:	60f8      	str	r0, [r7, #12]
2000d7dc:	60b9      	str	r1, [r7, #8]
2000d7de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2000d7e0:	68fb      	ldr	r3, [r7, #12]
2000d7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000d7e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2000d7e6:	68bb      	ldr	r3, [r7, #8]
2000d7e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
2000d7ea:	68fb      	ldr	r3, [r7, #12]
2000d7ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000d7f0:	2b01      	cmp	r3, #1
2000d7f2:	d101      	bne.n	2000d7f8 <I2C_Slave_ISR_IT+0x24>
2000d7f4:	2302      	movs	r3, #2
2000d7f6:	e0e2      	b.n	2000d9be <I2C_Slave_ISR_IT+0x1ea>
2000d7f8:	68fb      	ldr	r3, [r7, #12]
2000d7fa:	2201      	movs	r2, #1
2000d7fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2000d800:	693b      	ldr	r3, [r7, #16]
2000d802:	f003 0320 	and.w	r3, r3, #32
2000d806:	2b00      	cmp	r3, #0
2000d808:	d009      	beq.n	2000d81e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000d80a:	687b      	ldr	r3, [r7, #4]
2000d80c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2000d810:	2b00      	cmp	r3, #0
2000d812:	d004      	beq.n	2000d81e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
2000d814:	6939      	ldr	r1, [r7, #16]
2000d816:	68f8      	ldr	r0, [r7, #12]
2000d818:	f000 ff4e 	bl	2000e6b8 <I2C_ITSlaveCplt>
2000d81c:	e0ca      	b.n	2000d9b4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000d81e:	693b      	ldr	r3, [r7, #16]
2000d820:	f003 0310 	and.w	r3, r3, #16
2000d824:	2b00      	cmp	r3, #0
2000d826:	d04b      	beq.n	2000d8c0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2000d828:	687b      	ldr	r3, [r7, #4]
2000d82a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000d82e:	2b00      	cmp	r3, #0
2000d830:	d046      	beq.n	2000d8c0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
2000d832:	68fb      	ldr	r3, [r7, #12]
2000d834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d836:	b29b      	uxth	r3, r3
2000d838:	2b00      	cmp	r3, #0
2000d83a:	d128      	bne.n	2000d88e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2000d83c:	68fb      	ldr	r3, [r7, #12]
2000d83e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000d842:	b2db      	uxtb	r3, r3
2000d844:	2b28      	cmp	r3, #40	@ 0x28
2000d846:	d108      	bne.n	2000d85a <I2C_Slave_ISR_IT+0x86>
2000d848:	697b      	ldr	r3, [r7, #20]
2000d84a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000d84e:	d104      	bne.n	2000d85a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
2000d850:	6939      	ldr	r1, [r7, #16]
2000d852:	68f8      	ldr	r0, [r7, #12]
2000d854:	f001 f984 	bl	2000eb60 <I2C_ITListenCplt>
2000d858:	e031      	b.n	2000d8be <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2000d85a:	68fb      	ldr	r3, [r7, #12]
2000d85c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000d860:	b2db      	uxtb	r3, r3
2000d862:	2b29      	cmp	r3, #41	@ 0x29
2000d864:	d10e      	bne.n	2000d884 <I2C_Slave_ISR_IT+0xb0>
2000d866:	697b      	ldr	r3, [r7, #20]
2000d868:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000d86c:	d00a      	beq.n	2000d884 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000d86e:	68fb      	ldr	r3, [r7, #12]
2000d870:	681b      	ldr	r3, [r3, #0]
2000d872:	2210      	movs	r2, #16
2000d874:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2000d876:	68f8      	ldr	r0, [r7, #12]
2000d878:	f001 fadd 	bl	2000ee36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2000d87c:	68f8      	ldr	r0, [r7, #12]
2000d87e:	f000 fdf6 	bl	2000e46e <I2C_ITSlaveSeqCplt>
2000d882:	e01c      	b.n	2000d8be <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000d884:	68fb      	ldr	r3, [r7, #12]
2000d886:	681b      	ldr	r3, [r3, #0]
2000d888:	2210      	movs	r2, #16
2000d88a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
2000d88c:	e08f      	b.n	2000d9ae <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000d88e:	68fb      	ldr	r3, [r7, #12]
2000d890:	681b      	ldr	r3, [r3, #0]
2000d892:	2210      	movs	r2, #16
2000d894:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000d896:	68fb      	ldr	r3, [r7, #12]
2000d898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000d89a:	f043 0204 	orr.w	r2, r3, #4
2000d89e:	68fb      	ldr	r3, [r7, #12]
2000d8a0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2000d8a2:	697b      	ldr	r3, [r7, #20]
2000d8a4:	2b00      	cmp	r3, #0
2000d8a6:	d003      	beq.n	2000d8b0 <I2C_Slave_ISR_IT+0xdc>
2000d8a8:	697b      	ldr	r3, [r7, #20]
2000d8aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2000d8ae:	d17e      	bne.n	2000d9ae <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
2000d8b0:	68fb      	ldr	r3, [r7, #12]
2000d8b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000d8b4:	4619      	mov	r1, r3
2000d8b6:	68f8      	ldr	r0, [r7, #12]
2000d8b8:	f001 f9a6 	bl	2000ec08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2000d8bc:	e077      	b.n	2000d9ae <I2C_Slave_ISR_IT+0x1da>
2000d8be:	e076      	b.n	2000d9ae <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2000d8c0:	693b      	ldr	r3, [r7, #16]
2000d8c2:	f003 0304 	and.w	r3, r3, #4
2000d8c6:	2b00      	cmp	r3, #0
2000d8c8:	d02f      	beq.n	2000d92a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2000d8ca:	687b      	ldr	r3, [r7, #4]
2000d8cc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2000d8d0:	2b00      	cmp	r3, #0
2000d8d2:	d02a      	beq.n	2000d92a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
2000d8d4:	68fb      	ldr	r3, [r7, #12]
2000d8d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d8d8:	b29b      	uxth	r3, r3
2000d8da:	2b00      	cmp	r3, #0
2000d8dc:	d018      	beq.n	2000d910 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000d8de:	68fb      	ldr	r3, [r7, #12]
2000d8e0:	681b      	ldr	r3, [r3, #0]
2000d8e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000d8e4:	68fb      	ldr	r3, [r7, #12]
2000d8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d8e8:	b2d2      	uxtb	r2, r2
2000d8ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000d8ec:	68fb      	ldr	r3, [r7, #12]
2000d8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d8f0:	1c5a      	adds	r2, r3, #1
2000d8f2:	68fb      	ldr	r3, [r7, #12]
2000d8f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2000d8f6:	68fb      	ldr	r3, [r7, #12]
2000d8f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d8fa:	3b01      	subs	r3, #1
2000d8fc:	b29a      	uxth	r2, r3
2000d8fe:	68fb      	ldr	r3, [r7, #12]
2000d900:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2000d902:	68fb      	ldr	r3, [r7, #12]
2000d904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d906:	b29b      	uxth	r3, r3
2000d908:	3b01      	subs	r3, #1
2000d90a:	b29a      	uxth	r2, r3
2000d90c:	68fb      	ldr	r3, [r7, #12]
2000d90e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
2000d910:	68fb      	ldr	r3, [r7, #12]
2000d912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d914:	b29b      	uxth	r3, r3
2000d916:	2b00      	cmp	r3, #0
2000d918:	d14b      	bne.n	2000d9b2 <I2C_Slave_ISR_IT+0x1de>
2000d91a:	697b      	ldr	r3, [r7, #20]
2000d91c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000d920:	d047      	beq.n	2000d9b2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
2000d922:	68f8      	ldr	r0, [r7, #12]
2000d924:	f000 fda3 	bl	2000e46e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
2000d928:	e043      	b.n	2000d9b2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2000d92a:	693b      	ldr	r3, [r7, #16]
2000d92c:	f003 0308 	and.w	r3, r3, #8
2000d930:	2b00      	cmp	r3, #0
2000d932:	d009      	beq.n	2000d948 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2000d934:	687b      	ldr	r3, [r7, #4]
2000d936:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2000d93a:	2b00      	cmp	r3, #0
2000d93c:	d004      	beq.n	2000d948 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
2000d93e:	6939      	ldr	r1, [r7, #16]
2000d940:	68f8      	ldr	r0, [r7, #12]
2000d942:	f000 fcd3 	bl	2000e2ec <I2C_ITAddrCplt>
2000d946:	e035      	b.n	2000d9b4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2000d948:	693b      	ldr	r3, [r7, #16]
2000d94a:	f003 0302 	and.w	r3, r3, #2
2000d94e:	2b00      	cmp	r3, #0
2000d950:	d030      	beq.n	2000d9b4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2000d952:	687b      	ldr	r3, [r7, #4]
2000d954:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2000d958:	2b00      	cmp	r3, #0
2000d95a:	d02b      	beq.n	2000d9b4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
2000d95c:	68fb      	ldr	r3, [r7, #12]
2000d95e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d960:	b29b      	uxth	r3, r3
2000d962:	2b00      	cmp	r3, #0
2000d964:	d018      	beq.n	2000d998 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2000d966:	68fb      	ldr	r3, [r7, #12]
2000d968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d96a:	781a      	ldrb	r2, [r3, #0]
2000d96c:	68fb      	ldr	r3, [r7, #12]
2000d96e:	681b      	ldr	r3, [r3, #0]
2000d970:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000d972:	68fb      	ldr	r3, [r7, #12]
2000d974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000d976:	1c5a      	adds	r2, r3, #1
2000d978:	68fb      	ldr	r3, [r7, #12]
2000d97a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2000d97c:	68fb      	ldr	r3, [r7, #12]
2000d97e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000d980:	b29b      	uxth	r3, r3
2000d982:	3b01      	subs	r3, #1
2000d984:	b29a      	uxth	r2, r3
2000d986:	68fb      	ldr	r3, [r7, #12]
2000d988:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2000d98a:	68fb      	ldr	r3, [r7, #12]
2000d98c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000d98e:	3b01      	subs	r3, #1
2000d990:	b29a      	uxth	r2, r3
2000d992:	68fb      	ldr	r3, [r7, #12]
2000d994:	851a      	strh	r2, [r3, #40]	@ 0x28
2000d996:	e00d      	b.n	2000d9b4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2000d998:	697b      	ldr	r3, [r7, #20]
2000d99a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2000d99e:	d002      	beq.n	2000d9a6 <I2C_Slave_ISR_IT+0x1d2>
2000d9a0:	697b      	ldr	r3, [r7, #20]
2000d9a2:	2b00      	cmp	r3, #0
2000d9a4:	d106      	bne.n	2000d9b4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2000d9a6:	68f8      	ldr	r0, [r7, #12]
2000d9a8:	f000 fd61 	bl	2000e46e <I2C_ITSlaveSeqCplt>
2000d9ac:	e002      	b.n	2000d9b4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
2000d9ae:	bf00      	nop
2000d9b0:	e000      	b.n	2000d9b4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
2000d9b2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2000d9b4:	68fb      	ldr	r3, [r7, #12]
2000d9b6:	2200      	movs	r2, #0
2000d9b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2000d9bc:	2300      	movs	r3, #0
}
2000d9be:	4618      	mov	r0, r3
2000d9c0:	3718      	adds	r7, #24
2000d9c2:	46bd      	mov	sp, r7
2000d9c4:	bd80      	pop	{r7, pc}

2000d9c6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
2000d9c6:	b580      	push	{r7, lr}
2000d9c8:	b088      	sub	sp, #32
2000d9ca:	af02      	add	r7, sp, #8
2000d9cc:	60f8      	str	r0, [r7, #12]
2000d9ce:	60b9      	str	r1, [r7, #8]
2000d9d0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
2000d9d2:	68fb      	ldr	r3, [r7, #12]
2000d9d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000d9d8:	2b01      	cmp	r3, #1
2000d9da:	d101      	bne.n	2000d9e0 <I2C_Master_ISR_DMA+0x1a>
2000d9dc:	2302      	movs	r3, #2
2000d9de:	e0d9      	b.n	2000db94 <I2C_Master_ISR_DMA+0x1ce>
2000d9e0:	68fb      	ldr	r3, [r7, #12]
2000d9e2:	2201      	movs	r2, #1
2000d9e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000d9e8:	68bb      	ldr	r3, [r7, #8]
2000d9ea:	f003 0310 	and.w	r3, r3, #16
2000d9ee:	2b00      	cmp	r3, #0
2000d9f0:	d016      	beq.n	2000da20 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2000d9f2:	687b      	ldr	r3, [r7, #4]
2000d9f4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000d9f8:	2b00      	cmp	r3, #0
2000d9fa:	d011      	beq.n	2000da20 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000d9fc:	68fb      	ldr	r3, [r7, #12]
2000d9fe:	681b      	ldr	r3, [r3, #0]
2000da00:	2210      	movs	r2, #16
2000da02:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000da04:	68fb      	ldr	r3, [r7, #12]
2000da06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000da08:	f043 0204 	orr.w	r2, r3, #4
2000da0c:	68fb      	ldr	r3, [r7, #12]
2000da0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2000da10:	2120      	movs	r1, #32
2000da12:	68f8      	ldr	r0, [r7, #12]
2000da14:	f001 ff76 	bl	2000f904 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2000da18:	68f8      	ldr	r0, [r7, #12]
2000da1a:	f001 fa0c 	bl	2000ee36 <I2C_Flush_TXDR>
2000da1e:	e0b4      	b.n	2000db8a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2000da20:	68bb      	ldr	r3, [r7, #8]
2000da22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000da26:	2b00      	cmp	r3, #0
2000da28:	d071      	beq.n	2000db0e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2000da2a:	687b      	ldr	r3, [r7, #4]
2000da2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2000da30:	2b00      	cmp	r3, #0
2000da32:	d06c      	beq.n	2000db0e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
2000da34:	68fb      	ldr	r3, [r7, #12]
2000da36:	681b      	ldr	r3, [r3, #0]
2000da38:	681a      	ldr	r2, [r3, #0]
2000da3a:	68fb      	ldr	r3, [r7, #12]
2000da3c:	681b      	ldr	r3, [r3, #0]
2000da3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
2000da42:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
2000da44:	68fb      	ldr	r3, [r7, #12]
2000da46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000da48:	b29b      	uxth	r3, r3
2000da4a:	2b00      	cmp	r3, #0
2000da4c:	d04e      	beq.n	2000daec <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2000da4e:	68fb      	ldr	r3, [r7, #12]
2000da50:	681b      	ldr	r3, [r3, #0]
2000da52:	685b      	ldr	r3, [r3, #4]
2000da54:	b29b      	uxth	r3, r3
2000da56:	f3c3 0309 	ubfx	r3, r3, #0, #10
2000da5a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000da5c:	68fb      	ldr	r3, [r7, #12]
2000da5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000da60:	b29b      	uxth	r3, r3
2000da62:	2bff      	cmp	r3, #255	@ 0xff
2000da64:	d906      	bls.n	2000da74 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2000da66:	68fb      	ldr	r3, [r7, #12]
2000da68:	22ff      	movs	r2, #255	@ 0xff
2000da6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
2000da6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000da70:	617b      	str	r3, [r7, #20]
2000da72:	e010      	b.n	2000da96 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2000da74:	68fb      	ldr	r3, [r7, #12]
2000da76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000da78:	b29a      	uxth	r2, r3
2000da7a:	68fb      	ldr	r3, [r7, #12]
2000da7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2000da7e:	68fb      	ldr	r3, [r7, #12]
2000da80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000da82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000da86:	d003      	beq.n	2000da90 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
2000da88:	68fb      	ldr	r3, [r7, #12]
2000da8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000da8c:	617b      	str	r3, [r7, #20]
2000da8e:	e002      	b.n	2000da96 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
2000da90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000da94:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2000da96:	68fb      	ldr	r3, [r7, #12]
2000da98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000da9a:	b2da      	uxtb	r2, r3
2000da9c:	8a79      	ldrh	r1, [r7, #18]
2000da9e:	2300      	movs	r3, #0
2000daa0:	9300      	str	r3, [sp, #0]
2000daa2:	697b      	ldr	r3, [r7, #20]
2000daa4:	68f8      	ldr	r0, [r7, #12]
2000daa6:	f001 fefb 	bl	2000f8a0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2000daaa:	68fb      	ldr	r3, [r7, #12]
2000daac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000daae:	b29a      	uxth	r2, r3
2000dab0:	68fb      	ldr	r3, [r7, #12]
2000dab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000dab4:	1ad3      	subs	r3, r2, r3
2000dab6:	b29a      	uxth	r2, r3
2000dab8:	68fb      	ldr	r3, [r7, #12]
2000daba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000dabc:	68fb      	ldr	r3, [r7, #12]
2000dabe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000dac2:	b2db      	uxtb	r3, r3
2000dac4:	2b22      	cmp	r3, #34	@ 0x22
2000dac6:	d108      	bne.n	2000dada <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2000dac8:	68fb      	ldr	r3, [r7, #12]
2000daca:	681b      	ldr	r3, [r3, #0]
2000dacc:	681a      	ldr	r2, [r3, #0]
2000dace:	68fb      	ldr	r3, [r7, #12]
2000dad0:	681b      	ldr	r3, [r3, #0]
2000dad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000dad6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2000dad8:	e057      	b.n	2000db8a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2000dada:	68fb      	ldr	r3, [r7, #12]
2000dadc:	681b      	ldr	r3, [r3, #0]
2000dade:	681a      	ldr	r2, [r3, #0]
2000dae0:	68fb      	ldr	r3, [r7, #12]
2000dae2:	681b      	ldr	r3, [r3, #0]
2000dae4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000dae8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2000daea:	e04e      	b.n	2000db8a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2000daec:	68fb      	ldr	r3, [r7, #12]
2000daee:	681b      	ldr	r3, [r3, #0]
2000daf0:	685b      	ldr	r3, [r3, #4]
2000daf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000daf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000dafa:	d003      	beq.n	2000db04 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2000dafc:	68f8      	ldr	r0, [r7, #12]
2000dafe:	f000 fc79 	bl	2000e3f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
2000db02:	e042      	b.n	2000db8a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2000db04:	2140      	movs	r1, #64	@ 0x40
2000db06:	68f8      	ldr	r0, [r7, #12]
2000db08:	f001 f87e 	bl	2000ec08 <I2C_ITError>
    if (hi2c->XferCount != 0U)
2000db0c:	e03d      	b.n	2000db8a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2000db0e:	68bb      	ldr	r3, [r7, #8]
2000db10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000db14:	2b00      	cmp	r3, #0
2000db16:	d028      	beq.n	2000db6a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2000db18:	687b      	ldr	r3, [r7, #4]
2000db1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2000db1e:	2b00      	cmp	r3, #0
2000db20:	d023      	beq.n	2000db6a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
2000db22:	68fb      	ldr	r3, [r7, #12]
2000db24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000db26:	b29b      	uxth	r3, r3
2000db28:	2b00      	cmp	r3, #0
2000db2a:	d119      	bne.n	2000db60 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2000db2c:	68fb      	ldr	r3, [r7, #12]
2000db2e:	681b      	ldr	r3, [r3, #0]
2000db30:	685b      	ldr	r3, [r3, #4]
2000db32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000db36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000db3a:	d025      	beq.n	2000db88 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2000db3c:	68fb      	ldr	r3, [r7, #12]
2000db3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000db40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000db44:	d108      	bne.n	2000db58 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2000db46:	68fb      	ldr	r3, [r7, #12]
2000db48:	681b      	ldr	r3, [r3, #0]
2000db4a:	685a      	ldr	r2, [r3, #4]
2000db4c:	68fb      	ldr	r3, [r7, #12]
2000db4e:	681b      	ldr	r3, [r3, #0]
2000db50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000db54:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
2000db56:	e017      	b.n	2000db88 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2000db58:	68f8      	ldr	r0, [r7, #12]
2000db5a:	f000 fc4b 	bl	2000e3f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
2000db5e:	e013      	b.n	2000db88 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2000db60:	2140      	movs	r1, #64	@ 0x40
2000db62:	68f8      	ldr	r0, [r7, #12]
2000db64:	f001 f850 	bl	2000ec08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2000db68:	e00e      	b.n	2000db88 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000db6a:	68bb      	ldr	r3, [r7, #8]
2000db6c:	f003 0320 	and.w	r3, r3, #32
2000db70:	2b00      	cmp	r3, #0
2000db72:	d00a      	beq.n	2000db8a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000db74:	687b      	ldr	r3, [r7, #4]
2000db76:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000db7a:	2b00      	cmp	r3, #0
2000db7c:	d005      	beq.n	2000db8a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2000db7e:	68b9      	ldr	r1, [r7, #8]
2000db80:	68f8      	ldr	r0, [r7, #12]
2000db82:	f000 fcd1 	bl	2000e528 <I2C_ITMasterCplt>
2000db86:	e000      	b.n	2000db8a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
2000db88:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2000db8a:	68fb      	ldr	r3, [r7, #12]
2000db8c:	2200      	movs	r2, #0
2000db8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2000db92:	2300      	movs	r3, #0
}
2000db94:	4618      	mov	r0, r3
2000db96:	3718      	adds	r7, #24
2000db98:	46bd      	mov	sp, r7
2000db9a:	bd80      	pop	{r7, pc}

2000db9c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
2000db9c:	b580      	push	{r7, lr}
2000db9e:	b088      	sub	sp, #32
2000dba0:	af02      	add	r7, sp, #8
2000dba2:	60f8      	str	r0, [r7, #12]
2000dba4:	60b9      	str	r1, [r7, #8]
2000dba6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
2000dba8:	4b8d      	ldr	r3, [pc, #564]	@ (2000dde0 <I2C_Mem_ISR_DMA+0x244>)
2000dbaa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2000dbac:	68fb      	ldr	r3, [r7, #12]
2000dbae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000dbb2:	2b01      	cmp	r3, #1
2000dbb4:	d101      	bne.n	2000dbba <I2C_Mem_ISR_DMA+0x1e>
2000dbb6:	2302      	movs	r3, #2
2000dbb8:	e10e      	b.n	2000ddd8 <I2C_Mem_ISR_DMA+0x23c>
2000dbba:	68fb      	ldr	r3, [r7, #12]
2000dbbc:	2201      	movs	r2, #1
2000dbbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000dbc2:	68bb      	ldr	r3, [r7, #8]
2000dbc4:	f003 0310 	and.w	r3, r3, #16
2000dbc8:	2b00      	cmp	r3, #0
2000dbca:	d016      	beq.n	2000dbfa <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2000dbcc:	687b      	ldr	r3, [r7, #4]
2000dbce:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000dbd2:	2b00      	cmp	r3, #0
2000dbd4:	d011      	beq.n	2000dbfa <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000dbd6:	68fb      	ldr	r3, [r7, #12]
2000dbd8:	681b      	ldr	r3, [r3, #0]
2000dbda:	2210      	movs	r2, #16
2000dbdc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000dbde:	68fb      	ldr	r3, [r7, #12]
2000dbe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000dbe2:	f043 0204 	orr.w	r2, r3, #4
2000dbe6:	68fb      	ldr	r3, [r7, #12]
2000dbe8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2000dbea:	2120      	movs	r1, #32
2000dbec:	68f8      	ldr	r0, [r7, #12]
2000dbee:	f001 fe89 	bl	2000f904 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2000dbf2:	68f8      	ldr	r0, [r7, #12]
2000dbf4:	f001 f91f 	bl	2000ee36 <I2C_Flush_TXDR>
2000dbf8:	e0e9      	b.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
2000dbfa:	68bb      	ldr	r3, [r7, #8]
2000dbfc:	f003 0302 	and.w	r3, r3, #2
2000dc00:	2b00      	cmp	r3, #0
2000dc02:	d00e      	beq.n	2000dc22 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2000dc04:	687b      	ldr	r3, [r7, #4]
2000dc06:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
2000dc0a:	2b00      	cmp	r3, #0
2000dc0c:	d009      	beq.n	2000dc22 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
2000dc0e:	68fb      	ldr	r3, [r7, #12]
2000dc10:	681b      	ldr	r3, [r3, #0]
2000dc12:	68fa      	ldr	r2, [r7, #12]
2000dc14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
2000dc16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
2000dc18:	68fb      	ldr	r3, [r7, #12]
2000dc1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
2000dc1e:	651a      	str	r2, [r3, #80]	@ 0x50
2000dc20:	e0d5      	b.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2000dc22:	68bb      	ldr	r3, [r7, #8]
2000dc24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000dc28:	2b00      	cmp	r3, #0
2000dc2a:	d05f      	beq.n	2000dcec <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2000dc2c:	687b      	ldr	r3, [r7, #4]
2000dc2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2000dc32:	2b00      	cmp	r3, #0
2000dc34:	d05a      	beq.n	2000dcec <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000dc36:	2101      	movs	r1, #1
2000dc38:	68f8      	ldr	r0, [r7, #12]
2000dc3a:	f001 fee7 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2000dc3e:	2110      	movs	r1, #16
2000dc40:	68f8      	ldr	r0, [r7, #12]
2000dc42:	f001 fe5f 	bl	2000f904 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
2000dc46:	68fb      	ldr	r3, [r7, #12]
2000dc48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000dc4a:	b29b      	uxth	r3, r3
2000dc4c:	2b00      	cmp	r3, #0
2000dc4e:	d048      	beq.n	2000dce2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000dc50:	68fb      	ldr	r3, [r7, #12]
2000dc52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000dc54:	b29b      	uxth	r3, r3
2000dc56:	2bff      	cmp	r3, #255	@ 0xff
2000dc58:	d910      	bls.n	2000dc7c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2000dc5a:	68fb      	ldr	r3, [r7, #12]
2000dc5c:	22ff      	movs	r2, #255	@ 0xff
2000dc5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2000dc60:	68fb      	ldr	r3, [r7, #12]
2000dc62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000dc64:	b299      	uxth	r1, r3
2000dc66:	68fb      	ldr	r3, [r7, #12]
2000dc68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000dc6a:	b2da      	uxtb	r2, r3
2000dc6c:	2300      	movs	r3, #0
2000dc6e:	9300      	str	r3, [sp, #0]
2000dc70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000dc74:	68f8      	ldr	r0, [r7, #12]
2000dc76:	f001 fe13 	bl	2000f8a0 <I2C_TransferConfig>
2000dc7a:	e011      	b.n	2000dca0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2000dc7c:	68fb      	ldr	r3, [r7, #12]
2000dc7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000dc80:	b29a      	uxth	r2, r3
2000dc82:	68fb      	ldr	r3, [r7, #12]
2000dc84:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2000dc86:	68fb      	ldr	r3, [r7, #12]
2000dc88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000dc8a:	b299      	uxth	r1, r3
2000dc8c:	68fb      	ldr	r3, [r7, #12]
2000dc8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000dc90:	b2da      	uxtb	r2, r3
2000dc92:	2300      	movs	r3, #0
2000dc94:	9300      	str	r3, [sp, #0]
2000dc96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000dc9a:	68f8      	ldr	r0, [r7, #12]
2000dc9c:	f001 fe00 	bl	2000f8a0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2000dca0:	68fb      	ldr	r3, [r7, #12]
2000dca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000dca4:	b29a      	uxth	r2, r3
2000dca6:	68fb      	ldr	r3, [r7, #12]
2000dca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000dcaa:	1ad3      	subs	r3, r2, r3
2000dcac:	b29a      	uxth	r2, r3
2000dcae:	68fb      	ldr	r3, [r7, #12]
2000dcb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000dcb2:	68fb      	ldr	r3, [r7, #12]
2000dcb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000dcb8:	b2db      	uxtb	r3, r3
2000dcba:	2b22      	cmp	r3, #34	@ 0x22
2000dcbc:	d108      	bne.n	2000dcd0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2000dcbe:	68fb      	ldr	r3, [r7, #12]
2000dcc0:	681b      	ldr	r3, [r3, #0]
2000dcc2:	681a      	ldr	r2, [r3, #0]
2000dcc4:	68fb      	ldr	r3, [r7, #12]
2000dcc6:	681b      	ldr	r3, [r3, #0]
2000dcc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000dccc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2000dcce:	e07e      	b.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2000dcd0:	68fb      	ldr	r3, [r7, #12]
2000dcd2:	681b      	ldr	r3, [r3, #0]
2000dcd4:	681a      	ldr	r2, [r3, #0]
2000dcd6:	68fb      	ldr	r3, [r7, #12]
2000dcd8:	681b      	ldr	r3, [r3, #0]
2000dcda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000dcde:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2000dce0:	e075      	b.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2000dce2:	2140      	movs	r1, #64	@ 0x40
2000dce4:	68f8      	ldr	r0, [r7, #12]
2000dce6:	f000 ff8f 	bl	2000ec08 <I2C_ITError>
    if (hi2c->XferCount != 0U)
2000dcea:	e070      	b.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2000dcec:	68bb      	ldr	r3, [r7, #8]
2000dcee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000dcf2:	2b00      	cmp	r3, #0
2000dcf4:	d05d      	beq.n	2000ddb2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2000dcf6:	687b      	ldr	r3, [r7, #4]
2000dcf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2000dcfc:	2b00      	cmp	r3, #0
2000dcfe:	d058      	beq.n	2000ddb2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000dd00:	2101      	movs	r1, #1
2000dd02:	68f8      	ldr	r0, [r7, #12]
2000dd04:	f001 fe82 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2000dd08:	2110      	movs	r1, #16
2000dd0a:	68f8      	ldr	r0, [r7, #12]
2000dd0c:	f001 fdfa 	bl	2000f904 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000dd10:	68fb      	ldr	r3, [r7, #12]
2000dd12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000dd16:	b2db      	uxtb	r3, r3
2000dd18:	2b22      	cmp	r3, #34	@ 0x22
2000dd1a:	d101      	bne.n	2000dd20 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
2000dd1c:	4b31      	ldr	r3, [pc, #196]	@ (2000dde4 <I2C_Mem_ISR_DMA+0x248>)
2000dd1e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000dd20:	68fb      	ldr	r3, [r7, #12]
2000dd22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000dd24:	b29b      	uxth	r3, r3
2000dd26:	2bff      	cmp	r3, #255	@ 0xff
2000dd28:	d910      	bls.n	2000dd4c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000dd2a:	68fb      	ldr	r3, [r7, #12]
2000dd2c:	22ff      	movs	r2, #255	@ 0xff
2000dd2e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2000dd30:	68fb      	ldr	r3, [r7, #12]
2000dd32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000dd34:	b299      	uxth	r1, r3
2000dd36:	68fb      	ldr	r3, [r7, #12]
2000dd38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000dd3a:	b2da      	uxtb	r2, r3
2000dd3c:	697b      	ldr	r3, [r7, #20]
2000dd3e:	9300      	str	r3, [sp, #0]
2000dd40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000dd44:	68f8      	ldr	r0, [r7, #12]
2000dd46:	f001 fdab 	bl	2000f8a0 <I2C_TransferConfig>
2000dd4a:	e011      	b.n	2000dd70 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000dd4c:	68fb      	ldr	r3, [r7, #12]
2000dd4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000dd50:	b29a      	uxth	r2, r3
2000dd52:	68fb      	ldr	r3, [r7, #12]
2000dd54:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2000dd56:	68fb      	ldr	r3, [r7, #12]
2000dd58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000dd5a:	b299      	uxth	r1, r3
2000dd5c:	68fb      	ldr	r3, [r7, #12]
2000dd5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000dd60:	b2da      	uxtb	r2, r3
2000dd62:	697b      	ldr	r3, [r7, #20]
2000dd64:	9300      	str	r3, [sp, #0]
2000dd66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2000dd6a:	68f8      	ldr	r0, [r7, #12]
2000dd6c:	f001 fd98 	bl	2000f8a0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
2000dd70:	68fb      	ldr	r3, [r7, #12]
2000dd72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000dd74:	b29a      	uxth	r2, r3
2000dd76:	68fb      	ldr	r3, [r7, #12]
2000dd78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000dd7a:	1ad3      	subs	r3, r2, r3
2000dd7c:	b29a      	uxth	r2, r3
2000dd7e:	68fb      	ldr	r3, [r7, #12]
2000dd80:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000dd82:	68fb      	ldr	r3, [r7, #12]
2000dd84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000dd88:	b2db      	uxtb	r3, r3
2000dd8a:	2b22      	cmp	r3, #34	@ 0x22
2000dd8c:	d108      	bne.n	2000dda0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2000dd8e:	68fb      	ldr	r3, [r7, #12]
2000dd90:	681b      	ldr	r3, [r3, #0]
2000dd92:	681a      	ldr	r2, [r3, #0]
2000dd94:	68fb      	ldr	r3, [r7, #12]
2000dd96:	681b      	ldr	r3, [r3, #0]
2000dd98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000dd9c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000dd9e:	e016      	b.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2000dda0:	68fb      	ldr	r3, [r7, #12]
2000dda2:	681b      	ldr	r3, [r3, #0]
2000dda4:	681a      	ldr	r2, [r3, #0]
2000dda6:	68fb      	ldr	r3, [r7, #12]
2000dda8:	681b      	ldr	r3, [r3, #0]
2000ddaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000ddae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000ddb0:	e00d      	b.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000ddb2:	68bb      	ldr	r3, [r7, #8]
2000ddb4:	f003 0320 	and.w	r3, r3, #32
2000ddb8:	2b00      	cmp	r3, #0
2000ddba:	d008      	beq.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000ddbc:	687b      	ldr	r3, [r7, #4]
2000ddbe:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000ddc2:	2b00      	cmp	r3, #0
2000ddc4:	d003      	beq.n	2000ddce <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2000ddc6:	68b9      	ldr	r1, [r7, #8]
2000ddc8:	68f8      	ldr	r0, [r7, #12]
2000ddca:	f000 fbad 	bl	2000e528 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2000ddce:	68fb      	ldr	r3, [r7, #12]
2000ddd0:	2200      	movs	r2, #0
2000ddd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2000ddd6:	2300      	movs	r3, #0
}
2000ddd8:	4618      	mov	r0, r3
2000ddda:	3718      	adds	r7, #24
2000dddc:	46bd      	mov	sp, r7
2000ddde:	bd80      	pop	{r7, pc}
2000dde0:	80002000 	.word	0x80002000
2000dde4:	80002400 	.word	0x80002400

2000dde8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2000dde8:	b580      	push	{r7, lr}
2000ddea:	b088      	sub	sp, #32
2000ddec:	af00      	add	r7, sp, #0
2000ddee:	60f8      	str	r0, [r7, #12]
2000ddf0:	60b9      	str	r1, [r7, #8]
2000ddf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2000ddf4:	68fb      	ldr	r3, [r7, #12]
2000ddf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000ddf8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
2000ddfa:	2300      	movs	r3, #0
2000ddfc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
2000ddfe:	68fb      	ldr	r3, [r7, #12]
2000de00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000de04:	2b01      	cmp	r3, #1
2000de06:	d101      	bne.n	2000de0c <I2C_Slave_ISR_DMA+0x24>
2000de08:	2302      	movs	r3, #2
2000de0a:	e1c2      	b.n	2000e192 <I2C_Slave_ISR_DMA+0x3aa>
2000de0c:	68fb      	ldr	r3, [r7, #12]
2000de0e:	2201      	movs	r2, #1
2000de10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000de14:	68bb      	ldr	r3, [r7, #8]
2000de16:	f003 0320 	and.w	r3, r3, #32
2000de1a:	2b00      	cmp	r3, #0
2000de1c:	d009      	beq.n	2000de32 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000de1e:	687b      	ldr	r3, [r7, #4]
2000de20:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000de24:	2b00      	cmp	r3, #0
2000de26:	d004      	beq.n	2000de32 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
2000de28:	68b9      	ldr	r1, [r7, #8]
2000de2a:	68f8      	ldr	r0, [r7, #12]
2000de2c:	f000 fc44 	bl	2000e6b8 <I2C_ITSlaveCplt>
2000de30:	e1aa      	b.n	2000e188 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000de32:	68bb      	ldr	r3, [r7, #8]
2000de34:	f003 0310 	and.w	r3, r3, #16
2000de38:	2b00      	cmp	r3, #0
2000de3a:	f000 8197 	beq.w	2000e16c <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2000de3e:	687b      	ldr	r3, [r7, #4]
2000de40:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000de44:	2b00      	cmp	r3, #0
2000de46:	f000 8191 	beq.w	2000e16c <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2000de4a:	687b      	ldr	r3, [r7, #4]
2000de4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000de50:	2b00      	cmp	r3, #0
2000de52:	d105      	bne.n	2000de60 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
2000de54:	687b      	ldr	r3, [r7, #4]
2000de56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2000de5a:	2b00      	cmp	r3, #0
2000de5c:	f000 817f 	beq.w	2000e15e <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
2000de60:	68fb      	ldr	r3, [r7, #12]
2000de62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000de64:	2b00      	cmp	r3, #0
2000de66:	d07b      	beq.n	2000df60 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
2000de68:	687b      	ldr	r3, [r7, #4]
2000de6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000de6e:	2b00      	cmp	r3, #0
2000de70:	d076      	beq.n	2000df60 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2000de72:	68fb      	ldr	r3, [r7, #12]
2000de74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000de76:	681b      	ldr	r3, [r3, #0]
2000de78:	4a74      	ldr	r2, [pc, #464]	@ (2000e04c <I2C_Slave_ISR_DMA+0x264>)
2000de7a:	4293      	cmp	r3, r2
2000de7c:	d059      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000de7e:	68fb      	ldr	r3, [r7, #12]
2000de80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000de82:	681b      	ldr	r3, [r3, #0]
2000de84:	4a72      	ldr	r2, [pc, #456]	@ (2000e050 <I2C_Slave_ISR_DMA+0x268>)
2000de86:	4293      	cmp	r3, r2
2000de88:	d053      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000de8a:	68fb      	ldr	r3, [r7, #12]
2000de8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000de8e:	681b      	ldr	r3, [r3, #0]
2000de90:	4a70      	ldr	r2, [pc, #448]	@ (2000e054 <I2C_Slave_ISR_DMA+0x26c>)
2000de92:	4293      	cmp	r3, r2
2000de94:	d04d      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000de96:	68fb      	ldr	r3, [r7, #12]
2000de98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000de9a:	681b      	ldr	r3, [r3, #0]
2000de9c:	4a6e      	ldr	r2, [pc, #440]	@ (2000e058 <I2C_Slave_ISR_DMA+0x270>)
2000de9e:	4293      	cmp	r3, r2
2000dea0:	d047      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000dea2:	68fb      	ldr	r3, [r7, #12]
2000dea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000dea6:	681b      	ldr	r3, [r3, #0]
2000dea8:	4a6c      	ldr	r2, [pc, #432]	@ (2000e05c <I2C_Slave_ISR_DMA+0x274>)
2000deaa:	4293      	cmp	r3, r2
2000deac:	d041      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000deae:	68fb      	ldr	r3, [r7, #12]
2000deb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000deb2:	681b      	ldr	r3, [r3, #0]
2000deb4:	4a6a      	ldr	r2, [pc, #424]	@ (2000e060 <I2C_Slave_ISR_DMA+0x278>)
2000deb6:	4293      	cmp	r3, r2
2000deb8:	d03b      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000deba:	68fb      	ldr	r3, [r7, #12]
2000debc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000debe:	681b      	ldr	r3, [r3, #0]
2000dec0:	4a68      	ldr	r2, [pc, #416]	@ (2000e064 <I2C_Slave_ISR_DMA+0x27c>)
2000dec2:	4293      	cmp	r3, r2
2000dec4:	d035      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000dec6:	68fb      	ldr	r3, [r7, #12]
2000dec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000deca:	681b      	ldr	r3, [r3, #0]
2000decc:	4a66      	ldr	r2, [pc, #408]	@ (2000e068 <I2C_Slave_ISR_DMA+0x280>)
2000dece:	4293      	cmp	r3, r2
2000ded0:	d02f      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000ded2:	68fb      	ldr	r3, [r7, #12]
2000ded4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ded6:	681b      	ldr	r3, [r3, #0]
2000ded8:	4a64      	ldr	r2, [pc, #400]	@ (2000e06c <I2C_Slave_ISR_DMA+0x284>)
2000deda:	4293      	cmp	r3, r2
2000dedc:	d029      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000dede:	68fb      	ldr	r3, [r7, #12]
2000dee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000dee2:	681b      	ldr	r3, [r3, #0]
2000dee4:	4a62      	ldr	r2, [pc, #392]	@ (2000e070 <I2C_Slave_ISR_DMA+0x288>)
2000dee6:	4293      	cmp	r3, r2
2000dee8:	d023      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000deea:	68fb      	ldr	r3, [r7, #12]
2000deec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000deee:	681b      	ldr	r3, [r3, #0]
2000def0:	4a60      	ldr	r2, [pc, #384]	@ (2000e074 <I2C_Slave_ISR_DMA+0x28c>)
2000def2:	4293      	cmp	r3, r2
2000def4:	d01d      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000def6:	68fb      	ldr	r3, [r7, #12]
2000def8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000defa:	681b      	ldr	r3, [r3, #0]
2000defc:	4a5e      	ldr	r2, [pc, #376]	@ (2000e078 <I2C_Slave_ISR_DMA+0x290>)
2000defe:	4293      	cmp	r3, r2
2000df00:	d017      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000df02:	68fb      	ldr	r3, [r7, #12]
2000df04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000df06:	681b      	ldr	r3, [r3, #0]
2000df08:	4a5c      	ldr	r2, [pc, #368]	@ (2000e07c <I2C_Slave_ISR_DMA+0x294>)
2000df0a:	4293      	cmp	r3, r2
2000df0c:	d011      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000df0e:	68fb      	ldr	r3, [r7, #12]
2000df10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000df12:	681b      	ldr	r3, [r3, #0]
2000df14:	4a5a      	ldr	r2, [pc, #360]	@ (2000e080 <I2C_Slave_ISR_DMA+0x298>)
2000df16:	4293      	cmp	r3, r2
2000df18:	d00b      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000df1a:	68fb      	ldr	r3, [r7, #12]
2000df1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000df1e:	681b      	ldr	r3, [r3, #0]
2000df20:	4a58      	ldr	r2, [pc, #352]	@ (2000e084 <I2C_Slave_ISR_DMA+0x29c>)
2000df22:	4293      	cmp	r3, r2
2000df24:	d005      	beq.n	2000df32 <I2C_Slave_ISR_DMA+0x14a>
2000df26:	68fb      	ldr	r3, [r7, #12]
2000df28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000df2a:	681b      	ldr	r3, [r3, #0]
2000df2c:	4a56      	ldr	r2, [pc, #344]	@ (2000e088 <I2C_Slave_ISR_DMA+0x2a0>)
2000df2e:	4293      	cmp	r3, r2
2000df30:	d109      	bne.n	2000df46 <I2C_Slave_ISR_DMA+0x15e>
2000df32:	68fb      	ldr	r3, [r7, #12]
2000df34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000df36:	681b      	ldr	r3, [r3, #0]
2000df38:	685b      	ldr	r3, [r3, #4]
2000df3a:	2b00      	cmp	r3, #0
2000df3c:	bf0c      	ite	eq
2000df3e:	2301      	moveq	r3, #1
2000df40:	2300      	movne	r3, #0
2000df42:	b2db      	uxtb	r3, r3
2000df44:	e008      	b.n	2000df58 <I2C_Slave_ISR_DMA+0x170>
2000df46:	68fb      	ldr	r3, [r7, #12]
2000df48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000df4a:	681b      	ldr	r3, [r3, #0]
2000df4c:	685b      	ldr	r3, [r3, #4]
2000df4e:	2b00      	cmp	r3, #0
2000df50:	bf0c      	ite	eq
2000df52:	2301      	moveq	r3, #1
2000df54:	2300      	movne	r3, #0
2000df56:	b2db      	uxtb	r3, r3
2000df58:	2b00      	cmp	r3, #0
2000df5a:	d001      	beq.n	2000df60 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
2000df5c:	2301      	movs	r3, #1
2000df5e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
2000df60:	68fb      	ldr	r3, [r7, #12]
2000df62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000df64:	2b00      	cmp	r3, #0
2000df66:	f000 809e 	beq.w	2000e0a6 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
2000df6a:	687b      	ldr	r3, [r7, #4]
2000df6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000df70:	2b00      	cmp	r3, #0
2000df72:	f000 8098 	beq.w	2000e0a6 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2000df76:	68fb      	ldr	r3, [r7, #12]
2000df78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000df7a:	681b      	ldr	r3, [r3, #0]
2000df7c:	4a33      	ldr	r2, [pc, #204]	@ (2000e04c <I2C_Slave_ISR_DMA+0x264>)
2000df7e:	4293      	cmp	r3, r2
2000df80:	d059      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000df82:	68fb      	ldr	r3, [r7, #12]
2000df84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000df86:	681b      	ldr	r3, [r3, #0]
2000df88:	4a31      	ldr	r2, [pc, #196]	@ (2000e050 <I2C_Slave_ISR_DMA+0x268>)
2000df8a:	4293      	cmp	r3, r2
2000df8c:	d053      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000df8e:	68fb      	ldr	r3, [r7, #12]
2000df90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000df92:	681b      	ldr	r3, [r3, #0]
2000df94:	4a2f      	ldr	r2, [pc, #188]	@ (2000e054 <I2C_Slave_ISR_DMA+0x26c>)
2000df96:	4293      	cmp	r3, r2
2000df98:	d04d      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000df9a:	68fb      	ldr	r3, [r7, #12]
2000df9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000df9e:	681b      	ldr	r3, [r3, #0]
2000dfa0:	4a2d      	ldr	r2, [pc, #180]	@ (2000e058 <I2C_Slave_ISR_DMA+0x270>)
2000dfa2:	4293      	cmp	r3, r2
2000dfa4:	d047      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000dfa6:	68fb      	ldr	r3, [r7, #12]
2000dfa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000dfaa:	681b      	ldr	r3, [r3, #0]
2000dfac:	4a2b      	ldr	r2, [pc, #172]	@ (2000e05c <I2C_Slave_ISR_DMA+0x274>)
2000dfae:	4293      	cmp	r3, r2
2000dfb0:	d041      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000dfb2:	68fb      	ldr	r3, [r7, #12]
2000dfb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000dfb6:	681b      	ldr	r3, [r3, #0]
2000dfb8:	4a29      	ldr	r2, [pc, #164]	@ (2000e060 <I2C_Slave_ISR_DMA+0x278>)
2000dfba:	4293      	cmp	r3, r2
2000dfbc:	d03b      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000dfbe:	68fb      	ldr	r3, [r7, #12]
2000dfc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000dfc2:	681b      	ldr	r3, [r3, #0]
2000dfc4:	4a27      	ldr	r2, [pc, #156]	@ (2000e064 <I2C_Slave_ISR_DMA+0x27c>)
2000dfc6:	4293      	cmp	r3, r2
2000dfc8:	d035      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000dfca:	68fb      	ldr	r3, [r7, #12]
2000dfcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000dfce:	681b      	ldr	r3, [r3, #0]
2000dfd0:	4a25      	ldr	r2, [pc, #148]	@ (2000e068 <I2C_Slave_ISR_DMA+0x280>)
2000dfd2:	4293      	cmp	r3, r2
2000dfd4:	d02f      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000dfd6:	68fb      	ldr	r3, [r7, #12]
2000dfd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000dfda:	681b      	ldr	r3, [r3, #0]
2000dfdc:	4a23      	ldr	r2, [pc, #140]	@ (2000e06c <I2C_Slave_ISR_DMA+0x284>)
2000dfde:	4293      	cmp	r3, r2
2000dfe0:	d029      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000dfe2:	68fb      	ldr	r3, [r7, #12]
2000dfe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000dfe6:	681b      	ldr	r3, [r3, #0]
2000dfe8:	4a21      	ldr	r2, [pc, #132]	@ (2000e070 <I2C_Slave_ISR_DMA+0x288>)
2000dfea:	4293      	cmp	r3, r2
2000dfec:	d023      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000dfee:	68fb      	ldr	r3, [r7, #12]
2000dff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000dff2:	681b      	ldr	r3, [r3, #0]
2000dff4:	4a1f      	ldr	r2, [pc, #124]	@ (2000e074 <I2C_Slave_ISR_DMA+0x28c>)
2000dff6:	4293      	cmp	r3, r2
2000dff8:	d01d      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000dffa:	68fb      	ldr	r3, [r7, #12]
2000dffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000dffe:	681b      	ldr	r3, [r3, #0]
2000e000:	4a1d      	ldr	r2, [pc, #116]	@ (2000e078 <I2C_Slave_ISR_DMA+0x290>)
2000e002:	4293      	cmp	r3, r2
2000e004:	d017      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000e006:	68fb      	ldr	r3, [r7, #12]
2000e008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e00a:	681b      	ldr	r3, [r3, #0]
2000e00c:	4a1b      	ldr	r2, [pc, #108]	@ (2000e07c <I2C_Slave_ISR_DMA+0x294>)
2000e00e:	4293      	cmp	r3, r2
2000e010:	d011      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000e012:	68fb      	ldr	r3, [r7, #12]
2000e014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e016:	681b      	ldr	r3, [r3, #0]
2000e018:	4a19      	ldr	r2, [pc, #100]	@ (2000e080 <I2C_Slave_ISR_DMA+0x298>)
2000e01a:	4293      	cmp	r3, r2
2000e01c:	d00b      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000e01e:	68fb      	ldr	r3, [r7, #12]
2000e020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e022:	681b      	ldr	r3, [r3, #0]
2000e024:	4a17      	ldr	r2, [pc, #92]	@ (2000e084 <I2C_Slave_ISR_DMA+0x29c>)
2000e026:	4293      	cmp	r3, r2
2000e028:	d005      	beq.n	2000e036 <I2C_Slave_ISR_DMA+0x24e>
2000e02a:	68fb      	ldr	r3, [r7, #12]
2000e02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e02e:	681b      	ldr	r3, [r3, #0]
2000e030:	4a15      	ldr	r2, [pc, #84]	@ (2000e088 <I2C_Slave_ISR_DMA+0x2a0>)
2000e032:	4293      	cmp	r3, r2
2000e034:	d12a      	bne.n	2000e08c <I2C_Slave_ISR_DMA+0x2a4>
2000e036:	68fb      	ldr	r3, [r7, #12]
2000e038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e03a:	681b      	ldr	r3, [r3, #0]
2000e03c:	685b      	ldr	r3, [r3, #4]
2000e03e:	2b00      	cmp	r3, #0
2000e040:	bf0c      	ite	eq
2000e042:	2301      	moveq	r3, #1
2000e044:	2300      	movne	r3, #0
2000e046:	b2db      	uxtb	r3, r3
2000e048:	e029      	b.n	2000e09e <I2C_Slave_ISR_DMA+0x2b6>
2000e04a:	bf00      	nop
2000e04c:	40020010 	.word	0x40020010
2000e050:	40020028 	.word	0x40020028
2000e054:	40020040 	.word	0x40020040
2000e058:	40020058 	.word	0x40020058
2000e05c:	40020070 	.word	0x40020070
2000e060:	40020088 	.word	0x40020088
2000e064:	400200a0 	.word	0x400200a0
2000e068:	400200b8 	.word	0x400200b8
2000e06c:	40020410 	.word	0x40020410
2000e070:	40020428 	.word	0x40020428
2000e074:	40020440 	.word	0x40020440
2000e078:	40020458 	.word	0x40020458
2000e07c:	40020470 	.word	0x40020470
2000e080:	40020488 	.word	0x40020488
2000e084:	400204a0 	.word	0x400204a0
2000e088:	400204b8 	.word	0x400204b8
2000e08c:	68fb      	ldr	r3, [r7, #12]
2000e08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e090:	681b      	ldr	r3, [r3, #0]
2000e092:	685b      	ldr	r3, [r3, #4]
2000e094:	2b00      	cmp	r3, #0
2000e096:	bf0c      	ite	eq
2000e098:	2301      	moveq	r3, #1
2000e09a:	2300      	movne	r3, #0
2000e09c:	b2db      	uxtb	r3, r3
2000e09e:	2b00      	cmp	r3, #0
2000e0a0:	d001      	beq.n	2000e0a6 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
2000e0a2:	2301      	movs	r3, #1
2000e0a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
2000e0a6:	69fb      	ldr	r3, [r7, #28]
2000e0a8:	2b01      	cmp	r3, #1
2000e0aa:	d128      	bne.n	2000e0fe <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2000e0ac:	68fb      	ldr	r3, [r7, #12]
2000e0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e0b2:	b2db      	uxtb	r3, r3
2000e0b4:	2b28      	cmp	r3, #40	@ 0x28
2000e0b6:	d108      	bne.n	2000e0ca <I2C_Slave_ISR_DMA+0x2e2>
2000e0b8:	69bb      	ldr	r3, [r7, #24]
2000e0ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000e0be:	d104      	bne.n	2000e0ca <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
2000e0c0:	68b9      	ldr	r1, [r7, #8]
2000e0c2:	68f8      	ldr	r0, [r7, #12]
2000e0c4:	f000 fd4c 	bl	2000eb60 <I2C_ITListenCplt>
2000e0c8:	e048      	b.n	2000e15c <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2000e0ca:	68fb      	ldr	r3, [r7, #12]
2000e0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e0d0:	b2db      	uxtb	r3, r3
2000e0d2:	2b29      	cmp	r3, #41	@ 0x29
2000e0d4:	d10e      	bne.n	2000e0f4 <I2C_Slave_ISR_DMA+0x30c>
2000e0d6:	69bb      	ldr	r3, [r7, #24]
2000e0d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000e0dc:	d00a      	beq.n	2000e0f4 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000e0de:	68fb      	ldr	r3, [r7, #12]
2000e0e0:	681b      	ldr	r3, [r3, #0]
2000e0e2:	2210      	movs	r2, #16
2000e0e4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
2000e0e6:	68f8      	ldr	r0, [r7, #12]
2000e0e8:	f000 fea5 	bl	2000ee36 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
2000e0ec:	68f8      	ldr	r0, [r7, #12]
2000e0ee:	f000 f9be 	bl	2000e46e <I2C_ITSlaveSeqCplt>
2000e0f2:	e033      	b.n	2000e15c <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000e0f4:	68fb      	ldr	r3, [r7, #12]
2000e0f6:	681b      	ldr	r3, [r3, #0]
2000e0f8:	2210      	movs	r2, #16
2000e0fa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
2000e0fc:	e034      	b.n	2000e168 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000e0fe:	68fb      	ldr	r3, [r7, #12]
2000e100:	681b      	ldr	r3, [r3, #0]
2000e102:	2210      	movs	r2, #16
2000e104:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000e106:	68fb      	ldr	r3, [r7, #12]
2000e108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000e10a:	f043 0204 	orr.w	r2, r3, #4
2000e10e:	68fb      	ldr	r3, [r7, #12]
2000e110:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
2000e112:	68fb      	ldr	r3, [r7, #12]
2000e114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e118:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2000e11a:	69bb      	ldr	r3, [r7, #24]
2000e11c:	2b00      	cmp	r3, #0
2000e11e:	d003      	beq.n	2000e128 <I2C_Slave_ISR_DMA+0x340>
2000e120:	69bb      	ldr	r3, [r7, #24]
2000e122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2000e126:	d11f      	bne.n	2000e168 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2000e128:	7dfb      	ldrb	r3, [r7, #23]
2000e12a:	2b21      	cmp	r3, #33	@ 0x21
2000e12c:	d002      	beq.n	2000e134 <I2C_Slave_ISR_DMA+0x34c>
2000e12e:	7dfb      	ldrb	r3, [r7, #23]
2000e130:	2b29      	cmp	r3, #41	@ 0x29
2000e132:	d103      	bne.n	2000e13c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2000e134:	68fb      	ldr	r3, [r7, #12]
2000e136:	2221      	movs	r2, #33	@ 0x21
2000e138:	631a      	str	r2, [r3, #48]	@ 0x30
2000e13a:	e008      	b.n	2000e14e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2000e13c:	7dfb      	ldrb	r3, [r7, #23]
2000e13e:	2b22      	cmp	r3, #34	@ 0x22
2000e140:	d002      	beq.n	2000e148 <I2C_Slave_ISR_DMA+0x360>
2000e142:	7dfb      	ldrb	r3, [r7, #23]
2000e144:	2b2a      	cmp	r3, #42	@ 0x2a
2000e146:	d102      	bne.n	2000e14e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2000e148:	68fb      	ldr	r3, [r7, #12]
2000e14a:	2222      	movs	r2, #34	@ 0x22
2000e14c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
2000e14e:	68fb      	ldr	r3, [r7, #12]
2000e150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000e152:	4619      	mov	r1, r3
2000e154:	68f8      	ldr	r0, [r7, #12]
2000e156:	f000 fd57 	bl	2000ec08 <I2C_ITError>
      if (treatdmanack == 1U)
2000e15a:	e005      	b.n	2000e168 <I2C_Slave_ISR_DMA+0x380>
2000e15c:	e004      	b.n	2000e168 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000e15e:	68fb      	ldr	r3, [r7, #12]
2000e160:	681b      	ldr	r3, [r3, #0]
2000e162:	2210      	movs	r2, #16
2000e164:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2000e166:	e00f      	b.n	2000e188 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
2000e168:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2000e16a:	e00d      	b.n	2000e188 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2000e16c:	68bb      	ldr	r3, [r7, #8]
2000e16e:	f003 0308 	and.w	r3, r3, #8
2000e172:	2b00      	cmp	r3, #0
2000e174:	d008      	beq.n	2000e188 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2000e176:	687b      	ldr	r3, [r7, #4]
2000e178:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2000e17c:	2b00      	cmp	r3, #0
2000e17e:	d003      	beq.n	2000e188 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
2000e180:	68b9      	ldr	r1, [r7, #8]
2000e182:	68f8      	ldr	r0, [r7, #12]
2000e184:	f000 f8b2 	bl	2000e2ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2000e188:	68fb      	ldr	r3, [r7, #12]
2000e18a:	2200      	movs	r2, #0
2000e18c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2000e190:	2300      	movs	r3, #0
}
2000e192:	4618      	mov	r0, r3
2000e194:	3720      	adds	r7, #32
2000e196:	46bd      	mov	sp, r7
2000e198:	bd80      	pop	{r7, pc}
2000e19a:	bf00      	nop

2000e19c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
2000e19c:	b580      	push	{r7, lr}
2000e19e:	b086      	sub	sp, #24
2000e1a0:	af02      	add	r7, sp, #8
2000e1a2:	60f8      	str	r0, [r7, #12]
2000e1a4:	4608      	mov	r0, r1
2000e1a6:	4611      	mov	r1, r2
2000e1a8:	461a      	mov	r2, r3
2000e1aa:	4603      	mov	r3, r0
2000e1ac:	817b      	strh	r3, [r7, #10]
2000e1ae:	460b      	mov	r3, r1
2000e1b0:	813b      	strh	r3, [r7, #8]
2000e1b2:	4613      	mov	r3, r2
2000e1b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2000e1b6:	88fb      	ldrh	r3, [r7, #6]
2000e1b8:	b2da      	uxtb	r2, r3
2000e1ba:	8979      	ldrh	r1, [r7, #10]
2000e1bc:	4b20      	ldr	r3, [pc, #128]	@ (2000e240 <I2C_RequestMemoryWrite+0xa4>)
2000e1be:	9300      	str	r3, [sp, #0]
2000e1c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2000e1c4:	68f8      	ldr	r0, [r7, #12]
2000e1c6:	f001 fb6b 	bl	2000f8a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000e1ca:	69fa      	ldr	r2, [r7, #28]
2000e1cc:	69b9      	ldr	r1, [r7, #24]
2000e1ce:	68f8      	ldr	r0, [r7, #12]
2000e1d0:	f001 f96f 	bl	2000f4b2 <I2C_WaitOnTXISFlagUntilTimeout>
2000e1d4:	4603      	mov	r3, r0
2000e1d6:	2b00      	cmp	r3, #0
2000e1d8:	d001      	beq.n	2000e1de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
2000e1da:	2301      	movs	r3, #1
2000e1dc:	e02c      	b.n	2000e238 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2000e1de:	88fb      	ldrh	r3, [r7, #6]
2000e1e0:	2b01      	cmp	r3, #1
2000e1e2:	d105      	bne.n	2000e1f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000e1e4:	893b      	ldrh	r3, [r7, #8]
2000e1e6:	b2da      	uxtb	r2, r3
2000e1e8:	68fb      	ldr	r3, [r7, #12]
2000e1ea:	681b      	ldr	r3, [r3, #0]
2000e1ec:	629a      	str	r2, [r3, #40]	@ 0x28
2000e1ee:	e015      	b.n	2000e21c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000e1f0:	893b      	ldrh	r3, [r7, #8]
2000e1f2:	0a1b      	lsrs	r3, r3, #8
2000e1f4:	b29b      	uxth	r3, r3
2000e1f6:	b2da      	uxtb	r2, r3
2000e1f8:	68fb      	ldr	r3, [r7, #12]
2000e1fa:	681b      	ldr	r3, [r3, #0]
2000e1fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000e1fe:	69fa      	ldr	r2, [r7, #28]
2000e200:	69b9      	ldr	r1, [r7, #24]
2000e202:	68f8      	ldr	r0, [r7, #12]
2000e204:	f001 f955 	bl	2000f4b2 <I2C_WaitOnTXISFlagUntilTimeout>
2000e208:	4603      	mov	r3, r0
2000e20a:	2b00      	cmp	r3, #0
2000e20c:	d001      	beq.n	2000e212 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
2000e20e:	2301      	movs	r3, #1
2000e210:	e012      	b.n	2000e238 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000e212:	893b      	ldrh	r3, [r7, #8]
2000e214:	b2da      	uxtb	r2, r3
2000e216:	68fb      	ldr	r3, [r7, #12]
2000e218:	681b      	ldr	r3, [r3, #0]
2000e21a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
2000e21c:	69fb      	ldr	r3, [r7, #28]
2000e21e:	9300      	str	r3, [sp, #0]
2000e220:	69bb      	ldr	r3, [r7, #24]
2000e222:	2200      	movs	r2, #0
2000e224:	2180      	movs	r1, #128	@ 0x80
2000e226:	68f8      	ldr	r0, [r7, #12]
2000e228:	f001 f8ea 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000e22c:	4603      	mov	r3, r0
2000e22e:	2b00      	cmp	r3, #0
2000e230:	d001      	beq.n	2000e236 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
2000e232:	2301      	movs	r3, #1
2000e234:	e000      	b.n	2000e238 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
2000e236:	2300      	movs	r3, #0
}
2000e238:	4618      	mov	r0, r3
2000e23a:	3710      	adds	r7, #16
2000e23c:	46bd      	mov	sp, r7
2000e23e:	bd80      	pop	{r7, pc}
2000e240:	80002000 	.word	0x80002000

2000e244 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
2000e244:	b580      	push	{r7, lr}
2000e246:	b086      	sub	sp, #24
2000e248:	af02      	add	r7, sp, #8
2000e24a:	60f8      	str	r0, [r7, #12]
2000e24c:	4608      	mov	r0, r1
2000e24e:	4611      	mov	r1, r2
2000e250:	461a      	mov	r2, r3
2000e252:	4603      	mov	r3, r0
2000e254:	817b      	strh	r3, [r7, #10]
2000e256:	460b      	mov	r3, r1
2000e258:	813b      	strh	r3, [r7, #8]
2000e25a:	4613      	mov	r3, r2
2000e25c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2000e25e:	88fb      	ldrh	r3, [r7, #6]
2000e260:	b2da      	uxtb	r2, r3
2000e262:	8979      	ldrh	r1, [r7, #10]
2000e264:	4b20      	ldr	r3, [pc, #128]	@ (2000e2e8 <I2C_RequestMemoryRead+0xa4>)
2000e266:	9300      	str	r3, [sp, #0]
2000e268:	2300      	movs	r3, #0
2000e26a:	68f8      	ldr	r0, [r7, #12]
2000e26c:	f001 fb18 	bl	2000f8a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000e270:	69fa      	ldr	r2, [r7, #28]
2000e272:	69b9      	ldr	r1, [r7, #24]
2000e274:	68f8      	ldr	r0, [r7, #12]
2000e276:	f001 f91c 	bl	2000f4b2 <I2C_WaitOnTXISFlagUntilTimeout>
2000e27a:	4603      	mov	r3, r0
2000e27c:	2b00      	cmp	r3, #0
2000e27e:	d001      	beq.n	2000e284 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
2000e280:	2301      	movs	r3, #1
2000e282:	e02c      	b.n	2000e2de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2000e284:	88fb      	ldrh	r3, [r7, #6]
2000e286:	2b01      	cmp	r3, #1
2000e288:	d105      	bne.n	2000e296 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000e28a:	893b      	ldrh	r3, [r7, #8]
2000e28c:	b2da      	uxtb	r2, r3
2000e28e:	68fb      	ldr	r3, [r7, #12]
2000e290:	681b      	ldr	r3, [r3, #0]
2000e292:	629a      	str	r2, [r3, #40]	@ 0x28
2000e294:	e015      	b.n	2000e2c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000e296:	893b      	ldrh	r3, [r7, #8]
2000e298:	0a1b      	lsrs	r3, r3, #8
2000e29a:	b29b      	uxth	r3, r3
2000e29c:	b2da      	uxtb	r2, r3
2000e29e:	68fb      	ldr	r3, [r7, #12]
2000e2a0:	681b      	ldr	r3, [r3, #0]
2000e2a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000e2a4:	69fa      	ldr	r2, [r7, #28]
2000e2a6:	69b9      	ldr	r1, [r7, #24]
2000e2a8:	68f8      	ldr	r0, [r7, #12]
2000e2aa:	f001 f902 	bl	2000f4b2 <I2C_WaitOnTXISFlagUntilTimeout>
2000e2ae:	4603      	mov	r3, r0
2000e2b0:	2b00      	cmp	r3, #0
2000e2b2:	d001      	beq.n	2000e2b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
2000e2b4:	2301      	movs	r3, #1
2000e2b6:	e012      	b.n	2000e2de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000e2b8:	893b      	ldrh	r3, [r7, #8]
2000e2ba:	b2da      	uxtb	r2, r3
2000e2bc:	68fb      	ldr	r3, [r7, #12]
2000e2be:	681b      	ldr	r3, [r3, #0]
2000e2c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
2000e2c2:	69fb      	ldr	r3, [r7, #28]
2000e2c4:	9300      	str	r3, [sp, #0]
2000e2c6:	69bb      	ldr	r3, [r7, #24]
2000e2c8:	2200      	movs	r2, #0
2000e2ca:	2140      	movs	r1, #64	@ 0x40
2000e2cc:	68f8      	ldr	r0, [r7, #12]
2000e2ce:	f001 f897 	bl	2000f400 <I2C_WaitOnFlagUntilTimeout>
2000e2d2:	4603      	mov	r3, r0
2000e2d4:	2b00      	cmp	r3, #0
2000e2d6:	d001      	beq.n	2000e2dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
2000e2d8:	2301      	movs	r3, #1
2000e2da:	e000      	b.n	2000e2de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
2000e2dc:	2300      	movs	r3, #0
}
2000e2de:	4618      	mov	r0, r3
2000e2e0:	3710      	adds	r7, #16
2000e2e2:	46bd      	mov	sp, r7
2000e2e4:	bd80      	pop	{r7, pc}
2000e2e6:	bf00      	nop
2000e2e8:	80002000 	.word	0x80002000

2000e2ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2000e2ec:	b580      	push	{r7, lr}
2000e2ee:	b084      	sub	sp, #16
2000e2f0:	af00      	add	r7, sp, #0
2000e2f2:	6078      	str	r0, [r7, #4]
2000e2f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2000e2f6:	687b      	ldr	r3, [r7, #4]
2000e2f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e2fc:	b2db      	uxtb	r3, r3
2000e2fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2000e302:	2b28      	cmp	r3, #40	@ 0x28
2000e304:	d16a      	bne.n	2000e3dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
2000e306:	687b      	ldr	r3, [r7, #4]
2000e308:	681b      	ldr	r3, [r3, #0]
2000e30a:	699b      	ldr	r3, [r3, #24]
2000e30c:	0c1b      	lsrs	r3, r3, #16
2000e30e:	b2db      	uxtb	r3, r3
2000e310:	f003 0301 	and.w	r3, r3, #1
2000e314:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
2000e316:	687b      	ldr	r3, [r7, #4]
2000e318:	681b      	ldr	r3, [r3, #0]
2000e31a:	699b      	ldr	r3, [r3, #24]
2000e31c:	0c1b      	lsrs	r3, r3, #16
2000e31e:	b29b      	uxth	r3, r3
2000e320:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
2000e324:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
2000e326:	687b      	ldr	r3, [r7, #4]
2000e328:	681b      	ldr	r3, [r3, #0]
2000e32a:	689b      	ldr	r3, [r3, #8]
2000e32c:	b29b      	uxth	r3, r3
2000e32e:	f3c3 0309 	ubfx	r3, r3, #0, #10
2000e332:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
2000e334:	687b      	ldr	r3, [r7, #4]
2000e336:	681b      	ldr	r3, [r3, #0]
2000e338:	68db      	ldr	r3, [r3, #12]
2000e33a:	b29b      	uxth	r3, r3
2000e33c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
2000e340:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2000e342:	687b      	ldr	r3, [r7, #4]
2000e344:	68db      	ldr	r3, [r3, #12]
2000e346:	2b02      	cmp	r3, #2
2000e348:	d138      	bne.n	2000e3bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
2000e34a:	897b      	ldrh	r3, [r7, #10]
2000e34c:	09db      	lsrs	r3, r3, #7
2000e34e:	b29a      	uxth	r2, r3
2000e350:	89bb      	ldrh	r3, [r7, #12]
2000e352:	4053      	eors	r3, r2
2000e354:	b29b      	uxth	r3, r3
2000e356:	f003 0306 	and.w	r3, r3, #6
2000e35a:	2b00      	cmp	r3, #0
2000e35c:	d11c      	bne.n	2000e398 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
2000e35e:	897b      	ldrh	r3, [r7, #10]
2000e360:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
2000e362:	687b      	ldr	r3, [r7, #4]
2000e364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2000e366:	1c5a      	adds	r2, r3, #1
2000e368:	687b      	ldr	r3, [r7, #4]
2000e36a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
2000e36c:	687b      	ldr	r3, [r7, #4]
2000e36e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2000e370:	2b02      	cmp	r3, #2
2000e372:	d13b      	bne.n	2000e3ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
2000e374:	687b      	ldr	r3, [r7, #4]
2000e376:	2200      	movs	r2, #0
2000e378:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000e37a:	687b      	ldr	r3, [r7, #4]
2000e37c:	681b      	ldr	r3, [r3, #0]
2000e37e:	2208      	movs	r2, #8
2000e380:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2000e382:	687b      	ldr	r3, [r7, #4]
2000e384:	2200      	movs	r2, #0
2000e386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2000e38a:	89ba      	ldrh	r2, [r7, #12]
2000e38c:	7bfb      	ldrb	r3, [r7, #15]
2000e38e:	4619      	mov	r1, r3
2000e390:	6878      	ldr	r0, [r7, #4]
2000e392:	f7fe ff6a 	bl	2000d26a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
2000e396:	e029      	b.n	2000e3ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
2000e398:	893b      	ldrh	r3, [r7, #8]
2000e39a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000e39c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000e3a0:	6878      	ldr	r0, [r7, #4]
2000e3a2:	f001 fb33 	bl	2000fa0c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
2000e3a6:	687b      	ldr	r3, [r7, #4]
2000e3a8:	2200      	movs	r2, #0
2000e3aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2000e3ae:	89ba      	ldrh	r2, [r7, #12]
2000e3b0:	7bfb      	ldrb	r3, [r7, #15]
2000e3b2:	4619      	mov	r1, r3
2000e3b4:	6878      	ldr	r0, [r7, #4]
2000e3b6:	f7fe ff58 	bl	2000d26a <HAL_I2C_AddrCallback>
}
2000e3ba:	e017      	b.n	2000e3ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000e3bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2000e3c0:	6878      	ldr	r0, [r7, #4]
2000e3c2:	f001 fb23 	bl	2000fa0c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
2000e3c6:	687b      	ldr	r3, [r7, #4]
2000e3c8:	2200      	movs	r2, #0
2000e3ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2000e3ce:	89ba      	ldrh	r2, [r7, #12]
2000e3d0:	7bfb      	ldrb	r3, [r7, #15]
2000e3d2:	4619      	mov	r1, r3
2000e3d4:	6878      	ldr	r0, [r7, #4]
2000e3d6:	f7fe ff48 	bl	2000d26a <HAL_I2C_AddrCallback>
}
2000e3da:	e007      	b.n	2000e3ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000e3dc:	687b      	ldr	r3, [r7, #4]
2000e3de:	681b      	ldr	r3, [r3, #0]
2000e3e0:	2208      	movs	r2, #8
2000e3e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
2000e3e4:	687b      	ldr	r3, [r7, #4]
2000e3e6:	2200      	movs	r2, #0
2000e3e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
2000e3ec:	bf00      	nop
2000e3ee:	3710      	adds	r7, #16
2000e3f0:	46bd      	mov	sp, r7
2000e3f2:	bd80      	pop	{r7, pc}

2000e3f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
2000e3f4:	b580      	push	{r7, lr}
2000e3f6:	b082      	sub	sp, #8
2000e3f8:	af00      	add	r7, sp, #0
2000e3fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2000e3fc:	687b      	ldr	r3, [r7, #4]
2000e3fe:	2200      	movs	r2, #0
2000e400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2000e404:	687b      	ldr	r3, [r7, #4]
2000e406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e40a:	b2db      	uxtb	r3, r3
2000e40c:	2b21      	cmp	r3, #33	@ 0x21
2000e40e:	d115      	bne.n	2000e43c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
2000e410:	687b      	ldr	r3, [r7, #4]
2000e412:	2220      	movs	r2, #32
2000e414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2000e418:	687b      	ldr	r3, [r7, #4]
2000e41a:	2211      	movs	r2, #17
2000e41c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
2000e41e:	687b      	ldr	r3, [r7, #4]
2000e420:	2200      	movs	r2, #0
2000e422:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000e424:	2101      	movs	r1, #1
2000e426:	6878      	ldr	r0, [r7, #4]
2000e428:	f001 faf0 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000e42c:	687b      	ldr	r3, [r7, #4]
2000e42e:	2200      	movs	r2, #0
2000e430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
2000e434:	6878      	ldr	r0, [r7, #4]
2000e436:	f7fe fef0 	bl	2000d21a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2000e43a:	e014      	b.n	2000e466 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
2000e43c:	687b      	ldr	r3, [r7, #4]
2000e43e:	2220      	movs	r2, #32
2000e440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2000e444:	687b      	ldr	r3, [r7, #4]
2000e446:	2212      	movs	r2, #18
2000e448:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
2000e44a:	687b      	ldr	r3, [r7, #4]
2000e44c:	2200      	movs	r2, #0
2000e44e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2000e450:	2102      	movs	r1, #2
2000e452:	6878      	ldr	r0, [r7, #4]
2000e454:	f001 fada 	bl	2000fa0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2000e458:	687b      	ldr	r3, [r7, #4]
2000e45a:	2200      	movs	r2, #0
2000e45c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2000e460:	6878      	ldr	r0, [r7, #4]
2000e462:	f7fe fee4 	bl	2000d22e <HAL_I2C_MasterRxCpltCallback>
}
2000e466:	bf00      	nop
2000e468:	3708      	adds	r7, #8
2000e46a:	46bd      	mov	sp, r7
2000e46c:	bd80      	pop	{r7, pc}

2000e46e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
2000e46e:	b580      	push	{r7, lr}
2000e470:	b084      	sub	sp, #16
2000e472:	af00      	add	r7, sp, #0
2000e474:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2000e476:	687b      	ldr	r3, [r7, #4]
2000e478:	681b      	ldr	r3, [r3, #0]
2000e47a:	681b      	ldr	r3, [r3, #0]
2000e47c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2000e47e:	687b      	ldr	r3, [r7, #4]
2000e480:	2200      	movs	r2, #0
2000e482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2000e486:	68fb      	ldr	r3, [r7, #12]
2000e488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000e48c:	2b00      	cmp	r3, #0
2000e48e:	d008      	beq.n	2000e4a2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000e490:	687b      	ldr	r3, [r7, #4]
2000e492:	681b      	ldr	r3, [r3, #0]
2000e494:	681a      	ldr	r2, [r3, #0]
2000e496:	687b      	ldr	r3, [r7, #4]
2000e498:	681b      	ldr	r3, [r3, #0]
2000e49a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2000e49e:	601a      	str	r2, [r3, #0]
2000e4a0:	e00c      	b.n	2000e4bc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2000e4a2:	68fb      	ldr	r3, [r7, #12]
2000e4a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000e4a8:	2b00      	cmp	r3, #0
2000e4aa:	d007      	beq.n	2000e4bc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000e4ac:	687b      	ldr	r3, [r7, #4]
2000e4ae:	681b      	ldr	r3, [r3, #0]
2000e4b0:	681a      	ldr	r2, [r3, #0]
2000e4b2:	687b      	ldr	r3, [r7, #4]
2000e4b4:	681b      	ldr	r3, [r3, #0]
2000e4b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000e4ba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2000e4bc:	687b      	ldr	r3, [r7, #4]
2000e4be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e4c2:	b2db      	uxtb	r3, r3
2000e4c4:	2b29      	cmp	r3, #41	@ 0x29
2000e4c6:	d112      	bne.n	2000e4ee <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2000e4c8:	687b      	ldr	r3, [r7, #4]
2000e4ca:	2228      	movs	r2, #40	@ 0x28
2000e4cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2000e4d0:	687b      	ldr	r3, [r7, #4]
2000e4d2:	2221      	movs	r2, #33	@ 0x21
2000e4d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000e4d6:	2101      	movs	r1, #1
2000e4d8:	6878      	ldr	r0, [r7, #4]
2000e4da:	f001 fa97 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000e4de:	687b      	ldr	r3, [r7, #4]
2000e4e0:	2200      	movs	r2, #0
2000e4e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2000e4e6:	6878      	ldr	r0, [r7, #4]
2000e4e8:	f7fe feab 	bl	2000d242 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2000e4ec:	e017      	b.n	2000e51e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2000e4ee:	687b      	ldr	r3, [r7, #4]
2000e4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e4f4:	b2db      	uxtb	r3, r3
2000e4f6:	2b2a      	cmp	r3, #42	@ 0x2a
2000e4f8:	d111      	bne.n	2000e51e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2000e4fa:	687b      	ldr	r3, [r7, #4]
2000e4fc:	2228      	movs	r2, #40	@ 0x28
2000e4fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2000e502:	687b      	ldr	r3, [r7, #4]
2000e504:	2222      	movs	r2, #34	@ 0x22
2000e506:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2000e508:	2102      	movs	r1, #2
2000e50a:	6878      	ldr	r0, [r7, #4]
2000e50c:	f001 fa7e 	bl	2000fa0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2000e510:	687b      	ldr	r3, [r7, #4]
2000e512:	2200      	movs	r2, #0
2000e514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2000e518:	6878      	ldr	r0, [r7, #4]
2000e51a:	f7fe fe9c 	bl	2000d256 <HAL_I2C_SlaveRxCpltCallback>
}
2000e51e:	bf00      	nop
2000e520:	3710      	adds	r7, #16
2000e522:	46bd      	mov	sp, r7
2000e524:	bd80      	pop	{r7, pc}
	...

2000e528 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2000e528:	b580      	push	{r7, lr}
2000e52a:	b086      	sub	sp, #24
2000e52c:	af00      	add	r7, sp, #0
2000e52e:	6078      	str	r0, [r7, #4]
2000e530:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
2000e532:	683b      	ldr	r3, [r7, #0]
2000e534:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000e536:	687b      	ldr	r3, [r7, #4]
2000e538:	681b      	ldr	r3, [r3, #0]
2000e53a:	2220      	movs	r2, #32
2000e53c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2000e53e:	687b      	ldr	r3, [r7, #4]
2000e540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e544:	b2db      	uxtb	r3, r3
2000e546:	2b21      	cmp	r3, #33	@ 0x21
2000e548:	d107      	bne.n	2000e55a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2000e54a:	2101      	movs	r1, #1
2000e54c:	6878      	ldr	r0, [r7, #4]
2000e54e:	f001 fa5d 	bl	2000fa0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2000e552:	687b      	ldr	r3, [r7, #4]
2000e554:	2211      	movs	r2, #17
2000e556:	631a      	str	r2, [r3, #48]	@ 0x30
2000e558:	e00c      	b.n	2000e574 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000e55a:	687b      	ldr	r3, [r7, #4]
2000e55c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e560:	b2db      	uxtb	r3, r3
2000e562:	2b22      	cmp	r3, #34	@ 0x22
2000e564:	d106      	bne.n	2000e574 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2000e566:	2102      	movs	r1, #2
2000e568:	6878      	ldr	r0, [r7, #4]
2000e56a:	f001 fa4f 	bl	2000fa0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2000e56e:	687b      	ldr	r3, [r7, #4]
2000e570:	2212      	movs	r2, #18
2000e572:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2000e574:	687b      	ldr	r3, [r7, #4]
2000e576:	681b      	ldr	r3, [r3, #0]
2000e578:	6859      	ldr	r1, [r3, #4]
2000e57a:	687b      	ldr	r3, [r7, #4]
2000e57c:	681a      	ldr	r2, [r3, #0]
2000e57e:	4b4c      	ldr	r3, [pc, #304]	@ (2000e6b0 <I2C_ITMasterCplt+0x188>)
2000e580:	400b      	ands	r3, r1
2000e582:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
2000e584:	687b      	ldr	r3, [r7, #4]
2000e586:	2200      	movs	r2, #0
2000e588:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2000e58a:	687b      	ldr	r3, [r7, #4]
2000e58c:	4a49      	ldr	r2, [pc, #292]	@ (2000e6b4 <I2C_ITMasterCplt+0x18c>)
2000e58e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
2000e590:	697b      	ldr	r3, [r7, #20]
2000e592:	f003 0310 	and.w	r3, r3, #16
2000e596:	2b00      	cmp	r3, #0
2000e598:	d009      	beq.n	2000e5ae <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000e59a:	687b      	ldr	r3, [r7, #4]
2000e59c:	681b      	ldr	r3, [r3, #0]
2000e59e:	2210      	movs	r2, #16
2000e5a0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000e5a2:	687b      	ldr	r3, [r7, #4]
2000e5a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000e5a6:	f043 0204 	orr.w	r2, r3, #4
2000e5aa:	687b      	ldr	r3, [r7, #4]
2000e5ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
2000e5ae:	687b      	ldr	r3, [r7, #4]
2000e5b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e5b4:	b2db      	uxtb	r3, r3
2000e5b6:	2b60      	cmp	r3, #96	@ 0x60
2000e5b8:	d10a      	bne.n	2000e5d0 <I2C_ITMasterCplt+0xa8>
2000e5ba:	697b      	ldr	r3, [r7, #20]
2000e5bc:	f003 0304 	and.w	r3, r3, #4
2000e5c0:	2b00      	cmp	r3, #0
2000e5c2:	d005      	beq.n	2000e5d0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
2000e5c4:	687b      	ldr	r3, [r7, #4]
2000e5c6:	681b      	ldr	r3, [r3, #0]
2000e5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000e5ca:	b2db      	uxtb	r3, r3
2000e5cc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
2000e5ce:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2000e5d0:	6878      	ldr	r0, [r7, #4]
2000e5d2:	f000 fc30 	bl	2000ee36 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2000e5d6:	687b      	ldr	r3, [r7, #4]
2000e5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000e5da:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
2000e5dc:	687b      	ldr	r3, [r7, #4]
2000e5de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e5e2:	b2db      	uxtb	r3, r3
2000e5e4:	2b60      	cmp	r3, #96	@ 0x60
2000e5e6:	d002      	beq.n	2000e5ee <I2C_ITMasterCplt+0xc6>
2000e5e8:	693b      	ldr	r3, [r7, #16]
2000e5ea:	2b00      	cmp	r3, #0
2000e5ec:	d006      	beq.n	2000e5fc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2000e5ee:	687b      	ldr	r3, [r7, #4]
2000e5f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000e5f2:	4619      	mov	r1, r3
2000e5f4:	6878      	ldr	r0, [r7, #4]
2000e5f6:	f000 fb07 	bl	2000ec08 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
2000e5fa:	e054      	b.n	2000e6a6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2000e5fc:	687b      	ldr	r3, [r7, #4]
2000e5fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e602:	b2db      	uxtb	r3, r3
2000e604:	2b21      	cmp	r3, #33	@ 0x21
2000e606:	d124      	bne.n	2000e652 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
2000e608:	687b      	ldr	r3, [r7, #4]
2000e60a:	2220      	movs	r2, #32
2000e60c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2000e610:	687b      	ldr	r3, [r7, #4]
2000e612:	2200      	movs	r2, #0
2000e614:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2000e616:	687b      	ldr	r3, [r7, #4]
2000e618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2000e61c:	b2db      	uxtb	r3, r3
2000e61e:	2b40      	cmp	r3, #64	@ 0x40
2000e620:	d10b      	bne.n	2000e63a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2000e622:	687b      	ldr	r3, [r7, #4]
2000e624:	2200      	movs	r2, #0
2000e626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
2000e62a:	687b      	ldr	r3, [r7, #4]
2000e62c:	2200      	movs	r2, #0
2000e62e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
2000e632:	6878      	ldr	r0, [r7, #4]
2000e634:	f7fe fe31 	bl	2000d29a <HAL_I2C_MemTxCpltCallback>
}
2000e638:	e035      	b.n	2000e6a6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2000e63a:	687b      	ldr	r3, [r7, #4]
2000e63c:	2200      	movs	r2, #0
2000e63e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
2000e642:	687b      	ldr	r3, [r7, #4]
2000e644:	2200      	movs	r2, #0
2000e646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
2000e64a:	6878      	ldr	r0, [r7, #4]
2000e64c:	f7fe fde5 	bl	2000d21a <HAL_I2C_MasterTxCpltCallback>
}
2000e650:	e029      	b.n	2000e6a6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000e652:	687b      	ldr	r3, [r7, #4]
2000e654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e658:	b2db      	uxtb	r3, r3
2000e65a:	2b22      	cmp	r3, #34	@ 0x22
2000e65c:	d123      	bne.n	2000e6a6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
2000e65e:	687b      	ldr	r3, [r7, #4]
2000e660:	2220      	movs	r2, #32
2000e662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2000e666:	687b      	ldr	r3, [r7, #4]
2000e668:	2200      	movs	r2, #0
2000e66a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2000e66c:	687b      	ldr	r3, [r7, #4]
2000e66e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2000e672:	b2db      	uxtb	r3, r3
2000e674:	2b40      	cmp	r3, #64	@ 0x40
2000e676:	d10b      	bne.n	2000e690 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2000e678:	687b      	ldr	r3, [r7, #4]
2000e67a:	2200      	movs	r2, #0
2000e67c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
2000e680:	687b      	ldr	r3, [r7, #4]
2000e682:	2200      	movs	r2, #0
2000e684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
2000e688:	6878      	ldr	r0, [r7, #4]
2000e68a:	f7fe fe10 	bl	2000d2ae <HAL_I2C_MemRxCpltCallback>
}
2000e68e:	e00a      	b.n	2000e6a6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2000e690:	687b      	ldr	r3, [r7, #4]
2000e692:	2200      	movs	r2, #0
2000e694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
2000e698:	687b      	ldr	r3, [r7, #4]
2000e69a:	2200      	movs	r2, #0
2000e69c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
2000e6a0:	6878      	ldr	r0, [r7, #4]
2000e6a2:	f7fe fdc4 	bl	2000d22e <HAL_I2C_MasterRxCpltCallback>
}
2000e6a6:	bf00      	nop
2000e6a8:	3718      	adds	r7, #24
2000e6aa:	46bd      	mov	sp, r7
2000e6ac:	bd80      	pop	{r7, pc}
2000e6ae:	bf00      	nop
2000e6b0:	fe00e800 	.word	0xfe00e800
2000e6b4:	ffff0000 	.word	0xffff0000

2000e6b8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2000e6b8:	b580      	push	{r7, lr}
2000e6ba:	b086      	sub	sp, #24
2000e6bc:	af00      	add	r7, sp, #0
2000e6be:	6078      	str	r0, [r7, #4]
2000e6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2000e6c2:	687b      	ldr	r3, [r7, #4]
2000e6c4:	681b      	ldr	r3, [r3, #0]
2000e6c6:	681b      	ldr	r3, [r3, #0]
2000e6c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
2000e6ca:	683b      	ldr	r3, [r7, #0]
2000e6cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
2000e6ce:	687b      	ldr	r3, [r7, #4]
2000e6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000e6d2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2000e6d4:	687b      	ldr	r3, [r7, #4]
2000e6d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000e6da:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000e6dc:	687b      	ldr	r3, [r7, #4]
2000e6de:	681b      	ldr	r3, [r3, #0]
2000e6e0:	2220      	movs	r2, #32
2000e6e2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2000e6e4:	7afb      	ldrb	r3, [r7, #11]
2000e6e6:	2b21      	cmp	r3, #33	@ 0x21
2000e6e8:	d002      	beq.n	2000e6f0 <I2C_ITSlaveCplt+0x38>
2000e6ea:	7afb      	ldrb	r3, [r7, #11]
2000e6ec:	2b29      	cmp	r3, #41	@ 0x29
2000e6ee:	d108      	bne.n	2000e702 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2000e6f0:	f248 0101 	movw	r1, #32769	@ 0x8001
2000e6f4:	6878      	ldr	r0, [r7, #4]
2000e6f6:	f001 f989 	bl	2000fa0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2000e6fa:	687b      	ldr	r3, [r7, #4]
2000e6fc:	2221      	movs	r2, #33	@ 0x21
2000e6fe:	631a      	str	r2, [r3, #48]	@ 0x30
2000e700:	e019      	b.n	2000e736 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2000e702:	7afb      	ldrb	r3, [r7, #11]
2000e704:	2b22      	cmp	r3, #34	@ 0x22
2000e706:	d002      	beq.n	2000e70e <I2C_ITSlaveCplt+0x56>
2000e708:	7afb      	ldrb	r3, [r7, #11]
2000e70a:	2b2a      	cmp	r3, #42	@ 0x2a
2000e70c:	d108      	bne.n	2000e720 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2000e70e:	f248 0102 	movw	r1, #32770	@ 0x8002
2000e712:	6878      	ldr	r0, [r7, #4]
2000e714:	f001 f97a 	bl	2000fa0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2000e718:	687b      	ldr	r3, [r7, #4]
2000e71a:	2222      	movs	r2, #34	@ 0x22
2000e71c:	631a      	str	r2, [r3, #48]	@ 0x30
2000e71e:	e00a      	b.n	2000e736 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
2000e720:	7afb      	ldrb	r3, [r7, #11]
2000e722:	2b28      	cmp	r3, #40	@ 0x28
2000e724:	d107      	bne.n	2000e736 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
2000e726:	f248 0103 	movw	r1, #32771	@ 0x8003
2000e72a:	6878      	ldr	r0, [r7, #4]
2000e72c:	f001 f96e 	bl	2000fa0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
2000e730:	687b      	ldr	r3, [r7, #4]
2000e732:	2200      	movs	r2, #0
2000e734:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000e736:	687b      	ldr	r3, [r7, #4]
2000e738:	681b      	ldr	r3, [r3, #0]
2000e73a:	685a      	ldr	r2, [r3, #4]
2000e73c:	687b      	ldr	r3, [r7, #4]
2000e73e:	681b      	ldr	r3, [r3, #0]
2000e740:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000e744:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2000e746:	687b      	ldr	r3, [r7, #4]
2000e748:	681b      	ldr	r3, [r3, #0]
2000e74a:	6859      	ldr	r1, [r3, #4]
2000e74c:	687b      	ldr	r3, [r7, #4]
2000e74e:	681a      	ldr	r2, [r3, #0]
2000e750:	4b7f      	ldr	r3, [pc, #508]	@ (2000e950 <I2C_ITSlaveCplt+0x298>)
2000e752:	400b      	ands	r3, r1
2000e754:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2000e756:	6878      	ldr	r0, [r7, #4]
2000e758:	f000 fb6d 	bl	2000ee36 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2000e75c:	693b      	ldr	r3, [r7, #16]
2000e75e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000e762:	2b00      	cmp	r3, #0
2000e764:	d07a      	beq.n	2000e85c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000e766:	687b      	ldr	r3, [r7, #4]
2000e768:	681b      	ldr	r3, [r3, #0]
2000e76a:	681a      	ldr	r2, [r3, #0]
2000e76c:	687b      	ldr	r3, [r7, #4]
2000e76e:	681b      	ldr	r3, [r3, #0]
2000e770:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2000e774:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
2000e776:	687b      	ldr	r3, [r7, #4]
2000e778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e77a:	2b00      	cmp	r3, #0
2000e77c:	f000 8111 	beq.w	2000e9a2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
2000e780:	687b      	ldr	r3, [r7, #4]
2000e782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e784:	681b      	ldr	r3, [r3, #0]
2000e786:	4a73      	ldr	r2, [pc, #460]	@ (2000e954 <I2C_ITSlaveCplt+0x29c>)
2000e788:	4293      	cmp	r3, r2
2000e78a:	d059      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e78c:	687b      	ldr	r3, [r7, #4]
2000e78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e790:	681b      	ldr	r3, [r3, #0]
2000e792:	4a71      	ldr	r2, [pc, #452]	@ (2000e958 <I2C_ITSlaveCplt+0x2a0>)
2000e794:	4293      	cmp	r3, r2
2000e796:	d053      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e798:	687b      	ldr	r3, [r7, #4]
2000e79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e79c:	681b      	ldr	r3, [r3, #0]
2000e79e:	4a6f      	ldr	r2, [pc, #444]	@ (2000e95c <I2C_ITSlaveCplt+0x2a4>)
2000e7a0:	4293      	cmp	r3, r2
2000e7a2:	d04d      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e7a4:	687b      	ldr	r3, [r7, #4]
2000e7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e7a8:	681b      	ldr	r3, [r3, #0]
2000e7aa:	4a6d      	ldr	r2, [pc, #436]	@ (2000e960 <I2C_ITSlaveCplt+0x2a8>)
2000e7ac:	4293      	cmp	r3, r2
2000e7ae:	d047      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e7b0:	687b      	ldr	r3, [r7, #4]
2000e7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e7b4:	681b      	ldr	r3, [r3, #0]
2000e7b6:	4a6b      	ldr	r2, [pc, #428]	@ (2000e964 <I2C_ITSlaveCplt+0x2ac>)
2000e7b8:	4293      	cmp	r3, r2
2000e7ba:	d041      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e7bc:	687b      	ldr	r3, [r7, #4]
2000e7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e7c0:	681b      	ldr	r3, [r3, #0]
2000e7c2:	4a69      	ldr	r2, [pc, #420]	@ (2000e968 <I2C_ITSlaveCplt+0x2b0>)
2000e7c4:	4293      	cmp	r3, r2
2000e7c6:	d03b      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e7c8:	687b      	ldr	r3, [r7, #4]
2000e7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e7cc:	681b      	ldr	r3, [r3, #0]
2000e7ce:	4a67      	ldr	r2, [pc, #412]	@ (2000e96c <I2C_ITSlaveCplt+0x2b4>)
2000e7d0:	4293      	cmp	r3, r2
2000e7d2:	d035      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e7d4:	687b      	ldr	r3, [r7, #4]
2000e7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e7d8:	681b      	ldr	r3, [r3, #0]
2000e7da:	4a65      	ldr	r2, [pc, #404]	@ (2000e970 <I2C_ITSlaveCplt+0x2b8>)
2000e7dc:	4293      	cmp	r3, r2
2000e7de:	d02f      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e7e0:	687b      	ldr	r3, [r7, #4]
2000e7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e7e4:	681b      	ldr	r3, [r3, #0]
2000e7e6:	4a63      	ldr	r2, [pc, #396]	@ (2000e974 <I2C_ITSlaveCplt+0x2bc>)
2000e7e8:	4293      	cmp	r3, r2
2000e7ea:	d029      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e7ec:	687b      	ldr	r3, [r7, #4]
2000e7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e7f0:	681b      	ldr	r3, [r3, #0]
2000e7f2:	4a61      	ldr	r2, [pc, #388]	@ (2000e978 <I2C_ITSlaveCplt+0x2c0>)
2000e7f4:	4293      	cmp	r3, r2
2000e7f6:	d023      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e7f8:	687b      	ldr	r3, [r7, #4]
2000e7fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e7fc:	681b      	ldr	r3, [r3, #0]
2000e7fe:	4a5f      	ldr	r2, [pc, #380]	@ (2000e97c <I2C_ITSlaveCplt+0x2c4>)
2000e800:	4293      	cmp	r3, r2
2000e802:	d01d      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e804:	687b      	ldr	r3, [r7, #4]
2000e806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e808:	681b      	ldr	r3, [r3, #0]
2000e80a:	4a5d      	ldr	r2, [pc, #372]	@ (2000e980 <I2C_ITSlaveCplt+0x2c8>)
2000e80c:	4293      	cmp	r3, r2
2000e80e:	d017      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e810:	687b      	ldr	r3, [r7, #4]
2000e812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e814:	681b      	ldr	r3, [r3, #0]
2000e816:	4a5b      	ldr	r2, [pc, #364]	@ (2000e984 <I2C_ITSlaveCplt+0x2cc>)
2000e818:	4293      	cmp	r3, r2
2000e81a:	d011      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e81c:	687b      	ldr	r3, [r7, #4]
2000e81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e820:	681b      	ldr	r3, [r3, #0]
2000e822:	4a59      	ldr	r2, [pc, #356]	@ (2000e988 <I2C_ITSlaveCplt+0x2d0>)
2000e824:	4293      	cmp	r3, r2
2000e826:	d00b      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e828:	687b      	ldr	r3, [r7, #4]
2000e82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e82c:	681b      	ldr	r3, [r3, #0]
2000e82e:	4a57      	ldr	r2, [pc, #348]	@ (2000e98c <I2C_ITSlaveCplt+0x2d4>)
2000e830:	4293      	cmp	r3, r2
2000e832:	d005      	beq.n	2000e840 <I2C_ITSlaveCplt+0x188>
2000e834:	687b      	ldr	r3, [r7, #4]
2000e836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e838:	681b      	ldr	r3, [r3, #0]
2000e83a:	4a55      	ldr	r2, [pc, #340]	@ (2000e990 <I2C_ITSlaveCplt+0x2d8>)
2000e83c:	4293      	cmp	r3, r2
2000e83e:	d105      	bne.n	2000e84c <I2C_ITSlaveCplt+0x194>
2000e840:	687b      	ldr	r3, [r7, #4]
2000e842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e844:	681b      	ldr	r3, [r3, #0]
2000e846:	685b      	ldr	r3, [r3, #4]
2000e848:	b29b      	uxth	r3, r3
2000e84a:	e004      	b.n	2000e856 <I2C_ITSlaveCplt+0x19e>
2000e84c:	687b      	ldr	r3, [r7, #4]
2000e84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000e850:	681b      	ldr	r3, [r3, #0]
2000e852:	685b      	ldr	r3, [r3, #4]
2000e854:	b29b      	uxth	r3, r3
2000e856:	687a      	ldr	r2, [r7, #4]
2000e858:	8553      	strh	r3, [r2, #42]	@ 0x2a
2000e85a:	e0a2      	b.n	2000e9a2 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2000e85c:	693b      	ldr	r3, [r7, #16]
2000e85e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000e862:	2b00      	cmp	r3, #0
2000e864:	f000 809d 	beq.w	2000e9a2 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000e868:	687b      	ldr	r3, [r7, #4]
2000e86a:	681b      	ldr	r3, [r3, #0]
2000e86c:	681a      	ldr	r2, [r3, #0]
2000e86e:	687b      	ldr	r3, [r7, #4]
2000e870:	681b      	ldr	r3, [r3, #0]
2000e872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000e876:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
2000e878:	687b      	ldr	r3, [r7, #4]
2000e87a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e87c:	2b00      	cmp	r3, #0
2000e87e:	f000 8090 	beq.w	2000e9a2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
2000e882:	687b      	ldr	r3, [r7, #4]
2000e884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e886:	681b      	ldr	r3, [r3, #0]
2000e888:	4a32      	ldr	r2, [pc, #200]	@ (2000e954 <I2C_ITSlaveCplt+0x29c>)
2000e88a:	4293      	cmp	r3, r2
2000e88c:	d059      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e88e:	687b      	ldr	r3, [r7, #4]
2000e890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e892:	681b      	ldr	r3, [r3, #0]
2000e894:	4a30      	ldr	r2, [pc, #192]	@ (2000e958 <I2C_ITSlaveCplt+0x2a0>)
2000e896:	4293      	cmp	r3, r2
2000e898:	d053      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e89a:	687b      	ldr	r3, [r7, #4]
2000e89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e89e:	681b      	ldr	r3, [r3, #0]
2000e8a0:	4a2e      	ldr	r2, [pc, #184]	@ (2000e95c <I2C_ITSlaveCplt+0x2a4>)
2000e8a2:	4293      	cmp	r3, r2
2000e8a4:	d04d      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e8a6:	687b      	ldr	r3, [r7, #4]
2000e8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e8aa:	681b      	ldr	r3, [r3, #0]
2000e8ac:	4a2c      	ldr	r2, [pc, #176]	@ (2000e960 <I2C_ITSlaveCplt+0x2a8>)
2000e8ae:	4293      	cmp	r3, r2
2000e8b0:	d047      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e8b2:	687b      	ldr	r3, [r7, #4]
2000e8b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e8b6:	681b      	ldr	r3, [r3, #0]
2000e8b8:	4a2a      	ldr	r2, [pc, #168]	@ (2000e964 <I2C_ITSlaveCplt+0x2ac>)
2000e8ba:	4293      	cmp	r3, r2
2000e8bc:	d041      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e8be:	687b      	ldr	r3, [r7, #4]
2000e8c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e8c2:	681b      	ldr	r3, [r3, #0]
2000e8c4:	4a28      	ldr	r2, [pc, #160]	@ (2000e968 <I2C_ITSlaveCplt+0x2b0>)
2000e8c6:	4293      	cmp	r3, r2
2000e8c8:	d03b      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e8ca:	687b      	ldr	r3, [r7, #4]
2000e8cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e8ce:	681b      	ldr	r3, [r3, #0]
2000e8d0:	4a26      	ldr	r2, [pc, #152]	@ (2000e96c <I2C_ITSlaveCplt+0x2b4>)
2000e8d2:	4293      	cmp	r3, r2
2000e8d4:	d035      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e8d6:	687b      	ldr	r3, [r7, #4]
2000e8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e8da:	681b      	ldr	r3, [r3, #0]
2000e8dc:	4a24      	ldr	r2, [pc, #144]	@ (2000e970 <I2C_ITSlaveCplt+0x2b8>)
2000e8de:	4293      	cmp	r3, r2
2000e8e0:	d02f      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e8e2:	687b      	ldr	r3, [r7, #4]
2000e8e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e8e6:	681b      	ldr	r3, [r3, #0]
2000e8e8:	4a22      	ldr	r2, [pc, #136]	@ (2000e974 <I2C_ITSlaveCplt+0x2bc>)
2000e8ea:	4293      	cmp	r3, r2
2000e8ec:	d029      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e8ee:	687b      	ldr	r3, [r7, #4]
2000e8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e8f2:	681b      	ldr	r3, [r3, #0]
2000e8f4:	4a20      	ldr	r2, [pc, #128]	@ (2000e978 <I2C_ITSlaveCplt+0x2c0>)
2000e8f6:	4293      	cmp	r3, r2
2000e8f8:	d023      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e8fa:	687b      	ldr	r3, [r7, #4]
2000e8fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e8fe:	681b      	ldr	r3, [r3, #0]
2000e900:	4a1e      	ldr	r2, [pc, #120]	@ (2000e97c <I2C_ITSlaveCplt+0x2c4>)
2000e902:	4293      	cmp	r3, r2
2000e904:	d01d      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e906:	687b      	ldr	r3, [r7, #4]
2000e908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e90a:	681b      	ldr	r3, [r3, #0]
2000e90c:	4a1c      	ldr	r2, [pc, #112]	@ (2000e980 <I2C_ITSlaveCplt+0x2c8>)
2000e90e:	4293      	cmp	r3, r2
2000e910:	d017      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e912:	687b      	ldr	r3, [r7, #4]
2000e914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e916:	681b      	ldr	r3, [r3, #0]
2000e918:	4a1a      	ldr	r2, [pc, #104]	@ (2000e984 <I2C_ITSlaveCplt+0x2cc>)
2000e91a:	4293      	cmp	r3, r2
2000e91c:	d011      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e91e:	687b      	ldr	r3, [r7, #4]
2000e920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e922:	681b      	ldr	r3, [r3, #0]
2000e924:	4a18      	ldr	r2, [pc, #96]	@ (2000e988 <I2C_ITSlaveCplt+0x2d0>)
2000e926:	4293      	cmp	r3, r2
2000e928:	d00b      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e92a:	687b      	ldr	r3, [r7, #4]
2000e92c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e92e:	681b      	ldr	r3, [r3, #0]
2000e930:	4a16      	ldr	r2, [pc, #88]	@ (2000e98c <I2C_ITSlaveCplt+0x2d4>)
2000e932:	4293      	cmp	r3, r2
2000e934:	d005      	beq.n	2000e942 <I2C_ITSlaveCplt+0x28a>
2000e936:	687b      	ldr	r3, [r7, #4]
2000e938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e93a:	681b      	ldr	r3, [r3, #0]
2000e93c:	4a14      	ldr	r2, [pc, #80]	@ (2000e990 <I2C_ITSlaveCplt+0x2d8>)
2000e93e:	4293      	cmp	r3, r2
2000e940:	d128      	bne.n	2000e994 <I2C_ITSlaveCplt+0x2dc>
2000e942:	687b      	ldr	r3, [r7, #4]
2000e944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e946:	681b      	ldr	r3, [r3, #0]
2000e948:	685b      	ldr	r3, [r3, #4]
2000e94a:	b29b      	uxth	r3, r3
2000e94c:	e027      	b.n	2000e99e <I2C_ITSlaveCplt+0x2e6>
2000e94e:	bf00      	nop
2000e950:	fe00e800 	.word	0xfe00e800
2000e954:	40020010 	.word	0x40020010
2000e958:	40020028 	.word	0x40020028
2000e95c:	40020040 	.word	0x40020040
2000e960:	40020058 	.word	0x40020058
2000e964:	40020070 	.word	0x40020070
2000e968:	40020088 	.word	0x40020088
2000e96c:	400200a0 	.word	0x400200a0
2000e970:	400200b8 	.word	0x400200b8
2000e974:	40020410 	.word	0x40020410
2000e978:	40020428 	.word	0x40020428
2000e97c:	40020440 	.word	0x40020440
2000e980:	40020458 	.word	0x40020458
2000e984:	40020470 	.word	0x40020470
2000e988:	40020488 	.word	0x40020488
2000e98c:	400204a0 	.word	0x400204a0
2000e990:	400204b8 	.word	0x400204b8
2000e994:	687b      	ldr	r3, [r7, #4]
2000e996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000e998:	681b      	ldr	r3, [r3, #0]
2000e99a:	685b      	ldr	r3, [r3, #4]
2000e99c:	b29b      	uxth	r3, r3
2000e99e:	687a      	ldr	r2, [r7, #4]
2000e9a0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
2000e9a2:	697b      	ldr	r3, [r7, #20]
2000e9a4:	f003 0304 	and.w	r3, r3, #4
2000e9a8:	2b00      	cmp	r3, #0
2000e9aa:	d020      	beq.n	2000e9ee <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2000e9ac:	697b      	ldr	r3, [r7, #20]
2000e9ae:	f023 0304 	bic.w	r3, r3, #4
2000e9b2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000e9b4:	687b      	ldr	r3, [r7, #4]
2000e9b6:	681b      	ldr	r3, [r3, #0]
2000e9b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000e9ba:	687b      	ldr	r3, [r7, #4]
2000e9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000e9be:	b2d2      	uxtb	r2, r2
2000e9c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2000e9c2:	687b      	ldr	r3, [r7, #4]
2000e9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000e9c6:	1c5a      	adds	r2, r3, #1
2000e9c8:	687b      	ldr	r3, [r7, #4]
2000e9ca:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
2000e9cc:	687b      	ldr	r3, [r7, #4]
2000e9ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000e9d0:	2b00      	cmp	r3, #0
2000e9d2:	d00c      	beq.n	2000e9ee <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
2000e9d4:	687b      	ldr	r3, [r7, #4]
2000e9d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000e9d8:	3b01      	subs	r3, #1
2000e9da:	b29a      	uxth	r2, r3
2000e9dc:	687b      	ldr	r3, [r7, #4]
2000e9de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2000e9e0:	687b      	ldr	r3, [r7, #4]
2000e9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000e9e4:	b29b      	uxth	r3, r3
2000e9e6:	3b01      	subs	r3, #1
2000e9e8:	b29a      	uxth	r2, r3
2000e9ea:	687b      	ldr	r3, [r7, #4]
2000e9ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
2000e9ee:	687b      	ldr	r3, [r7, #4]
2000e9f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000e9f2:	b29b      	uxth	r3, r3
2000e9f4:	2b00      	cmp	r3, #0
2000e9f6:	d005      	beq.n	2000ea04 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000e9f8:	687b      	ldr	r3, [r7, #4]
2000e9fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000e9fc:	f043 0204 	orr.w	r2, r3, #4
2000ea00:	687b      	ldr	r3, [r7, #4]
2000ea02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000ea04:	697b      	ldr	r3, [r7, #20]
2000ea06:	f003 0310 	and.w	r3, r3, #16
2000ea0a:	2b00      	cmp	r3, #0
2000ea0c:	d049      	beq.n	2000eaa2 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
2000ea0e:	693b      	ldr	r3, [r7, #16]
2000ea10:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000ea14:	2b00      	cmp	r3, #0
2000ea16:	d044      	beq.n	2000eaa2 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
2000ea18:	687b      	ldr	r3, [r7, #4]
2000ea1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ea1c:	b29b      	uxth	r3, r3
2000ea1e:	2b00      	cmp	r3, #0
2000ea20:	d128      	bne.n	2000ea74 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2000ea22:	687b      	ldr	r3, [r7, #4]
2000ea24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ea28:	b2db      	uxtb	r3, r3
2000ea2a:	2b28      	cmp	r3, #40	@ 0x28
2000ea2c:	d108      	bne.n	2000ea40 <I2C_ITSlaveCplt+0x388>
2000ea2e:	68fb      	ldr	r3, [r7, #12]
2000ea30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2000ea34:	d104      	bne.n	2000ea40 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
2000ea36:	6979      	ldr	r1, [r7, #20]
2000ea38:	6878      	ldr	r0, [r7, #4]
2000ea3a:	f000 f891 	bl	2000eb60 <I2C_ITListenCplt>
2000ea3e:	e030      	b.n	2000eaa2 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2000ea40:	687b      	ldr	r3, [r7, #4]
2000ea42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ea46:	b2db      	uxtb	r3, r3
2000ea48:	2b29      	cmp	r3, #41	@ 0x29
2000ea4a:	d10e      	bne.n	2000ea6a <I2C_ITSlaveCplt+0x3b2>
2000ea4c:	68fb      	ldr	r3, [r7, #12]
2000ea4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000ea52:	d00a      	beq.n	2000ea6a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000ea54:	687b      	ldr	r3, [r7, #4]
2000ea56:	681b      	ldr	r3, [r3, #0]
2000ea58:	2210      	movs	r2, #16
2000ea5a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2000ea5c:	6878      	ldr	r0, [r7, #4]
2000ea5e:	f000 f9ea 	bl	2000ee36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2000ea62:	6878      	ldr	r0, [r7, #4]
2000ea64:	f7ff fd03 	bl	2000e46e <I2C_ITSlaveSeqCplt>
2000ea68:	e01b      	b.n	2000eaa2 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000ea6a:	687b      	ldr	r3, [r7, #4]
2000ea6c:	681b      	ldr	r3, [r3, #0]
2000ea6e:	2210      	movs	r2, #16
2000ea70:	61da      	str	r2, [r3, #28]
2000ea72:	e016      	b.n	2000eaa2 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000ea74:	687b      	ldr	r3, [r7, #4]
2000ea76:	681b      	ldr	r3, [r3, #0]
2000ea78:	2210      	movs	r2, #16
2000ea7a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000ea7c:	687b      	ldr	r3, [r7, #4]
2000ea7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000ea80:	f043 0204 	orr.w	r2, r3, #4
2000ea84:	687b      	ldr	r3, [r7, #4]
2000ea86:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2000ea88:	68fb      	ldr	r3, [r7, #12]
2000ea8a:	2b00      	cmp	r3, #0
2000ea8c:	d003      	beq.n	2000ea96 <I2C_ITSlaveCplt+0x3de>
2000ea8e:	68fb      	ldr	r3, [r7, #12]
2000ea90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2000ea94:	d105      	bne.n	2000eaa2 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
2000ea96:	687b      	ldr	r3, [r7, #4]
2000ea98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000ea9a:	4619      	mov	r1, r3
2000ea9c:	6878      	ldr	r0, [r7, #4]
2000ea9e:	f000 f8b3 	bl	2000ec08 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
2000eaa2:	687b      	ldr	r3, [r7, #4]
2000eaa4:	2200      	movs	r2, #0
2000eaa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
2000eaaa:	687b      	ldr	r3, [r7, #4]
2000eaac:	2200      	movs	r2, #0
2000eaae:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2000eab0:	687b      	ldr	r3, [r7, #4]
2000eab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000eab4:	2b00      	cmp	r3, #0
2000eab6:	d010      	beq.n	2000eada <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2000eab8:	687b      	ldr	r3, [r7, #4]
2000eaba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000eabc:	4619      	mov	r1, r3
2000eabe:	6878      	ldr	r0, [r7, #4]
2000eac0:	f000 f8a2 	bl	2000ec08 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
2000eac4:	687b      	ldr	r3, [r7, #4]
2000eac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000eaca:	b2db      	uxtb	r3, r3
2000eacc:	2b28      	cmp	r3, #40	@ 0x28
2000eace:	d141      	bne.n	2000eb54 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
2000ead0:	6979      	ldr	r1, [r7, #20]
2000ead2:	6878      	ldr	r0, [r7, #4]
2000ead4:	f000 f844 	bl	2000eb60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2000ead8:	e03c      	b.n	2000eb54 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2000eada:	687b      	ldr	r3, [r7, #4]
2000eadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000eade:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000eae2:	d014      	beq.n	2000eb0e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
2000eae4:	6878      	ldr	r0, [r7, #4]
2000eae6:	f7ff fcc2 	bl	2000e46e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000eaea:	687b      	ldr	r3, [r7, #4]
2000eaec:	4a1b      	ldr	r2, [pc, #108]	@ (2000eb5c <I2C_ITSlaveCplt+0x4a4>)
2000eaee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
2000eaf0:	687b      	ldr	r3, [r7, #4]
2000eaf2:	2220      	movs	r2, #32
2000eaf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2000eaf8:	687b      	ldr	r3, [r7, #4]
2000eafa:	2200      	movs	r2, #0
2000eafc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
2000eafe:	687b      	ldr	r3, [r7, #4]
2000eb00:	2200      	movs	r2, #0
2000eb02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
2000eb06:	6878      	ldr	r0, [r7, #4]
2000eb08:	f7fe fbbd 	bl	2000d286 <HAL_I2C_ListenCpltCallback>
}
2000eb0c:	e022      	b.n	2000eb54 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2000eb0e:	687b      	ldr	r3, [r7, #4]
2000eb10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000eb14:	b2db      	uxtb	r3, r3
2000eb16:	2b22      	cmp	r3, #34	@ 0x22
2000eb18:	d10e      	bne.n	2000eb38 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
2000eb1a:	687b      	ldr	r3, [r7, #4]
2000eb1c:	2220      	movs	r2, #32
2000eb1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2000eb22:	687b      	ldr	r3, [r7, #4]
2000eb24:	2200      	movs	r2, #0
2000eb26:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
2000eb28:	687b      	ldr	r3, [r7, #4]
2000eb2a:	2200      	movs	r2, #0
2000eb2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2000eb30:	6878      	ldr	r0, [r7, #4]
2000eb32:	f7fe fb90 	bl	2000d256 <HAL_I2C_SlaveRxCpltCallback>
}
2000eb36:	e00d      	b.n	2000eb54 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
2000eb38:	687b      	ldr	r3, [r7, #4]
2000eb3a:	2220      	movs	r2, #32
2000eb3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2000eb40:	687b      	ldr	r3, [r7, #4]
2000eb42:	2200      	movs	r2, #0
2000eb44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
2000eb46:	687b      	ldr	r3, [r7, #4]
2000eb48:	2200      	movs	r2, #0
2000eb4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2000eb4e:	6878      	ldr	r0, [r7, #4]
2000eb50:	f7fe fb77 	bl	2000d242 <HAL_I2C_SlaveTxCpltCallback>
}
2000eb54:	bf00      	nop
2000eb56:	3718      	adds	r7, #24
2000eb58:	46bd      	mov	sp, r7
2000eb5a:	bd80      	pop	{r7, pc}
2000eb5c:	ffff0000 	.word	0xffff0000

2000eb60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2000eb60:	b580      	push	{r7, lr}
2000eb62:	b082      	sub	sp, #8
2000eb64:	af00      	add	r7, sp, #0
2000eb66:	6078      	str	r0, [r7, #4]
2000eb68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000eb6a:	687b      	ldr	r3, [r7, #4]
2000eb6c:	4a25      	ldr	r2, [pc, #148]	@ (2000ec04 <I2C_ITListenCplt+0xa4>)
2000eb6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
2000eb70:	687b      	ldr	r3, [r7, #4]
2000eb72:	2200      	movs	r2, #0
2000eb74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2000eb76:	687b      	ldr	r3, [r7, #4]
2000eb78:	2220      	movs	r2, #32
2000eb7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2000eb7e:	687b      	ldr	r3, [r7, #4]
2000eb80:	2200      	movs	r2, #0
2000eb82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
2000eb86:	687b      	ldr	r3, [r7, #4]
2000eb88:	2200      	movs	r2, #0
2000eb8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2000eb8c:	683b      	ldr	r3, [r7, #0]
2000eb8e:	f003 0304 	and.w	r3, r3, #4
2000eb92:	2b00      	cmp	r3, #0
2000eb94:	d022      	beq.n	2000ebdc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000eb96:	687b      	ldr	r3, [r7, #4]
2000eb98:	681b      	ldr	r3, [r3, #0]
2000eb9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000eb9c:	687b      	ldr	r3, [r7, #4]
2000eb9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000eba0:	b2d2      	uxtb	r2, r2
2000eba2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2000eba4:	687b      	ldr	r3, [r7, #4]
2000eba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000eba8:	1c5a      	adds	r2, r3, #1
2000ebaa:	687b      	ldr	r3, [r7, #4]
2000ebac:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
2000ebae:	687b      	ldr	r3, [r7, #4]
2000ebb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000ebb2:	2b00      	cmp	r3, #0
2000ebb4:	d012      	beq.n	2000ebdc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
2000ebb6:	687b      	ldr	r3, [r7, #4]
2000ebb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000ebba:	3b01      	subs	r3, #1
2000ebbc:	b29a      	uxth	r2, r3
2000ebbe:	687b      	ldr	r3, [r7, #4]
2000ebc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2000ebc2:	687b      	ldr	r3, [r7, #4]
2000ebc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ebc6:	b29b      	uxth	r3, r3
2000ebc8:	3b01      	subs	r3, #1
2000ebca:	b29a      	uxth	r2, r3
2000ebcc:	687b      	ldr	r3, [r7, #4]
2000ebce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000ebd0:	687b      	ldr	r3, [r7, #4]
2000ebd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000ebd4:	f043 0204 	orr.w	r2, r3, #4
2000ebd8:	687b      	ldr	r3, [r7, #4]
2000ebda:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2000ebdc:	f248 0103 	movw	r1, #32771	@ 0x8003
2000ebe0:	6878      	ldr	r0, [r7, #4]
2000ebe2:	f000 ff13 	bl	2000fa0c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000ebe6:	687b      	ldr	r3, [r7, #4]
2000ebe8:	681b      	ldr	r3, [r3, #0]
2000ebea:	2210      	movs	r2, #16
2000ebec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2000ebee:	687b      	ldr	r3, [r7, #4]
2000ebf0:	2200      	movs	r2, #0
2000ebf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
2000ebf6:	6878      	ldr	r0, [r7, #4]
2000ebf8:	f7fe fb45 	bl	2000d286 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
2000ebfc:	bf00      	nop
2000ebfe:	3708      	adds	r7, #8
2000ec00:	46bd      	mov	sp, r7
2000ec02:	bd80      	pop	{r7, pc}
2000ec04:	ffff0000 	.word	0xffff0000

2000ec08 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
2000ec08:	b580      	push	{r7, lr}
2000ec0a:	b084      	sub	sp, #16
2000ec0c:	af00      	add	r7, sp, #0
2000ec0e:	6078      	str	r0, [r7, #4]
2000ec10:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2000ec12:	687b      	ldr	r3, [r7, #4]
2000ec14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ec18:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2000ec1a:	687b      	ldr	r3, [r7, #4]
2000ec1c:	2200      	movs	r2, #0
2000ec1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2000ec22:	687b      	ldr	r3, [r7, #4]
2000ec24:	4a6d      	ldr	r2, [pc, #436]	@ (2000eddc <I2C_ITError+0x1d4>)
2000ec26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
2000ec28:	687b      	ldr	r3, [r7, #4]
2000ec2a:	2200      	movs	r2, #0
2000ec2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
2000ec2e:	687b      	ldr	r3, [r7, #4]
2000ec30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
2000ec32:	683b      	ldr	r3, [r7, #0]
2000ec34:	431a      	orrs	r2, r3
2000ec36:	687b      	ldr	r3, [r7, #4]
2000ec38:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2000ec3a:	7bfb      	ldrb	r3, [r7, #15]
2000ec3c:	2b28      	cmp	r3, #40	@ 0x28
2000ec3e:	d005      	beq.n	2000ec4c <I2C_ITError+0x44>
2000ec40:	7bfb      	ldrb	r3, [r7, #15]
2000ec42:	2b29      	cmp	r3, #41	@ 0x29
2000ec44:	d002      	beq.n	2000ec4c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
2000ec46:	7bfb      	ldrb	r3, [r7, #15]
2000ec48:	2b2a      	cmp	r3, #42	@ 0x2a
2000ec4a:	d10b      	bne.n	2000ec64 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2000ec4c:	2103      	movs	r1, #3
2000ec4e:	6878      	ldr	r0, [r7, #4]
2000ec50:	f000 fedc 	bl	2000fa0c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2000ec54:	687b      	ldr	r3, [r7, #4]
2000ec56:	2228      	movs	r2, #40	@ 0x28
2000ec58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
2000ec5c:	687b      	ldr	r3, [r7, #4]
2000ec5e:	4a60      	ldr	r2, [pc, #384]	@ (2000ede0 <I2C_ITError+0x1d8>)
2000ec60:	635a      	str	r2, [r3, #52]	@ 0x34
2000ec62:	e030      	b.n	2000ecc6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2000ec64:	f248 0103 	movw	r1, #32771	@ 0x8003
2000ec68:	6878      	ldr	r0, [r7, #4]
2000ec6a:	f000 fecf 	bl	2000fa0c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2000ec6e:	6878      	ldr	r0, [r7, #4]
2000ec70:	f000 f8e1 	bl	2000ee36 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
2000ec74:	687b      	ldr	r3, [r7, #4]
2000ec76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000ec7a:	b2db      	uxtb	r3, r3
2000ec7c:	2b60      	cmp	r3, #96	@ 0x60
2000ec7e:	d01f      	beq.n	2000ecc0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
2000ec80:	687b      	ldr	r3, [r7, #4]
2000ec82:	2220      	movs	r2, #32
2000ec84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
2000ec88:	687b      	ldr	r3, [r7, #4]
2000ec8a:	681b      	ldr	r3, [r3, #0]
2000ec8c:	699b      	ldr	r3, [r3, #24]
2000ec8e:	f003 0320 	and.w	r3, r3, #32
2000ec92:	2b20      	cmp	r3, #32
2000ec94:	d114      	bne.n	2000ecc0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
2000ec96:	687b      	ldr	r3, [r7, #4]
2000ec98:	681b      	ldr	r3, [r3, #0]
2000ec9a:	699b      	ldr	r3, [r3, #24]
2000ec9c:	f003 0310 	and.w	r3, r3, #16
2000eca0:	2b10      	cmp	r3, #16
2000eca2:	d109      	bne.n	2000ecb8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000eca4:	687b      	ldr	r3, [r7, #4]
2000eca6:	681b      	ldr	r3, [r3, #0]
2000eca8:	2210      	movs	r2, #16
2000ecaa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000ecac:	687b      	ldr	r3, [r7, #4]
2000ecae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000ecb0:	f043 0204 	orr.w	r2, r3, #4
2000ecb4:	687b      	ldr	r3, [r7, #4]
2000ecb6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000ecb8:	687b      	ldr	r3, [r7, #4]
2000ecba:	681b      	ldr	r3, [r3, #0]
2000ecbc:	2220      	movs	r2, #32
2000ecbe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
2000ecc0:	687b      	ldr	r3, [r7, #4]
2000ecc2:	2200      	movs	r2, #0
2000ecc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
2000ecc6:	687b      	ldr	r3, [r7, #4]
2000ecc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000ecca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
2000eccc:	687b      	ldr	r3, [r7, #4]
2000ecce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ecd0:	2b00      	cmp	r3, #0
2000ecd2:	d039      	beq.n	2000ed48 <I2C_ITError+0x140>
2000ecd4:	68bb      	ldr	r3, [r7, #8]
2000ecd6:	2b11      	cmp	r3, #17
2000ecd8:	d002      	beq.n	2000ece0 <I2C_ITError+0xd8>
2000ecda:	68bb      	ldr	r3, [r7, #8]
2000ecdc:	2b21      	cmp	r3, #33	@ 0x21
2000ecde:	d133      	bne.n	2000ed48 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2000ece0:	687b      	ldr	r3, [r7, #4]
2000ece2:	681b      	ldr	r3, [r3, #0]
2000ece4:	681b      	ldr	r3, [r3, #0]
2000ece6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000ecea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2000ecee:	d107      	bne.n	2000ed00 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000ecf0:	687b      	ldr	r3, [r7, #4]
2000ecf2:	681b      	ldr	r3, [r3, #0]
2000ecf4:	681a      	ldr	r2, [r3, #0]
2000ecf6:	687b      	ldr	r3, [r7, #4]
2000ecf8:	681b      	ldr	r3, [r3, #0]
2000ecfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2000ecfe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2000ed00:	687b      	ldr	r3, [r7, #4]
2000ed02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ed04:	4618      	mov	r0, r3
2000ed06:	f7f7 fc07 	bl	20006518 <HAL_DMA_GetState>
2000ed0a:	4603      	mov	r3, r0
2000ed0c:	2b01      	cmp	r3, #1
2000ed0e:	d017      	beq.n	2000ed40 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2000ed10:	687b      	ldr	r3, [r7, #4]
2000ed12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ed14:	4a33      	ldr	r2, [pc, #204]	@ (2000ede4 <I2C_ITError+0x1dc>)
2000ed16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000ed18:	687b      	ldr	r3, [r7, #4]
2000ed1a:	2200      	movs	r2, #0
2000ed1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2000ed20:	687b      	ldr	r3, [r7, #4]
2000ed22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ed24:	4618      	mov	r0, r3
2000ed26:	f7f5 fe15 	bl	20004954 <HAL_DMA_Abort_IT>
2000ed2a:	4603      	mov	r3, r0
2000ed2c:	2b00      	cmp	r3, #0
2000ed2e:	d04d      	beq.n	2000edcc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2000ed30:	687b      	ldr	r3, [r7, #4]
2000ed32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ed34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000ed36:	687a      	ldr	r2, [r7, #4]
2000ed38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2000ed3a:	4610      	mov	r0, r2
2000ed3c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2000ed3e:	e045      	b.n	2000edcc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2000ed40:	6878      	ldr	r0, [r7, #4]
2000ed42:	f000 f851 	bl	2000ede8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2000ed46:	e041      	b.n	2000edcc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
2000ed48:	687b      	ldr	r3, [r7, #4]
2000ed4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ed4c:	2b00      	cmp	r3, #0
2000ed4e:	d039      	beq.n	2000edc4 <I2C_ITError+0x1bc>
2000ed50:	68bb      	ldr	r3, [r7, #8]
2000ed52:	2b12      	cmp	r3, #18
2000ed54:	d002      	beq.n	2000ed5c <I2C_ITError+0x154>
2000ed56:	68bb      	ldr	r3, [r7, #8]
2000ed58:	2b22      	cmp	r3, #34	@ 0x22
2000ed5a:	d133      	bne.n	2000edc4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2000ed5c:	687b      	ldr	r3, [r7, #4]
2000ed5e:	681b      	ldr	r3, [r3, #0]
2000ed60:	681b      	ldr	r3, [r3, #0]
2000ed62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000ed66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000ed6a:	d107      	bne.n	2000ed7c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000ed6c:	687b      	ldr	r3, [r7, #4]
2000ed6e:	681b      	ldr	r3, [r3, #0]
2000ed70:	681a      	ldr	r2, [r3, #0]
2000ed72:	687b      	ldr	r3, [r7, #4]
2000ed74:	681b      	ldr	r3, [r3, #0]
2000ed76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000ed7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2000ed7c:	687b      	ldr	r3, [r7, #4]
2000ed7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ed80:	4618      	mov	r0, r3
2000ed82:	f7f7 fbc9 	bl	20006518 <HAL_DMA_GetState>
2000ed86:	4603      	mov	r3, r0
2000ed88:	2b01      	cmp	r3, #1
2000ed8a:	d017      	beq.n	2000edbc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2000ed8c:	687b      	ldr	r3, [r7, #4]
2000ed8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000ed90:	4a14      	ldr	r2, [pc, #80]	@ (2000ede4 <I2C_ITError+0x1dc>)
2000ed92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000ed94:	687b      	ldr	r3, [r7, #4]
2000ed96:	2200      	movs	r2, #0
2000ed98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2000ed9c:	687b      	ldr	r3, [r7, #4]
2000ed9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000eda0:	4618      	mov	r0, r3
2000eda2:	f7f5 fdd7 	bl	20004954 <HAL_DMA_Abort_IT>
2000eda6:	4603      	mov	r3, r0
2000eda8:	2b00      	cmp	r3, #0
2000edaa:	d011      	beq.n	2000edd0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000edac:	687b      	ldr	r3, [r7, #4]
2000edae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000edb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000edb2:	687a      	ldr	r2, [r7, #4]
2000edb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2000edb6:	4610      	mov	r0, r2
2000edb8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2000edba:	e009      	b.n	2000edd0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2000edbc:	6878      	ldr	r0, [r7, #4]
2000edbe:	f000 f813 	bl	2000ede8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2000edc2:	e005      	b.n	2000edd0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
2000edc4:	6878      	ldr	r0, [r7, #4]
2000edc6:	f000 f80f 	bl	2000ede8 <I2C_TreatErrorCallback>
  }
}
2000edca:	e002      	b.n	2000edd2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2000edcc:	bf00      	nop
2000edce:	e000      	b.n	2000edd2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2000edd0:	bf00      	nop
}
2000edd2:	bf00      	nop
2000edd4:	3710      	adds	r7, #16
2000edd6:	46bd      	mov	sp, r7
2000edd8:	bd80      	pop	{r7, pc}
2000edda:	bf00      	nop
2000eddc:	ffff0000 	.word	0xffff0000
2000ede0:	2000d7d5 	.word	0x2000d7d5
2000ede4:	2000f3c5 	.word	0x2000f3c5

2000ede8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
2000ede8:	b580      	push	{r7, lr}
2000edea:	b082      	sub	sp, #8
2000edec:	af00      	add	r7, sp, #0
2000edee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2000edf0:	687b      	ldr	r3, [r7, #4]
2000edf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000edf6:	b2db      	uxtb	r3, r3
2000edf8:	2b60      	cmp	r3, #96	@ 0x60
2000edfa:	d10e      	bne.n	2000ee1a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
2000edfc:	687b      	ldr	r3, [r7, #4]
2000edfe:	2220      	movs	r2, #32
2000ee00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2000ee04:	687b      	ldr	r3, [r7, #4]
2000ee06:	2200      	movs	r2, #0
2000ee08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000ee0a:	687b      	ldr	r3, [r7, #4]
2000ee0c:	2200      	movs	r2, #0
2000ee0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
2000ee12:	6878      	ldr	r0, [r7, #4]
2000ee14:	f7fe fa5f 	bl	2000d2d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2000ee18:	e009      	b.n	2000ee2e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
2000ee1a:	687b      	ldr	r3, [r7, #4]
2000ee1c:	2200      	movs	r2, #0
2000ee1e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
2000ee20:	687b      	ldr	r3, [r7, #4]
2000ee22:	2200      	movs	r2, #0
2000ee24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
2000ee28:	6878      	ldr	r0, [r7, #4]
2000ee2a:	f7fe fa4a 	bl	2000d2c2 <HAL_I2C_ErrorCallback>
}
2000ee2e:	bf00      	nop
2000ee30:	3708      	adds	r7, #8
2000ee32:	46bd      	mov	sp, r7
2000ee34:	bd80      	pop	{r7, pc}

2000ee36 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
2000ee36:	b480      	push	{r7}
2000ee38:	b083      	sub	sp, #12
2000ee3a:	af00      	add	r7, sp, #0
2000ee3c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2000ee3e:	687b      	ldr	r3, [r7, #4]
2000ee40:	681b      	ldr	r3, [r3, #0]
2000ee42:	699b      	ldr	r3, [r3, #24]
2000ee44:	f003 0302 	and.w	r3, r3, #2
2000ee48:	2b02      	cmp	r3, #2
2000ee4a:	d103      	bne.n	2000ee54 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
2000ee4c:	687b      	ldr	r3, [r7, #4]
2000ee4e:	681b      	ldr	r3, [r3, #0]
2000ee50:	2200      	movs	r2, #0
2000ee52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2000ee54:	687b      	ldr	r3, [r7, #4]
2000ee56:	681b      	ldr	r3, [r3, #0]
2000ee58:	699b      	ldr	r3, [r3, #24]
2000ee5a:	f003 0301 	and.w	r3, r3, #1
2000ee5e:	2b01      	cmp	r3, #1
2000ee60:	d007      	beq.n	2000ee72 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2000ee62:	687b      	ldr	r3, [r7, #4]
2000ee64:	681b      	ldr	r3, [r3, #0]
2000ee66:	699a      	ldr	r2, [r3, #24]
2000ee68:	687b      	ldr	r3, [r7, #4]
2000ee6a:	681b      	ldr	r3, [r3, #0]
2000ee6c:	f042 0201 	orr.w	r2, r2, #1
2000ee70:	619a      	str	r2, [r3, #24]
  }
}
2000ee72:	bf00      	nop
2000ee74:	370c      	adds	r7, #12
2000ee76:	46bd      	mov	sp, r7
2000ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ee7c:	4770      	bx	lr

2000ee7e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
2000ee7e:	b580      	push	{r7, lr}
2000ee80:	b084      	sub	sp, #16
2000ee82:	af00      	add	r7, sp, #0
2000ee84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000ee86:	687b      	ldr	r3, [r7, #4]
2000ee88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ee8a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000ee8c:	68fb      	ldr	r3, [r7, #12]
2000ee8e:	681b      	ldr	r3, [r3, #0]
2000ee90:	681a      	ldr	r2, [r3, #0]
2000ee92:	68fb      	ldr	r3, [r7, #12]
2000ee94:	681b      	ldr	r3, [r3, #0]
2000ee96:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2000ee9a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2000ee9c:	68fb      	ldr	r3, [r7, #12]
2000ee9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000eea0:	b29b      	uxth	r3, r3
2000eea2:	2b00      	cmp	r3, #0
2000eea4:	d104      	bne.n	2000eeb0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2000eea6:	2120      	movs	r1, #32
2000eea8:	68f8      	ldr	r0, [r7, #12]
2000eeaa:	f000 fd2b 	bl	2000f904 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2000eeae:	e02d      	b.n	2000ef0c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2000eeb0:	68fb      	ldr	r3, [r7, #12]
2000eeb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000eeb4:	68fa      	ldr	r2, [r7, #12]
2000eeb6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
2000eeb8:	441a      	add	r2, r3
2000eeba:	68fb      	ldr	r3, [r7, #12]
2000eebc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000eebe:	68fb      	ldr	r3, [r7, #12]
2000eec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000eec2:	b29b      	uxth	r3, r3
2000eec4:	2bff      	cmp	r3, #255	@ 0xff
2000eec6:	d903      	bls.n	2000eed0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000eec8:	68fb      	ldr	r3, [r7, #12]
2000eeca:	22ff      	movs	r2, #255	@ 0xff
2000eecc:	851a      	strh	r2, [r3, #40]	@ 0x28
2000eece:	e004      	b.n	2000eeda <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2000eed0:	68fb      	ldr	r3, [r7, #12]
2000eed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000eed4:	b29a      	uxth	r2, r3
2000eed6:	68fb      	ldr	r3, [r7, #12]
2000eed8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2000eeda:	68fb      	ldr	r3, [r7, #12]
2000eedc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2000eede:	68fb      	ldr	r3, [r7, #12]
2000eee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000eee2:	4619      	mov	r1, r3
2000eee4:	68fb      	ldr	r3, [r7, #12]
2000eee6:	681b      	ldr	r3, [r3, #0]
2000eee8:	3328      	adds	r3, #40	@ 0x28
2000eeea:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2000eeec:	68fb      	ldr	r3, [r7, #12]
2000eeee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2000eef0:	f7f4 ffa8 	bl	20003e44 <HAL_DMA_Start_IT>
2000eef4:	4603      	mov	r3, r0
2000eef6:	2b00      	cmp	r3, #0
2000eef8:	d004      	beq.n	2000ef04 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2000eefa:	2110      	movs	r1, #16
2000eefc:	68f8      	ldr	r0, [r7, #12]
2000eefe:	f7ff fe83 	bl	2000ec08 <I2C_ITError>
}
2000ef02:	e003      	b.n	2000ef0c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2000ef04:	2140      	movs	r1, #64	@ 0x40
2000ef06:	68f8      	ldr	r0, [r7, #12]
2000ef08:	f000 fcfc 	bl	2000f904 <I2C_Enable_IRQ>
}
2000ef0c:	bf00      	nop
2000ef0e:	3710      	adds	r7, #16
2000ef10:	46bd      	mov	sp, r7
2000ef12:	bd80      	pop	{r7, pc}

2000ef14 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
2000ef14:	b580      	push	{r7, lr}
2000ef16:	b084      	sub	sp, #16
2000ef18:	af00      	add	r7, sp, #0
2000ef1a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000ef1c:	687b      	ldr	r3, [r7, #4]
2000ef1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ef20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2000ef22:	68fb      	ldr	r3, [r7, #12]
2000ef24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000ef26:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2000ef28:	68bb      	ldr	r3, [r7, #8]
2000ef2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2000ef2e:	d002      	beq.n	2000ef36 <I2C_DMASlaveTransmitCplt+0x22>
2000ef30:	68bb      	ldr	r3, [r7, #8]
2000ef32:	2b00      	cmp	r3, #0
2000ef34:	d10a      	bne.n	2000ef4c <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000ef36:	68fb      	ldr	r3, [r7, #12]
2000ef38:	681b      	ldr	r3, [r3, #0]
2000ef3a:	681a      	ldr	r2, [r3, #0]
2000ef3c:	68fb      	ldr	r3, [r7, #12]
2000ef3e:	681b      	ldr	r3, [r3, #0]
2000ef40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2000ef44:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2000ef46:	68f8      	ldr	r0, [r7, #12]
2000ef48:	f7ff fa91 	bl	2000e46e <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2000ef4c:	bf00      	nop
2000ef4e:	3710      	adds	r7, #16
2000ef50:	46bd      	mov	sp, r7
2000ef52:	bd80      	pop	{r7, pc}

2000ef54 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000ef54:	b580      	push	{r7, lr}
2000ef56:	b084      	sub	sp, #16
2000ef58:	af00      	add	r7, sp, #0
2000ef5a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000ef5c:	687b      	ldr	r3, [r7, #4]
2000ef5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000ef60:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000ef62:	68fb      	ldr	r3, [r7, #12]
2000ef64:	681b      	ldr	r3, [r3, #0]
2000ef66:	681a      	ldr	r2, [r3, #0]
2000ef68:	68fb      	ldr	r3, [r7, #12]
2000ef6a:	681b      	ldr	r3, [r3, #0]
2000ef6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000ef70:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2000ef72:	68fb      	ldr	r3, [r7, #12]
2000ef74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ef76:	b29b      	uxth	r3, r3
2000ef78:	2b00      	cmp	r3, #0
2000ef7a:	d104      	bne.n	2000ef86 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2000ef7c:	2120      	movs	r1, #32
2000ef7e:	68f8      	ldr	r0, [r7, #12]
2000ef80:	f000 fcc0 	bl	2000f904 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2000ef84:	e02d      	b.n	2000efe2 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2000ef86:	68fb      	ldr	r3, [r7, #12]
2000ef88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000ef8a:	68fa      	ldr	r2, [r7, #12]
2000ef8c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
2000ef8e:	441a      	add	r2, r3
2000ef90:	68fb      	ldr	r3, [r7, #12]
2000ef92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000ef94:	68fb      	ldr	r3, [r7, #12]
2000ef96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000ef98:	b29b      	uxth	r3, r3
2000ef9a:	2bff      	cmp	r3, #255	@ 0xff
2000ef9c:	d903      	bls.n	2000efa6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000ef9e:	68fb      	ldr	r3, [r7, #12]
2000efa0:	22ff      	movs	r2, #255	@ 0xff
2000efa2:	851a      	strh	r2, [r3, #40]	@ 0x28
2000efa4:	e004      	b.n	2000efb0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2000efa6:	68fb      	ldr	r3, [r7, #12]
2000efa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2000efaa:	b29a      	uxth	r2, r3
2000efac:	68fb      	ldr	r3, [r7, #12]
2000efae:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2000efb0:	68fb      	ldr	r3, [r7, #12]
2000efb2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2000efb4:	68fb      	ldr	r3, [r7, #12]
2000efb6:	681b      	ldr	r3, [r3, #0]
2000efb8:	3324      	adds	r3, #36	@ 0x24
2000efba:	4619      	mov	r1, r3
2000efbc:	68fb      	ldr	r3, [r7, #12]
2000efbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000efc0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2000efc2:	68fb      	ldr	r3, [r7, #12]
2000efc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2000efc6:	f7f4 ff3d 	bl	20003e44 <HAL_DMA_Start_IT>
2000efca:	4603      	mov	r3, r0
2000efcc:	2b00      	cmp	r3, #0
2000efce:	d004      	beq.n	2000efda <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2000efd0:	2110      	movs	r1, #16
2000efd2:	68f8      	ldr	r0, [r7, #12]
2000efd4:	f7ff fe18 	bl	2000ec08 <I2C_ITError>
}
2000efd8:	e003      	b.n	2000efe2 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2000efda:	2140      	movs	r1, #64	@ 0x40
2000efdc:	68f8      	ldr	r0, [r7, #12]
2000efde:	f000 fc91 	bl	2000f904 <I2C_Enable_IRQ>
}
2000efe2:	bf00      	nop
2000efe4:	3710      	adds	r7, #16
2000efe6:	46bd      	mov	sp, r7
2000efe8:	bd80      	pop	{r7, pc}
	...

2000efec <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000efec:	b580      	push	{r7, lr}
2000efee:	b084      	sub	sp, #16
2000eff0:	af00      	add	r7, sp, #0
2000eff2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000eff4:	687b      	ldr	r3, [r7, #4]
2000eff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000eff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2000effa:	68fb      	ldr	r3, [r7, #12]
2000effc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000effe:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
2000f000:	68fb      	ldr	r3, [r7, #12]
2000f002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f004:	681b      	ldr	r3, [r3, #0]
2000f006:	4a42      	ldr	r2, [pc, #264]	@ (2000f110 <I2C_DMASlaveReceiveCplt+0x124>)
2000f008:	4293      	cmp	r3, r2
2000f00a:	d059      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f00c:	68fb      	ldr	r3, [r7, #12]
2000f00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f010:	681b      	ldr	r3, [r3, #0]
2000f012:	4a40      	ldr	r2, [pc, #256]	@ (2000f114 <I2C_DMASlaveReceiveCplt+0x128>)
2000f014:	4293      	cmp	r3, r2
2000f016:	d053      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f018:	68fb      	ldr	r3, [r7, #12]
2000f01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f01c:	681b      	ldr	r3, [r3, #0]
2000f01e:	4a3e      	ldr	r2, [pc, #248]	@ (2000f118 <I2C_DMASlaveReceiveCplt+0x12c>)
2000f020:	4293      	cmp	r3, r2
2000f022:	d04d      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f024:	68fb      	ldr	r3, [r7, #12]
2000f026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f028:	681b      	ldr	r3, [r3, #0]
2000f02a:	4a3c      	ldr	r2, [pc, #240]	@ (2000f11c <I2C_DMASlaveReceiveCplt+0x130>)
2000f02c:	4293      	cmp	r3, r2
2000f02e:	d047      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f030:	68fb      	ldr	r3, [r7, #12]
2000f032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f034:	681b      	ldr	r3, [r3, #0]
2000f036:	4a3a      	ldr	r2, [pc, #232]	@ (2000f120 <I2C_DMASlaveReceiveCplt+0x134>)
2000f038:	4293      	cmp	r3, r2
2000f03a:	d041      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f03c:	68fb      	ldr	r3, [r7, #12]
2000f03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f040:	681b      	ldr	r3, [r3, #0]
2000f042:	4a38      	ldr	r2, [pc, #224]	@ (2000f124 <I2C_DMASlaveReceiveCplt+0x138>)
2000f044:	4293      	cmp	r3, r2
2000f046:	d03b      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f048:	68fb      	ldr	r3, [r7, #12]
2000f04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f04c:	681b      	ldr	r3, [r3, #0]
2000f04e:	4a36      	ldr	r2, [pc, #216]	@ (2000f128 <I2C_DMASlaveReceiveCplt+0x13c>)
2000f050:	4293      	cmp	r3, r2
2000f052:	d035      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f054:	68fb      	ldr	r3, [r7, #12]
2000f056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f058:	681b      	ldr	r3, [r3, #0]
2000f05a:	4a34      	ldr	r2, [pc, #208]	@ (2000f12c <I2C_DMASlaveReceiveCplt+0x140>)
2000f05c:	4293      	cmp	r3, r2
2000f05e:	d02f      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f060:	68fb      	ldr	r3, [r7, #12]
2000f062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f064:	681b      	ldr	r3, [r3, #0]
2000f066:	4a32      	ldr	r2, [pc, #200]	@ (2000f130 <I2C_DMASlaveReceiveCplt+0x144>)
2000f068:	4293      	cmp	r3, r2
2000f06a:	d029      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f06c:	68fb      	ldr	r3, [r7, #12]
2000f06e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f070:	681b      	ldr	r3, [r3, #0]
2000f072:	4a30      	ldr	r2, [pc, #192]	@ (2000f134 <I2C_DMASlaveReceiveCplt+0x148>)
2000f074:	4293      	cmp	r3, r2
2000f076:	d023      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f078:	68fb      	ldr	r3, [r7, #12]
2000f07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f07c:	681b      	ldr	r3, [r3, #0]
2000f07e:	4a2e      	ldr	r2, [pc, #184]	@ (2000f138 <I2C_DMASlaveReceiveCplt+0x14c>)
2000f080:	4293      	cmp	r3, r2
2000f082:	d01d      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f084:	68fb      	ldr	r3, [r7, #12]
2000f086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f088:	681b      	ldr	r3, [r3, #0]
2000f08a:	4a2c      	ldr	r2, [pc, #176]	@ (2000f13c <I2C_DMASlaveReceiveCplt+0x150>)
2000f08c:	4293      	cmp	r3, r2
2000f08e:	d017      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f090:	68fb      	ldr	r3, [r7, #12]
2000f092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f094:	681b      	ldr	r3, [r3, #0]
2000f096:	4a2a      	ldr	r2, [pc, #168]	@ (2000f140 <I2C_DMASlaveReceiveCplt+0x154>)
2000f098:	4293      	cmp	r3, r2
2000f09a:	d011      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f09c:	68fb      	ldr	r3, [r7, #12]
2000f09e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f0a0:	681b      	ldr	r3, [r3, #0]
2000f0a2:	4a28      	ldr	r2, [pc, #160]	@ (2000f144 <I2C_DMASlaveReceiveCplt+0x158>)
2000f0a4:	4293      	cmp	r3, r2
2000f0a6:	d00b      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f0a8:	68fb      	ldr	r3, [r7, #12]
2000f0aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f0ac:	681b      	ldr	r3, [r3, #0]
2000f0ae:	4a26      	ldr	r2, [pc, #152]	@ (2000f148 <I2C_DMASlaveReceiveCplt+0x15c>)
2000f0b0:	4293      	cmp	r3, r2
2000f0b2:	d005      	beq.n	2000f0c0 <I2C_DMASlaveReceiveCplt+0xd4>
2000f0b4:	68fb      	ldr	r3, [r7, #12]
2000f0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f0b8:	681b      	ldr	r3, [r3, #0]
2000f0ba:	4a24      	ldr	r2, [pc, #144]	@ (2000f14c <I2C_DMASlaveReceiveCplt+0x160>)
2000f0bc:	4293      	cmp	r3, r2
2000f0be:	d109      	bne.n	2000f0d4 <I2C_DMASlaveReceiveCplt+0xe8>
2000f0c0:	68fb      	ldr	r3, [r7, #12]
2000f0c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f0c4:	681b      	ldr	r3, [r3, #0]
2000f0c6:	685b      	ldr	r3, [r3, #4]
2000f0c8:	2b00      	cmp	r3, #0
2000f0ca:	bf0c      	ite	eq
2000f0cc:	2301      	moveq	r3, #1
2000f0ce:	2300      	movne	r3, #0
2000f0d0:	b2db      	uxtb	r3, r3
2000f0d2:	e008      	b.n	2000f0e6 <I2C_DMASlaveReceiveCplt+0xfa>
2000f0d4:	68fb      	ldr	r3, [r7, #12]
2000f0d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f0d8:	681b      	ldr	r3, [r3, #0]
2000f0da:	685b      	ldr	r3, [r3, #4]
2000f0dc:	2b00      	cmp	r3, #0
2000f0de:	bf0c      	ite	eq
2000f0e0:	2301      	moveq	r3, #1
2000f0e2:	2300      	movne	r3, #0
2000f0e4:	b2db      	uxtb	r3, r3
2000f0e6:	2b00      	cmp	r3, #0
2000f0e8:	d00e      	beq.n	2000f108 <I2C_DMASlaveReceiveCplt+0x11c>
2000f0ea:	68bb      	ldr	r3, [r7, #8]
2000f0ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2000f0f0:	d00a      	beq.n	2000f108 <I2C_DMASlaveReceiveCplt+0x11c>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000f0f2:	68fb      	ldr	r3, [r7, #12]
2000f0f4:	681b      	ldr	r3, [r3, #0]
2000f0f6:	681a      	ldr	r2, [r3, #0]
2000f0f8:	68fb      	ldr	r3, [r7, #12]
2000f0fa:	681b      	ldr	r3, [r3, #0]
2000f0fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2000f100:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2000f102:	68f8      	ldr	r0, [r7, #12]
2000f104:	f7ff f9b3 	bl	2000e46e <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2000f108:	bf00      	nop
2000f10a:	3710      	adds	r7, #16
2000f10c:	46bd      	mov	sp, r7
2000f10e:	bd80      	pop	{r7, pc}
2000f110:	40020010 	.word	0x40020010
2000f114:	40020028 	.word	0x40020028
2000f118:	40020040 	.word	0x40020040
2000f11c:	40020058 	.word	0x40020058
2000f120:	40020070 	.word	0x40020070
2000f124:	40020088 	.word	0x40020088
2000f128:	400200a0 	.word	0x400200a0
2000f12c:	400200b8 	.word	0x400200b8
2000f130:	40020410 	.word	0x40020410
2000f134:	40020428 	.word	0x40020428
2000f138:	40020440 	.word	0x40020440
2000f13c:	40020458 	.word	0x40020458
2000f140:	40020470 	.word	0x40020470
2000f144:	40020488 	.word	0x40020488
2000f148:	400204a0 	.word	0x400204a0
2000f14c:	400204b8 	.word	0x400204b8

2000f150 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
2000f150:	b580      	push	{r7, lr}
2000f152:	b084      	sub	sp, #16
2000f154:	af00      	add	r7, sp, #0
2000f156:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
2000f158:	2300      	movs	r3, #0
2000f15a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000f15c:	687b      	ldr	r3, [r7, #4]
2000f15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f160:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
2000f162:	68bb      	ldr	r3, [r7, #8]
2000f164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f166:	2b00      	cmp	r3, #0
2000f168:	d076      	beq.n	2000f258 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2000f16a:	68bb      	ldr	r3, [r7, #8]
2000f16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f16e:	681b      	ldr	r3, [r3, #0]
2000f170:	4a71      	ldr	r2, [pc, #452]	@ (2000f338 <I2C_DMAError+0x1e8>)
2000f172:	4293      	cmp	r3, r2
2000f174:	d059      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f176:	68bb      	ldr	r3, [r7, #8]
2000f178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f17a:	681b      	ldr	r3, [r3, #0]
2000f17c:	4a6f      	ldr	r2, [pc, #444]	@ (2000f33c <I2C_DMAError+0x1ec>)
2000f17e:	4293      	cmp	r3, r2
2000f180:	d053      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f182:	68bb      	ldr	r3, [r7, #8]
2000f184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f186:	681b      	ldr	r3, [r3, #0]
2000f188:	4a6d      	ldr	r2, [pc, #436]	@ (2000f340 <I2C_DMAError+0x1f0>)
2000f18a:	4293      	cmp	r3, r2
2000f18c:	d04d      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f18e:	68bb      	ldr	r3, [r7, #8]
2000f190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f192:	681b      	ldr	r3, [r3, #0]
2000f194:	4a6b      	ldr	r2, [pc, #428]	@ (2000f344 <I2C_DMAError+0x1f4>)
2000f196:	4293      	cmp	r3, r2
2000f198:	d047      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f19a:	68bb      	ldr	r3, [r7, #8]
2000f19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f19e:	681b      	ldr	r3, [r3, #0]
2000f1a0:	4a69      	ldr	r2, [pc, #420]	@ (2000f348 <I2C_DMAError+0x1f8>)
2000f1a2:	4293      	cmp	r3, r2
2000f1a4:	d041      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f1a6:	68bb      	ldr	r3, [r7, #8]
2000f1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f1aa:	681b      	ldr	r3, [r3, #0]
2000f1ac:	4a67      	ldr	r2, [pc, #412]	@ (2000f34c <I2C_DMAError+0x1fc>)
2000f1ae:	4293      	cmp	r3, r2
2000f1b0:	d03b      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f1b2:	68bb      	ldr	r3, [r7, #8]
2000f1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f1b6:	681b      	ldr	r3, [r3, #0]
2000f1b8:	4a65      	ldr	r2, [pc, #404]	@ (2000f350 <I2C_DMAError+0x200>)
2000f1ba:	4293      	cmp	r3, r2
2000f1bc:	d035      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f1be:	68bb      	ldr	r3, [r7, #8]
2000f1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f1c2:	681b      	ldr	r3, [r3, #0]
2000f1c4:	4a63      	ldr	r2, [pc, #396]	@ (2000f354 <I2C_DMAError+0x204>)
2000f1c6:	4293      	cmp	r3, r2
2000f1c8:	d02f      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f1ca:	68bb      	ldr	r3, [r7, #8]
2000f1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f1ce:	681b      	ldr	r3, [r3, #0]
2000f1d0:	4a61      	ldr	r2, [pc, #388]	@ (2000f358 <I2C_DMAError+0x208>)
2000f1d2:	4293      	cmp	r3, r2
2000f1d4:	d029      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f1d6:	68bb      	ldr	r3, [r7, #8]
2000f1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f1da:	681b      	ldr	r3, [r3, #0]
2000f1dc:	4a5f      	ldr	r2, [pc, #380]	@ (2000f35c <I2C_DMAError+0x20c>)
2000f1de:	4293      	cmp	r3, r2
2000f1e0:	d023      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f1e2:	68bb      	ldr	r3, [r7, #8]
2000f1e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f1e6:	681b      	ldr	r3, [r3, #0]
2000f1e8:	4a5d      	ldr	r2, [pc, #372]	@ (2000f360 <I2C_DMAError+0x210>)
2000f1ea:	4293      	cmp	r3, r2
2000f1ec:	d01d      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f1ee:	68bb      	ldr	r3, [r7, #8]
2000f1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f1f2:	681b      	ldr	r3, [r3, #0]
2000f1f4:	4a5b      	ldr	r2, [pc, #364]	@ (2000f364 <I2C_DMAError+0x214>)
2000f1f6:	4293      	cmp	r3, r2
2000f1f8:	d017      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f1fa:	68bb      	ldr	r3, [r7, #8]
2000f1fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f1fe:	681b      	ldr	r3, [r3, #0]
2000f200:	4a59      	ldr	r2, [pc, #356]	@ (2000f368 <I2C_DMAError+0x218>)
2000f202:	4293      	cmp	r3, r2
2000f204:	d011      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f206:	68bb      	ldr	r3, [r7, #8]
2000f208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f20a:	681b      	ldr	r3, [r3, #0]
2000f20c:	4a57      	ldr	r2, [pc, #348]	@ (2000f36c <I2C_DMAError+0x21c>)
2000f20e:	4293      	cmp	r3, r2
2000f210:	d00b      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f212:	68bb      	ldr	r3, [r7, #8]
2000f214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f216:	681b      	ldr	r3, [r3, #0]
2000f218:	4a55      	ldr	r2, [pc, #340]	@ (2000f370 <I2C_DMAError+0x220>)
2000f21a:	4293      	cmp	r3, r2
2000f21c:	d005      	beq.n	2000f22a <I2C_DMAError+0xda>
2000f21e:	68bb      	ldr	r3, [r7, #8]
2000f220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f222:	681b      	ldr	r3, [r3, #0]
2000f224:	4a53      	ldr	r2, [pc, #332]	@ (2000f374 <I2C_DMAError+0x224>)
2000f226:	4293      	cmp	r3, r2
2000f228:	d109      	bne.n	2000f23e <I2C_DMAError+0xee>
2000f22a:	68bb      	ldr	r3, [r7, #8]
2000f22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f22e:	681b      	ldr	r3, [r3, #0]
2000f230:	685b      	ldr	r3, [r3, #4]
2000f232:	2b00      	cmp	r3, #0
2000f234:	bf0c      	ite	eq
2000f236:	2301      	moveq	r3, #1
2000f238:	2300      	movne	r3, #0
2000f23a:	b2db      	uxtb	r3, r3
2000f23c:	e008      	b.n	2000f250 <I2C_DMAError+0x100>
2000f23e:	68bb      	ldr	r3, [r7, #8]
2000f240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f242:	681b      	ldr	r3, [r3, #0]
2000f244:	685b      	ldr	r3, [r3, #4]
2000f246:	2b00      	cmp	r3, #0
2000f248:	bf0c      	ite	eq
2000f24a:	2301      	moveq	r3, #1
2000f24c:	2300      	movne	r3, #0
2000f24e:	b2db      	uxtb	r3, r3
2000f250:	2b00      	cmp	r3, #0
2000f252:	d001      	beq.n	2000f258 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
2000f254:	2301      	movs	r3, #1
2000f256:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
2000f258:	68bb      	ldr	r3, [r7, #8]
2000f25a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f25c:	2b00      	cmp	r3, #0
2000f25e:	f000 8098 	beq.w	2000f392 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2000f262:	68bb      	ldr	r3, [r7, #8]
2000f264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f266:	681b      	ldr	r3, [r3, #0]
2000f268:	4a33      	ldr	r2, [pc, #204]	@ (2000f338 <I2C_DMAError+0x1e8>)
2000f26a:	4293      	cmp	r3, r2
2000f26c:	d059      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f26e:	68bb      	ldr	r3, [r7, #8]
2000f270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f272:	681b      	ldr	r3, [r3, #0]
2000f274:	4a31      	ldr	r2, [pc, #196]	@ (2000f33c <I2C_DMAError+0x1ec>)
2000f276:	4293      	cmp	r3, r2
2000f278:	d053      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f27a:	68bb      	ldr	r3, [r7, #8]
2000f27c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f27e:	681b      	ldr	r3, [r3, #0]
2000f280:	4a2f      	ldr	r2, [pc, #188]	@ (2000f340 <I2C_DMAError+0x1f0>)
2000f282:	4293      	cmp	r3, r2
2000f284:	d04d      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f286:	68bb      	ldr	r3, [r7, #8]
2000f288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f28a:	681b      	ldr	r3, [r3, #0]
2000f28c:	4a2d      	ldr	r2, [pc, #180]	@ (2000f344 <I2C_DMAError+0x1f4>)
2000f28e:	4293      	cmp	r3, r2
2000f290:	d047      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f292:	68bb      	ldr	r3, [r7, #8]
2000f294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f296:	681b      	ldr	r3, [r3, #0]
2000f298:	4a2b      	ldr	r2, [pc, #172]	@ (2000f348 <I2C_DMAError+0x1f8>)
2000f29a:	4293      	cmp	r3, r2
2000f29c:	d041      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f29e:	68bb      	ldr	r3, [r7, #8]
2000f2a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f2a2:	681b      	ldr	r3, [r3, #0]
2000f2a4:	4a29      	ldr	r2, [pc, #164]	@ (2000f34c <I2C_DMAError+0x1fc>)
2000f2a6:	4293      	cmp	r3, r2
2000f2a8:	d03b      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f2aa:	68bb      	ldr	r3, [r7, #8]
2000f2ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f2ae:	681b      	ldr	r3, [r3, #0]
2000f2b0:	4a27      	ldr	r2, [pc, #156]	@ (2000f350 <I2C_DMAError+0x200>)
2000f2b2:	4293      	cmp	r3, r2
2000f2b4:	d035      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f2b6:	68bb      	ldr	r3, [r7, #8]
2000f2b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f2ba:	681b      	ldr	r3, [r3, #0]
2000f2bc:	4a25      	ldr	r2, [pc, #148]	@ (2000f354 <I2C_DMAError+0x204>)
2000f2be:	4293      	cmp	r3, r2
2000f2c0:	d02f      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f2c2:	68bb      	ldr	r3, [r7, #8]
2000f2c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f2c6:	681b      	ldr	r3, [r3, #0]
2000f2c8:	4a23      	ldr	r2, [pc, #140]	@ (2000f358 <I2C_DMAError+0x208>)
2000f2ca:	4293      	cmp	r3, r2
2000f2cc:	d029      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f2ce:	68bb      	ldr	r3, [r7, #8]
2000f2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f2d2:	681b      	ldr	r3, [r3, #0]
2000f2d4:	4a21      	ldr	r2, [pc, #132]	@ (2000f35c <I2C_DMAError+0x20c>)
2000f2d6:	4293      	cmp	r3, r2
2000f2d8:	d023      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f2da:	68bb      	ldr	r3, [r7, #8]
2000f2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f2de:	681b      	ldr	r3, [r3, #0]
2000f2e0:	4a1f      	ldr	r2, [pc, #124]	@ (2000f360 <I2C_DMAError+0x210>)
2000f2e2:	4293      	cmp	r3, r2
2000f2e4:	d01d      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f2e6:	68bb      	ldr	r3, [r7, #8]
2000f2e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f2ea:	681b      	ldr	r3, [r3, #0]
2000f2ec:	4a1d      	ldr	r2, [pc, #116]	@ (2000f364 <I2C_DMAError+0x214>)
2000f2ee:	4293      	cmp	r3, r2
2000f2f0:	d017      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f2f2:	68bb      	ldr	r3, [r7, #8]
2000f2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f2f6:	681b      	ldr	r3, [r3, #0]
2000f2f8:	4a1b      	ldr	r2, [pc, #108]	@ (2000f368 <I2C_DMAError+0x218>)
2000f2fa:	4293      	cmp	r3, r2
2000f2fc:	d011      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f2fe:	68bb      	ldr	r3, [r7, #8]
2000f300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f302:	681b      	ldr	r3, [r3, #0]
2000f304:	4a19      	ldr	r2, [pc, #100]	@ (2000f36c <I2C_DMAError+0x21c>)
2000f306:	4293      	cmp	r3, r2
2000f308:	d00b      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f30a:	68bb      	ldr	r3, [r7, #8]
2000f30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f30e:	681b      	ldr	r3, [r3, #0]
2000f310:	4a17      	ldr	r2, [pc, #92]	@ (2000f370 <I2C_DMAError+0x220>)
2000f312:	4293      	cmp	r3, r2
2000f314:	d005      	beq.n	2000f322 <I2C_DMAError+0x1d2>
2000f316:	68bb      	ldr	r3, [r7, #8]
2000f318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f31a:	681b      	ldr	r3, [r3, #0]
2000f31c:	4a15      	ldr	r2, [pc, #84]	@ (2000f374 <I2C_DMAError+0x224>)
2000f31e:	4293      	cmp	r3, r2
2000f320:	d12a      	bne.n	2000f378 <I2C_DMAError+0x228>
2000f322:	68bb      	ldr	r3, [r7, #8]
2000f324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f326:	681b      	ldr	r3, [r3, #0]
2000f328:	685b      	ldr	r3, [r3, #4]
2000f32a:	2b00      	cmp	r3, #0
2000f32c:	bf0c      	ite	eq
2000f32e:	2301      	moveq	r3, #1
2000f330:	2300      	movne	r3, #0
2000f332:	b2db      	uxtb	r3, r3
2000f334:	e029      	b.n	2000f38a <I2C_DMAError+0x23a>
2000f336:	bf00      	nop
2000f338:	40020010 	.word	0x40020010
2000f33c:	40020028 	.word	0x40020028
2000f340:	40020040 	.word	0x40020040
2000f344:	40020058 	.word	0x40020058
2000f348:	40020070 	.word	0x40020070
2000f34c:	40020088 	.word	0x40020088
2000f350:	400200a0 	.word	0x400200a0
2000f354:	400200b8 	.word	0x400200b8
2000f358:	40020410 	.word	0x40020410
2000f35c:	40020428 	.word	0x40020428
2000f360:	40020440 	.word	0x40020440
2000f364:	40020458 	.word	0x40020458
2000f368:	40020470 	.word	0x40020470
2000f36c:	40020488 	.word	0x40020488
2000f370:	400204a0 	.word	0x400204a0
2000f374:	400204b8 	.word	0x400204b8
2000f378:	68bb      	ldr	r3, [r7, #8]
2000f37a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f37c:	681b      	ldr	r3, [r3, #0]
2000f37e:	685b      	ldr	r3, [r3, #4]
2000f380:	2b00      	cmp	r3, #0
2000f382:	bf0c      	ite	eq
2000f384:	2301      	moveq	r3, #1
2000f386:	2300      	movne	r3, #0
2000f388:	b2db      	uxtb	r3, r3
2000f38a:	2b00      	cmp	r3, #0
2000f38c:	d001      	beq.n	2000f392 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
2000f38e:	2301      	movs	r3, #1
2000f390:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
2000f392:	6878      	ldr	r0, [r7, #4]
2000f394:	f7f7 f8ce 	bl	20006534 <HAL_DMA_GetError>
2000f398:	4603      	mov	r3, r0
2000f39a:	2b02      	cmp	r3, #2
2000f39c:	d00e      	beq.n	2000f3bc <I2C_DMAError+0x26c>
2000f39e:	68fb      	ldr	r3, [r7, #12]
2000f3a0:	2b00      	cmp	r3, #0
2000f3a2:	d00b      	beq.n	2000f3bc <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000f3a4:	68bb      	ldr	r3, [r7, #8]
2000f3a6:	681b      	ldr	r3, [r3, #0]
2000f3a8:	685a      	ldr	r2, [r3, #4]
2000f3aa:	68bb      	ldr	r3, [r7, #8]
2000f3ac:	681b      	ldr	r3, [r3, #0]
2000f3ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2000f3b2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2000f3b4:	2110      	movs	r1, #16
2000f3b6:	68b8      	ldr	r0, [r7, #8]
2000f3b8:	f7ff fc26 	bl	2000ec08 <I2C_ITError>
  }
}
2000f3bc:	bf00      	nop
2000f3be:	3710      	adds	r7, #16
2000f3c0:	46bd      	mov	sp, r7
2000f3c2:	bd80      	pop	{r7, pc}

2000f3c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
2000f3c4:	b580      	push	{r7, lr}
2000f3c6:	b084      	sub	sp, #16
2000f3c8:	af00      	add	r7, sp, #0
2000f3ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000f3cc:	687b      	ldr	r3, [r7, #4]
2000f3ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f3d0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
2000f3d2:	68fb      	ldr	r3, [r7, #12]
2000f3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f3d6:	2b00      	cmp	r3, #0
2000f3d8:	d003      	beq.n	2000f3e2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
2000f3da:	68fb      	ldr	r3, [r7, #12]
2000f3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000f3de:	2200      	movs	r2, #0
2000f3e0:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
2000f3e2:	68fb      	ldr	r3, [r7, #12]
2000f3e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f3e6:	2b00      	cmp	r3, #0
2000f3e8:	d003      	beq.n	2000f3f2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
2000f3ea:	68fb      	ldr	r3, [r7, #12]
2000f3ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2000f3ee:	2200      	movs	r2, #0
2000f3f0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
2000f3f2:	68f8      	ldr	r0, [r7, #12]
2000f3f4:	f7ff fcf8 	bl	2000ede8 <I2C_TreatErrorCallback>
}
2000f3f8:	bf00      	nop
2000f3fa:	3710      	adds	r7, #16
2000f3fc:	46bd      	mov	sp, r7
2000f3fe:	bd80      	pop	{r7, pc}

2000f400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
2000f400:	b580      	push	{r7, lr}
2000f402:	b084      	sub	sp, #16
2000f404:	af00      	add	r7, sp, #0
2000f406:	60f8      	str	r0, [r7, #12]
2000f408:	60b9      	str	r1, [r7, #8]
2000f40a:	603b      	str	r3, [r7, #0]
2000f40c:	4613      	mov	r3, r2
2000f40e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2000f410:	e03b      	b.n	2000f48a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2000f412:	69ba      	ldr	r2, [r7, #24]
2000f414:	6839      	ldr	r1, [r7, #0]
2000f416:	68f8      	ldr	r0, [r7, #12]
2000f418:	f000 f962 	bl	2000f6e0 <I2C_IsErrorOccurred>
2000f41c:	4603      	mov	r3, r0
2000f41e:	2b00      	cmp	r3, #0
2000f420:	d001      	beq.n	2000f426 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
2000f422:	2301      	movs	r3, #1
2000f424:	e041      	b.n	2000f4aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2000f426:	683b      	ldr	r3, [r7, #0]
2000f428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
2000f42c:	d02d      	beq.n	2000f48a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000f42e:	f7f2 ff47 	bl	200022c0 <HAL_GetTick>
2000f432:	4602      	mov	r2, r0
2000f434:	69bb      	ldr	r3, [r7, #24]
2000f436:	1ad3      	subs	r3, r2, r3
2000f438:	683a      	ldr	r2, [r7, #0]
2000f43a:	429a      	cmp	r2, r3
2000f43c:	d302      	bcc.n	2000f444 <I2C_WaitOnFlagUntilTimeout+0x44>
2000f43e:	683b      	ldr	r3, [r7, #0]
2000f440:	2b00      	cmp	r3, #0
2000f442:	d122      	bne.n	2000f48a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2000f444:	68fb      	ldr	r3, [r7, #12]
2000f446:	681b      	ldr	r3, [r3, #0]
2000f448:	699a      	ldr	r2, [r3, #24]
2000f44a:	68bb      	ldr	r3, [r7, #8]
2000f44c:	4013      	ands	r3, r2
2000f44e:	68ba      	ldr	r2, [r7, #8]
2000f450:	429a      	cmp	r2, r3
2000f452:	bf0c      	ite	eq
2000f454:	2301      	moveq	r3, #1
2000f456:	2300      	movne	r3, #0
2000f458:	b2db      	uxtb	r3, r3
2000f45a:	461a      	mov	r2, r3
2000f45c:	79fb      	ldrb	r3, [r7, #7]
2000f45e:	429a      	cmp	r2, r3
2000f460:	d113      	bne.n	2000f48a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000f462:	68fb      	ldr	r3, [r7, #12]
2000f464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000f466:	f043 0220 	orr.w	r2, r3, #32
2000f46a:	68fb      	ldr	r3, [r7, #12]
2000f46c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2000f46e:	68fb      	ldr	r3, [r7, #12]
2000f470:	2220      	movs	r2, #32
2000f472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2000f476:	68fb      	ldr	r3, [r7, #12]
2000f478:	2200      	movs	r2, #0
2000f47a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2000f47e:	68fb      	ldr	r3, [r7, #12]
2000f480:	2200      	movs	r2, #0
2000f482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
2000f486:	2301      	movs	r3, #1
2000f488:	e00f      	b.n	2000f4aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2000f48a:	68fb      	ldr	r3, [r7, #12]
2000f48c:	681b      	ldr	r3, [r3, #0]
2000f48e:	699a      	ldr	r2, [r3, #24]
2000f490:	68bb      	ldr	r3, [r7, #8]
2000f492:	4013      	ands	r3, r2
2000f494:	68ba      	ldr	r2, [r7, #8]
2000f496:	429a      	cmp	r2, r3
2000f498:	bf0c      	ite	eq
2000f49a:	2301      	moveq	r3, #1
2000f49c:	2300      	movne	r3, #0
2000f49e:	b2db      	uxtb	r3, r3
2000f4a0:	461a      	mov	r2, r3
2000f4a2:	79fb      	ldrb	r3, [r7, #7]
2000f4a4:	429a      	cmp	r2, r3
2000f4a6:	d0b4      	beq.n	2000f412 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
2000f4a8:	2300      	movs	r3, #0
}
2000f4aa:	4618      	mov	r0, r3
2000f4ac:	3710      	adds	r7, #16
2000f4ae:	46bd      	mov	sp, r7
2000f4b0:	bd80      	pop	{r7, pc}

2000f4b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2000f4b2:	b580      	push	{r7, lr}
2000f4b4:	b084      	sub	sp, #16
2000f4b6:	af00      	add	r7, sp, #0
2000f4b8:	60f8      	str	r0, [r7, #12]
2000f4ba:	60b9      	str	r1, [r7, #8]
2000f4bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2000f4be:	e033      	b.n	2000f528 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2000f4c0:	687a      	ldr	r2, [r7, #4]
2000f4c2:	68b9      	ldr	r1, [r7, #8]
2000f4c4:	68f8      	ldr	r0, [r7, #12]
2000f4c6:	f000 f90b 	bl	2000f6e0 <I2C_IsErrorOccurred>
2000f4ca:	4603      	mov	r3, r0
2000f4cc:	2b00      	cmp	r3, #0
2000f4ce:	d001      	beq.n	2000f4d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2000f4d0:	2301      	movs	r3, #1
2000f4d2:	e031      	b.n	2000f538 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2000f4d4:	68bb      	ldr	r3, [r7, #8]
2000f4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
2000f4da:	d025      	beq.n	2000f528 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000f4dc:	f7f2 fef0 	bl	200022c0 <HAL_GetTick>
2000f4e0:	4602      	mov	r2, r0
2000f4e2:	687b      	ldr	r3, [r7, #4]
2000f4e4:	1ad3      	subs	r3, r2, r3
2000f4e6:	68ba      	ldr	r2, [r7, #8]
2000f4e8:	429a      	cmp	r2, r3
2000f4ea:	d302      	bcc.n	2000f4f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
2000f4ec:	68bb      	ldr	r3, [r7, #8]
2000f4ee:	2b00      	cmp	r3, #0
2000f4f0:	d11a      	bne.n	2000f528 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
2000f4f2:	68fb      	ldr	r3, [r7, #12]
2000f4f4:	681b      	ldr	r3, [r3, #0]
2000f4f6:	699b      	ldr	r3, [r3, #24]
2000f4f8:	f003 0302 	and.w	r3, r3, #2
2000f4fc:	2b02      	cmp	r3, #2
2000f4fe:	d013      	beq.n	2000f528 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000f500:	68fb      	ldr	r3, [r7, #12]
2000f502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000f504:	f043 0220 	orr.w	r2, r3, #32
2000f508:	68fb      	ldr	r3, [r7, #12]
2000f50a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2000f50c:	68fb      	ldr	r3, [r7, #12]
2000f50e:	2220      	movs	r2, #32
2000f510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2000f514:	68fb      	ldr	r3, [r7, #12]
2000f516:	2200      	movs	r2, #0
2000f518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2000f51c:	68fb      	ldr	r3, [r7, #12]
2000f51e:	2200      	movs	r2, #0
2000f520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
2000f524:	2301      	movs	r3, #1
2000f526:	e007      	b.n	2000f538 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2000f528:	68fb      	ldr	r3, [r7, #12]
2000f52a:	681b      	ldr	r3, [r3, #0]
2000f52c:	699b      	ldr	r3, [r3, #24]
2000f52e:	f003 0302 	and.w	r3, r3, #2
2000f532:	2b02      	cmp	r3, #2
2000f534:	d1c4      	bne.n	2000f4c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
2000f536:	2300      	movs	r3, #0
}
2000f538:	4618      	mov	r0, r3
2000f53a:	3710      	adds	r7, #16
2000f53c:	46bd      	mov	sp, r7
2000f53e:	bd80      	pop	{r7, pc}

2000f540 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2000f540:	b580      	push	{r7, lr}
2000f542:	b084      	sub	sp, #16
2000f544:	af00      	add	r7, sp, #0
2000f546:	60f8      	str	r0, [r7, #12]
2000f548:	60b9      	str	r1, [r7, #8]
2000f54a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2000f54c:	e02f      	b.n	2000f5ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2000f54e:	687a      	ldr	r2, [r7, #4]
2000f550:	68b9      	ldr	r1, [r7, #8]
2000f552:	68f8      	ldr	r0, [r7, #12]
2000f554:	f000 f8c4 	bl	2000f6e0 <I2C_IsErrorOccurred>
2000f558:	4603      	mov	r3, r0
2000f55a:	2b00      	cmp	r3, #0
2000f55c:	d001      	beq.n	2000f562 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2000f55e:	2301      	movs	r3, #1
2000f560:	e02d      	b.n	2000f5be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000f562:	f7f2 fead 	bl	200022c0 <HAL_GetTick>
2000f566:	4602      	mov	r2, r0
2000f568:	687b      	ldr	r3, [r7, #4]
2000f56a:	1ad3      	subs	r3, r2, r3
2000f56c:	68ba      	ldr	r2, [r7, #8]
2000f56e:	429a      	cmp	r2, r3
2000f570:	d302      	bcc.n	2000f578 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
2000f572:	68bb      	ldr	r3, [r7, #8]
2000f574:	2b00      	cmp	r3, #0
2000f576:	d11a      	bne.n	2000f5ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
2000f578:	68fb      	ldr	r3, [r7, #12]
2000f57a:	681b      	ldr	r3, [r3, #0]
2000f57c:	699b      	ldr	r3, [r3, #24]
2000f57e:	f003 0320 	and.w	r3, r3, #32
2000f582:	2b20      	cmp	r3, #32
2000f584:	d013      	beq.n	2000f5ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000f586:	68fb      	ldr	r3, [r7, #12]
2000f588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000f58a:	f043 0220 	orr.w	r2, r3, #32
2000f58e:	68fb      	ldr	r3, [r7, #12]
2000f590:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000f592:	68fb      	ldr	r3, [r7, #12]
2000f594:	2220      	movs	r2, #32
2000f596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000f59a:	68fb      	ldr	r3, [r7, #12]
2000f59c:	2200      	movs	r2, #0
2000f59e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000f5a2:	68fb      	ldr	r3, [r7, #12]
2000f5a4:	2200      	movs	r2, #0
2000f5a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2000f5aa:	2301      	movs	r3, #1
2000f5ac:	e007      	b.n	2000f5be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2000f5ae:	68fb      	ldr	r3, [r7, #12]
2000f5b0:	681b      	ldr	r3, [r3, #0]
2000f5b2:	699b      	ldr	r3, [r3, #24]
2000f5b4:	f003 0320 	and.w	r3, r3, #32
2000f5b8:	2b20      	cmp	r3, #32
2000f5ba:	d1c8      	bne.n	2000f54e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
2000f5bc:	2300      	movs	r3, #0
}
2000f5be:	4618      	mov	r0, r3
2000f5c0:	3710      	adds	r7, #16
2000f5c2:	46bd      	mov	sp, r7
2000f5c4:	bd80      	pop	{r7, pc}
	...

2000f5c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2000f5c8:	b580      	push	{r7, lr}
2000f5ca:	b086      	sub	sp, #24
2000f5cc:	af00      	add	r7, sp, #0
2000f5ce:	60f8      	str	r0, [r7, #12]
2000f5d0:	60b9      	str	r1, [r7, #8]
2000f5d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000f5d4:	2300      	movs	r3, #0
2000f5d6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
2000f5d8:	e071      	b.n	2000f6be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2000f5da:	687a      	ldr	r2, [r7, #4]
2000f5dc:	68b9      	ldr	r1, [r7, #8]
2000f5de:	68f8      	ldr	r0, [r7, #12]
2000f5e0:	f000 f87e 	bl	2000f6e0 <I2C_IsErrorOccurred>
2000f5e4:	4603      	mov	r3, r0
2000f5e6:	2b00      	cmp	r3, #0
2000f5e8:	d001      	beq.n	2000f5ee <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
2000f5ea:	2301      	movs	r3, #1
2000f5ec:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
2000f5ee:	68fb      	ldr	r3, [r7, #12]
2000f5f0:	681b      	ldr	r3, [r3, #0]
2000f5f2:	699b      	ldr	r3, [r3, #24]
2000f5f4:	f003 0320 	and.w	r3, r3, #32
2000f5f8:	2b20      	cmp	r3, #32
2000f5fa:	d13b      	bne.n	2000f674 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
2000f5fc:	7dfb      	ldrb	r3, [r7, #23]
2000f5fe:	2b00      	cmp	r3, #0
2000f600:	d138      	bne.n	2000f674 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
2000f602:	68fb      	ldr	r3, [r7, #12]
2000f604:	681b      	ldr	r3, [r3, #0]
2000f606:	699b      	ldr	r3, [r3, #24]
2000f608:	f003 0304 	and.w	r3, r3, #4
2000f60c:	2b04      	cmp	r3, #4
2000f60e:	d105      	bne.n	2000f61c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
2000f610:	68fb      	ldr	r3, [r7, #12]
2000f612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2000f614:	2b00      	cmp	r3, #0
2000f616:	d001      	beq.n	2000f61c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
2000f618:	2300      	movs	r3, #0
2000f61a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
2000f61c:	68fb      	ldr	r3, [r7, #12]
2000f61e:	681b      	ldr	r3, [r3, #0]
2000f620:	699b      	ldr	r3, [r3, #24]
2000f622:	f003 0310 	and.w	r3, r3, #16
2000f626:	2b10      	cmp	r3, #16
2000f628:	d121      	bne.n	2000f66e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000f62a:	68fb      	ldr	r3, [r7, #12]
2000f62c:	681b      	ldr	r3, [r3, #0]
2000f62e:	2210      	movs	r2, #16
2000f630:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
2000f632:	68fb      	ldr	r3, [r7, #12]
2000f634:	2204      	movs	r2, #4
2000f636:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000f638:	68fb      	ldr	r3, [r7, #12]
2000f63a:	681b      	ldr	r3, [r3, #0]
2000f63c:	2220      	movs	r2, #32
2000f63e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
2000f640:	68fb      	ldr	r3, [r7, #12]
2000f642:	681b      	ldr	r3, [r3, #0]
2000f644:	6859      	ldr	r1, [r3, #4]
2000f646:	68fb      	ldr	r3, [r7, #12]
2000f648:	681a      	ldr	r2, [r3, #0]
2000f64a:	4b24      	ldr	r3, [pc, #144]	@ (2000f6dc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
2000f64c:	400b      	ands	r3, r1
2000f64e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
2000f650:	68fb      	ldr	r3, [r7, #12]
2000f652:	2220      	movs	r2, #32
2000f654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000f658:	68fb      	ldr	r3, [r7, #12]
2000f65a:	2200      	movs	r2, #0
2000f65c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000f660:	68fb      	ldr	r3, [r7, #12]
2000f662:	2200      	movs	r2, #0
2000f664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
2000f668:	2301      	movs	r3, #1
2000f66a:	75fb      	strb	r3, [r7, #23]
2000f66c:	e002      	b.n	2000f674 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000f66e:	68fb      	ldr	r3, [r7, #12]
2000f670:	2200      	movs	r2, #0
2000f672:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
2000f674:	f7f2 fe24 	bl	200022c0 <HAL_GetTick>
2000f678:	4602      	mov	r2, r0
2000f67a:	687b      	ldr	r3, [r7, #4]
2000f67c:	1ad3      	subs	r3, r2, r3
2000f67e:	68ba      	ldr	r2, [r7, #8]
2000f680:	429a      	cmp	r2, r3
2000f682:	d302      	bcc.n	2000f68a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
2000f684:	68bb      	ldr	r3, [r7, #8]
2000f686:	2b00      	cmp	r3, #0
2000f688:	d119      	bne.n	2000f6be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
2000f68a:	7dfb      	ldrb	r3, [r7, #23]
2000f68c:	2b00      	cmp	r3, #0
2000f68e:	d116      	bne.n	2000f6be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
2000f690:	68fb      	ldr	r3, [r7, #12]
2000f692:	681b      	ldr	r3, [r3, #0]
2000f694:	699b      	ldr	r3, [r3, #24]
2000f696:	f003 0304 	and.w	r3, r3, #4
2000f69a:	2b04      	cmp	r3, #4
2000f69c:	d00f      	beq.n	2000f6be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000f69e:	68fb      	ldr	r3, [r7, #12]
2000f6a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000f6a2:	f043 0220 	orr.w	r2, r3, #32
2000f6a6:	68fb      	ldr	r3, [r7, #12]
2000f6a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000f6aa:	68fb      	ldr	r3, [r7, #12]
2000f6ac:	2220      	movs	r2, #32
2000f6ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000f6b2:	68fb      	ldr	r3, [r7, #12]
2000f6b4:	2200      	movs	r2, #0
2000f6b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
2000f6ba:	2301      	movs	r3, #1
2000f6bc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
2000f6be:	68fb      	ldr	r3, [r7, #12]
2000f6c0:	681b      	ldr	r3, [r3, #0]
2000f6c2:	699b      	ldr	r3, [r3, #24]
2000f6c4:	f003 0304 	and.w	r3, r3, #4
2000f6c8:	2b04      	cmp	r3, #4
2000f6ca:	d002      	beq.n	2000f6d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
2000f6cc:	7dfb      	ldrb	r3, [r7, #23]
2000f6ce:	2b00      	cmp	r3, #0
2000f6d0:	d083      	beq.n	2000f5da <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
2000f6d2:	7dfb      	ldrb	r3, [r7, #23]
}
2000f6d4:	4618      	mov	r0, r3
2000f6d6:	3718      	adds	r7, #24
2000f6d8:	46bd      	mov	sp, r7
2000f6da:	bd80      	pop	{r7, pc}
2000f6dc:	fe00e800 	.word	0xfe00e800

2000f6e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
2000f6e0:	b580      	push	{r7, lr}
2000f6e2:	b08a      	sub	sp, #40	@ 0x28
2000f6e4:	af00      	add	r7, sp, #0
2000f6e6:	60f8      	str	r0, [r7, #12]
2000f6e8:	60b9      	str	r1, [r7, #8]
2000f6ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000f6ec:	2300      	movs	r3, #0
2000f6ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
2000f6f2:	68fb      	ldr	r3, [r7, #12]
2000f6f4:	681b      	ldr	r3, [r3, #0]
2000f6f6:	699b      	ldr	r3, [r3, #24]
2000f6f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
2000f6fa:	2300      	movs	r3, #0
2000f6fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
2000f6fe:	687b      	ldr	r3, [r7, #4]
2000f700:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
2000f702:	69bb      	ldr	r3, [r7, #24]
2000f704:	f003 0310 	and.w	r3, r3, #16
2000f708:	2b00      	cmp	r3, #0
2000f70a:	d068      	beq.n	2000f7de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000f70c:	68fb      	ldr	r3, [r7, #12]
2000f70e:	681b      	ldr	r3, [r3, #0]
2000f710:	2210      	movs	r2, #16
2000f712:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2000f714:	e049      	b.n	2000f7aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
2000f716:	68bb      	ldr	r3, [r7, #8]
2000f718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
2000f71c:	d045      	beq.n	2000f7aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2000f71e:	f7f2 fdcf 	bl	200022c0 <HAL_GetTick>
2000f722:	4602      	mov	r2, r0
2000f724:	69fb      	ldr	r3, [r7, #28]
2000f726:	1ad3      	subs	r3, r2, r3
2000f728:	68ba      	ldr	r2, [r7, #8]
2000f72a:	429a      	cmp	r2, r3
2000f72c:	d302      	bcc.n	2000f734 <I2C_IsErrorOccurred+0x54>
2000f72e:	68bb      	ldr	r3, [r7, #8]
2000f730:	2b00      	cmp	r3, #0
2000f732:	d13a      	bne.n	2000f7aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2000f734:	68fb      	ldr	r3, [r7, #12]
2000f736:	681b      	ldr	r3, [r3, #0]
2000f738:	685b      	ldr	r3, [r3, #4]
2000f73a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000f73e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
2000f740:	68fb      	ldr	r3, [r7, #12]
2000f742:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2000f746:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2000f748:	68fb      	ldr	r3, [r7, #12]
2000f74a:	681b      	ldr	r3, [r3, #0]
2000f74c:	699b      	ldr	r3, [r3, #24]
2000f74e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2000f752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000f756:	d121      	bne.n	2000f79c <I2C_IsErrorOccurred+0xbc>
2000f758:	697b      	ldr	r3, [r7, #20]
2000f75a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2000f75e:	d01d      	beq.n	2000f79c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
2000f760:	7cfb      	ldrb	r3, [r7, #19]
2000f762:	2b20      	cmp	r3, #32
2000f764:	d01a      	beq.n	2000f79c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2000f766:	68fb      	ldr	r3, [r7, #12]
2000f768:	681b      	ldr	r3, [r3, #0]
2000f76a:	685a      	ldr	r2, [r3, #4]
2000f76c:	68fb      	ldr	r3, [r7, #12]
2000f76e:	681b      	ldr	r3, [r3, #0]
2000f770:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000f774:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
2000f776:	f7f2 fda3 	bl	200022c0 <HAL_GetTick>
2000f77a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2000f77c:	e00e      	b.n	2000f79c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2000f77e:	f7f2 fd9f 	bl	200022c0 <HAL_GetTick>
2000f782:	4602      	mov	r2, r0
2000f784:	69fb      	ldr	r3, [r7, #28]
2000f786:	1ad3      	subs	r3, r2, r3
2000f788:	2b19      	cmp	r3, #25
2000f78a:	d907      	bls.n	2000f79c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
2000f78c:	6a3b      	ldr	r3, [r7, #32]
2000f78e:	f043 0320 	orr.w	r3, r3, #32
2000f792:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
2000f794:	2301      	movs	r3, #1
2000f796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
2000f79a:	e006      	b.n	2000f7aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2000f79c:	68fb      	ldr	r3, [r7, #12]
2000f79e:	681b      	ldr	r3, [r3, #0]
2000f7a0:	699b      	ldr	r3, [r3, #24]
2000f7a2:	f003 0320 	and.w	r3, r3, #32
2000f7a6:	2b20      	cmp	r3, #32
2000f7a8:	d1e9      	bne.n	2000f77e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2000f7aa:	68fb      	ldr	r3, [r7, #12]
2000f7ac:	681b      	ldr	r3, [r3, #0]
2000f7ae:	699b      	ldr	r3, [r3, #24]
2000f7b0:	f003 0320 	and.w	r3, r3, #32
2000f7b4:	2b20      	cmp	r3, #32
2000f7b6:	d003      	beq.n	2000f7c0 <I2C_IsErrorOccurred+0xe0>
2000f7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2000f7bc:	2b00      	cmp	r3, #0
2000f7be:	d0aa      	beq.n	2000f716 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
2000f7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2000f7c4:	2b00      	cmp	r3, #0
2000f7c6:	d103      	bne.n	2000f7d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000f7c8:	68fb      	ldr	r3, [r7, #12]
2000f7ca:	681b      	ldr	r3, [r3, #0]
2000f7cc:	2220      	movs	r2, #32
2000f7ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
2000f7d0:	6a3b      	ldr	r3, [r7, #32]
2000f7d2:	f043 0304 	orr.w	r3, r3, #4
2000f7d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
2000f7d8:	2301      	movs	r3, #1
2000f7da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
2000f7de:	68fb      	ldr	r3, [r7, #12]
2000f7e0:	681b      	ldr	r3, [r3, #0]
2000f7e2:	699b      	ldr	r3, [r3, #24]
2000f7e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
2000f7e6:	69bb      	ldr	r3, [r7, #24]
2000f7e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000f7ec:	2b00      	cmp	r3, #0
2000f7ee:	d00b      	beq.n	2000f808 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
2000f7f0:	6a3b      	ldr	r3, [r7, #32]
2000f7f2:	f043 0301 	orr.w	r3, r3, #1
2000f7f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2000f7f8:	68fb      	ldr	r3, [r7, #12]
2000f7fa:	681b      	ldr	r3, [r3, #0]
2000f7fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
2000f800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2000f802:	2301      	movs	r3, #1
2000f804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2000f808:	69bb      	ldr	r3, [r7, #24]
2000f80a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
2000f80e:	2b00      	cmp	r3, #0
2000f810:	d00b      	beq.n	2000f82a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
2000f812:	6a3b      	ldr	r3, [r7, #32]
2000f814:	f043 0308 	orr.w	r3, r3, #8
2000f818:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2000f81a:	68fb      	ldr	r3, [r7, #12]
2000f81c:	681b      	ldr	r3, [r3, #0]
2000f81e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
2000f822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2000f824:	2301      	movs	r3, #1
2000f826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2000f82a:	69bb      	ldr	r3, [r7, #24]
2000f82c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2000f830:	2b00      	cmp	r3, #0
2000f832:	d00b      	beq.n	2000f84c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
2000f834:	6a3b      	ldr	r3, [r7, #32]
2000f836:	f043 0302 	orr.w	r3, r3, #2
2000f83a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2000f83c:	68fb      	ldr	r3, [r7, #12]
2000f83e:	681b      	ldr	r3, [r3, #0]
2000f840:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000f844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2000f846:	2301      	movs	r3, #1
2000f848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
2000f84c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2000f850:	2b00      	cmp	r3, #0
2000f852:	d01c      	beq.n	2000f88e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2000f854:	68f8      	ldr	r0, [r7, #12]
2000f856:	f7ff faee 	bl	2000ee36 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2000f85a:	68fb      	ldr	r3, [r7, #12]
2000f85c:	681b      	ldr	r3, [r3, #0]
2000f85e:	6859      	ldr	r1, [r3, #4]
2000f860:	68fb      	ldr	r3, [r7, #12]
2000f862:	681a      	ldr	r2, [r3, #0]
2000f864:	4b0d      	ldr	r3, [pc, #52]	@ (2000f89c <I2C_IsErrorOccurred+0x1bc>)
2000f866:	400b      	ands	r3, r1
2000f868:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
2000f86a:	68fb      	ldr	r3, [r7, #12]
2000f86c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
2000f86e:	6a3b      	ldr	r3, [r7, #32]
2000f870:	431a      	orrs	r2, r3
2000f872:	68fb      	ldr	r3, [r7, #12]
2000f874:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
2000f876:	68fb      	ldr	r3, [r7, #12]
2000f878:	2220      	movs	r2, #32
2000f87a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2000f87e:	68fb      	ldr	r3, [r7, #12]
2000f880:	2200      	movs	r2, #0
2000f882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000f886:	68fb      	ldr	r3, [r7, #12]
2000f888:	2200      	movs	r2, #0
2000f88a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
2000f88e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
2000f892:	4618      	mov	r0, r3
2000f894:	3728      	adds	r7, #40	@ 0x28
2000f896:	46bd      	mov	sp, r7
2000f898:	bd80      	pop	{r7, pc}
2000f89a:	bf00      	nop
2000f89c:	fe00e800 	.word	0xfe00e800

2000f8a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
2000f8a0:	b480      	push	{r7}
2000f8a2:	b087      	sub	sp, #28
2000f8a4:	af00      	add	r7, sp, #0
2000f8a6:	60f8      	str	r0, [r7, #12]
2000f8a8:	607b      	str	r3, [r7, #4]
2000f8aa:	460b      	mov	r3, r1
2000f8ac:	817b      	strh	r3, [r7, #10]
2000f8ae:	4613      	mov	r3, r2
2000f8b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2000f8b2:	897b      	ldrh	r3, [r7, #10]
2000f8b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2000f8b8:	7a7b      	ldrb	r3, [r7, #9]
2000f8ba:	041b      	lsls	r3, r3, #16
2000f8bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2000f8c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2000f8c2:	687b      	ldr	r3, [r7, #4]
2000f8c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2000f8c6:	6a3b      	ldr	r3, [r7, #32]
2000f8c8:	4313      	orrs	r3, r2
2000f8ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
2000f8ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
2000f8d0:	68fb      	ldr	r3, [r7, #12]
2000f8d2:	681b      	ldr	r3, [r3, #0]
2000f8d4:	685a      	ldr	r2, [r3, #4]
2000f8d6:	6a3b      	ldr	r3, [r7, #32]
2000f8d8:	0d5b      	lsrs	r3, r3, #21
2000f8da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
2000f8de:	4b08      	ldr	r3, [pc, #32]	@ (2000f900 <I2C_TransferConfig+0x60>)
2000f8e0:	430b      	orrs	r3, r1
2000f8e2:	43db      	mvns	r3, r3
2000f8e4:	ea02 0103 	and.w	r1, r2, r3
2000f8e8:	68fb      	ldr	r3, [r7, #12]
2000f8ea:	681b      	ldr	r3, [r3, #0]
2000f8ec:	697a      	ldr	r2, [r7, #20]
2000f8ee:	430a      	orrs	r2, r1
2000f8f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
2000f8f2:	bf00      	nop
2000f8f4:	371c      	adds	r7, #28
2000f8f6:	46bd      	mov	sp, r7
2000f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f8fc:	4770      	bx	lr
2000f8fe:	bf00      	nop
2000f900:	03ff63ff 	.word	0x03ff63ff

2000f904 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2000f904:	b480      	push	{r7}
2000f906:	b085      	sub	sp, #20
2000f908:	af00      	add	r7, sp, #0
2000f90a:	6078      	str	r0, [r7, #4]
2000f90c:	460b      	mov	r3, r1
2000f90e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2000f910:	2300      	movs	r3, #0
2000f912:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
2000f914:	687b      	ldr	r3, [r7, #4]
2000f916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2000f918:	4a39      	ldr	r2, [pc, #228]	@ (2000fa00 <I2C_Enable_IRQ+0xfc>)
2000f91a:	4293      	cmp	r3, r2
2000f91c:	d032      	beq.n	2000f984 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
2000f91e:	687b      	ldr	r3, [r7, #4]
2000f920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
2000f922:	4a38      	ldr	r2, [pc, #224]	@ (2000fa04 <I2C_Enable_IRQ+0x100>)
2000f924:	4293      	cmp	r3, r2
2000f926:	d02d      	beq.n	2000f984 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
2000f928:	687b      	ldr	r3, [r7, #4]
2000f92a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
2000f92c:	4a36      	ldr	r2, [pc, #216]	@ (2000fa08 <I2C_Enable_IRQ+0x104>)
2000f92e:	4293      	cmp	r3, r2
2000f930:	d028      	beq.n	2000f984 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2000f932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2000f936:	2b00      	cmp	r3, #0
2000f938:	da03      	bge.n	2000f942 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000f93a:	68fb      	ldr	r3, [r7, #12]
2000f93c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
2000f940:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2000f942:	887b      	ldrh	r3, [r7, #2]
2000f944:	f003 0301 	and.w	r3, r3, #1
2000f948:	2b00      	cmp	r3, #0
2000f94a:	d003      	beq.n	2000f954 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
2000f94c:	68fb      	ldr	r3, [r7, #12]
2000f94e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
2000f952:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2000f954:	887b      	ldrh	r3, [r7, #2]
2000f956:	f003 0302 	and.w	r3, r3, #2
2000f95a:	2b00      	cmp	r3, #0
2000f95c:	d003      	beq.n	2000f966 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
2000f95e:	68fb      	ldr	r3, [r7, #12]
2000f960:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
2000f964:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
2000f966:	887b      	ldrh	r3, [r7, #2]
2000f968:	2b10      	cmp	r3, #16
2000f96a:	d103      	bne.n	2000f974 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2000f96c:	68fb      	ldr	r3, [r7, #12]
2000f96e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
2000f972:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2000f974:	887b      	ldrh	r3, [r7, #2]
2000f976:	2b20      	cmp	r3, #32
2000f978:	d133      	bne.n	2000f9e2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
2000f97a:	68fb      	ldr	r3, [r7, #12]
2000f97c:	f043 0320 	orr.w	r3, r3, #32
2000f980:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
2000f982:	e02e      	b.n	2000f9e2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2000f984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2000f988:	2b00      	cmp	r3, #0
2000f98a:	da03      	bge.n	2000f994 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000f98c:	68fb      	ldr	r3, [r7, #12]
2000f98e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
2000f992:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2000f994:	887b      	ldrh	r3, [r7, #2]
2000f996:	f003 0301 	and.w	r3, r3, #1
2000f99a:	2b00      	cmp	r3, #0
2000f99c:	d003      	beq.n	2000f9a6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
2000f99e:	68fb      	ldr	r3, [r7, #12]
2000f9a0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
2000f9a4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2000f9a6:	887b      	ldrh	r3, [r7, #2]
2000f9a8:	f003 0302 	and.w	r3, r3, #2
2000f9ac:	2b00      	cmp	r3, #0
2000f9ae:	d003      	beq.n	2000f9b8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
2000f9b0:	68fb      	ldr	r3, [r7, #12]
2000f9b2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
2000f9b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
2000f9b8:	887b      	ldrh	r3, [r7, #2]
2000f9ba:	2b10      	cmp	r3, #16
2000f9bc:	d103      	bne.n	2000f9c6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2000f9be:	68fb      	ldr	r3, [r7, #12]
2000f9c0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
2000f9c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2000f9c6:	887b      	ldrh	r3, [r7, #2]
2000f9c8:	2b20      	cmp	r3, #32
2000f9ca:	d103      	bne.n	2000f9d4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
2000f9cc:	68fb      	ldr	r3, [r7, #12]
2000f9ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
2000f9d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2000f9d4:	887b      	ldrh	r3, [r7, #2]
2000f9d6:	2b40      	cmp	r3, #64	@ 0x40
2000f9d8:	d103      	bne.n	2000f9e2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
2000f9da:	68fb      	ldr	r3, [r7, #12]
2000f9dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000f9e0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000f9e2:	687b      	ldr	r3, [r7, #4]
2000f9e4:	681b      	ldr	r3, [r3, #0]
2000f9e6:	6819      	ldr	r1, [r3, #0]
2000f9e8:	687b      	ldr	r3, [r7, #4]
2000f9ea:	681b      	ldr	r3, [r3, #0]
2000f9ec:	68fa      	ldr	r2, [r7, #12]
2000f9ee:	430a      	orrs	r2, r1
2000f9f0:	601a      	str	r2, [r3, #0]
}
2000f9f2:	bf00      	nop
2000f9f4:	3714      	adds	r7, #20
2000f9f6:	46bd      	mov	sp, r7
2000f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f9fc:	4770      	bx	lr
2000f9fe:	bf00      	nop
2000fa00:	2000d9c7 	.word	0x2000d9c7
2000fa04:	2000dde9 	.word	0x2000dde9
2000fa08:	2000db9d 	.word	0x2000db9d

2000fa0c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2000fa0c:	b480      	push	{r7}
2000fa0e:	b085      	sub	sp, #20
2000fa10:	af00      	add	r7, sp, #0
2000fa12:	6078      	str	r0, [r7, #4]
2000fa14:	460b      	mov	r3, r1
2000fa16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2000fa18:	2300      	movs	r3, #0
2000fa1a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2000fa1c:	887b      	ldrh	r3, [r7, #2]
2000fa1e:	f003 0301 	and.w	r3, r3, #1
2000fa22:	2b00      	cmp	r3, #0
2000fa24:	d00f      	beq.n	2000fa46 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
2000fa26:	68fb      	ldr	r3, [r7, #12]
2000fa28:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
2000fa2c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000fa2e:	687b      	ldr	r3, [r7, #4]
2000fa30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000fa34:	b2db      	uxtb	r3, r3
2000fa36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2000fa3a:	2b28      	cmp	r3, #40	@ 0x28
2000fa3c:	d003      	beq.n	2000fa46 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000fa3e:	68fb      	ldr	r3, [r7, #12]
2000fa40:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
2000fa44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2000fa46:	887b      	ldrh	r3, [r7, #2]
2000fa48:	f003 0302 	and.w	r3, r3, #2
2000fa4c:	2b00      	cmp	r3, #0
2000fa4e:	d00f      	beq.n	2000fa70 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
2000fa50:	68fb      	ldr	r3, [r7, #12]
2000fa52:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
2000fa56:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000fa58:	687b      	ldr	r3, [r7, #4]
2000fa5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000fa5e:	b2db      	uxtb	r3, r3
2000fa60:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2000fa64:	2b28      	cmp	r3, #40	@ 0x28
2000fa66:	d003      	beq.n	2000fa70 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000fa68:	68fb      	ldr	r3, [r7, #12]
2000fa6a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
2000fa6e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2000fa70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2000fa74:	2b00      	cmp	r3, #0
2000fa76:	da03      	bge.n	2000fa80 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000fa78:	68fb      	ldr	r3, [r7, #12]
2000fa7a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
2000fa7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
2000fa80:	887b      	ldrh	r3, [r7, #2]
2000fa82:	2b10      	cmp	r3, #16
2000fa84:	d103      	bne.n	2000fa8e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2000fa86:	68fb      	ldr	r3, [r7, #12]
2000fa88:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
2000fa8c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
2000fa8e:	887b      	ldrh	r3, [r7, #2]
2000fa90:	2b20      	cmp	r3, #32
2000fa92:	d103      	bne.n	2000fa9c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
2000fa94:	68fb      	ldr	r3, [r7, #12]
2000fa96:	f043 0320 	orr.w	r3, r3, #32
2000fa9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
2000fa9c:	887b      	ldrh	r3, [r7, #2]
2000fa9e:	2b40      	cmp	r3, #64	@ 0x40
2000faa0:	d103      	bne.n	2000faaa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
2000faa2:	68fb      	ldr	r3, [r7, #12]
2000faa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000faa8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000faaa:	687b      	ldr	r3, [r7, #4]
2000faac:	681b      	ldr	r3, [r3, #0]
2000faae:	6819      	ldr	r1, [r3, #0]
2000fab0:	68fb      	ldr	r3, [r7, #12]
2000fab2:	43da      	mvns	r2, r3
2000fab4:	687b      	ldr	r3, [r7, #4]
2000fab6:	681b      	ldr	r3, [r3, #0]
2000fab8:	400a      	ands	r2, r1
2000faba:	601a      	str	r2, [r3, #0]
}
2000fabc:	bf00      	nop
2000fabe:	3714      	adds	r7, #20
2000fac0:	46bd      	mov	sp, r7
2000fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fac6:	4770      	bx	lr

2000fac8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
2000fac8:	b480      	push	{r7}
2000faca:	b083      	sub	sp, #12
2000facc:	af00      	add	r7, sp, #0
2000face:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
2000fad0:	687b      	ldr	r3, [r7, #4]
2000fad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000fad4:	2baa      	cmp	r3, #170	@ 0xaa
2000fad6:	d103      	bne.n	2000fae0 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
2000fad8:	687b      	ldr	r3, [r7, #4]
2000fada:	2200      	movs	r2, #0
2000fadc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
2000fade:	e008      	b.n	2000faf2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
2000fae0:	687b      	ldr	r3, [r7, #4]
2000fae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000fae4:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2000fae8:	d103      	bne.n	2000faf2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
2000faea:	687b      	ldr	r3, [r7, #4]
2000faec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
2000faf0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
2000faf2:	bf00      	nop
2000faf4:	370c      	adds	r7, #12
2000faf6:	46bd      	mov	sp, r7
2000faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fafc:	4770      	bx	lr

2000fafe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
2000fafe:	b480      	push	{r7}
2000fb00:	b083      	sub	sp, #12
2000fb02:	af00      	add	r7, sp, #0
2000fb04:	6078      	str	r0, [r7, #4]
2000fb06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000fb08:	687b      	ldr	r3, [r7, #4]
2000fb0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000fb0e:	b2db      	uxtb	r3, r3
2000fb10:	2b20      	cmp	r3, #32
2000fb12:	d138      	bne.n	2000fb86 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000fb14:	687b      	ldr	r3, [r7, #4]
2000fb16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000fb1a:	2b01      	cmp	r3, #1
2000fb1c:	d101      	bne.n	2000fb22 <HAL_I2CEx_ConfigAnalogFilter+0x24>
2000fb1e:	2302      	movs	r3, #2
2000fb20:	e032      	b.n	2000fb88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
2000fb22:	687b      	ldr	r3, [r7, #4]
2000fb24:	2201      	movs	r2, #1
2000fb26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2000fb2a:	687b      	ldr	r3, [r7, #4]
2000fb2c:	2224      	movs	r2, #36	@ 0x24
2000fb2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2000fb32:	687b      	ldr	r3, [r7, #4]
2000fb34:	681b      	ldr	r3, [r3, #0]
2000fb36:	681a      	ldr	r2, [r3, #0]
2000fb38:	687b      	ldr	r3, [r7, #4]
2000fb3a:	681b      	ldr	r3, [r3, #0]
2000fb3c:	f022 0201 	bic.w	r2, r2, #1
2000fb40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
2000fb42:	687b      	ldr	r3, [r7, #4]
2000fb44:	681b      	ldr	r3, [r3, #0]
2000fb46:	681a      	ldr	r2, [r3, #0]
2000fb48:	687b      	ldr	r3, [r7, #4]
2000fb4a:	681b      	ldr	r3, [r3, #0]
2000fb4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
2000fb50:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
2000fb52:	687b      	ldr	r3, [r7, #4]
2000fb54:	681b      	ldr	r3, [r3, #0]
2000fb56:	6819      	ldr	r1, [r3, #0]
2000fb58:	687b      	ldr	r3, [r7, #4]
2000fb5a:	681b      	ldr	r3, [r3, #0]
2000fb5c:	683a      	ldr	r2, [r7, #0]
2000fb5e:	430a      	orrs	r2, r1
2000fb60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2000fb62:	687b      	ldr	r3, [r7, #4]
2000fb64:	681b      	ldr	r3, [r3, #0]
2000fb66:	681a      	ldr	r2, [r3, #0]
2000fb68:	687b      	ldr	r3, [r7, #4]
2000fb6a:	681b      	ldr	r3, [r3, #0]
2000fb6c:	f042 0201 	orr.w	r2, r2, #1
2000fb70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2000fb72:	687b      	ldr	r3, [r7, #4]
2000fb74:	2220      	movs	r2, #32
2000fb76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000fb7a:	687b      	ldr	r3, [r7, #4]
2000fb7c:	2200      	movs	r2, #0
2000fb7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000fb82:	2300      	movs	r3, #0
2000fb84:	e000      	b.n	2000fb88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
2000fb86:	2302      	movs	r3, #2
  }
}
2000fb88:	4618      	mov	r0, r3
2000fb8a:	370c      	adds	r7, #12
2000fb8c:	46bd      	mov	sp, r7
2000fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fb92:	4770      	bx	lr

2000fb94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
2000fb94:	b480      	push	{r7}
2000fb96:	b085      	sub	sp, #20
2000fb98:	af00      	add	r7, sp, #0
2000fb9a:	6078      	str	r0, [r7, #4]
2000fb9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000fb9e:	687b      	ldr	r3, [r7, #4]
2000fba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000fba4:	b2db      	uxtb	r3, r3
2000fba6:	2b20      	cmp	r3, #32
2000fba8:	d139      	bne.n	2000fc1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000fbaa:	687b      	ldr	r3, [r7, #4]
2000fbac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000fbb0:	2b01      	cmp	r3, #1
2000fbb2:	d101      	bne.n	2000fbb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
2000fbb4:	2302      	movs	r3, #2
2000fbb6:	e033      	b.n	2000fc20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
2000fbb8:	687b      	ldr	r3, [r7, #4]
2000fbba:	2201      	movs	r2, #1
2000fbbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2000fbc0:	687b      	ldr	r3, [r7, #4]
2000fbc2:	2224      	movs	r2, #36	@ 0x24
2000fbc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2000fbc8:	687b      	ldr	r3, [r7, #4]
2000fbca:	681b      	ldr	r3, [r3, #0]
2000fbcc:	681a      	ldr	r2, [r3, #0]
2000fbce:	687b      	ldr	r3, [r7, #4]
2000fbd0:	681b      	ldr	r3, [r3, #0]
2000fbd2:	f022 0201 	bic.w	r2, r2, #1
2000fbd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
2000fbd8:	687b      	ldr	r3, [r7, #4]
2000fbda:	681b      	ldr	r3, [r3, #0]
2000fbdc:	681b      	ldr	r3, [r3, #0]
2000fbde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
2000fbe0:	68fb      	ldr	r3, [r7, #12]
2000fbe2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
2000fbe6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
2000fbe8:	683b      	ldr	r3, [r7, #0]
2000fbea:	021b      	lsls	r3, r3, #8
2000fbec:	68fa      	ldr	r2, [r7, #12]
2000fbee:	4313      	orrs	r3, r2
2000fbf0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
2000fbf2:	687b      	ldr	r3, [r7, #4]
2000fbf4:	681b      	ldr	r3, [r3, #0]
2000fbf6:	68fa      	ldr	r2, [r7, #12]
2000fbf8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2000fbfa:	687b      	ldr	r3, [r7, #4]
2000fbfc:	681b      	ldr	r3, [r3, #0]
2000fbfe:	681a      	ldr	r2, [r3, #0]
2000fc00:	687b      	ldr	r3, [r7, #4]
2000fc02:	681b      	ldr	r3, [r3, #0]
2000fc04:	f042 0201 	orr.w	r2, r2, #1
2000fc08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2000fc0a:	687b      	ldr	r3, [r7, #4]
2000fc0c:	2220      	movs	r2, #32
2000fc0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000fc12:	687b      	ldr	r3, [r7, #4]
2000fc14:	2200      	movs	r2, #0
2000fc16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000fc1a:	2300      	movs	r3, #0
2000fc1c:	e000      	b.n	2000fc20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
2000fc1e:	2302      	movs	r3, #2
  }
}
2000fc20:	4618      	mov	r0, r3
2000fc22:	3714      	adds	r7, #20
2000fc24:	46bd      	mov	sp, r7
2000fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fc2a:	4770      	bx	lr

2000fc2c <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
2000fc2c:	b480      	push	{r7}
2000fc2e:	b083      	sub	sp, #12
2000fc30:	af00      	add	r7, sp, #0
2000fc32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000fc34:	687b      	ldr	r3, [r7, #4]
2000fc36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000fc3a:	b2db      	uxtb	r3, r3
2000fc3c:	2b20      	cmp	r3, #32
2000fc3e:	d130      	bne.n	2000fca2 <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000fc40:	687b      	ldr	r3, [r7, #4]
2000fc42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000fc46:	2b01      	cmp	r3, #1
2000fc48:	d101      	bne.n	2000fc4e <HAL_I2CEx_EnableWakeUp+0x22>
2000fc4a:	2302      	movs	r3, #2
2000fc4c:	e02a      	b.n	2000fca4 <HAL_I2CEx_EnableWakeUp+0x78>
2000fc4e:	687b      	ldr	r3, [r7, #4]
2000fc50:	2201      	movs	r2, #1
2000fc52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2000fc56:	687b      	ldr	r3, [r7, #4]
2000fc58:	2224      	movs	r2, #36	@ 0x24
2000fc5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2000fc5e:	687b      	ldr	r3, [r7, #4]
2000fc60:	681b      	ldr	r3, [r3, #0]
2000fc62:	681a      	ldr	r2, [r3, #0]
2000fc64:	687b      	ldr	r3, [r7, #4]
2000fc66:	681b      	ldr	r3, [r3, #0]
2000fc68:	f022 0201 	bic.w	r2, r2, #1
2000fc6c:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
2000fc6e:	687b      	ldr	r3, [r7, #4]
2000fc70:	681b      	ldr	r3, [r3, #0]
2000fc72:	681a      	ldr	r2, [r3, #0]
2000fc74:	687b      	ldr	r3, [r7, #4]
2000fc76:	681b      	ldr	r3, [r3, #0]
2000fc78:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
2000fc7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2000fc7e:	687b      	ldr	r3, [r7, #4]
2000fc80:	681b      	ldr	r3, [r3, #0]
2000fc82:	681a      	ldr	r2, [r3, #0]
2000fc84:	687b      	ldr	r3, [r7, #4]
2000fc86:	681b      	ldr	r3, [r3, #0]
2000fc88:	f042 0201 	orr.w	r2, r2, #1
2000fc8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2000fc8e:	687b      	ldr	r3, [r7, #4]
2000fc90:	2220      	movs	r2, #32
2000fc92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000fc96:	687b      	ldr	r3, [r7, #4]
2000fc98:	2200      	movs	r2, #0
2000fc9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000fc9e:	2300      	movs	r3, #0
2000fca0:	e000      	b.n	2000fca4 <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2000fca2:	2302      	movs	r3, #2
  }
}
2000fca4:	4618      	mov	r0, r3
2000fca6:	370c      	adds	r7, #12
2000fca8:	46bd      	mov	sp, r7
2000fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fcae:	4770      	bx	lr

2000fcb0 <HAL_I2CEx_DisableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
2000fcb0:	b480      	push	{r7}
2000fcb2:	b083      	sub	sp, #12
2000fcb4:	af00      	add	r7, sp, #0
2000fcb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000fcb8:	687b      	ldr	r3, [r7, #4]
2000fcba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2000fcbe:	b2db      	uxtb	r3, r3
2000fcc0:	2b20      	cmp	r3, #32
2000fcc2:	d130      	bne.n	2000fd26 <HAL_I2CEx_DisableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000fcc4:	687b      	ldr	r3, [r7, #4]
2000fcc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2000fcca:	2b01      	cmp	r3, #1
2000fccc:	d101      	bne.n	2000fcd2 <HAL_I2CEx_DisableWakeUp+0x22>
2000fcce:	2302      	movs	r3, #2
2000fcd0:	e02a      	b.n	2000fd28 <HAL_I2CEx_DisableWakeUp+0x78>
2000fcd2:	687b      	ldr	r3, [r7, #4]
2000fcd4:	2201      	movs	r2, #1
2000fcd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2000fcda:	687b      	ldr	r3, [r7, #4]
2000fcdc:	2224      	movs	r2, #36	@ 0x24
2000fcde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2000fce2:	687b      	ldr	r3, [r7, #4]
2000fce4:	681b      	ldr	r3, [r3, #0]
2000fce6:	681a      	ldr	r2, [r3, #0]
2000fce8:	687b      	ldr	r3, [r7, #4]
2000fcea:	681b      	ldr	r3, [r3, #0]
2000fcec:	f022 0201 	bic.w	r2, r2, #1
2000fcf0:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
2000fcf2:	687b      	ldr	r3, [r7, #4]
2000fcf4:	681b      	ldr	r3, [r3, #0]
2000fcf6:	681a      	ldr	r2, [r3, #0]
2000fcf8:	687b      	ldr	r3, [r7, #4]
2000fcfa:	681b      	ldr	r3, [r3, #0]
2000fcfc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
2000fd00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2000fd02:	687b      	ldr	r3, [r7, #4]
2000fd04:	681b      	ldr	r3, [r3, #0]
2000fd06:	681a      	ldr	r2, [r3, #0]
2000fd08:	687b      	ldr	r3, [r7, #4]
2000fd0a:	681b      	ldr	r3, [r3, #0]
2000fd0c:	f042 0201 	orr.w	r2, r2, #1
2000fd10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2000fd12:	687b      	ldr	r3, [r7, #4]
2000fd14:	2220      	movs	r2, #32
2000fd16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000fd1a:	687b      	ldr	r3, [r7, #4]
2000fd1c:	2200      	movs	r2, #0
2000fd1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2000fd22:	2300      	movs	r3, #0
2000fd24:	e000      	b.n	2000fd28 <HAL_I2CEx_DisableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2000fd26:	2302      	movs	r3, #2
  }
}
2000fd28:	4618      	mov	r0, r3
2000fd2a:	370c      	adds	r7, #12
2000fd2c:	46bd      	mov	sp, r7
2000fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fd32:	4770      	bx	lr

2000fd34 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
2000fd34:	b480      	push	{r7}
2000fd36:	b085      	sub	sp, #20
2000fd38:	af00      	add	r7, sp, #0
2000fd3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000fd3c:	4b0d      	ldr	r3, [pc, #52]	@ (2000fd74 <HAL_I2CEx_EnableFastModePlus+0x40>)
2000fd3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2000fd42:	4a0c      	ldr	r2, [pc, #48]	@ (2000fd74 <HAL_I2CEx_EnableFastModePlus+0x40>)
2000fd44:	f043 0302 	orr.w	r3, r3, #2
2000fd48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
2000fd4c:	4b09      	ldr	r3, [pc, #36]	@ (2000fd74 <HAL_I2CEx_EnableFastModePlus+0x40>)
2000fd4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2000fd52:	f003 0302 	and.w	r3, r3, #2
2000fd56:	60fb      	str	r3, [r7, #12]
2000fd58:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2000fd5a:	4b07      	ldr	r3, [pc, #28]	@ (2000fd78 <HAL_I2CEx_EnableFastModePlus+0x44>)
2000fd5c:	685a      	ldr	r2, [r3, #4]
2000fd5e:	4906      	ldr	r1, [pc, #24]	@ (2000fd78 <HAL_I2CEx_EnableFastModePlus+0x44>)
2000fd60:	687b      	ldr	r3, [r7, #4]
2000fd62:	4313      	orrs	r3, r2
2000fd64:	604b      	str	r3, [r1, #4]
}
2000fd66:	bf00      	nop
2000fd68:	3714      	adds	r7, #20
2000fd6a:	46bd      	mov	sp, r7
2000fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fd70:	4770      	bx	lr
2000fd72:	bf00      	nop
2000fd74:	58024400 	.word	0x58024400
2000fd78:	58000400 	.word	0x58000400

2000fd7c <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
2000fd7c:	b480      	push	{r7}
2000fd7e:	b085      	sub	sp, #20
2000fd80:	af00      	add	r7, sp, #0
2000fd82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000fd84:	4b0d      	ldr	r3, [pc, #52]	@ (2000fdbc <HAL_I2CEx_DisableFastModePlus+0x40>)
2000fd86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2000fd8a:	4a0c      	ldr	r2, [pc, #48]	@ (2000fdbc <HAL_I2CEx_DisableFastModePlus+0x40>)
2000fd8c:	f043 0302 	orr.w	r3, r3, #2
2000fd90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
2000fd94:	4b09      	ldr	r3, [pc, #36]	@ (2000fdbc <HAL_I2CEx_DisableFastModePlus+0x40>)
2000fd96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2000fd9a:	f003 0302 	and.w	r3, r3, #2
2000fd9e:	60fb      	str	r3, [r7, #12]
2000fda0:	68fb      	ldr	r3, [r7, #12]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2000fda2:	4b07      	ldr	r3, [pc, #28]	@ (2000fdc0 <HAL_I2CEx_DisableFastModePlus+0x44>)
2000fda4:	685a      	ldr	r2, [r3, #4]
2000fda6:	687b      	ldr	r3, [r7, #4]
2000fda8:	43db      	mvns	r3, r3
2000fdaa:	4905      	ldr	r1, [pc, #20]	@ (2000fdc0 <HAL_I2CEx_DisableFastModePlus+0x44>)
2000fdac:	4013      	ands	r3, r2
2000fdae:	604b      	str	r3, [r1, #4]
}
2000fdb0:	bf00      	nop
2000fdb2:	3714      	adds	r7, #20
2000fdb4:	46bd      	mov	sp, r7
2000fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fdba:	4770      	bx	lr
2000fdbc:	58024400 	.word	0x58024400
2000fdc0:	58000400 	.word	0x58000400

2000fdc4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
2000fdc4:	b580      	push	{r7, lr}
2000fdc6:	b084      	sub	sp, #16
2000fdc8:	af00      	add	r7, sp, #0
2000fdca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2000fdcc:	f7f2 fa78 	bl	200022c0 <HAL_GetTick>
2000fdd0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2000fdd2:	687b      	ldr	r3, [r7, #4]
2000fdd4:	2b00      	cmp	r3, #0
2000fdd6:	d101      	bne.n	2000fddc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
2000fdd8:	2301      	movs	r3, #1
2000fdda:	e03b      	b.n	2000fe54 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
2000fddc:	687b      	ldr	r3, [r7, #4]
2000fdde:	2200      	movs	r2, #0
2000fde0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
2000fde4:	687b      	ldr	r3, [r7, #4]
2000fde6:	2202      	movs	r2, #2
2000fde8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
2000fdec:	687b      	ldr	r3, [r7, #4]
2000fdee:	681b      	ldr	r3, [r3, #0]
2000fdf0:	68da      	ldr	r2, [r3, #12]
2000fdf2:	687b      	ldr	r3, [r7, #4]
2000fdf4:	681b      	ldr	r3, [r3, #0]
2000fdf6:	f022 0201 	bic.w	r2, r2, #1
2000fdfa:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2000fdfc:	e00f      	b.n	2000fe1e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
2000fdfe:	f7f2 fa5f 	bl	200022c0 <HAL_GetTick>
2000fe02:	4602      	mov	r2, r0
2000fe04:	68fb      	ldr	r3, [r7, #12]
2000fe06:	1ad3      	subs	r3, r2, r3
2000fe08:	2b05      	cmp	r3, #5
2000fe0a:	d908      	bls.n	2000fe1e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
2000fe0c:	687b      	ldr	r3, [r7, #4]
2000fe0e:	2240      	movs	r2, #64	@ 0x40
2000fe10:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
2000fe12:	687b      	ldr	r3, [r7, #4]
2000fe14:	2203      	movs	r2, #3
2000fe16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
2000fe1a:	2301      	movs	r3, #1
2000fe1c:	e01a      	b.n	2000fe54 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2000fe1e:	687b      	ldr	r3, [r7, #4]
2000fe20:	681b      	ldr	r3, [r3, #0]
2000fe22:	68db      	ldr	r3, [r3, #12]
2000fe24:	f003 0301 	and.w	r3, r3, #1
2000fe28:	2b00      	cmp	r3, #0
2000fe2a:	d1e8      	bne.n	2000fdfe <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
2000fe2c:	6878      	ldr	r0, [r7, #4]
2000fe2e:	f001 f899 	bl	20010f64 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2000fe32:	687b      	ldr	r3, [r7, #4]
2000fe34:	2200      	movs	r2, #0
2000fe36:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
2000fe38:	687b      	ldr	r3, [r7, #4]
2000fe3a:	2200      	movs	r2, #0
2000fe3c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
2000fe3e:	687b      	ldr	r3, [r7, #4]
2000fe40:	2200      	movs	r2, #0
2000fe42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2000fe44:	687b      	ldr	r3, [r7, #4]
2000fe46:	2200      	movs	r2, #0
2000fe48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
2000fe4a:	687b      	ldr	r3, [r7, #4]
2000fe4c:	2201      	movs	r2, #1
2000fe4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
2000fe52:	2300      	movs	r3, #0
}
2000fe54:	4618      	mov	r0, r3
2000fe56:	3710      	adds	r7, #16
2000fe58:	46bd      	mov	sp, r7
2000fe5a:	bd80      	pop	{r7, pc}

2000fe5c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
2000fe5c:	b480      	push	{r7}
2000fe5e:	b083      	sub	sp, #12
2000fe60:	af00      	add	r7, sp, #0
2000fe62:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2000fe64:	687b      	ldr	r3, [r7, #4]
2000fe66:	2b00      	cmp	r3, #0
2000fe68:	d101      	bne.n	2000fe6e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
2000fe6a:	2301      	movs	r3, #1
2000fe6c:	e048      	b.n	2000ff00 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
2000fe6e:	687b      	ldr	r3, [r7, #4]
2000fe70:	681b      	ldr	r3, [r3, #0]
2000fe72:	68da      	ldr	r2, [r3, #12]
2000fe74:	687b      	ldr	r3, [r7, #4]
2000fe76:	681b      	ldr	r3, [r3, #0]
2000fe78:	f022 0201 	bic.w	r2, r2, #1
2000fe7c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
2000fe7e:	687b      	ldr	r3, [r7, #4]
2000fe80:	681b      	ldr	r3, [r3, #0]
2000fe82:	2200      	movs	r2, #0
2000fe84:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
2000fe86:	687b      	ldr	r3, [r7, #4]
2000fe88:	681b      	ldr	r3, [r3, #0]
2000fe8a:	2200      	movs	r2, #0
2000fe8c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
2000fe8e:	687b      	ldr	r3, [r7, #4]
2000fe90:	681b      	ldr	r3, [r3, #0]
2000fe92:	2200      	movs	r2, #0
2000fe94:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
2000fe96:	687b      	ldr	r3, [r7, #4]
2000fe98:	681b      	ldr	r3, [r3, #0]
2000fe9a:	2200      	movs	r2, #0
2000fe9c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
2000fe9e:	687b      	ldr	r3, [r7, #4]
2000fea0:	681b      	ldr	r3, [r3, #0]
2000fea2:	2200      	movs	r2, #0
2000fea4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
2000fea6:	687b      	ldr	r3, [r7, #4]
2000fea8:	681b      	ldr	r3, [r3, #0]
2000feaa:	2200      	movs	r2, #0
2000feac:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
2000feae:	687b      	ldr	r3, [r7, #4]
2000feb0:	681b      	ldr	r3, [r3, #0]
2000feb2:	2200      	movs	r2, #0
2000feb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
2000feb6:	687b      	ldr	r3, [r7, #4]
2000feb8:	681b      	ldr	r3, [r3, #0]
2000feba:	2200      	movs	r2, #0
2000febc:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
2000febe:	687b      	ldr	r3, [r7, #4]
2000fec0:	681b      	ldr	r3, [r3, #0]
2000fec2:	2200      	movs	r2, #0
2000fec4:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
2000fec6:	687b      	ldr	r3, [r7, #4]
2000fec8:	681b      	ldr	r3, [r3, #0]
2000feca:	2200      	movs	r2, #0
2000fecc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
2000fece:	687b      	ldr	r3, [r7, #4]
2000fed0:	681b      	ldr	r3, [r3, #0]
2000fed2:	221f      	movs	r2, #31
2000fed4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2000fed6:	687b      	ldr	r3, [r7, #4]
2000fed8:	2200      	movs	r2, #0
2000feda:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
2000fedc:	687b      	ldr	r3, [r7, #4]
2000fede:	2200      	movs	r2, #0
2000fee0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
2000fee2:	687b      	ldr	r3, [r7, #4]
2000fee4:	2200      	movs	r2, #0
2000fee6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2000fee8:	687b      	ldr	r3, [r7, #4]
2000feea:	2200      	movs	r2, #0
2000feec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
2000feee:	687b      	ldr	r3, [r7, #4]
2000fef0:	2200      	movs	r2, #0
2000fef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2000fef6:	687b      	ldr	r3, [r7, #4]
2000fef8:	2200      	movs	r2, #0
2000fefa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
2000fefe:	2300      	movs	r3, #0
}
2000ff00:	4618      	mov	r0, r3
2000ff02:	370c      	adds	r7, #12
2000ff04:	46bd      	mov	sp, r7
2000ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ff0a:	4770      	bx	lr

2000ff0c <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
2000ff0c:	b480      	push	{r7}
2000ff0e:	b087      	sub	sp, #28
2000ff10:	af00      	add	r7, sp, #0
2000ff12:	60f8      	str	r0, [r7, #12]
2000ff14:	60b9      	str	r1, [r7, #8]
2000ff16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
2000ff18:	2300      	movs	r3, #0
2000ff1a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2000ff1c:	68fb      	ldr	r3, [r7, #12]
2000ff1e:	2b00      	cmp	r3, #0
2000ff20:	d101      	bne.n	2000ff26 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
2000ff22:	2301      	movs	r3, #1
2000ff24:	e03e      	b.n	2000ffa4 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2000ff26:	68fb      	ldr	r3, [r7, #12]
2000ff28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
2000ff2c:	2b01      	cmp	r3, #1
2000ff2e:	d101      	bne.n	2000ff34 <HAL_MDMA_ConfigPostRequestMask+0x28>
2000ff30:	2302      	movs	r3, #2
2000ff32:	e037      	b.n	2000ffa4 <HAL_MDMA_ConfigPostRequestMask+0x98>
2000ff34:	68fb      	ldr	r3, [r7, #12]
2000ff36:	2201      	movs	r2, #1
2000ff38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2000ff3c:	68fb      	ldr	r3, [r7, #12]
2000ff3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2000ff42:	b2db      	uxtb	r3, r3
2000ff44:	2b01      	cmp	r3, #1
2000ff46:	d126      	bne.n	2000ff96 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
2000ff48:	68fb      	ldr	r3, [r7, #12]
2000ff4a:	681b      	ldr	r3, [r3, #0]
2000ff4c:	691b      	ldr	r3, [r3, #16]
2000ff4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
2000ff52:	2b00      	cmp	r3, #0
2000ff54:	d11c      	bne.n	2000ff90 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
2000ff56:	68fb      	ldr	r3, [r7, #12]
2000ff58:	681b      	ldr	r3, [r3, #0]
2000ff5a:	68ba      	ldr	r2, [r7, #8]
2000ff5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
2000ff5e:	68fb      	ldr	r3, [r7, #12]
2000ff60:	681b      	ldr	r3, [r3, #0]
2000ff62:	687a      	ldr	r2, [r7, #4]
2000ff64:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
2000ff66:	68bb      	ldr	r3, [r7, #8]
2000ff68:	2b00      	cmp	r3, #0
2000ff6a:	d108      	bne.n	2000ff7e <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
2000ff6c:	68fb      	ldr	r3, [r7, #12]
2000ff6e:	681b      	ldr	r3, [r3, #0]
2000ff70:	691a      	ldr	r2, [r3, #16]
2000ff72:	68fb      	ldr	r3, [r7, #12]
2000ff74:	681b      	ldr	r3, [r3, #0]
2000ff76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
2000ff7a:	611a      	str	r2, [r3, #16]
2000ff7c:	e00d      	b.n	2000ff9a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
2000ff7e:	68fb      	ldr	r3, [r7, #12]
2000ff80:	681b      	ldr	r3, [r3, #0]
2000ff82:	691a      	ldr	r2, [r3, #16]
2000ff84:	68fb      	ldr	r3, [r7, #12]
2000ff86:	681b      	ldr	r3, [r3, #0]
2000ff88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
2000ff8c:	611a      	str	r2, [r3, #16]
2000ff8e:	e004      	b.n	2000ff9a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
2000ff90:	2301      	movs	r3, #1
2000ff92:	75fb      	strb	r3, [r7, #23]
2000ff94:	e001      	b.n	2000ff9a <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2000ff96:	2301      	movs	r3, #1
2000ff98:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2000ff9a:	68fb      	ldr	r3, [r7, #12]
2000ff9c:	2200      	movs	r2, #0
2000ff9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
2000ffa2:	7dfb      	ldrb	r3, [r7, #23]
}
2000ffa4:	4618      	mov	r0, r3
2000ffa6:	371c      	adds	r7, #28
2000ffa8:	46bd      	mov	sp, r7
2000ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ffae:	4770      	bx	lr

2000ffb0 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
2000ffb0:	b480      	push	{r7}
2000ffb2:	b087      	sub	sp, #28
2000ffb4:	af00      	add	r7, sp, #0
2000ffb6:	60f8      	str	r0, [r7, #12]
2000ffb8:	460b      	mov	r3, r1
2000ffba:	607a      	str	r2, [r7, #4]
2000ffbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2000ffbe:	2300      	movs	r3, #0
2000ffc0:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2000ffc2:	68fb      	ldr	r3, [r7, #12]
2000ffc4:	2b00      	cmp	r3, #0
2000ffc6:	d101      	bne.n	2000ffcc <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
2000ffc8:	2301      	movs	r3, #1
2000ffca:	e044      	b.n	20010056 <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2000ffcc:	68fb      	ldr	r3, [r7, #12]
2000ffce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
2000ffd2:	2b01      	cmp	r3, #1
2000ffd4:	d101      	bne.n	2000ffda <HAL_MDMA_RegisterCallback+0x2a>
2000ffd6:	2302      	movs	r3, #2
2000ffd8:	e03d      	b.n	20010056 <HAL_MDMA_RegisterCallback+0xa6>
2000ffda:	68fb      	ldr	r3, [r7, #12]
2000ffdc:	2201      	movs	r2, #1
2000ffde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2000ffe2:	68fb      	ldr	r3, [r7, #12]
2000ffe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2000ffe8:	b2db      	uxtb	r3, r3
2000ffea:	2b01      	cmp	r3, #1
2000ffec:	d12a      	bne.n	20010044 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
2000ffee:	7afb      	ldrb	r3, [r7, #11]
2000fff0:	2b05      	cmp	r3, #5
2000fff2:	d82a      	bhi.n	2001004a <HAL_MDMA_RegisterCallback+0x9a>
2000fff4:	a201      	add	r2, pc, #4	@ (adr r2, 2000fffc <HAL_MDMA_RegisterCallback+0x4c>)
2000fff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000fffa:	bf00      	nop
2000fffc:	20010015 	.word	0x20010015
20010000:	2001001d 	.word	0x2001001d
20010004:	20010025 	.word	0x20010025
20010008:	2001002d 	.word	0x2001002d
2001000c:	20010035 	.word	0x20010035
20010010:	2001003d 	.word	0x2001003d
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
20010014:	68fb      	ldr	r3, [r7, #12]
20010016:	687a      	ldr	r2, [r7, #4]
20010018:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
2001001a:	e017      	b.n	2001004c <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
2001001c:	68fb      	ldr	r3, [r7, #12]
2001001e:	687a      	ldr	r2, [r7, #4]
20010020:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
20010022:	e013      	b.n	2001004c <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
20010024:	68fb      	ldr	r3, [r7, #12]
20010026:	687a      	ldr	r2, [r7, #4]
20010028:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
2001002a:	e00f      	b.n	2001004c <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
2001002c:	68fb      	ldr	r3, [r7, #12]
2001002e:	687a      	ldr	r2, [r7, #4]
20010030:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
20010032:	e00b      	b.n	2001004c <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
20010034:	68fb      	ldr	r3, [r7, #12]
20010036:	687a      	ldr	r2, [r7, #4]
20010038:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
2001003a:	e007      	b.n	2001004c <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
2001003c:	68fb      	ldr	r3, [r7, #12]
2001003e:	687a      	ldr	r2, [r7, #4]
20010040:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
20010042:	e003      	b.n	2001004c <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
20010044:	2301      	movs	r3, #1
20010046:	75fb      	strb	r3, [r7, #23]
20010048:	e000      	b.n	2001004c <HAL_MDMA_RegisterCallback+0x9c>
      break;
2001004a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2001004c:	68fb      	ldr	r3, [r7, #12]
2001004e:	2200      	movs	r2, #0
20010050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
20010054:	7dfb      	ldrb	r3, [r7, #23]
}
20010056:	4618      	mov	r0, r3
20010058:	371c      	adds	r7, #28
2001005a:	46bd      	mov	sp, r7
2001005c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010060:	4770      	bx	lr
20010062:	bf00      	nop

20010064 <HAL_MDMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_MDMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID)
{
20010064:	b480      	push	{r7}
20010066:	b085      	sub	sp, #20
20010068:	af00      	add	r7, sp, #0
2001006a:	6078      	str	r0, [r7, #4]
2001006c:	460b      	mov	r3, r1
2001006e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
20010070:	2300      	movs	r3, #0
20010072:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
20010074:	687b      	ldr	r3, [r7, #4]
20010076:	2b00      	cmp	r3, #0
20010078:	d101      	bne.n	2001007e <HAL_MDMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
2001007a:	2301      	movs	r3, #1
2001007c:	e059      	b.n	20010132 <HAL_MDMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2001007e:	687b      	ldr	r3, [r7, #4]
20010080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
20010084:	2b01      	cmp	r3, #1
20010086:	d101      	bne.n	2001008c <HAL_MDMA_UnRegisterCallback+0x28>
20010088:	2302      	movs	r3, #2
2001008a:	e052      	b.n	20010132 <HAL_MDMA_UnRegisterCallback+0xce>
2001008c:	687b      	ldr	r3, [r7, #4]
2001008e:	2201      	movs	r2, #1
20010090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
20010094:	687b      	ldr	r3, [r7, #4]
20010096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2001009a:	b2db      	uxtb	r3, r3
2001009c:	2b01      	cmp	r3, #1
2001009e:	d141      	bne.n	20010124 <HAL_MDMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
200100a0:	78fb      	ldrb	r3, [r7, #3]
200100a2:	2b06      	cmp	r3, #6
200100a4:	d83b      	bhi.n	2001011e <HAL_MDMA_UnRegisterCallback+0xba>
200100a6:	a201      	add	r2, pc, #4	@ (adr r2, 200100ac <HAL_MDMA_UnRegisterCallback+0x48>)
200100a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200100ac:	200100c9 	.word	0x200100c9
200100b0:	200100d1 	.word	0x200100d1
200100b4:	200100d9 	.word	0x200100d9
200100b8:	200100e1 	.word	0x200100e1
200100bc:	200100e9 	.word	0x200100e9
200100c0:	200100f1 	.word	0x200100f1
200100c4:	200100f9 	.word	0x200100f9
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = NULL;
200100c8:	687b      	ldr	r3, [r7, #4]
200100ca:	2200      	movs	r2, #0
200100cc:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
200100ce:	e02b      	b.n	20010128 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = NULL;
200100d0:	687b      	ldr	r3, [r7, #4]
200100d2:	2200      	movs	r2, #0
200100d4:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
200100d6:	e027      	b.n	20010128 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = NULL;
200100d8:	687b      	ldr	r3, [r7, #4]
200100da:	2200      	movs	r2, #0
200100dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
200100de:	e023      	b.n	20010128 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = NULL;
200100e0:	687b      	ldr	r3, [r7, #4]
200100e2:	2200      	movs	r2, #0
200100e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
200100e6:	e01f      	b.n	20010128 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = NULL;
200100e8:	687b      	ldr	r3, [r7, #4]
200100ea:	2200      	movs	r2, #0
200100ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
200100ee:	e01b      	b.n	20010128 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = NULL;
200100f0:	687b      	ldr	r3, [r7, #4]
200100f2:	2200      	movs	r2, #0
200100f4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
200100f6:	e017      	b.n	20010128 <HAL_MDMA_UnRegisterCallback+0xc4>

    case   HAL_MDMA_XFER_ALL_CB_ID:
      hmdma->XferCpltCallback = NULL;
200100f8:	687b      	ldr	r3, [r7, #4]
200100fa:	2200      	movs	r2, #0
200100fc:	645a      	str	r2, [r3, #68]	@ 0x44
      hmdma->XferBufferCpltCallback = NULL;
200100fe:	687b      	ldr	r3, [r7, #4]
20010100:	2200      	movs	r2, #0
20010102:	649a      	str	r2, [r3, #72]	@ 0x48
      hmdma->XferBlockCpltCallback = NULL;
20010104:	687b      	ldr	r3, [r7, #4]
20010106:	2200      	movs	r2, #0
20010108:	64da      	str	r2, [r3, #76]	@ 0x4c
      hmdma->XferRepeatBlockCpltCallback = NULL;
2001010a:	687b      	ldr	r3, [r7, #4]
2001010c:	2200      	movs	r2, #0
2001010e:	651a      	str	r2, [r3, #80]	@ 0x50
      hmdma->XferErrorCallback = NULL;
20010110:	687b      	ldr	r3, [r7, #4]
20010112:	2200      	movs	r2, #0
20010114:	655a      	str	r2, [r3, #84]	@ 0x54
      hmdma->XferAbortCallback = NULL;
20010116:	687b      	ldr	r3, [r7, #4]
20010118:	2200      	movs	r2, #0
2001011a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
2001011c:	e004      	b.n	20010128 <HAL_MDMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
2001011e:	2301      	movs	r3, #1
20010120:	73fb      	strb	r3, [r7, #15]
      break;
20010122:	e001      	b.n	20010128 <HAL_MDMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
20010124:	2301      	movs	r3, #1
20010126:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
20010128:	687b      	ldr	r3, [r7, #4]
2001012a:	2200      	movs	r2, #0
2001012c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
20010130:	7bfb      	ldrb	r3, [r7, #15]
}
20010132:	4618      	mov	r0, r3
20010134:	3714      	adds	r7, #20
20010136:	46bd      	mov	sp, r7
20010138:	f85d 7b04 	ldr.w	r7, [sp], #4
2001013c:	4770      	bx	lr
2001013e:	bf00      	nop

20010140 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
20010140:	b480      	push	{r7}
20010142:	b085      	sub	sp, #20
20010144:	af00      	add	r7, sp, #0
20010146:	6078      	str	r0, [r7, #4]
20010148:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
2001014a:	687b      	ldr	r3, [r7, #4]
2001014c:	2b00      	cmp	r3, #0
2001014e:	d002      	beq.n	20010156 <HAL_MDMA_LinkedList_CreateNode+0x16>
20010150:	683b      	ldr	r3, [r7, #0]
20010152:	2b00      	cmp	r3, #0
20010154:	d101      	bne.n	2001015a <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
20010156:	2301      	movs	r3, #1
20010158:	e0c8      	b.n	200102ec <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
2001015a:	687b      	ldr	r3, [r7, #4]
2001015c:	2200      	movs	r2, #0
2001015e:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
20010160:	687b      	ldr	r3, [r7, #4]
20010162:	2200      	movs	r2, #0
20010164:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
20010166:	687b      	ldr	r3, [r7, #4]
20010168:	2200      	movs	r2, #0
2001016a:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
2001016c:	687b      	ldr	r3, [r7, #4]
2001016e:	2200      	movs	r2, #0
20010170:	625a      	str	r2, [r3, #36]	@ 0x24
  pNode->Reserved = 0;
20010172:	687b      	ldr	r3, [r7, #4]
20010174:	2200      	movs	r2, #0
20010176:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
20010178:	683b      	ldr	r3, [r7, #0]
2001017a:	691a      	ldr	r2, [r3, #16]
2001017c:	683b      	ldr	r3, [r7, #0]
2001017e:	695b      	ldr	r3, [r3, #20]
20010180:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
20010182:	683b      	ldr	r3, [r7, #0]
20010184:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
20010186:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
20010188:	683b      	ldr	r3, [r7, #0]
2001018a:	69db      	ldr	r3, [r3, #28]
2001018c:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2001018e:	683b      	ldr	r3, [r7, #0]
20010190:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
20010192:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
20010194:	683b      	ldr	r3, [r7, #0]
20010196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20010198:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
2001019a:	683b      	ldr	r3, [r7, #0]
2001019c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2001019e:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
200101a0:	683b      	ldr	r3, [r7, #0]
200101a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200101a4:	3b01      	subs	r3, #1
200101a6:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
200101a8:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
200101aa:	683b      	ldr	r3, [r7, #0]
200101ac:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
200101ae:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
200101b0:	687b      	ldr	r3, [r7, #4]
200101b2:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
200101b4:	683b      	ldr	r3, [r7, #0]
200101b6:	681b      	ldr	r3, [r3, #0]
200101b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
200101bc:	d105      	bne.n	200101ca <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
200101be:	687b      	ldr	r3, [r7, #4]
200101c0:	681b      	ldr	r3, [r3, #0]
200101c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
200101c6:	687b      	ldr	r3, [r7, #4]
200101c8:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
200101ca:	683b      	ldr	r3, [r7, #0]
200101cc:	681b      	ldr	r3, [r3, #0]
200101ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
200101d2:	d003      	beq.n	200101dc <HAL_MDMA_LinkedList_CreateNode+0x9c>
200101d4:	683b      	ldr	r3, [r7, #0]
200101d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200101d8:	2b00      	cmp	r3, #0
200101da:	d005      	beq.n	200101e8 <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
200101dc:	687b      	ldr	r3, [r7, #4]
200101de:	681b      	ldr	r3, [r3, #0]
200101e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
200101e4:	687b      	ldr	r3, [r7, #4]
200101e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
200101e8:	683b      	ldr	r3, [r7, #0]
200101ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200101ec:	3b01      	subs	r3, #1
200101ee:	051a      	lsls	r2, r3, #20
200101f0:	687b      	ldr	r3, [r7, #4]
200101f2:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
200101f4:	683b      	ldr	r3, [r7, #0]
200101f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200101f8:	2b00      	cmp	r3, #0
200101fa:	da0e      	bge.n	2001021a <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
200101fc:	687b      	ldr	r3, [r7, #4]
200101fe:	685b      	ldr	r3, [r3, #4]
20010200:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
20010204:	687b      	ldr	r3, [r7, #4]
20010206:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
20010208:	683b      	ldr	r3, [r7, #0]
2001020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2001020c:	425b      	negs	r3, r3
2001020e:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
20010210:	68fb      	ldr	r3, [r7, #12]
20010212:	b29a      	uxth	r2, r3
20010214:	687b      	ldr	r3, [r7, #4]
20010216:	611a      	str	r2, [r3, #16]
20010218:	e004      	b.n	20010224 <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
2001021a:	683b      	ldr	r3, [r7, #0]
2001021c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2001021e:	b29a      	uxth	r2, r3
20010220:	687b      	ldr	r3, [r7, #4]
20010222:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
20010224:	683b      	ldr	r3, [r7, #0]
20010226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20010228:	2b00      	cmp	r3, #0
2001022a:	da11      	bge.n	20010250 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
2001022c:	687b      	ldr	r3, [r7, #4]
2001022e:	685b      	ldr	r3, [r3, #4]
20010230:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
20010234:	687b      	ldr	r3, [r7, #4]
20010236:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
20010238:	683b      	ldr	r3, [r7, #0]
2001023a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2001023c:	425b      	negs	r3, r3
2001023e:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
20010240:	687b      	ldr	r3, [r7, #4]
20010242:	691a      	ldr	r2, [r3, #16]
20010244:	68fb      	ldr	r3, [r7, #12]
20010246:	041b      	lsls	r3, r3, #16
20010248:	431a      	orrs	r2, r3
2001024a:	687b      	ldr	r3, [r7, #4]
2001024c:	611a      	str	r2, [r3, #16]
2001024e:	e007      	b.n	20010260 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
20010250:	687b      	ldr	r3, [r7, #4]
20010252:	691a      	ldr	r2, [r3, #16]
20010254:	683b      	ldr	r3, [r7, #0]
20010256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20010258:	041b      	lsls	r3, r3, #16
2001025a:	431a      	orrs	r2, r3
2001025c:	687b      	ldr	r3, [r7, #4]
2001025e:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
20010260:	687b      	ldr	r3, [r7, #4]
20010262:	685a      	ldr	r2, [r3, #4]
20010264:	683b      	ldr	r3, [r7, #0]
20010266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20010268:	431a      	orrs	r2, r3
2001026a:	687b      	ldr	r3, [r7, #4]
2001026c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
2001026e:	683b      	ldr	r3, [r7, #0]
20010270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20010272:	687b      	ldr	r3, [r7, #4]
20010274:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
20010276:	683b      	ldr	r3, [r7, #0]
20010278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
2001027a:	687b      	ldr	r3, [r7, #4]
2001027c:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
2001027e:	683b      	ldr	r3, [r7, #0]
20010280:	681b      	ldr	r3, [r3, #0]
20010282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20010286:	d00c      	beq.n	200102a2 <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
20010288:	683b      	ldr	r3, [r7, #0]
2001028a:	681b      	ldr	r3, [r3, #0]
2001028c:	b2da      	uxtb	r2, r3
2001028e:	687b      	ldr	r3, [r7, #4]
20010290:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
20010292:	683b      	ldr	r3, [r7, #0]
20010294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
20010296:	687b      	ldr	r3, [r7, #4]
20010298:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
2001029a:	683b      	ldr	r3, [r7, #0]
2001029c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
2001029e:	687b      	ldr	r3, [r7, #4]
200102a0:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
200102a2:	683b      	ldr	r3, [r7, #0]
200102a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200102a6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
200102aa:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
200102ac:	68bb      	ldr	r3, [r7, #8]
200102ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
200102b2:	d002      	beq.n	200102ba <HAL_MDMA_LinkedList_CreateNode+0x17a>
200102b4:	68bb      	ldr	r3, [r7, #8]
200102b6:	2b00      	cmp	r3, #0
200102b8:	d105      	bne.n	200102c6 <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
200102ba:	687b      	ldr	r3, [r7, #4]
200102bc:	699b      	ldr	r3, [r3, #24]
200102be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
200102c2:	687b      	ldr	r3, [r7, #4]
200102c4:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
200102c6:	683b      	ldr	r3, [r7, #0]
200102c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200102ca:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
200102ce:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
200102d0:	68bb      	ldr	r3, [r7, #8]
200102d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
200102d6:	d002      	beq.n	200102de <HAL_MDMA_LinkedList_CreateNode+0x19e>
200102d8:	68bb      	ldr	r3, [r7, #8]
200102da:	2b00      	cmp	r3, #0
200102dc:	d105      	bne.n	200102ea <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
200102de:	687b      	ldr	r3, [r7, #4]
200102e0:	699b      	ldr	r3, [r3, #24]
200102e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
200102e6:	687b      	ldr	r3, [r7, #4]
200102e8:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
200102ea:	2300      	movs	r3, #0
}
200102ec:	4618      	mov	r0, r3
200102ee:	3714      	adds	r7, #20
200102f0:	46bd      	mov	sp, r7
200102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200102f6:	4770      	bx	lr

200102f8 <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, MDMA_LinkNodeTypeDef *pPrevNode)
{
200102f8:	b480      	push	{r7}
200102fa:	b089      	sub	sp, #36	@ 0x24
200102fc:	af00      	add	r7, sp, #0
200102fe:	60f8      	str	r0, [r7, #12]
20010300:	60b9      	str	r1, [r7, #8]
20010302:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
20010304:	2300      	movs	r3, #0
20010306:	61bb      	str	r3, [r7, #24]
20010308:	2300      	movs	r3, #0
2001030a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
2001030c:	2300      	movs	r3, #0
2001030e:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
20010310:	68fb      	ldr	r3, [r7, #12]
20010312:	2b00      	cmp	r3, #0
20010314:	d002      	beq.n	2001031c <HAL_MDMA_LinkedList_AddNode+0x24>
20010316:	68bb      	ldr	r3, [r7, #8]
20010318:	2b00      	cmp	r3, #0
2001031a:	d101      	bne.n	20010320 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
2001031c:	2301      	movs	r3, #1
2001031e:	e0a9      	b.n	20010474 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
20010320:	68fb      	ldr	r3, [r7, #12]
20010322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
20010326:	2b01      	cmp	r3, #1
20010328:	d101      	bne.n	2001032e <HAL_MDMA_LinkedList_AddNode+0x36>
2001032a:	2302      	movs	r3, #2
2001032c:	e0a2      	b.n	20010474 <HAL_MDMA_LinkedList_AddNode+0x17c>
2001032e:	68fb      	ldr	r3, [r7, #12]
20010330:	2201      	movs	r2, #1
20010332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
20010336:	68fb      	ldr	r3, [r7, #12]
20010338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2001033c:	b2db      	uxtb	r3, r3
2001033e:	2b01      	cmp	r3, #1
20010340:	f040 8093 	bne.w	2001046a <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
20010344:	68fb      	ldr	r3, [r7, #12]
20010346:	2202      	movs	r2, #2
20010348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
2001034c:	68fb      	ldr	r3, [r7, #12]
2001034e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20010350:	2b00      	cmp	r3, #0
20010352:	d116      	bne.n	20010382 <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
20010354:	687b      	ldr	r3, [r7, #4]
20010356:	2b00      	cmp	r3, #0
20010358:	d110      	bne.n	2001037c <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
2001035a:	68fb      	ldr	r3, [r7, #12]
2001035c:	681b      	ldr	r3, [r3, #0]
2001035e:	68ba      	ldr	r2, [r7, #8]
20010360:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
20010362:	68fb      	ldr	r3, [r7, #12]
20010364:	68ba      	ldr	r2, [r7, #8]
20010366:	65da      	str	r2, [r3, #92]	@ 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
20010368:	68bb      	ldr	r3, [r7, #8]
2001036a:	2200      	movs	r2, #0
2001036c:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
2001036e:	68fb      	ldr	r3, [r7, #12]
20010370:	68ba      	ldr	r2, [r7, #8]
20010372:	661a      	str	r2, [r3, #96]	@ 0x60

        hmdma->LinkedListNodeCounter = 1;
20010374:	68fb      	ldr	r3, [r7, #12]
20010376:	2201      	movs	r2, #1
20010378:	665a      	str	r2, [r3, #100]	@ 0x64
2001037a:	e06c      	b.n	20010456 <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
2001037c:	2301      	movs	r3, #1
2001037e:	74fb      	strb	r3, [r7, #19]
20010380:	e069      	b.n	20010456 <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
20010382:	68fb      	ldr	r3, [r7, #12]
20010384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20010386:	68ba      	ldr	r2, [r7, #8]
20010388:	429a      	cmp	r2, r3
2001038a:	d062      	beq.n	20010452 <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
2001038c:	68fb      	ldr	r3, [r7, #12]
2001038e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20010390:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
20010392:	e00c      	b.n	200103ae <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
20010394:	69fb      	ldr	r3, [r7, #28]
20010396:	695a      	ldr	r2, [r3, #20]
20010398:	68bb      	ldr	r3, [r7, #8]
2001039a:	429a      	cmp	r2, r3
2001039c:	d101      	bne.n	200103a2 <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
2001039e:	2301      	movs	r3, #1
200103a0:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
200103a2:	69fb      	ldr	r3, [r7, #28]
200103a4:	695b      	ldr	r3, [r3, #20]
200103a6:	61fb      	str	r3, [r7, #28]
        counter++;
200103a8:	69bb      	ldr	r3, [r7, #24]
200103aa:	3301      	adds	r3, #1
200103ac:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
200103ae:	68fb      	ldr	r3, [r7, #12]
200103b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200103b2:	69ba      	ldr	r2, [r7, #24]
200103b4:	429a      	cmp	r2, r3
200103b6:	d202      	bcs.n	200103be <HAL_MDMA_LinkedList_AddNode+0xc6>
200103b8:	7cfb      	ldrb	r3, [r7, #19]
200103ba:	2b00      	cmp	r3, #0
200103bc:	d0ea      	beq.n	20010394 <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
200103be:	7cfb      	ldrb	r3, [r7, #19]
200103c0:	2b00      	cmp	r3, #0
200103c2:	d148      	bne.n	20010456 <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
200103c4:	68fb      	ldr	r3, [r7, #12]
200103c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200103c8:	687a      	ldr	r2, [r7, #4]
200103ca:	429a      	cmp	r2, r3
200103cc:	d002      	beq.n	200103d4 <HAL_MDMA_LinkedList_AddNode+0xdc>
200103ce:	687b      	ldr	r3, [r7, #4]
200103d0:	2b00      	cmp	r3, #0
200103d2:	d111      	bne.n	200103f8 <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
200103d4:	68fb      	ldr	r3, [r7, #12]
200103d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200103d8:	695a      	ldr	r2, [r3, #20]
200103da:	68bb      	ldr	r3, [r7, #8]
200103dc:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
200103de:	68fb      	ldr	r3, [r7, #12]
200103e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200103e2:	68ba      	ldr	r2, [r7, #8]
200103e4:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
200103e6:	68fb      	ldr	r3, [r7, #12]
200103e8:	68ba      	ldr	r2, [r7, #8]
200103ea:	661a      	str	r2, [r3, #96]	@ 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
200103ec:	68fb      	ldr	r3, [r7, #12]
200103ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200103f0:	1c5a      	adds	r2, r3, #1
200103f2:	68fb      	ldr	r3, [r7, #12]
200103f4:	665a      	str	r2, [r3, #100]	@ 0x64
200103f6:	e02e      	b.n	20010456 <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
200103f8:	68fb      	ldr	r3, [r7, #12]
200103fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200103fc:	61fb      	str	r3, [r7, #28]
          counter = 0;
200103fe:	2300      	movs	r3, #0
20010400:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
20010402:	e018      	b.n	20010436 <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
20010404:	69bb      	ldr	r3, [r7, #24]
20010406:	3301      	adds	r3, #1
20010408:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
2001040a:	69fa      	ldr	r2, [r7, #28]
2001040c:	687b      	ldr	r3, [r7, #4]
2001040e:	429a      	cmp	r2, r3
20010410:	d10e      	bne.n	20010430 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
20010412:	69fb      	ldr	r3, [r7, #28]
20010414:	695a      	ldr	r2, [r3, #20]
20010416:	68bb      	ldr	r3, [r7, #8]
20010418:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
2001041a:	68ba      	ldr	r2, [r7, #8]
2001041c:	69fb      	ldr	r3, [r7, #28]
2001041e:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
20010420:	68fb      	ldr	r3, [r7, #12]
20010422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20010424:	1c5a      	adds	r2, r3, #1
20010426:	68fb      	ldr	r3, [r7, #12]
20010428:	665a      	str	r2, [r3, #100]	@ 0x64
              nodeInserted = 1;
2001042a:	2301      	movs	r3, #1
2001042c:	617b      	str	r3, [r7, #20]
2001042e:	e002      	b.n	20010436 <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
20010430:	69fb      	ldr	r3, [r7, #28]
20010432:	695b      	ldr	r3, [r3, #20]
20010434:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
20010436:	68fb      	ldr	r3, [r7, #12]
20010438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2001043a:	69ba      	ldr	r2, [r7, #24]
2001043c:	429a      	cmp	r2, r3
2001043e:	d202      	bcs.n	20010446 <HAL_MDMA_LinkedList_AddNode+0x14e>
20010440:	697b      	ldr	r3, [r7, #20]
20010442:	2b00      	cmp	r3, #0
20010444:	d0de      	beq.n	20010404 <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
20010446:	697b      	ldr	r3, [r7, #20]
20010448:	2b00      	cmp	r3, #0
2001044a:	d104      	bne.n	20010456 <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
2001044c:	2301      	movs	r3, #1
2001044e:	74fb      	strb	r3, [r7, #19]
20010450:	e001      	b.n	20010456 <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
20010452:	2301      	movs	r3, #1
20010454:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
20010456:	68fb      	ldr	r3, [r7, #12]
20010458:	2200      	movs	r2, #0
2001045a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
2001045e:	68fb      	ldr	r3, [r7, #12]
20010460:	2201      	movs	r2, #1
20010462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
20010466:	7cfb      	ldrb	r3, [r7, #19]
20010468:	e004      	b.n	20010474 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2001046a:	68fb      	ldr	r3, [r7, #12]
2001046c:	2200      	movs	r2, #0
2001046e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
20010472:	2302      	movs	r3, #2
  }
}
20010474:	4618      	mov	r0, r3
20010476:	3724      	adds	r7, #36	@ 0x24
20010478:	46bd      	mov	sp, r7
2001047a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001047e:	4770      	bx	lr

20010480 <HAL_MDMA_LinkedList_RemoveNode>:
  *                 to be removed from the list.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNode)
{
20010480:	b480      	push	{r7}
20010482:	b087      	sub	sp, #28
20010484:	af00      	add	r7, sp, #0
20010486:	6078      	str	r0, [r7, #4]
20010488:	6039      	str	r1, [r7, #0]
  MDMA_LinkNodeTypeDef *ptmpNode;
  uint32_t counter = 0, nodeDeleted = 0;
2001048a:	2300      	movs	r3, #0
2001048c:	613b      	str	r3, [r7, #16]
2001048e:	2300      	movs	r3, #0
20010490:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
20010492:	2300      	movs	r3, #0
20010494:	72fb      	strb	r3, [r7, #11]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNode == NULL))
20010496:	687b      	ldr	r3, [r7, #4]
20010498:	2b00      	cmp	r3, #0
2001049a:	d002      	beq.n	200104a2 <HAL_MDMA_LinkedList_RemoveNode+0x22>
2001049c:	683b      	ldr	r3, [r7, #0]
2001049e:	2b00      	cmp	r3, #0
200104a0:	d101      	bne.n	200104a6 <HAL_MDMA_LinkedList_RemoveNode+0x26>
  {
    return HAL_ERROR;
200104a2:	2301      	movs	r3, #1
200104a4:	e099      	b.n	200105da <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
200104a6:	687b      	ldr	r3, [r7, #4]
200104a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
200104ac:	2b01      	cmp	r3, #1
200104ae:	d101      	bne.n	200104b4 <HAL_MDMA_LinkedList_RemoveNode+0x34>
200104b0:	2302      	movs	r3, #2
200104b2:	e092      	b.n	200105da <HAL_MDMA_LinkedList_RemoveNode+0x15a>
200104b4:	687b      	ldr	r3, [r7, #4]
200104b6:	2201      	movs	r2, #1
200104b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
200104bc:	687b      	ldr	r3, [r7, #4]
200104be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
200104c2:	b2db      	uxtb	r3, r3
200104c4:	2b01      	cmp	r3, #1
200104c6:	f040 8083 	bne.w	200105d0 <HAL_MDMA_LinkedList_RemoveNode+0x150>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
200104ca:	687b      	ldr	r3, [r7, #4]
200104cc:	2202      	movs	r2, #2
200104ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
200104d2:	687b      	ldr	r3, [r7, #4]
200104d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200104d6:	2b00      	cmp	r3, #0
200104d8:	d007      	beq.n	200104ea <HAL_MDMA_LinkedList_RemoveNode+0x6a>
200104da:	687b      	ldr	r3, [r7, #4]
200104dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200104de:	2b00      	cmp	r3, #0
200104e0:	d003      	beq.n	200104ea <HAL_MDMA_LinkedList_RemoveNode+0x6a>
200104e2:	687b      	ldr	r3, [r7, #4]
200104e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200104e6:	2b00      	cmp	r3, #0
200104e8:	d102      	bne.n	200104f0 <HAL_MDMA_LinkedList_RemoveNode+0x70>
    {
      hal_status = HAL_ERROR;
200104ea:	2301      	movs	r3, #1
200104ec:	72fb      	strb	r3, [r7, #11]
200104ee:	e065      	b.n	200105bc <HAL_MDMA_LinkedList_RemoveNode+0x13c>
    }
    else if(hmdma->FirstLinkedListNodeAddress == pNode) /* Deleting first node */
200104f0:	687b      	ldr	r3, [r7, #4]
200104f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200104f4:	683a      	ldr	r2, [r7, #0]
200104f6:	429a      	cmp	r2, r3
200104f8:	d130      	bne.n	2001055c <HAL_MDMA_LinkedList_RemoveNode+0xdc>
    {
      /* Delete 1st node */
      if(hmdma->LastLinkedListNodeAddress == pNode)
200104fa:	687b      	ldr	r3, [r7, #4]
200104fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200104fe:	683a      	ldr	r2, [r7, #0]
20010500:	429a      	cmp	r2, r3
20010502:	d10d      	bne.n	20010520 <HAL_MDMA_LinkedList_RemoveNode+0xa0>
      {
        /*if the last node is at the same time the first one (1 single node after the init node 0)
        then update the last node too */

        hmdma->FirstLinkedListNodeAddress = 0;
20010504:	687b      	ldr	r3, [r7, #4]
20010506:	2200      	movs	r2, #0
20010508:	65da      	str	r2, [r3, #92]	@ 0x5c
        hmdma->LastLinkedListNodeAddress  = 0;
2001050a:	687b      	ldr	r3, [r7, #4]
2001050c:	2200      	movs	r2, #0
2001050e:	661a      	str	r2, [r3, #96]	@ 0x60
        hmdma->LinkedListNodeCounter = 0;
20010510:	687b      	ldr	r3, [r7, #4]
20010512:	2200      	movs	r2, #0
20010514:	665a      	str	r2, [r3, #100]	@ 0x64

        hmdma->Instance->CLAR = 0;
20010516:	687b      	ldr	r3, [r7, #4]
20010518:	681b      	ldr	r3, [r3, #0]
2001051a:	2200      	movs	r2, #0
2001051c:	625a      	str	r2, [r3, #36]	@ 0x24
2001051e:	e04d      	b.n	200105bc <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
      else
      {
        if((uint32_t)hmdma->FirstLinkedListNodeAddress == hmdma->LastLinkedListNodeAddress->CLAR)
20010520:	687b      	ldr	r3, [r7, #4]
20010522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20010524:	461a      	mov	r2, r3
20010526:	687b      	ldr	r3, [r7, #4]
20010528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2001052a:	695b      	ldr	r3, [r3, #20]
2001052c:	429a      	cmp	r2, r3
2001052e:	d104      	bne.n	2001053a <HAL_MDMA_LinkedList_RemoveNode+0xba>
        {
          /* if last node is looping to first (circular list) one update the last node connection */
          hmdma->LastLinkedListNodeAddress->CLAR = pNode->CLAR;
20010530:	687b      	ldr	r3, [r7, #4]
20010532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20010534:	683a      	ldr	r2, [r7, #0]
20010536:	6952      	ldr	r2, [r2, #20]
20010538:	615a      	str	r2, [r3, #20]
        }

        /* if deleting the first node after the initialization
        connect the next node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = pNode->CLAR;
2001053a:	687b      	ldr	r3, [r7, #4]
2001053c:	681b      	ldr	r3, [r3, #0]
2001053e:	683a      	ldr	r2, [r7, #0]
20010540:	6952      	ldr	r2, [r2, #20]
20010542:	625a      	str	r2, [r3, #36]	@ 0x24
        hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
20010544:	687b      	ldr	r3, [r7, #4]
20010546:	681b      	ldr	r3, [r3, #0]
20010548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2001054a:	461a      	mov	r2, r3
2001054c:	687b      	ldr	r3, [r7, #4]
2001054e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Update the Handle node counter */
        hmdma->LinkedListNodeCounter--;
20010550:	687b      	ldr	r3, [r7, #4]
20010552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20010554:	1e5a      	subs	r2, r3, #1
20010556:	687b      	ldr	r3, [r7, #4]
20010558:	665a      	str	r2, [r3, #100]	@ 0x64
2001055a:	e02f      	b.n	200105bc <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
    }
    else /* Deleting any other node */
    {
      /*Deleted node is not the first one : find it  */
      ptmpNode = hmdma->FirstLinkedListNodeAddress;
2001055c:	687b      	ldr	r3, [r7, #4]
2001055e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20010560:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
20010562:	e01e      	b.n	200105a2 <HAL_MDMA_LinkedList_RemoveNode+0x122>
      {
        counter++;
20010564:	693b      	ldr	r3, [r7, #16]
20010566:	3301      	adds	r3, #1
20010568:	613b      	str	r3, [r7, #16]
        if(ptmpNode->CLAR == ((uint32_t)pNode))
2001056a:	697b      	ldr	r3, [r7, #20]
2001056c:	695a      	ldr	r2, [r3, #20]
2001056e:	683b      	ldr	r3, [r7, #0]
20010570:	429a      	cmp	r2, r3
20010572:	d113      	bne.n	2001059c <HAL_MDMA_LinkedList_RemoveNode+0x11c>
        {
          /* if deleting the last node */
          if(pNode == hmdma->LastLinkedListNodeAddress)
20010574:	687b      	ldr	r3, [r7, #4]
20010576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20010578:	683a      	ldr	r2, [r7, #0]
2001057a:	429a      	cmp	r2, r3
2001057c:	d102      	bne.n	20010584 <HAL_MDMA_LinkedList_RemoveNode+0x104>
          {
            /*Update the linked list last node address in the handle*/
            hmdma->LastLinkedListNodeAddress = ptmpNode;
2001057e:	687b      	ldr	r3, [r7, #4]
20010580:	697a      	ldr	r2, [r7, #20]
20010582:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          /* update the next node link after deleting pMDMA_LinkedListNode */
          ptmpNode->CLAR = pNode->CLAR;
20010584:	683b      	ldr	r3, [r7, #0]
20010586:	695a      	ldr	r2, [r3, #20]
20010588:	697b      	ldr	r3, [r7, #20]
2001058a:	615a      	str	r2, [r3, #20]
          nodeDeleted = 1;
2001058c:	2301      	movs	r3, #1
2001058e:	60fb      	str	r3, [r7, #12]
          /* Update the Handle node counter */
          hmdma->LinkedListNodeCounter--;
20010590:	687b      	ldr	r3, [r7, #4]
20010592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20010594:	1e5a      	subs	r2, r3, #1
20010596:	687b      	ldr	r3, [r7, #4]
20010598:	665a      	str	r2, [r3, #100]	@ 0x64
2001059a:	e002      	b.n	200105a2 <HAL_MDMA_LinkedList_RemoveNode+0x122>
        }
        else
        {
          ptmpNode = (MDMA_LinkNodeTypeDef *)ptmpNode->CLAR;
2001059c:	697b      	ldr	r3, [r7, #20]
2001059e:	695b      	ldr	r3, [r3, #20]
200105a0:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
200105a2:	687b      	ldr	r3, [r7, #4]
200105a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200105a6:	693a      	ldr	r2, [r7, #16]
200105a8:	429a      	cmp	r2, r3
200105aa:	d202      	bcs.n	200105b2 <HAL_MDMA_LinkedList_RemoveNode+0x132>
200105ac:	68fb      	ldr	r3, [r7, #12]
200105ae:	2b00      	cmp	r3, #0
200105b0:	d0d8      	beq.n	20010564 <HAL_MDMA_LinkedList_RemoveNode+0xe4>
        }
      }

      if(nodeDeleted == 0U)
200105b2:	68fb      	ldr	r3, [r7, #12]
200105b4:	2b00      	cmp	r3, #0
200105b6:	d101      	bne.n	200105bc <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      {
        /* last node reashed without finding the node to delete : return error */
        hal_status = HAL_ERROR;
200105b8:	2301      	movs	r3, #1
200105ba:	72fb      	strb	r3, [r7, #11]
      }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
200105bc:	687b      	ldr	r3, [r7, #4]
200105be:	2200      	movs	r2, #0
200105c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
200105c4:	687b      	ldr	r3, [r7, #4]
200105c6:	2201      	movs	r2, #1
200105c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
200105cc:	7afb      	ldrb	r3, [r7, #11]
200105ce:	e004      	b.n	200105da <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
200105d0:	687b      	ldr	r3, [r7, #4]
200105d2:	2200      	movs	r2, #0
200105d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
200105d8:	2302      	movs	r3, #2
  }
}
200105da:	4618      	mov	r0, r3
200105dc:	371c      	adds	r7, #28
200105de:	46bd      	mov	sp, r7
200105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
200105e4:	4770      	bx	lr

200105e6 <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
200105e6:	b480      	push	{r7}
200105e8:	b085      	sub	sp, #20
200105ea:	af00      	add	r7, sp, #0
200105ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
200105ee:	2300      	movs	r3, #0
200105f0:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
200105f2:	687b      	ldr	r3, [r7, #4]
200105f4:	2b00      	cmp	r3, #0
200105f6:	d101      	bne.n	200105fc <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
200105f8:	2301      	movs	r3, #1
200105fa:	e031      	b.n	20010660 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
200105fc:	687b      	ldr	r3, [r7, #4]
200105fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
20010602:	2b01      	cmp	r3, #1
20010604:	d101      	bne.n	2001060a <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
20010606:	2302      	movs	r3, #2
20010608:	e02a      	b.n	20010660 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
2001060a:	687b      	ldr	r3, [r7, #4]
2001060c:	2201      	movs	r2, #1
2001060e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
20010612:	687b      	ldr	r3, [r7, #4]
20010614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
20010618:	b2db      	uxtb	r3, r3
2001061a:	2b01      	cmp	r3, #1
2001061c:	d117      	bne.n	2001064e <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2001061e:	687b      	ldr	r3, [r7, #4]
20010620:	2202      	movs	r2, #2
20010622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
20010626:	687b      	ldr	r3, [r7, #4]
20010628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2001062a:	2b00      	cmp	r3, #0
2001062c:	d007      	beq.n	2001063e <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
2001062e:	687b      	ldr	r3, [r7, #4]
20010630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20010632:	2b00      	cmp	r3, #0
20010634:	d003      	beq.n	2001063e <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
20010636:	687b      	ldr	r3, [r7, #4]
20010638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2001063a:	2b00      	cmp	r3, #0
2001063c:	d102      	bne.n	20010644 <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
2001063e:	2301      	movs	r3, #1
20010640:	73fb      	strb	r3, [r7, #15]
20010642:	e004      	b.n	2001064e <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
20010644:	687b      	ldr	r3, [r7, #4]
20010646:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
20010648:	687b      	ldr	r3, [r7, #4]
2001064a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2001064c:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
2001064e:	687b      	ldr	r3, [r7, #4]
20010650:	2200      	movs	r2, #0
20010652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
20010656:	687b      	ldr	r3, [r7, #4]
20010658:	2201      	movs	r2, #1
2001065a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
2001065e:	7bfb      	ldrb	r3, [r7, #15]
}
20010660:	4618      	mov	r0, r3
20010662:	3714      	adds	r7, #20
20010664:	46bd      	mov	sp, r7
20010666:	f85d 7b04 	ldr.w	r7, [sp], #4
2001066a:	4770      	bx	lr

2001066c <HAL_MDMA_LinkedList_DisableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma)
{
2001066c:	b480      	push	{r7}
2001066e:	b085      	sub	sp, #20
20010670:	af00      	add	r7, sp, #0
20010672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
20010674:	2300      	movs	r3, #0
20010676:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
20010678:	687b      	ldr	r3, [r7, #4]
2001067a:	2b00      	cmp	r3, #0
2001067c:	d101      	bne.n	20010682 <HAL_MDMA_LinkedList_DisableCircularMode+0x16>
  {
    return HAL_ERROR;
2001067e:	2301      	movs	r3, #1
20010680:	e030      	b.n	200106e4 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
20010682:	687b      	ldr	r3, [r7, #4]
20010684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
20010688:	2b01      	cmp	r3, #1
2001068a:	d101      	bne.n	20010690 <HAL_MDMA_LinkedList_DisableCircularMode+0x24>
2001068c:	2302      	movs	r3, #2
2001068e:	e029      	b.n	200106e4 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
20010690:	687b      	ldr	r3, [r7, #4]
20010692:	2201      	movs	r2, #1
20010694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
20010698:	687b      	ldr	r3, [r7, #4]
2001069a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2001069e:	b2db      	uxtb	r3, r3
200106a0:	2b01      	cmp	r3, #1
200106a2:	d116      	bne.n	200106d2 <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
200106a4:	687b      	ldr	r3, [r7, #4]
200106a6:	2202      	movs	r2, #2
200106a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
200106ac:	687b      	ldr	r3, [r7, #4]
200106ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
200106b0:	2b00      	cmp	r3, #0
200106b2:	d007      	beq.n	200106c4 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
200106b4:	687b      	ldr	r3, [r7, #4]
200106b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200106b8:	2b00      	cmp	r3, #0
200106ba:	d003      	beq.n	200106c4 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
200106bc:	687b      	ldr	r3, [r7, #4]
200106be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
200106c0:	2b00      	cmp	r3, #0
200106c2:	d102      	bne.n	200106ca <HAL_MDMA_LinkedList_DisableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
200106c4:	2301      	movs	r3, #1
200106c6:	73fb      	strb	r3, [r7, #15]
200106c8:	e003      	b.n	200106d2 <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
    }
    else
    {
      /* to disable circular mode Last Node should be connected to NULL */
      hmdma->LastLinkedListNodeAddress->CLAR = 0;
200106ca:	687b      	ldr	r3, [r7, #4]
200106cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200106ce:	2200      	movs	r2, #0
200106d0:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
200106d2:	687b      	ldr	r3, [r7, #4]
200106d4:	2200      	movs	r2, #0
200106d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
200106da:	687b      	ldr	r3, [r7, #4]
200106dc:	2201      	movs	r2, #1
200106de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
200106e2:	7bfb      	ldrb	r3, [r7, #15]
}
200106e4:	4618      	mov	r0, r3
200106e6:	3714      	adds	r7, #20
200106e8:	46bd      	mov	sp, r7
200106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200106ee:	4770      	bx	lr

200106f0 <HAL_MDMA_Start>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
200106f0:	b580      	push	{r7, lr}
200106f2:	b086      	sub	sp, #24
200106f4:	af02      	add	r7, sp, #8
200106f6:	60f8      	str	r0, [r7, #12]
200106f8:	60b9      	str	r1, [r7, #8]
200106fa:	607a      	str	r2, [r7, #4]
200106fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
200106fe:	68fb      	ldr	r3, [r7, #12]
20010700:	2b00      	cmp	r3, #0
20010702:	d101      	bne.n	20010708 <HAL_MDMA_Start+0x18>
  {
    return HAL_ERROR;
20010704:	2301      	movs	r3, #1
20010706:	e044      	b.n	20010792 <HAL_MDMA_Start+0xa2>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
20010708:	68fb      	ldr	r3, [r7, #12]
2001070a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
2001070e:	2b01      	cmp	r3, #1
20010710:	d101      	bne.n	20010716 <HAL_MDMA_Start+0x26>
20010712:	2302      	movs	r3, #2
20010714:	e03d      	b.n	20010792 <HAL_MDMA_Start+0xa2>
20010716:	68fb      	ldr	r3, [r7, #12]
20010718:	2201      	movs	r2, #1
2001071a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2001071e:	68fb      	ldr	r3, [r7, #12]
20010720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
20010724:	b2db      	uxtb	r3, r3
20010726:	2b01      	cmp	r3, #1
20010728:	d12c      	bne.n	20010784 <HAL_MDMA_Start+0x94>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2001072a:	68fb      	ldr	r3, [r7, #12]
2001072c:	2202      	movs	r2, #2
2001072e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
20010732:	68fb      	ldr	r3, [r7, #12]
20010734:	2200      	movs	r2, #0
20010736:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
20010738:	68fb      	ldr	r3, [r7, #12]
2001073a:	681b      	ldr	r3, [r3, #0]
2001073c:	68da      	ldr	r2, [r3, #12]
2001073e:	68fb      	ldr	r3, [r7, #12]
20010740:	681b      	ldr	r3, [r3, #0]
20010742:	f022 0201 	bic.w	r2, r2, #1
20010746:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
20010748:	69bb      	ldr	r3, [r7, #24]
2001074a:	9300      	str	r3, [sp, #0]
2001074c:	683b      	ldr	r3, [r7, #0]
2001074e:	687a      	ldr	r2, [r7, #4]
20010750:	68b9      	ldr	r1, [r7, #8]
20010752:	68f8      	ldr	r0, [r7, #12]
20010754:	f000 fb96 	bl	20010e84 <MDMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
20010758:	68fb      	ldr	r3, [r7, #12]
2001075a:	681b      	ldr	r3, [r3, #0]
2001075c:	68da      	ldr	r2, [r3, #12]
2001075e:	68fb      	ldr	r3, [r7, #12]
20010760:	681b      	ldr	r3, [r3, #0]
20010762:	f042 0201 	orr.w	r2, r2, #1
20010766:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
20010768:	68fb      	ldr	r3, [r7, #12]
2001076a:	685b      	ldr	r3, [r3, #4]
2001076c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20010770:	d10e      	bne.n	20010790 <HAL_MDMA_Start+0xa0>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
20010772:	68fb      	ldr	r3, [r7, #12]
20010774:	681b      	ldr	r3, [r3, #0]
20010776:	68da      	ldr	r2, [r3, #12]
20010778:	68fb      	ldr	r3, [r7, #12]
2001077a:	681b      	ldr	r3, [r3, #0]
2001077c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
20010780:	60da      	str	r2, [r3, #12]
20010782:	e005      	b.n	20010790 <HAL_MDMA_Start+0xa0>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
20010784:	68fb      	ldr	r3, [r7, #12]
20010786:	2200      	movs	r2, #0
20010788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
2001078c:	2302      	movs	r3, #2
2001078e:	e000      	b.n	20010792 <HAL_MDMA_Start+0xa2>
  }

  return HAL_OK;
20010790:	2300      	movs	r3, #0
}
20010792:	4618      	mov	r0, r3
20010794:	3710      	adds	r7, #16
20010796:	46bd      	mov	sp, r7
20010798:	bd80      	pop	{r7, pc}

2001079a <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
2001079a:	b580      	push	{r7, lr}
2001079c:	b086      	sub	sp, #24
2001079e:	af02      	add	r7, sp, #8
200107a0:	60f8      	str	r0, [r7, #12]
200107a2:	60b9      	str	r1, [r7, #8]
200107a4:	607a      	str	r2, [r7, #4]
200107a6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
200107a8:	68fb      	ldr	r3, [r7, #12]
200107aa:	2b00      	cmp	r3, #0
200107ac:	d101      	bne.n	200107b2 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
200107ae:	2301      	movs	r3, #1
200107b0:	e070      	b.n	20010894 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
200107b2:	68fb      	ldr	r3, [r7, #12]
200107b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
200107b8:	2b01      	cmp	r3, #1
200107ba:	d101      	bne.n	200107c0 <HAL_MDMA_Start_IT+0x26>
200107bc:	2302      	movs	r3, #2
200107be:	e069      	b.n	20010894 <HAL_MDMA_Start_IT+0xfa>
200107c0:	68fb      	ldr	r3, [r7, #12]
200107c2:	2201      	movs	r2, #1
200107c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
200107c8:	68fb      	ldr	r3, [r7, #12]
200107ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
200107ce:	b2db      	uxtb	r3, r3
200107d0:	2b01      	cmp	r3, #1
200107d2:	d158      	bne.n	20010886 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
200107d4:	68fb      	ldr	r3, [r7, #12]
200107d6:	2202      	movs	r2, #2
200107d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
200107dc:	68fb      	ldr	r3, [r7, #12]
200107de:	2200      	movs	r2, #0
200107e0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
200107e2:	68fb      	ldr	r3, [r7, #12]
200107e4:	681b      	ldr	r3, [r3, #0]
200107e6:	68da      	ldr	r2, [r3, #12]
200107e8:	68fb      	ldr	r3, [r7, #12]
200107ea:	681b      	ldr	r3, [r3, #0]
200107ec:	f022 0201 	bic.w	r2, r2, #1
200107f0:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
200107f2:	69bb      	ldr	r3, [r7, #24]
200107f4:	9300      	str	r3, [sp, #0]
200107f6:	683b      	ldr	r3, [r7, #0]
200107f8:	687a      	ldr	r2, [r7, #4]
200107fa:	68b9      	ldr	r1, [r7, #8]
200107fc:	68f8      	ldr	r0, [r7, #12]
200107fe:	f000 fb41 	bl	20010e84 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
20010802:	68fb      	ldr	r3, [r7, #12]
20010804:	681b      	ldr	r3, [r3, #0]
20010806:	68da      	ldr	r2, [r3, #12]
20010808:	68fb      	ldr	r3, [r7, #12]
2001080a:	681b      	ldr	r3, [r3, #0]
2001080c:	f042 0206 	orr.w	r2, r2, #6
20010810:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
20010812:	68fb      	ldr	r3, [r7, #12]
20010814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20010816:	2b00      	cmp	r3, #0
20010818:	d007      	beq.n	2001082a <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
2001081a:	68fb      	ldr	r3, [r7, #12]
2001081c:	681b      	ldr	r3, [r3, #0]
2001081e:	68da      	ldr	r2, [r3, #12]
20010820:	68fb      	ldr	r3, [r7, #12]
20010822:	681b      	ldr	r3, [r3, #0]
20010824:	f042 0210 	orr.w	r2, r2, #16
20010828:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
2001082a:	68fb      	ldr	r3, [r7, #12]
2001082c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2001082e:	2b00      	cmp	r3, #0
20010830:	d007      	beq.n	20010842 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
20010832:	68fb      	ldr	r3, [r7, #12]
20010834:	681b      	ldr	r3, [r3, #0]
20010836:	68da      	ldr	r2, [r3, #12]
20010838:	68fb      	ldr	r3, [r7, #12]
2001083a:	681b      	ldr	r3, [r3, #0]
2001083c:	f042 0208 	orr.w	r2, r2, #8
20010840:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
20010842:	68fb      	ldr	r3, [r7, #12]
20010844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20010846:	2b00      	cmp	r3, #0
20010848:	d007      	beq.n	2001085a <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
2001084a:	68fb      	ldr	r3, [r7, #12]
2001084c:	681b      	ldr	r3, [r3, #0]
2001084e:	68da      	ldr	r2, [r3, #12]
20010850:	68fb      	ldr	r3, [r7, #12]
20010852:	681b      	ldr	r3, [r3, #0]
20010854:	f042 0220 	orr.w	r2, r2, #32
20010858:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
2001085a:	68fb      	ldr	r3, [r7, #12]
2001085c:	681b      	ldr	r3, [r3, #0]
2001085e:	68da      	ldr	r2, [r3, #12]
20010860:	68fb      	ldr	r3, [r7, #12]
20010862:	681b      	ldr	r3, [r3, #0]
20010864:	f042 0201 	orr.w	r2, r2, #1
20010868:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
2001086a:	68fb      	ldr	r3, [r7, #12]
2001086c:	685b      	ldr	r3, [r3, #4]
2001086e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20010872:	d10e      	bne.n	20010892 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
20010874:	68fb      	ldr	r3, [r7, #12]
20010876:	681b      	ldr	r3, [r3, #0]
20010878:	68da      	ldr	r2, [r3, #12]
2001087a:	68fb      	ldr	r3, [r7, #12]
2001087c:	681b      	ldr	r3, [r3, #0]
2001087e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
20010882:	60da      	str	r2, [r3, #12]
20010884:	e005      	b.n	20010892 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
20010886:	68fb      	ldr	r3, [r7, #12]
20010888:	2200      	movs	r2, #0
2001088a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
2001088e:	2302      	movs	r3, #2
20010890:	e000      	b.n	20010894 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
20010892:	2300      	movs	r3, #0
}
20010894:	4618      	mov	r0, r3
20010896:	3710      	adds	r7, #16
20010898:	46bd      	mov	sp, r7
2001089a:	bd80      	pop	{r7, pc}

2001089c <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
2001089c:	b580      	push	{r7, lr}
2001089e:	b084      	sub	sp, #16
200108a0:	af00      	add	r7, sp, #0
200108a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
200108a4:	f7f1 fd0c 	bl	200022c0 <HAL_GetTick>
200108a8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
200108aa:	687b      	ldr	r3, [r7, #4]
200108ac:	2b00      	cmp	r3, #0
200108ae:	d101      	bne.n	200108b4 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
200108b0:	2301      	movs	r3, #1
200108b2:	e04a      	b.n	2001094a <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
200108b4:	687b      	ldr	r3, [r7, #4]
200108b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
200108ba:	b2db      	uxtb	r3, r3
200108bc:	2b02      	cmp	r3, #2
200108be:	d008      	beq.n	200108d2 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
200108c0:	687b      	ldr	r3, [r7, #4]
200108c2:	2280      	movs	r2, #128	@ 0x80
200108c4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
200108c6:	687b      	ldr	r3, [r7, #4]
200108c8:	2200      	movs	r2, #0
200108ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
200108ce:	2301      	movs	r3, #1
200108d0:	e03b      	b.n	2001094a <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
200108d2:	687b      	ldr	r3, [r7, #4]
200108d4:	681b      	ldr	r3, [r3, #0]
200108d6:	68da      	ldr	r2, [r3, #12]
200108d8:	687b      	ldr	r3, [r7, #4]
200108da:	681b      	ldr	r3, [r3, #0]
200108dc:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
200108e0:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
200108e2:	687b      	ldr	r3, [r7, #4]
200108e4:	681b      	ldr	r3, [r3, #0]
200108e6:	68da      	ldr	r2, [r3, #12]
200108e8:	687b      	ldr	r3, [r7, #4]
200108ea:	681b      	ldr	r3, [r3, #0]
200108ec:	f022 0201 	bic.w	r2, r2, #1
200108f0:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
200108f2:	e016      	b.n	20010922 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
200108f4:	f7f1 fce4 	bl	200022c0 <HAL_GetTick>
200108f8:	4602      	mov	r2, r0
200108fa:	68fb      	ldr	r3, [r7, #12]
200108fc:	1ad3      	subs	r3, r2, r3
200108fe:	2b05      	cmp	r3, #5
20010900:	d90f      	bls.n	20010922 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
20010902:	687b      	ldr	r3, [r7, #4]
20010904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010906:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
2001090a:	687b      	ldr	r3, [r7, #4]
2001090c:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
2001090e:	687b      	ldr	r3, [r7, #4]
20010910:	2200      	movs	r2, #0
20010912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
20010916:	687b      	ldr	r3, [r7, #4]
20010918:	2203      	movs	r2, #3
2001091a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
2001091e:	2301      	movs	r3, #1
20010920:	e013      	b.n	2001094a <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
20010922:	687b      	ldr	r3, [r7, #4]
20010924:	681b      	ldr	r3, [r3, #0]
20010926:	68db      	ldr	r3, [r3, #12]
20010928:	f003 0301 	and.w	r3, r3, #1
2001092c:	2b00      	cmp	r3, #0
2001092e:	d1e1      	bne.n	200108f4 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
20010930:	687b      	ldr	r3, [r7, #4]
20010932:	681b      	ldr	r3, [r3, #0]
20010934:	221f      	movs	r2, #31
20010936:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
20010938:	687b      	ldr	r3, [r7, #4]
2001093a:	2200      	movs	r2, #0
2001093c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
20010940:	687b      	ldr	r3, [r7, #4]
20010942:	2201      	movs	r2, #1
20010944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
20010948:	2300      	movs	r3, #0
}
2001094a:	4618      	mov	r0, r3
2001094c:	3710      	adds	r7, #16
2001094e:	46bd      	mov	sp, r7
20010950:	bd80      	pop	{r7, pc}

20010952 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
20010952:	b480      	push	{r7}
20010954:	b083      	sub	sp, #12
20010956:	af00      	add	r7, sp, #0
20010958:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2001095a:	687b      	ldr	r3, [r7, #4]
2001095c:	2b00      	cmp	r3, #0
2001095e:	d101      	bne.n	20010964 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
20010960:	2301      	movs	r3, #1
20010962:	e017      	b.n	20010994 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
20010964:	687b      	ldr	r3, [r7, #4]
20010966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2001096a:	b2db      	uxtb	r3, r3
2001096c:	2b02      	cmp	r3, #2
2001096e:	d004      	beq.n	2001097a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
20010970:	687b      	ldr	r3, [r7, #4]
20010972:	2280      	movs	r2, #128	@ 0x80
20010974:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
20010976:	2301      	movs	r3, #1
20010978:	e00c      	b.n	20010994 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
2001097a:	687b      	ldr	r3, [r7, #4]
2001097c:	2204      	movs	r2, #4
2001097e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
20010982:	687b      	ldr	r3, [r7, #4]
20010984:	681b      	ldr	r3, [r3, #0]
20010986:	68da      	ldr	r2, [r3, #12]
20010988:	687b      	ldr	r3, [r7, #4]
2001098a:	681b      	ldr	r3, [r3, #0]
2001098c:	f022 0201 	bic.w	r2, r2, #1
20010990:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
20010992:	2300      	movs	r3, #0
}
20010994:	4618      	mov	r0, r3
20010996:	370c      	adds	r7, #12
20010998:	46bd      	mov	sp, r7
2001099a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001099e:	4770      	bx	lr

200109a0 <HAL_MDMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the MDMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, HAL_MDMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
200109a0:	b580      	push	{r7, lr}
200109a2:	b088      	sub	sp, #32
200109a4:	af00      	add	r7, sp, #0
200109a6:	60f8      	str	r0, [r7, #12]
200109a8:	460b      	mov	r3, r1
200109aa:	607a      	str	r2, [r7, #4]
200109ac:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_MDMA_LEVEL_COMPLETE(CompleteLevel));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
200109ae:	68fb      	ldr	r3, [r7, #12]
200109b0:	2b00      	cmp	r3, #0
200109b2:	d101      	bne.n	200109b8 <HAL_MDMA_PollForTransfer+0x18>
  {
    return HAL_ERROR;
200109b4:	2301      	movs	r3, #1
200109b6:	e0b9      	b.n	20010b2c <HAL_MDMA_PollForTransfer+0x18c>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
200109b8:	68fb      	ldr	r3, [r7, #12]
200109ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
200109be:	b2db      	uxtb	r3, r3
200109c0:	2b02      	cmp	r3, #2
200109c2:	d004      	beq.n	200109ce <HAL_MDMA_PollForTransfer+0x2e>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
200109c4:	68fb      	ldr	r3, [r7, #12]
200109c6:	2280      	movs	r2, #128	@ 0x80
200109c8:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
200109ca:	2301      	movs	r3, #1
200109cc:	e0ae      	b.n	20010b2c <HAL_MDMA_PollForTransfer+0x18c>
  }

  /* Get the level transfer complete flag */
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
200109ce:	7afb      	ldrb	r3, [r7, #11]
200109d0:	2b00      	cmp	r3, #0
200109d2:	d00b      	beq.n	200109ec <HAL_MDMA_PollForTransfer+0x4c>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
200109d4:	7afb      	ldrb	r3, [r7, #11]
200109d6:	2b01      	cmp	r3, #1
200109d8:	d006      	beq.n	200109e8 <HAL_MDMA_PollForTransfer+0x48>
               (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   : \
200109da:	7afb      	ldrb	r3, [r7, #11]
200109dc:	2b02      	cmp	r3, #2
200109de:	d101      	bne.n	200109e4 <HAL_MDMA_PollForTransfer+0x44>
200109e0:	2308      	movs	r3, #8
200109e2:	e004      	b.n	200109ee <HAL_MDMA_PollForTransfer+0x4e>
200109e4:	2304      	movs	r3, #4
200109e6:	e002      	b.n	200109ee <HAL_MDMA_PollForTransfer+0x4e>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
200109e8:	2310      	movs	r3, #16
200109ea:	e000      	b.n	200109ee <HAL_MDMA_PollForTransfer+0x4e>
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
200109ec:	2302      	movs	r3, #2
200109ee:	61fb      	str	r3, [r7, #28]
               MDMA_FLAG_BRT);


  /* Get timeout */
  tickstart = HAL_GetTick();
200109f0:	f7f1 fc66 	bl	200022c0 <HAL_GetTick>
200109f4:	61b8      	str	r0, [r7, #24]

  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
200109f6:	e067      	b.n	20010ac8 <HAL_MDMA_PollForTransfer+0x128>
  {
    if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
200109f8:	68fb      	ldr	r3, [r7, #12]
200109fa:	681b      	ldr	r3, [r3, #0]
200109fc:	681b      	ldr	r3, [r3, #0]
200109fe:	f003 0301 	and.w	r3, r3, #1
20010a02:	2b00      	cmp	r3, #0
20010a04:	d046      	beq.n	20010a94 <HAL_MDMA_PollForTransfer+0xf4>
    {
      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
20010a06:	68fb      	ldr	r3, [r7, #12]
20010a08:	681b      	ldr	r3, [r3, #0]
20010a0a:	689b      	ldr	r3, [r3, #8]
20010a0c:	617b      	str	r3, [r7, #20]

      if((errorFlag & MDMA_CESR_TED) == 0U)
20010a0e:	697b      	ldr	r3, [r7, #20]
20010a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20010a14:	2b00      	cmp	r3, #0
20010a16:	d106      	bne.n	20010a26 <HAL_MDMA_PollForTransfer+0x86>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
20010a18:	68fb      	ldr	r3, [r7, #12]
20010a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010a1c:	f043 0201 	orr.w	r2, r3, #1
20010a20:	68fb      	ldr	r3, [r7, #12]
20010a22:	669a      	str	r2, [r3, #104]	@ 0x68
20010a24:	e005      	b.n	20010a32 <HAL_MDMA_PollForTransfer+0x92>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
20010a26:	68fb      	ldr	r3, [r7, #12]
20010a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010a2a:	f043 0202 	orr.w	r2, r3, #2
20010a2e:	68fb      	ldr	r3, [r7, #12]
20010a30:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
20010a32:	697b      	ldr	r3, [r7, #20]
20010a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20010a38:	2b00      	cmp	r3, #0
20010a3a:	d005      	beq.n	20010a48 <HAL_MDMA_PollForTransfer+0xa8>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
20010a3c:	68fb      	ldr	r3, [r7, #12]
20010a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010a40:	f043 0204 	orr.w	r2, r3, #4
20010a44:	68fb      	ldr	r3, [r7, #12]
20010a46:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
20010a48:	697b      	ldr	r3, [r7, #20]
20010a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20010a4e:	2b00      	cmp	r3, #0
20010a50:	d005      	beq.n	20010a5e <HAL_MDMA_PollForTransfer+0xbe>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
20010a52:	68fb      	ldr	r3, [r7, #12]
20010a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010a56:	f043 0208 	orr.w	r2, r3, #8
20010a5a:	68fb      	ldr	r3, [r7, #12]
20010a5c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
20010a5e:	697b      	ldr	r3, [r7, #20]
20010a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20010a64:	2b00      	cmp	r3, #0
20010a66:	d005      	beq.n	20010a74 <HAL_MDMA_PollForTransfer+0xd4>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
20010a68:	68fb      	ldr	r3, [r7, #12]
20010a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010a6c:	f043 0210 	orr.w	r2, r3, #16
20010a70:	68fb      	ldr	r3, [r7, #12]
20010a72:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
20010a74:	697b      	ldr	r3, [r7, #20]
20010a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20010a7a:	2b00      	cmp	r3, #0
20010a7c:	d005      	beq.n	20010a8a <HAL_MDMA_PollForTransfer+0xea>
      {
        /* Update error code : Block Size error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
20010a7e:	68fb      	ldr	r3, [r7, #12]
20010a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010a82:	f043 0220 	orr.w	r2, r3, #32
20010a86:	68fb      	ldr	r3, [r7, #12]
20010a88:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      (void) HAL_MDMA_Abort(hmdma); /* if error then abort the current transfer */
20010a8a:	68f8      	ldr	r0, [r7, #12]
20010a8c:	f7ff ff06 	bl	2001089c <HAL_MDMA_Abort>
          - Clear all transfer flags
          - Unlock
          - Set the State
      */

      return HAL_ERROR;
20010a90:	2301      	movs	r3, #1
20010a92:	e04b      	b.n	20010b2c <HAL_MDMA_PollForTransfer+0x18c>

    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
20010a94:	687b      	ldr	r3, [r7, #4]
20010a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
20010a9a:	d015      	beq.n	20010ac8 <HAL_MDMA_PollForTransfer+0x128>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
20010a9c:	f7f1 fc10 	bl	200022c0 <HAL_GetTick>
20010aa0:	4602      	mov	r2, r0
20010aa2:	69bb      	ldr	r3, [r7, #24]
20010aa4:	1ad3      	subs	r3, r2, r3
20010aa6:	687a      	ldr	r2, [r7, #4]
20010aa8:	429a      	cmp	r2, r3
20010aaa:	d302      	bcc.n	20010ab2 <HAL_MDMA_PollForTransfer+0x112>
20010aac:	687b      	ldr	r3, [r7, #4]
20010aae:	2b00      	cmp	r3, #0
20010ab0:	d10a      	bne.n	20010ac8 <HAL_MDMA_PollForTransfer+0x128>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
20010ab2:	68fb      	ldr	r3, [r7, #12]
20010ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010ab6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20010aba:	68fb      	ldr	r3, [r7, #12]
20010abc:	669a      	str	r2, [r3, #104]	@ 0x68

        (void) HAL_MDMA_Abort(hmdma); /* if timeout then abort the current transfer */
20010abe:	68f8      	ldr	r0, [r7, #12]
20010ac0:	f7ff feec 	bl	2001089c <HAL_MDMA_Abort>
            - Clear all transfer flags
            - Unlock
            - Set the State
        */

        return HAL_ERROR;
20010ac4:	2301      	movs	r3, #1
20010ac6:	e031      	b.n	20010b2c <HAL_MDMA_PollForTransfer+0x18c>
  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
20010ac8:	68fb      	ldr	r3, [r7, #12]
20010aca:	681b      	ldr	r3, [r3, #0]
20010acc:	681a      	ldr	r2, [r3, #0]
20010ace:	69fb      	ldr	r3, [r7, #28]
20010ad0:	4013      	ands	r3, r2
20010ad2:	2b00      	cmp	r3, #0
20010ad4:	d090      	beq.n	200109f8 <HAL_MDMA_PollForTransfer+0x58>
      }
    }
  }

  /* Clear the transfer level flag */
  if(CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)
20010ad6:	7afb      	ldrb	r3, [r7, #11]
20010ad8:	2b01      	cmp	r3, #1
20010ada:	d104      	bne.n	20010ae6 <HAL_MDMA_PollForTransfer+0x146>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
20010adc:	68fb      	ldr	r3, [r7, #12]
20010ade:	681b      	ldr	r3, [r3, #0]
20010ae0:	2210      	movs	r2, #16
20010ae2:	605a      	str	r2, [r3, #4]
20010ae4:	e021      	b.n	20010b2a <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_BLOCK_TRANSFER)
20010ae6:	7afb      	ldrb	r3, [r7, #11]
20010ae8:	2b02      	cmp	r3, #2
20010aea:	d104      	bne.n	20010af6 <HAL_MDMA_PollForTransfer+0x156>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT));
20010aec:	68fb      	ldr	r3, [r7, #12]
20010aee:	681b      	ldr	r3, [r3, #0]
20010af0:	2218      	movs	r2, #24
20010af2:	605a      	str	r2, [r3, #4]
20010af4:	e019      	b.n	20010b2a <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_REPEAT_BLOCK_TRANSFER)
20010af6:	7afb      	ldrb	r3, [r7, #11]
20010af8:	2b03      	cmp	r3, #3
20010afa:	d104      	bne.n	20010b06 <HAL_MDMA_PollForTransfer+0x166>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT | MDMA_FLAG_BRT));
20010afc:	68fb      	ldr	r3, [r7, #12]
20010afe:	681b      	ldr	r3, [r3, #0]
20010b00:	221c      	movs	r2, #28
20010b02:	605a      	str	r2, [r3, #4]
20010b04:	e011      	b.n	20010b2a <HAL_MDMA_PollForTransfer+0x18a>
  }
  else if(CompleteLevel == HAL_MDMA_FULL_TRANSFER)
20010b06:	7afb      	ldrb	r3, [r7, #11]
20010b08:	2b00      	cmp	r3, #0
20010b0a:	d10c      	bne.n	20010b26 <HAL_MDMA_PollForTransfer+0x186>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC | MDMA_FLAG_CTC));
20010b0c:	68fb      	ldr	r3, [r7, #12]
20010b0e:	681b      	ldr	r3, [r3, #0]
20010b10:	221e      	movs	r2, #30
20010b12:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
20010b14:	68fb      	ldr	r3, [r7, #12]
20010b16:	2200      	movs	r2, #0
20010b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
20010b1c:	68fb      	ldr	r3, [r7, #12]
20010b1e:	2201      	movs	r2, #1
20010b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
20010b24:	e001      	b.n	20010b2a <HAL_MDMA_PollForTransfer+0x18a>
  }
  else
  {
    return HAL_ERROR;
20010b26:	2301      	movs	r3, #1
20010b28:	e000      	b.n	20010b2c <HAL_MDMA_PollForTransfer+0x18c>
  }

  return HAL_OK;
20010b2a:	2300      	movs	r3, #0
}
20010b2c:	4618      	mov	r0, r3
20010b2e:	3720      	adds	r7, #32
20010b30:	46bd      	mov	sp, r7
20010b32:	bd80      	pop	{r7, pc}

20010b34 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
20010b34:	b480      	push	{r7}
20010b36:	b085      	sub	sp, #20
20010b38:	af00      	add	r7, sp, #0
20010b3a:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
20010b3c:	687b      	ldr	r3, [r7, #4]
20010b3e:	2b00      	cmp	r3, #0
20010b40:	d101      	bne.n	20010b46 <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
20010b42:	2301      	movs	r3, #1
20010b44:	e02a      	b.n	20010b9c <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
20010b46:	687b      	ldr	r3, [r7, #4]
20010b48:	681b      	ldr	r3, [r3, #0]
20010b4a:	691b      	ldr	r3, [r3, #16]
20010b4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
20010b50:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
20010b52:	687b      	ldr	r3, [r7, #4]
20010b54:	681b      	ldr	r3, [r3, #0]
20010b56:	68db      	ldr	r3, [r3, #12]
20010b58:	f003 0301 	and.w	r3, r3, #1
20010b5c:	2b00      	cmp	r3, #0
20010b5e:	d104      	bne.n	20010b6a <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
20010b60:	687b      	ldr	r3, [r7, #4]
20010b62:	2280      	movs	r2, #128	@ 0x80
20010b64:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
20010b66:	2301      	movs	r3, #1
20010b68:	e018      	b.n	20010b9c <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
20010b6a:	687b      	ldr	r3, [r7, #4]
20010b6c:	681b      	ldr	r3, [r3, #0]
20010b6e:	681b      	ldr	r3, [r3, #0]
20010b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20010b74:	2b00      	cmp	r3, #0
20010b76:	d102      	bne.n	20010b7e <HAL_MDMA_GenerateSWRequest+0x4a>
20010b78:	68fb      	ldr	r3, [r7, #12]
20010b7a:	2b00      	cmp	r3, #0
20010b7c:	d105      	bne.n	20010b8a <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
20010b7e:	687b      	ldr	r3, [r7, #4]
20010b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
20010b84:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
20010b86:	2301      	movs	r3, #1
20010b88:	e008      	b.n	20010b9c <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
20010b8a:	687b      	ldr	r3, [r7, #4]
20010b8c:	681b      	ldr	r3, [r3, #0]
20010b8e:	68da      	ldr	r2, [r3, #12]
20010b90:	687b      	ldr	r3, [r7, #4]
20010b92:	681b      	ldr	r3, [r3, #0]
20010b94:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
20010b98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
20010b9a:	2300      	movs	r3, #0
  }
}
20010b9c:	4618      	mov	r0, r3
20010b9e:	3714      	adds	r7, #20
20010ba0:	46bd      	mov	sp, r7
20010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
20010ba6:	4770      	bx	lr

20010ba8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
20010ba8:	b580      	push	{r7, lr}
20010baa:	b086      	sub	sp, #24
20010bac:	af00      	add	r7, sp, #0
20010bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
20010bb0:	2300      	movs	r3, #0
20010bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
20010bb4:	4b91      	ldr	r3, [pc, #580]	@ (20010dfc <HAL_MDMA_IRQHandler+0x254>)
20010bb6:	681b      	ldr	r3, [r3, #0]
20010bb8:	4a91      	ldr	r2, [pc, #580]	@ (20010e00 <HAL_MDMA_IRQHandler+0x258>)
20010bba:	fba2 2303 	umull	r2, r3, r2, r3
20010bbe:	0a9b      	lsrs	r3, r3, #10
20010bc0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
20010bc2:	687b      	ldr	r3, [r7, #4]
20010bc4:	681b      	ldr	r3, [r3, #0]
20010bc6:	461a      	mov	r2, r3
20010bc8:	4b8e      	ldr	r3, [pc, #568]	@ (20010e04 <HAL_MDMA_IRQHandler+0x25c>)
20010bca:	4413      	add	r3, r2
20010bcc:	099b      	lsrs	r3, r3, #6
20010bce:	f003 031f 	and.w	r3, r3, #31
20010bd2:	2201      	movs	r2, #1
20010bd4:	fa02 f303 	lsl.w	r3, r2, r3
20010bd8:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
20010bda:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
20010bde:	681a      	ldr	r2, [r3, #0]
20010be0:	693b      	ldr	r3, [r7, #16]
20010be2:	4013      	ands	r3, r2
20010be4:	2b00      	cmp	r3, #0
20010be6:	f000 812d 	beq.w	20010e44 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
20010bea:	687b      	ldr	r3, [r7, #4]
20010bec:	681b      	ldr	r3, [r3, #0]
20010bee:	681b      	ldr	r3, [r3, #0]
20010bf0:	f003 0301 	and.w	r3, r3, #1
20010bf4:	2b00      	cmp	r3, #0
20010bf6:	d054      	beq.n	20010ca2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
20010bf8:	687b      	ldr	r3, [r7, #4]
20010bfa:	681b      	ldr	r3, [r3, #0]
20010bfc:	68db      	ldr	r3, [r3, #12]
20010bfe:	f003 0302 	and.w	r3, r3, #2
20010c02:	2b00      	cmp	r3, #0
20010c04:	d04d      	beq.n	20010ca2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
20010c06:	687b      	ldr	r3, [r7, #4]
20010c08:	681b      	ldr	r3, [r3, #0]
20010c0a:	68da      	ldr	r2, [r3, #12]
20010c0c:	687b      	ldr	r3, [r7, #4]
20010c0e:	681b      	ldr	r3, [r3, #0]
20010c10:	f022 0202 	bic.w	r2, r2, #2
20010c14:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
20010c16:	687b      	ldr	r3, [r7, #4]
20010c18:	681b      	ldr	r3, [r3, #0]
20010c1a:	689b      	ldr	r3, [r3, #8]
20010c1c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
20010c1e:	68fb      	ldr	r3, [r7, #12]
20010c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20010c24:	2b00      	cmp	r3, #0
20010c26:	d106      	bne.n	20010c36 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
20010c28:	687b      	ldr	r3, [r7, #4]
20010c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010c2c:	f043 0201 	orr.w	r2, r3, #1
20010c30:	687b      	ldr	r3, [r7, #4]
20010c32:	669a      	str	r2, [r3, #104]	@ 0x68
20010c34:	e005      	b.n	20010c42 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
20010c36:	687b      	ldr	r3, [r7, #4]
20010c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010c3a:	f043 0202 	orr.w	r2, r3, #2
20010c3e:	687b      	ldr	r3, [r7, #4]
20010c40:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
20010c42:	68fb      	ldr	r3, [r7, #12]
20010c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20010c48:	2b00      	cmp	r3, #0
20010c4a:	d005      	beq.n	20010c58 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
20010c4c:	687b      	ldr	r3, [r7, #4]
20010c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010c50:	f043 0204 	orr.w	r2, r3, #4
20010c54:	687b      	ldr	r3, [r7, #4]
20010c56:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
20010c58:	68fb      	ldr	r3, [r7, #12]
20010c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20010c5e:	2b00      	cmp	r3, #0
20010c60:	d005      	beq.n	20010c6e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
20010c62:	687b      	ldr	r3, [r7, #4]
20010c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010c66:	f043 0208 	orr.w	r2, r3, #8
20010c6a:	687b      	ldr	r3, [r7, #4]
20010c6c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
20010c6e:	68fb      	ldr	r3, [r7, #12]
20010c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20010c74:	2b00      	cmp	r3, #0
20010c76:	d005      	beq.n	20010c84 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
20010c78:	687b      	ldr	r3, [r7, #4]
20010c7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010c7c:	f043 0210 	orr.w	r2, r3, #16
20010c80:	687b      	ldr	r3, [r7, #4]
20010c82:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
20010c84:	68fb      	ldr	r3, [r7, #12]
20010c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
20010c8a:	2b00      	cmp	r3, #0
20010c8c:	d005      	beq.n	20010c9a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
20010c8e:	687b      	ldr	r3, [r7, #4]
20010c90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010c92:	f043 0220 	orr.w	r2, r3, #32
20010c96:	687b      	ldr	r3, [r7, #4]
20010c98:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
20010c9a:	687b      	ldr	r3, [r7, #4]
20010c9c:	681b      	ldr	r3, [r3, #0]
20010c9e:	2201      	movs	r2, #1
20010ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
20010ca2:	687b      	ldr	r3, [r7, #4]
20010ca4:	681b      	ldr	r3, [r3, #0]
20010ca6:	681b      	ldr	r3, [r3, #0]
20010ca8:	f003 0310 	and.w	r3, r3, #16
20010cac:	2b00      	cmp	r3, #0
20010cae:	d012      	beq.n	20010cd6 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
20010cb0:	687b      	ldr	r3, [r7, #4]
20010cb2:	681b      	ldr	r3, [r3, #0]
20010cb4:	68db      	ldr	r3, [r3, #12]
20010cb6:	f003 0320 	and.w	r3, r3, #32
20010cba:	2b00      	cmp	r3, #0
20010cbc:	d00b      	beq.n	20010cd6 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
20010cbe:	687b      	ldr	r3, [r7, #4]
20010cc0:	681b      	ldr	r3, [r3, #0]
20010cc2:	2210      	movs	r2, #16
20010cc4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
20010cc6:	687b      	ldr	r3, [r7, #4]
20010cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20010cca:	2b00      	cmp	r3, #0
20010ccc:	d003      	beq.n	20010cd6 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
20010cce:	687b      	ldr	r3, [r7, #4]
20010cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20010cd2:	6878      	ldr	r0, [r7, #4]
20010cd4:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
20010cd6:	687b      	ldr	r3, [r7, #4]
20010cd8:	681b      	ldr	r3, [r3, #0]
20010cda:	681b      	ldr	r3, [r3, #0]
20010cdc:	f003 0308 	and.w	r3, r3, #8
20010ce0:	2b00      	cmp	r3, #0
20010ce2:	d012      	beq.n	20010d0a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
20010ce4:	687b      	ldr	r3, [r7, #4]
20010ce6:	681b      	ldr	r3, [r3, #0]
20010ce8:	68db      	ldr	r3, [r3, #12]
20010cea:	f003 0310 	and.w	r3, r3, #16
20010cee:	2b00      	cmp	r3, #0
20010cf0:	d00b      	beq.n	20010d0a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
20010cf2:	687b      	ldr	r3, [r7, #4]
20010cf4:	681b      	ldr	r3, [r3, #0]
20010cf6:	2208      	movs	r2, #8
20010cf8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
20010cfa:	687b      	ldr	r3, [r7, #4]
20010cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20010cfe:	2b00      	cmp	r3, #0
20010d00:	d003      	beq.n	20010d0a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
20010d02:	687b      	ldr	r3, [r7, #4]
20010d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20010d06:	6878      	ldr	r0, [r7, #4]
20010d08:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
20010d0a:	687b      	ldr	r3, [r7, #4]
20010d0c:	681b      	ldr	r3, [r3, #0]
20010d0e:	681b      	ldr	r3, [r3, #0]
20010d10:	f003 0304 	and.w	r3, r3, #4
20010d14:	2b00      	cmp	r3, #0
20010d16:	d012      	beq.n	20010d3e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
20010d18:	687b      	ldr	r3, [r7, #4]
20010d1a:	681b      	ldr	r3, [r3, #0]
20010d1c:	68db      	ldr	r3, [r3, #12]
20010d1e:	f003 0308 	and.w	r3, r3, #8
20010d22:	2b00      	cmp	r3, #0
20010d24:	d00b      	beq.n	20010d3e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
20010d26:	687b      	ldr	r3, [r7, #4]
20010d28:	681b      	ldr	r3, [r3, #0]
20010d2a:	2204      	movs	r2, #4
20010d2c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
20010d2e:	687b      	ldr	r3, [r7, #4]
20010d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20010d32:	2b00      	cmp	r3, #0
20010d34:	d003      	beq.n	20010d3e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
20010d36:	687b      	ldr	r3, [r7, #4]
20010d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20010d3a:	6878      	ldr	r0, [r7, #4]
20010d3c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
20010d3e:	687b      	ldr	r3, [r7, #4]
20010d40:	681b      	ldr	r3, [r3, #0]
20010d42:	681b      	ldr	r3, [r3, #0]
20010d44:	f003 0302 	and.w	r3, r3, #2
20010d48:	2b00      	cmp	r3, #0
20010d4a:	d039      	beq.n	20010dc0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
20010d4c:	687b      	ldr	r3, [r7, #4]
20010d4e:	681b      	ldr	r3, [r3, #0]
20010d50:	68db      	ldr	r3, [r3, #12]
20010d52:	f003 0304 	and.w	r3, r3, #4
20010d56:	2b00      	cmp	r3, #0
20010d58:	d032      	beq.n	20010dc0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
20010d5a:	687b      	ldr	r3, [r7, #4]
20010d5c:	681b      	ldr	r3, [r3, #0]
20010d5e:	68da      	ldr	r2, [r3, #12]
20010d60:	687b      	ldr	r3, [r7, #4]
20010d62:	681b      	ldr	r3, [r3, #0]
20010d64:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
20010d68:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
20010d6a:	687b      	ldr	r3, [r7, #4]
20010d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
20010d70:	b2db      	uxtb	r3, r3
20010d72:	2b04      	cmp	r3, #4
20010d74:	d110      	bne.n	20010d98 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
20010d76:	687b      	ldr	r3, [r7, #4]
20010d78:	2200      	movs	r2, #0
20010d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
20010d7e:	687b      	ldr	r3, [r7, #4]
20010d80:	2201      	movs	r2, #1
20010d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
20010d86:	687b      	ldr	r3, [r7, #4]
20010d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20010d8a:	2b00      	cmp	r3, #0
20010d8c:	d05c      	beq.n	20010e48 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
20010d8e:	687b      	ldr	r3, [r7, #4]
20010d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20010d92:	6878      	ldr	r0, [r7, #4]
20010d94:	4798      	blx	r3
        }
        return;
20010d96:	e057      	b.n	20010e48 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
20010d98:	687b      	ldr	r3, [r7, #4]
20010d9a:	681b      	ldr	r3, [r3, #0]
20010d9c:	2202      	movs	r2, #2
20010d9e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
20010da0:	687b      	ldr	r3, [r7, #4]
20010da2:	2200      	movs	r2, #0
20010da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
20010da8:	687b      	ldr	r3, [r7, #4]
20010daa:	2201      	movs	r2, #1
20010dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
20010db0:	687b      	ldr	r3, [r7, #4]
20010db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20010db4:	2b00      	cmp	r3, #0
20010db6:	d003      	beq.n	20010dc0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
20010db8:	687b      	ldr	r3, [r7, #4]
20010dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20010dbc:	6878      	ldr	r0, [r7, #4]
20010dbe:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
20010dc0:	687b      	ldr	r3, [r7, #4]
20010dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20010dc4:	2b00      	cmp	r3, #0
20010dc6:	d040      	beq.n	20010e4a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
20010dc8:	687b      	ldr	r3, [r7, #4]
20010dca:	2204      	movs	r2, #4
20010dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
20010dd0:	687b      	ldr	r3, [r7, #4]
20010dd2:	681b      	ldr	r3, [r3, #0]
20010dd4:	68da      	ldr	r2, [r3, #12]
20010dd6:	687b      	ldr	r3, [r7, #4]
20010dd8:	681b      	ldr	r3, [r3, #0]
20010dda:	f022 0201 	bic.w	r2, r2, #1
20010dde:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
20010de0:	68bb      	ldr	r3, [r7, #8]
20010de2:	3301      	adds	r3, #1
20010de4:	60bb      	str	r3, [r7, #8]
20010de6:	697a      	ldr	r2, [r7, #20]
20010de8:	429a      	cmp	r2, r3
20010dea:	d30d      	bcc.n	20010e08 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
20010dec:	687b      	ldr	r3, [r7, #4]
20010dee:	681b      	ldr	r3, [r3, #0]
20010df0:	68db      	ldr	r3, [r3, #12]
20010df2:	f003 0301 	and.w	r3, r3, #1
20010df6:	2b00      	cmp	r3, #0
20010df8:	d1f2      	bne.n	20010de0 <HAL_MDMA_IRQHandler+0x238>
20010dfa:	e006      	b.n	20010e0a <HAL_MDMA_IRQHandler+0x262>
20010dfc:	200004b0 	.word	0x200004b0
20010e00:	1b4e81b5 	.word	0x1b4e81b5
20010e04:	adffffc0 	.word	0xadffffc0
        break;
20010e08:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
20010e0a:	687b      	ldr	r3, [r7, #4]
20010e0c:	2200      	movs	r2, #0
20010e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
20010e12:	687b      	ldr	r3, [r7, #4]
20010e14:	681b      	ldr	r3, [r3, #0]
20010e16:	68db      	ldr	r3, [r3, #12]
20010e18:	f003 0301 	and.w	r3, r3, #1
20010e1c:	2b00      	cmp	r3, #0
20010e1e:	d004      	beq.n	20010e2a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
20010e20:	687b      	ldr	r3, [r7, #4]
20010e22:	2203      	movs	r2, #3
20010e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
20010e28:	e003      	b.n	20010e32 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
20010e2a:	687b      	ldr	r3, [r7, #4]
20010e2c:	2201      	movs	r2, #1
20010e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
20010e32:	687b      	ldr	r3, [r7, #4]
20010e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20010e36:	2b00      	cmp	r3, #0
20010e38:	d007      	beq.n	20010e4a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
20010e3a:	687b      	ldr	r3, [r7, #4]
20010e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20010e3e:	6878      	ldr	r0, [r7, #4]
20010e40:	4798      	blx	r3
20010e42:	e002      	b.n	20010e4a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
20010e44:	bf00      	nop
20010e46:	e000      	b.n	20010e4a <HAL_MDMA_IRQHandler+0x2a2>
        return;
20010e48:	bf00      	nop
    }
  }
}
20010e4a:	3718      	adds	r7, #24
20010e4c:	46bd      	mov	sp, r7
20010e4e:	bd80      	pop	{r7, pc}

20010e50 <HAL_MDMA_GetState>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL state
  */
HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma)
{
20010e50:	b480      	push	{r7}
20010e52:	b083      	sub	sp, #12
20010e54:	af00      	add	r7, sp, #0
20010e56:	6078      	str	r0, [r7, #4]
  return hmdma->State;
20010e58:	687b      	ldr	r3, [r7, #4]
20010e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
20010e5e:	b2db      	uxtb	r3, r3
}
20010e60:	4618      	mov	r0, r3
20010e62:	370c      	adds	r7, #12
20010e64:	46bd      	mov	sp, r7
20010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
20010e6a:	4770      	bx	lr

20010e6c <HAL_MDMA_GetError>:
  * @param  hmdma : pointer to a MDMA_HandleTypeDef structure that contains
  *              the configuration information for the specified MDMA Channel.
  * @retval MDMA Error Code
  */
uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma)
{
20010e6c:	b480      	push	{r7}
20010e6e:	b083      	sub	sp, #12
20010e70:	af00      	add	r7, sp, #0
20010e72:	6078      	str	r0, [r7, #4]
  return hmdma->ErrorCode;
20010e74:	687b      	ldr	r3, [r7, #4]
20010e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
}
20010e78:	4618      	mov	r0, r3
20010e7a:	370c      	adds	r7, #12
20010e7c:	46bd      	mov	sp, r7
20010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
20010e82:	4770      	bx	lr

20010e84 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
20010e84:	b480      	push	{r7}
20010e86:	b087      	sub	sp, #28
20010e88:	af00      	add	r7, sp, #0
20010e8a:	60f8      	str	r0, [r7, #12]
20010e8c:	60b9      	str	r1, [r7, #8]
20010e8e:	607a      	str	r2, [r7, #4]
20010e90:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
20010e92:	68fb      	ldr	r3, [r7, #12]
20010e94:	681b      	ldr	r3, [r3, #0]
20010e96:	695a      	ldr	r2, [r3, #20]
20010e98:	4b31      	ldr	r3, [pc, #196]	@ (20010f60 <MDMA_SetConfig+0xdc>)
20010e9a:	4013      	ands	r3, r2
20010e9c:	683a      	ldr	r2, [r7, #0]
20010e9e:	f3c2 0110 	ubfx	r1, r2, #0, #17
20010ea2:	68fa      	ldr	r2, [r7, #12]
20010ea4:	6812      	ldr	r2, [r2, #0]
20010ea6:	430b      	orrs	r3, r1
20010ea8:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
20010eaa:	68fb      	ldr	r3, [r7, #12]
20010eac:	681b      	ldr	r3, [r3, #0]
20010eae:	695b      	ldr	r3, [r3, #20]
20010eb0:	f3c3 0113 	ubfx	r1, r3, #0, #20
20010eb4:	6a3b      	ldr	r3, [r7, #32]
20010eb6:	3b01      	subs	r3, #1
20010eb8:	051a      	lsls	r2, r3, #20
20010eba:	68fb      	ldr	r3, [r7, #12]
20010ebc:	681b      	ldr	r3, [r3, #0]
20010ebe:	430a      	orrs	r2, r1
20010ec0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
20010ec2:	68fb      	ldr	r3, [r7, #12]
20010ec4:	681b      	ldr	r3, [r3, #0]
20010ec6:	221f      	movs	r2, #31
20010ec8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
20010eca:	68fb      	ldr	r3, [r7, #12]
20010ecc:	681b      	ldr	r3, [r3, #0]
20010ece:	687a      	ldr	r2, [r7, #4]
20010ed0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
20010ed2:	68fb      	ldr	r3, [r7, #12]
20010ed4:	681b      	ldr	r3, [r3, #0]
20010ed6:	68ba      	ldr	r2, [r7, #8]
20010ed8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
20010eda:	68bb      	ldr	r3, [r7, #8]
20010edc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
20010ee0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
20010ee2:	697b      	ldr	r3, [r7, #20]
20010ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20010ee8:	d002      	beq.n	20010ef0 <MDMA_SetConfig+0x6c>
20010eea:	697b      	ldr	r3, [r7, #20]
20010eec:	2b00      	cmp	r3, #0
20010eee:	d108      	bne.n	20010f02 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
20010ef0:	68fb      	ldr	r3, [r7, #12]
20010ef2:	681b      	ldr	r3, [r3, #0]
20010ef4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20010ef6:	68fb      	ldr	r3, [r7, #12]
20010ef8:	681b      	ldr	r3, [r3, #0]
20010efa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
20010efe:	629a      	str	r2, [r3, #40]	@ 0x28
20010f00:	e007      	b.n	20010f12 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
20010f02:	68fb      	ldr	r3, [r7, #12]
20010f04:	681b      	ldr	r3, [r3, #0]
20010f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20010f08:	68fb      	ldr	r3, [r7, #12]
20010f0a:	681b      	ldr	r3, [r3, #0]
20010f0c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
20010f10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
20010f12:	687b      	ldr	r3, [r7, #4]
20010f14:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
20010f18:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
20010f1a:	697b      	ldr	r3, [r7, #20]
20010f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20010f20:	d002      	beq.n	20010f28 <MDMA_SetConfig+0xa4>
20010f22:	697b      	ldr	r3, [r7, #20]
20010f24:	2b00      	cmp	r3, #0
20010f26:	d108      	bne.n	20010f3a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
20010f28:	68fb      	ldr	r3, [r7, #12]
20010f2a:	681b      	ldr	r3, [r3, #0]
20010f2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20010f2e:	68fb      	ldr	r3, [r7, #12]
20010f30:	681b      	ldr	r3, [r3, #0]
20010f32:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
20010f36:	629a      	str	r2, [r3, #40]	@ 0x28
20010f38:	e007      	b.n	20010f4a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
20010f3a:	68fb      	ldr	r3, [r7, #12]
20010f3c:	681b      	ldr	r3, [r3, #0]
20010f3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20010f40:	68fb      	ldr	r3, [r7, #12]
20010f42:	681b      	ldr	r3, [r3, #0]
20010f44:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
20010f48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
20010f4a:	68fb      	ldr	r3, [r7, #12]
20010f4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
20010f4e:	68fb      	ldr	r3, [r7, #12]
20010f50:	681b      	ldr	r3, [r3, #0]
20010f52:	625a      	str	r2, [r3, #36]	@ 0x24
}
20010f54:	bf00      	nop
20010f56:	371c      	adds	r7, #28
20010f58:	46bd      	mov	sp, r7
20010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
20010f5e:	4770      	bx	lr
20010f60:	fffe0000 	.word	0xfffe0000

20010f64 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
20010f64:	b480      	push	{r7}
20010f66:	b085      	sub	sp, #20
20010f68:	af00      	add	r7, sp, #0
20010f6a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
20010f6c:	687b      	ldr	r3, [r7, #4]
20010f6e:	68d9      	ldr	r1, [r3, #12]
20010f70:	687b      	ldr	r3, [r7, #4]
20010f72:	691a      	ldr	r2, [r3, #16]
20010f74:	687b      	ldr	r3, [r7, #4]
20010f76:	681b      	ldr	r3, [r3, #0]
20010f78:	430a      	orrs	r2, r1
20010f7a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
20010f7c:	687b      	ldr	r3, [r7, #4]
20010f7e:	695a      	ldr	r2, [r3, #20]
20010f80:	687b      	ldr	r3, [r7, #4]
20010f82:	699b      	ldr	r3, [r3, #24]
20010f84:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
20010f86:	687b      	ldr	r3, [r7, #4]
20010f88:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
20010f8a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
20010f8c:	687b      	ldr	r3, [r7, #4]
20010f8e:	6a1b      	ldr	r3, [r3, #32]
20010f90:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
20010f92:	687b      	ldr	r3, [r7, #4]
20010f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
20010f96:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
20010f98:	687b      	ldr	r3, [r7, #4]
20010f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20010f9c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
20010f9e:	687b      	ldr	r3, [r7, #4]
20010fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
20010fa2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
20010fa4:	687b      	ldr	r3, [r7, #4]
20010fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20010fa8:	3b01      	subs	r3, #1
20010faa:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
20010fac:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
20010fb0:	687b      	ldr	r3, [r7, #4]
20010fb2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
20010fb4:	687b      	ldr	r3, [r7, #4]
20010fb6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
20010fb8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
20010fba:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
20010fbc:	687b      	ldr	r3, [r7, #4]
20010fbe:	685b      	ldr	r3, [r3, #4]
20010fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20010fc4:	d107      	bne.n	20010fd6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
20010fc6:	687b      	ldr	r3, [r7, #4]
20010fc8:	681b      	ldr	r3, [r3, #0]
20010fca:	691a      	ldr	r2, [r3, #16]
20010fcc:	687b      	ldr	r3, [r7, #4]
20010fce:	681b      	ldr	r3, [r3, #0]
20010fd0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
20010fd4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
20010fd6:	687b      	ldr	r3, [r7, #4]
20010fd8:	681b      	ldr	r3, [r3, #0]
20010fda:	2200      	movs	r2, #0
20010fdc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
20010fde:	687b      	ldr	r3, [r7, #4]
20010fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20010fe2:	2b00      	cmp	r3, #0
20010fe4:	da11      	bge.n	2001100a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
20010fe6:	687b      	ldr	r3, [r7, #4]
20010fe8:	681b      	ldr	r3, [r3, #0]
20010fea:	695a      	ldr	r2, [r3, #20]
20010fec:	687b      	ldr	r3, [r7, #4]
20010fee:	681b      	ldr	r3, [r3, #0]
20010ff0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
20010ff4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
20010ff6:	687b      	ldr	r3, [r7, #4]
20010ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20010ffa:	425b      	negs	r3, r3
20010ffc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
20010ffe:	687b      	ldr	r3, [r7, #4]
20011000:	681b      	ldr	r3, [r3, #0]
20011002:	68fa      	ldr	r2, [r7, #12]
20011004:	b292      	uxth	r2, r2
20011006:	621a      	str	r2, [r3, #32]
20011008:	e006      	b.n	20011018 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
2001100a:	687b      	ldr	r3, [r7, #4]
2001100c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2001100e:	461a      	mov	r2, r3
20011010:	687b      	ldr	r3, [r7, #4]
20011012:	681b      	ldr	r3, [r3, #0]
20011014:	b292      	uxth	r2, r2
20011016:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
20011018:	687b      	ldr	r3, [r7, #4]
2001101a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2001101c:	2b00      	cmp	r3, #0
2001101e:	da15      	bge.n	2001104c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
20011020:	687b      	ldr	r3, [r7, #4]
20011022:	681b      	ldr	r3, [r3, #0]
20011024:	695a      	ldr	r2, [r3, #20]
20011026:	687b      	ldr	r3, [r7, #4]
20011028:	681b      	ldr	r3, [r3, #0]
2001102a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
2001102e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
20011030:	687b      	ldr	r3, [r7, #4]
20011032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20011034:	425b      	negs	r3, r3
20011036:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
20011038:	687b      	ldr	r3, [r7, #4]
2001103a:	681b      	ldr	r3, [r3, #0]
2001103c:	6a19      	ldr	r1, [r3, #32]
2001103e:	68fb      	ldr	r3, [r7, #12]
20011040:	041a      	lsls	r2, r3, #16
20011042:	687b      	ldr	r3, [r7, #4]
20011044:	681b      	ldr	r3, [r3, #0]
20011046:	430a      	orrs	r2, r1
20011048:	621a      	str	r2, [r3, #32]
2001104a:	e009      	b.n	20011060 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
2001104c:	687b      	ldr	r3, [r7, #4]
2001104e:	681b      	ldr	r3, [r3, #0]
20011050:	6a19      	ldr	r1, [r3, #32]
20011052:	687b      	ldr	r3, [r7, #4]
20011054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20011056:	041a      	lsls	r2, r3, #16
20011058:	687b      	ldr	r3, [r7, #4]
2001105a:	681b      	ldr	r3, [r3, #0]
2001105c:	430a      	orrs	r2, r1
2001105e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
20011060:	687b      	ldr	r3, [r7, #4]
20011062:	685b      	ldr	r3, [r3, #4]
20011064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20011068:	d006      	beq.n	20011078 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
2001106a:	687b      	ldr	r3, [r7, #4]
2001106c:	685a      	ldr	r2, [r3, #4]
2001106e:	687b      	ldr	r3, [r7, #4]
20011070:	681b      	ldr	r3, [r3, #0]
20011072:	b2d2      	uxtb	r2, r2
20011074:	629a      	str	r2, [r3, #40]	@ 0x28
20011076:	e003      	b.n	20011080 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
20011078:	687b      	ldr	r3, [r7, #4]
2001107a:	681b      	ldr	r3, [r3, #0]
2001107c:	2200      	movs	r2, #0
2001107e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
20011080:	687b      	ldr	r3, [r7, #4]
20011082:	681b      	ldr	r3, [r3, #0]
20011084:	2200      	movs	r2, #0
20011086:	625a      	str	r2, [r3, #36]	@ 0x24
}
20011088:	bf00      	nop
2001108a:	3714      	adds	r7, #20
2001108c:	46bd      	mov	sp, r7
2001108e:	f85d 7b04 	ldr.w	r7, [sp], #4
20011092:	4770      	bx	lr

20011094 <HAL_PWR_DeInit>:
  *         The prototype is kept just to maintain compatibility with other
  *         products.
  * @retval None.
  */
void HAL_PWR_DeInit (void)
{
20011094:	b480      	push	{r7}
20011096:	af00      	add	r7, sp, #0
}
20011098:	bf00      	nop
2001109a:	46bd      	mov	sp, r7
2001109c:	f85d 7b04 	ldr.w	r7, [sp], #4
200110a0:	4770      	bx	lr
	...

200110a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
200110a4:	b480      	push	{r7}
200110a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
200110a8:	4b05      	ldr	r3, [pc, #20]	@ (200110c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
200110aa:	681b      	ldr	r3, [r3, #0]
200110ac:	4a04      	ldr	r2, [pc, #16]	@ (200110c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
200110ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
200110b2:	6013      	str	r3, [r2, #0]
}
200110b4:	bf00      	nop
200110b6:	46bd      	mov	sp, r7
200110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200110bc:	4770      	bx	lr
200110be:	bf00      	nop
200110c0:	58024800 	.word	0x58024800

200110c4 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
200110c4:	b480      	push	{r7}
200110c6:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
200110c8:	4b05      	ldr	r3, [pc, #20]	@ (200110e0 <HAL_PWR_DisableBkUpAccess+0x1c>)
200110ca:	681b      	ldr	r3, [r3, #0]
200110cc:	4a04      	ldr	r2, [pc, #16]	@ (200110e0 <HAL_PWR_DisableBkUpAccess+0x1c>)
200110ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
200110d2:	6013      	str	r3, [r2, #0]
}
200110d4:	bf00      	nop
200110d6:	46bd      	mov	sp, r7
200110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200110dc:	4770      	bx	lr
200110de:	bf00      	nop
200110e0:	58024800 	.word	0x58024800

200110e4 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
200110e4:	b480      	push	{r7}
200110e6:	b083      	sub	sp, #12
200110e8:	af00      	add	r7, sp, #0
200110ea:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
200110ec:	687b      	ldr	r3, [r7, #4]
200110ee:	2b00      	cmp	r3, #0
200110f0:	d069      	beq.n	200111c6 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
200110f2:	4b38      	ldr	r3, [pc, #224]	@ (200111d4 <HAL_PWR_ConfigPVD+0xf0>)
200110f4:	681b      	ldr	r3, [r3, #0]
200110f6:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
200110fa:	687b      	ldr	r3, [r7, #4]
200110fc:	681b      	ldr	r3, [r3, #0]
200110fe:	4935      	ldr	r1, [pc, #212]	@ (200111d4 <HAL_PWR_ConfigPVD+0xf0>)
20011100:	4313      	orrs	r3, r2
20011102:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
20011104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2001110c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20011114:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
20011118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2001111c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20011120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20011128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
2001112c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011130:	681b      	ldr	r3, [r3, #0]
20011132:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
2001113a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
2001113c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011140:	685b      	ldr	r3, [r3, #4]
20011142:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
2001114a:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
2001114c:	687b      	ldr	r3, [r7, #4]
2001114e:	685b      	ldr	r3, [r3, #4]
20011150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20011154:	2b00      	cmp	r3, #0
20011156:	d009      	beq.n	2001116c <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
20011158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2001115c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20011160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011168:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
2001116c:	687b      	ldr	r3, [r7, #4]
2001116e:	685b      	ldr	r3, [r3, #4]
20011170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20011174:	2b00      	cmp	r3, #0
20011176:	d009      	beq.n	2001118c <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
20011178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2001117c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20011180:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011188:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
2001118c:	687b      	ldr	r3, [r7, #4]
2001118e:	685b      	ldr	r3, [r3, #4]
20011190:	f003 0301 	and.w	r3, r3, #1
20011194:	2b00      	cmp	r3, #0
20011196:	d007      	beq.n	200111a8 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
20011198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2001119c:	681b      	ldr	r3, [r3, #0]
2001119e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
200111a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200111a6:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
200111a8:	687b      	ldr	r3, [r7, #4]
200111aa:	685b      	ldr	r3, [r3, #4]
200111ac:	f003 0302 	and.w	r3, r3, #2
200111b0:	2b00      	cmp	r3, #0
200111b2:	d009      	beq.n	200111c8 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
200111b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
200111b8:	685b      	ldr	r3, [r3, #4]
200111ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
200111be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200111c2:	6053      	str	r3, [r2, #4]
200111c4:	e000      	b.n	200111c8 <HAL_PWR_ConfigPVD+0xe4>
    return;
200111c6:	bf00      	nop
  }
}
200111c8:	370c      	adds	r7, #12
200111ca:	46bd      	mov	sp, r7
200111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200111d0:	4770      	bx	lr
200111d2:	bf00      	nop
200111d4:	58024800 	.word	0x58024800

200111d8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
200111d8:	b480      	push	{r7}
200111da:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
200111dc:	4b05      	ldr	r3, [pc, #20]	@ (200111f4 <HAL_PWR_EnablePVD+0x1c>)
200111de:	681b      	ldr	r3, [r3, #0]
200111e0:	4a04      	ldr	r2, [pc, #16]	@ (200111f4 <HAL_PWR_EnablePVD+0x1c>)
200111e2:	f043 0310 	orr.w	r3, r3, #16
200111e6:	6013      	str	r3, [r2, #0]
}
200111e8:	bf00      	nop
200111ea:	46bd      	mov	sp, r7
200111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200111f0:	4770      	bx	lr
200111f2:	bf00      	nop
200111f4:	58024800 	.word	0x58024800

200111f8 <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_DisablePVD (void)
{
200111f8:	b480      	push	{r7}
200111fa:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_PVDEN);
200111fc:	4b05      	ldr	r3, [pc, #20]	@ (20011214 <HAL_PWR_DisablePVD+0x1c>)
200111fe:	681b      	ldr	r3, [r3, #0]
20011200:	4a04      	ldr	r2, [pc, #16]	@ (20011214 <HAL_PWR_DisablePVD+0x1c>)
20011202:	f023 0310 	bic.w	r3, r3, #16
20011206:	6013      	str	r3, [r2, #0]
}
20011208:	bf00      	nop
2001120a:	46bd      	mov	sp, r7
2001120c:	f85d 7b04 	ldr.w	r7, [sp], #4
20011210:	4770      	bx	lr
20011212:	bf00      	nop
20011214:	58024800 	.word	0x58024800

20011218 <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
20011218:	b480      	push	{r7}
2001121a:	b083      	sub	sp, #12
2001121c:	af00      	add	r7, sp, #0
2001121e:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
20011220:	4b06      	ldr	r3, [pc, #24]	@ (2001123c <HAL_PWR_EnableWakeUpPin+0x24>)
20011222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20011224:	4b06      	ldr	r3, [pc, #24]	@ (20011240 <HAL_PWR_EnableWakeUpPin+0x28>)
20011226:	4013      	ands	r3, r2
20011228:	4904      	ldr	r1, [pc, #16]	@ (2001123c <HAL_PWR_EnableWakeUpPin+0x24>)
2001122a:	687a      	ldr	r2, [r7, #4]
2001122c:	4313      	orrs	r3, r2
2001122e:	628b      	str	r3, [r1, #40]	@ 0x28
}
20011230:	bf00      	nop
20011232:	370c      	adds	r7, #12
20011234:	46bd      	mov	sp, r7
20011236:	f85d 7b04 	ldr.w	r7, [sp], #4
2001123a:	4770      	bx	lr
2001123c:	58024800 	.word	0x58024800
20011240:	f000c0c0 	.word	0xf000c0c0

20011244 <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
20011244:	b480      	push	{r7}
20011246:	b083      	sub	sp, #12
20011248:	af00      	add	r7, sp, #0
2001124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
2001124c:	4b07      	ldr	r3, [pc, #28]	@ (2001126c <HAL_PWR_DisableWakeUpPin+0x28>)
2001124e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20011250:	687b      	ldr	r3, [r7, #4]
20011252:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20011256:	43db      	mvns	r3, r3
20011258:	4904      	ldr	r1, [pc, #16]	@ (2001126c <HAL_PWR_DisableWakeUpPin+0x28>)
2001125a:	4013      	ands	r3, r2
2001125c:	628b      	str	r3, [r1, #40]	@ 0x28
}
2001125e:	bf00      	nop
20011260:	370c      	adds	r7, #12
20011262:	46bd      	mov	sp, r7
20011264:	f85d 7b04 	ldr.w	r7, [sp], #4
20011268:	4770      	bx	lr
2001126a:	bf00      	nop
2001126c:	58024800 	.word	0x58024800

20011270 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
20011270:	b480      	push	{r7}
20011272:	b083      	sub	sp, #12
20011274:	af00      	add	r7, sp, #0
20011276:	6078      	str	r0, [r7, #4]
20011278:	460b      	mov	r3, r1
2001127a:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2001127c:	4b08      	ldr	r3, [pc, #32]	@ (200112a0 <HAL_PWR_EnterSLEEPMode+0x30>)
2001127e:	691b      	ldr	r3, [r3, #16]
20011280:	4a07      	ldr	r2, [pc, #28]	@ (200112a0 <HAL_PWR_EnterSLEEPMode+0x30>)
20011282:	f023 0304 	bic.w	r3, r3, #4
20011286:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
20011288:	78fb      	ldrb	r3, [r7, #3]
2001128a:	2b01      	cmp	r3, #1
2001128c:	d101      	bne.n	20011292 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
2001128e:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
20011290:	e000      	b.n	20011294 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
20011292:	bf20      	wfe
}
20011294:	bf00      	nop
20011296:	370c      	adds	r7, #12
20011298:	46bd      	mov	sp, r7
2001129a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001129e:	4770      	bx	lr
200112a0:	e000ed00 	.word	0xe000ed00

200112a4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
200112a4:	b480      	push	{r7}
200112a6:	b083      	sub	sp, #12
200112a8:	af00      	add	r7, sp, #0
200112aa:	6078      	str	r0, [r7, #4]
200112ac:	460b      	mov	r3, r1
200112ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
200112b0:	4b18      	ldr	r3, [pc, #96]	@ (20011314 <HAL_PWR_EnterSTOPMode+0x70>)
200112b2:	681b      	ldr	r3, [r3, #0]
200112b4:	f023 0201 	bic.w	r2, r3, #1
200112b8:	4916      	ldr	r1, [pc, #88]	@ (20011314 <HAL_PWR_EnterSTOPMode+0x70>)
200112ba:	687b      	ldr	r3, [r7, #4]
200112bc:	4313      	orrs	r3, r2
200112be:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
200112c0:	4b14      	ldr	r3, [pc, #80]	@ (20011314 <HAL_PWR_EnterSTOPMode+0x70>)
200112c2:	691b      	ldr	r3, [r3, #16]
200112c4:	4a13      	ldr	r2, [pc, #76]	@ (20011314 <HAL_PWR_EnterSTOPMode+0x70>)
200112c6:	f023 0305 	bic.w	r3, r3, #5
200112ca:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
200112cc:	4b11      	ldr	r3, [pc, #68]	@ (20011314 <HAL_PWR_EnterSTOPMode+0x70>)
200112ce:	691b      	ldr	r3, [r3, #16]
200112d0:	4a10      	ldr	r2, [pc, #64]	@ (20011314 <HAL_PWR_EnterSTOPMode+0x70>)
200112d2:	f023 0302 	bic.w	r3, r3, #2
200112d6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
200112d8:	4b0f      	ldr	r3, [pc, #60]	@ (20011318 <HAL_PWR_EnterSTOPMode+0x74>)
200112da:	691b      	ldr	r3, [r3, #16]
200112dc:	4a0e      	ldr	r2, [pc, #56]	@ (20011318 <HAL_PWR_EnterSTOPMode+0x74>)
200112de:	f043 0304 	orr.w	r3, r3, #4
200112e2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
200112e4:	f3bf 8f4f 	dsb	sy
}
200112e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
200112ea:	f3bf 8f6f 	isb	sy
}
200112ee:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
200112f0:	78fb      	ldrb	r3, [r7, #3]
200112f2:	2b01      	cmp	r3, #1
200112f4:	d101      	bne.n	200112fa <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
200112f6:	bf30      	wfi
200112f8:	e000      	b.n	200112fc <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
200112fa:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
200112fc:	4b06      	ldr	r3, [pc, #24]	@ (20011318 <HAL_PWR_EnterSTOPMode+0x74>)
200112fe:	691b      	ldr	r3, [r3, #16]
20011300:	4a05      	ldr	r2, [pc, #20]	@ (20011318 <HAL_PWR_EnterSTOPMode+0x74>)
20011302:	f023 0304 	bic.w	r3, r3, #4
20011306:	6113      	str	r3, [r2, #16]
}
20011308:	bf00      	nop
2001130a:	370c      	adds	r7, #12
2001130c:	46bd      	mov	sp, r7
2001130e:	f85d 7b04 	ldr.w	r7, [sp], #4
20011312:	4770      	bx	lr
20011314:	58024800 	.word	0x58024800
20011318:	e000ed00 	.word	0xe000ed00

2001131c <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
2001131c:	b480      	push	{r7}
2001131e:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
20011320:	4b0e      	ldr	r3, [pc, #56]	@ (2001135c <HAL_PWR_EnterSTANDBYMode+0x40>)
20011322:	691b      	ldr	r3, [r3, #16]
20011324:	4a0d      	ldr	r2, [pc, #52]	@ (2001135c <HAL_PWR_EnterSTANDBYMode+0x40>)
20011326:	f043 0305 	orr.w	r3, r3, #5
2001132a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
2001132c:	4b0b      	ldr	r3, [pc, #44]	@ (2001135c <HAL_PWR_EnterSTANDBYMode+0x40>)
2001132e:	691b      	ldr	r3, [r3, #16]
20011330:	4a0a      	ldr	r2, [pc, #40]	@ (2001135c <HAL_PWR_EnterSTANDBYMode+0x40>)
20011332:	f043 0302 	orr.w	r3, r3, #2
20011336:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
20011338:	4b09      	ldr	r3, [pc, #36]	@ (20011360 <HAL_PWR_EnterSTANDBYMode+0x44>)
2001133a:	691b      	ldr	r3, [r3, #16]
2001133c:	4a08      	ldr	r2, [pc, #32]	@ (20011360 <HAL_PWR_EnterSTANDBYMode+0x44>)
2001133e:	f043 0304 	orr.w	r3, r3, #4
20011342:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
20011344:	f3bf 8f4f 	dsb	sy
}
20011348:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2001134a:	f3bf 8f6f 	isb	sy
}
2001134e:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
20011350:	bf30      	wfi
}
20011352:	bf00      	nop
20011354:	46bd      	mov	sp, r7
20011356:	f85d 7b04 	ldr.w	r7, [sp], #4
2001135a:	4770      	bx	lr
2001135c:	58024800 	.word	0x58024800
20011360:	e000ed00 	.word	0xe000ed00

20011364 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit (void)
{
20011364:	b480      	push	{r7}
20011366:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
20011368:	4b05      	ldr	r3, [pc, #20]	@ (20011380 <HAL_PWR_EnableSleepOnExit+0x1c>)
2001136a:	691b      	ldr	r3, [r3, #16]
2001136c:	4a04      	ldr	r2, [pc, #16]	@ (20011380 <HAL_PWR_EnableSleepOnExit+0x1c>)
2001136e:	f043 0302 	orr.w	r3, r3, #2
20011372:	6113      	str	r3, [r2, #16]
}
20011374:	bf00      	nop
20011376:	46bd      	mov	sp, r7
20011378:	f85d 7b04 	ldr.w	r7, [sp], #4
2001137c:	4770      	bx	lr
2001137e:	bf00      	nop
20011380:	e000ed00 	.word	0xe000ed00

20011384 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit (void)
{
20011384:	b480      	push	{r7}
20011386:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-Mx System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
20011388:	4b05      	ldr	r3, [pc, #20]	@ (200113a0 <HAL_PWR_DisableSleepOnExit+0x1c>)
2001138a:	691b      	ldr	r3, [r3, #16]
2001138c:	4a04      	ldr	r2, [pc, #16]	@ (200113a0 <HAL_PWR_DisableSleepOnExit+0x1c>)
2001138e:	f023 0302 	bic.w	r3, r3, #2
20011392:	6113      	str	r3, [r2, #16]
}
20011394:	bf00      	nop
20011396:	46bd      	mov	sp, r7
20011398:	f85d 7b04 	ldr.w	r7, [sp], #4
2001139c:	4770      	bx	lr
2001139e:	bf00      	nop
200113a0:	e000ed00 	.word	0xe000ed00

200113a4 <HAL_PWR_EnableSEVOnPend>:
  *         pending event / interrupt even if it's disabled or has insufficient
  *         priority to cause exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_EnableSEVOnPend (void)
{
200113a4:	b480      	push	{r7}
200113a6:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
200113a8:	4b05      	ldr	r3, [pc, #20]	@ (200113c0 <HAL_PWR_EnableSEVOnPend+0x1c>)
200113aa:	691b      	ldr	r3, [r3, #16]
200113ac:	4a04      	ldr	r2, [pc, #16]	@ (200113c0 <HAL_PWR_EnableSEVOnPend+0x1c>)
200113ae:	f043 0310 	orr.w	r3, r3, #16
200113b2:	6113      	str	r3, [r2, #16]
}
200113b4:	bf00      	nop
200113b6:	46bd      	mov	sp, r7
200113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200113bc:	4770      	bx	lr
200113be:	bf00      	nop
200113c0:	e000ed00 	.word	0xe000ed00

200113c4 <HAL_PWR_DisableSEVOnPend>:
  * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
  *         enabled pending causes exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_DisableSEVOnPend (void)
{
200113c4:	b480      	push	{r7}
200113c6:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
200113c8:	4b05      	ldr	r3, [pc, #20]	@ (200113e0 <HAL_PWR_DisableSEVOnPend+0x1c>)
200113ca:	691b      	ldr	r3, [r3, #16]
200113cc:	4a04      	ldr	r2, [pc, #16]	@ (200113e0 <HAL_PWR_DisableSEVOnPend+0x1c>)
200113ce:	f023 0310 	bic.w	r3, r3, #16
200113d2:	6113      	str	r3, [r2, #16]
}
200113d4:	bf00      	nop
200113d6:	46bd      	mov	sp, r7
200113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200113dc:	4770      	bx	lr
200113de:	bf00      	nop
200113e0:	e000ed00 	.word	0xe000ed00

200113e4 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None.
  */
void HAL_PWR_PVD_IRQHandler (void)
{
200113e4:	b580      	push	{r7, lr}
200113e6:	af00      	add	r7, sp, #0
      HAL_PWR_PVDCallback ();
    }
  }
#else /* Single core devices */
  /* PVD EXTI line interrupt detected */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
200113e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
200113ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
200113f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200113f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200113f8:	d10b      	bne.n	20011412 <HAL_PWR_PVD_IRQHandler+0x2e>
  {
    /* Clear PWR EXTI pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
200113fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
200113fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20011402:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2001140a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback ();
2001140e:	f000 f802 	bl	20011416 <HAL_PWR_PVDCallback>
  }
#endif /* defined (DUAL_CORE) */
}
20011412:	bf00      	nop
20011414:	bd80      	pop	{r7, pc}

20011416 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
20011416:	b480      	push	{r7}
20011418:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
2001141a:	bf00      	nop
2001141c:	46bd      	mov	sp, r7
2001141e:	f85d 7b04 	ldr.w	r7, [sp], #4
20011422:	4770      	bx	lr

20011424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
20011424:	b580      	push	{r7, lr}
20011426:	b084      	sub	sp, #16
20011428:	af00      	add	r7, sp, #0
2001142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
2001142c:	4b19      	ldr	r3, [pc, #100]	@ (20011494 <HAL_PWREx_ConfigSupply+0x70>)
2001142e:	68db      	ldr	r3, [r3, #12]
20011430:	f003 0304 	and.w	r3, r3, #4
20011434:	2b04      	cmp	r3, #4
20011436:	d00a      	beq.n	2001144e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
20011438:	4b16      	ldr	r3, [pc, #88]	@ (20011494 <HAL_PWREx_ConfigSupply+0x70>)
2001143a:	68db      	ldr	r3, [r3, #12]
2001143c:	f003 0307 	and.w	r3, r3, #7
20011440:	687a      	ldr	r2, [r7, #4]
20011442:	429a      	cmp	r2, r3
20011444:	d001      	beq.n	2001144a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
20011446:	2301      	movs	r3, #1
20011448:	e01f      	b.n	2001148a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
2001144a:	2300      	movs	r3, #0
2001144c:	e01d      	b.n	2001148a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
2001144e:	4b11      	ldr	r3, [pc, #68]	@ (20011494 <HAL_PWREx_ConfigSupply+0x70>)
20011450:	68db      	ldr	r3, [r3, #12]
20011452:	f023 0207 	bic.w	r2, r3, #7
20011456:	490f      	ldr	r1, [pc, #60]	@ (20011494 <HAL_PWREx_ConfigSupply+0x70>)
20011458:	687b      	ldr	r3, [r7, #4]
2001145a:	4313      	orrs	r3, r2
2001145c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
2001145e:	f7f0 ff2f 	bl	200022c0 <HAL_GetTick>
20011462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
20011464:	e009      	b.n	2001147a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
20011466:	f7f0 ff2b 	bl	200022c0 <HAL_GetTick>
2001146a:	4602      	mov	r2, r0
2001146c:	68fb      	ldr	r3, [r7, #12]
2001146e:	1ad3      	subs	r3, r2, r3
20011470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20011474:	d901      	bls.n	2001147a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
20011476:	2301      	movs	r3, #1
20011478:	e007      	b.n	2001148a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2001147a:	4b06      	ldr	r3, [pc, #24]	@ (20011494 <HAL_PWREx_ConfigSupply+0x70>)
2001147c:	685b      	ldr	r3, [r3, #4]
2001147e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20011482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20011486:	d1ee      	bne.n	20011466 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
20011488:	2300      	movs	r3, #0
}
2001148a:	4618      	mov	r0, r3
2001148c:	3710      	adds	r7, #16
2001148e:	46bd      	mov	sp, r7
20011490:	bd80      	pop	{r7, pc}
20011492:	bf00      	nop
20011494:	58024800 	.word	0x58024800

20011498 <HAL_PWREx_GetSupplyConfig>:
/**
  * @brief Get the power supply configuration.
  * @retval The supply configuration.
  */
uint32_t HAL_PWREx_GetSupplyConfig (void)
{
20011498:	b480      	push	{r7}
2001149a:	af00      	add	r7, sp, #0
  return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
2001149c:	4b04      	ldr	r3, [pc, #16]	@ (200114b0 <HAL_PWREx_GetSupplyConfig+0x18>)
2001149e:	68db      	ldr	r3, [r3, #12]
200114a0:	f003 0307 	and.w	r3, r3, #7
}
200114a4:	4618      	mov	r0, r3
200114a6:	46bd      	mov	sp, r7
200114a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200114ac:	4770      	bx	lr
200114ae:	bf00      	nop
200114b0:	58024800 	.word	0x58024800

200114b4 <HAL_PWREx_ControlVoltageScaling>:
  *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
  *         low power mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
{
200114b4:	b580      	push	{r7, lr}
200114b6:	b084      	sub	sp, #16
200114b8:	af00      	add	r7, sp, #0
200114ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));

  /* Get the voltage scaling  */
  if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
200114bc:	4b3f      	ldr	r3, [pc, #252]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
200114be:	685b      	ldr	r3, [r3, #4]
200114c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
200114c4:	687a      	ldr	r2, [r7, #4]
200114c6:	429a      	cmp	r2, r3
200114c8:	d101      	bne.n	200114ce <HAL_PWREx_ControlVoltageScaling+0x1a>
  {
    /* Old and new voltage scaling configuration match : nothing to do */
    return HAL_OK;
200114ca:	2300      	movs	r3, #0
200114cc:	e072      	b.n	200115b4 <HAL_PWREx_ControlVoltageScaling+0x100>
#if defined (PWR_SRDCR_VOS)
  /* Set the voltage range */
  MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#else
#if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
200114ce:	687b      	ldr	r3, [r7, #4]
200114d0:	2b00      	cmp	r3, #0
200114d2:	d129      	bne.n	20011528 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
200114d4:	4b39      	ldr	r3, [pc, #228]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
200114d6:	68db      	ldr	r3, [r3, #12]
200114d8:	f003 0302 	and.w	r3, r3, #2
200114dc:	2b02      	cmp	r3, #2
200114de:	d121      	bne.n	20011524 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set the voltage range */
      MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
200114e0:	4b36      	ldr	r3, [pc, #216]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
200114e2:	699b      	ldr	r3, [r3, #24]
200114e4:	4a35      	ldr	r2, [pc, #212]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
200114e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
200114ea:	6193      	str	r3, [r2, #24]

      /* Get tick */
      tickstart = HAL_GetTick ();
200114ec:	f7f0 fee8 	bl	200022c0 <HAL_GetTick>
200114f0:	60f8      	str	r0, [r7, #12]

      /* Wait till voltage level flag is set */
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
200114f2:	e009      	b.n	20011508 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
200114f4:	f7f0 fee4 	bl	200022c0 <HAL_GetTick>
200114f8:	4602      	mov	r2, r0
200114fa:	68fb      	ldr	r3, [r7, #12]
200114fc:	1ad3      	subs	r3, r2, r3
200114fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20011502:	d901      	bls.n	20011508 <HAL_PWREx_ControlVoltageScaling+0x54>
        {
          return HAL_ERROR;
20011504:	2301      	movs	r3, #1
20011506:	e055      	b.n	200115b4 <HAL_PWREx_ControlVoltageScaling+0x100>
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
20011508:	4b2c      	ldr	r3, [pc, #176]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
2001150a:	685b      	ldr	r3, [r3, #4]
2001150c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20011510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20011514:	d1ee      	bne.n	200114f4 <HAL_PWREx_ControlVoltageScaling+0x40>
        }
      }

      /* Enable the PWR overdrive */
      SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
20011516:	4b2a      	ldr	r3, [pc, #168]	@ (200115c0 <HAL_PWREx_ControlVoltageScaling+0x10c>)
20011518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2001151a:	4a29      	ldr	r2, [pc, #164]	@ (200115c0 <HAL_PWREx_ControlVoltageScaling+0x10c>)
2001151c:	f043 0301 	orr.w	r3, r3, #1
20011520:	62d3      	str	r3, [r2, #44]	@ 0x2c
20011522:	e031      	b.n	20011588 <HAL_PWREx_ControlVoltageScaling+0xd4>
    }
    else
    {
      /* The voltage scale 0 is only possible when LDO regulator is enabled */
      return HAL_ERROR;
20011524:	2301      	movs	r3, #1
20011526:	e045      	b.n	200115b4 <HAL_PWREx_ControlVoltageScaling+0x100>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
20011528:	4b24      	ldr	r3, [pc, #144]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
2001152a:	685b      	ldr	r3, [r3, #4]
2001152c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20011530:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
20011534:	d120      	bne.n	20011578 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
20011536:	4b22      	ldr	r3, [pc, #136]	@ (200115c0 <HAL_PWREx_ControlVoltageScaling+0x10c>)
20011538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2001153a:	f003 0301 	and.w	r3, r3, #1
2001153e:	2b00      	cmp	r3, #0
20011540:	d01a      	beq.n	20011578 <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        /* Disable the PWR overdrive */
        CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
20011542:	4b1f      	ldr	r3, [pc, #124]	@ (200115c0 <HAL_PWREx_ControlVoltageScaling+0x10c>)
20011544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20011546:	4a1e      	ldr	r2, [pc, #120]	@ (200115c0 <HAL_PWREx_ControlVoltageScaling+0x10c>)
20011548:	f023 0301 	bic.w	r3, r3, #1
2001154c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Get tick */
        tickstart = HAL_GetTick ();
2001154e:	f7f0 feb7 	bl	200022c0 <HAL_GetTick>
20011552:	60f8      	str	r0, [r7, #12]

        /* Wait till voltage level flag is set */
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
20011554:	e009      	b.n	2001156a <HAL_PWREx_ControlVoltageScaling+0xb6>
        {
          if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
20011556:	f7f0 feb3 	bl	200022c0 <HAL_GetTick>
2001155a:	4602      	mov	r2, r0
2001155c:	68fb      	ldr	r3, [r7, #12]
2001155e:	1ad3      	subs	r3, r2, r3
20011560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20011564:	d901      	bls.n	2001156a <HAL_PWREx_ControlVoltageScaling+0xb6>
          {
            return HAL_ERROR;
20011566:	2301      	movs	r3, #1
20011568:	e024      	b.n	200115b4 <HAL_PWREx_ControlVoltageScaling+0x100>
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2001156a:	4b14      	ldr	r3, [pc, #80]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
2001156c:	685b      	ldr	r3, [r3, #4]
2001156e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20011572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20011576:	d1ee      	bne.n	20011556 <HAL_PWREx_ControlVoltageScaling+0xa2>
        }
      }
    }

    /* Set the voltage range */
    MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
20011578:	4b10      	ldr	r3, [pc, #64]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
2001157a:	699b      	ldr	r3, [r3, #24]
2001157c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
20011580:	490e      	ldr	r1, [pc, #56]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
20011582:	687b      	ldr	r3, [r7, #4]
20011584:	4313      	orrs	r3, r2
20011586:	618b      	str	r3, [r1, #24]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
#endif /* defined (SYSCFG_PWRCR_ODEN) */
#endif /* defined (PWR_SRDCR_VOS) */

  /* Get tick */
  tickstart = HAL_GetTick ();
20011588:	f7f0 fe9a 	bl	200022c0 <HAL_GetTick>
2001158c:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2001158e:	e009      	b.n	200115a4 <HAL_PWREx_ControlVoltageScaling+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
20011590:	f7f0 fe96 	bl	200022c0 <HAL_GetTick>
20011594:	4602      	mov	r2, r0
20011596:	68fb      	ldr	r3, [r7, #12]
20011598:	1ad3      	subs	r3, r2, r3
2001159a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
2001159e:	d901      	bls.n	200115a4 <HAL_PWREx_ControlVoltageScaling+0xf0>
    {
      return HAL_ERROR;
200115a0:	2301      	movs	r3, #1
200115a2:	e007      	b.n	200115b4 <HAL_PWREx_ControlVoltageScaling+0x100>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
200115a4:	4b05      	ldr	r3, [pc, #20]	@ (200115bc <HAL_PWREx_ControlVoltageScaling+0x108>)
200115a6:	685b      	ldr	r3, [r3, #4]
200115a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
200115ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
200115b0:	d1ee      	bne.n	20011590 <HAL_PWREx_ControlVoltageScaling+0xdc>
    }
  }

  return HAL_OK;
200115b2:	2300      	movs	r3, #0
}
200115b4:	4618      	mov	r0, r3
200115b6:	3710      	adds	r7, #16
200115b8:	46bd      	mov	sp, r7
200115ba:	bd80      	pop	{r7, pc}
200115bc:	58024800 	.word	0x58024800
200115c0:	58000400 	.word	0x58000400

200115c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Get the main internal regulator output voltage. Reflecting the last
  *        VOS value applied to the PMU.
  * @retval The current applied VOS selection.
  */
uint32_t HAL_PWREx_GetVoltageRange (void)
{
200115c4:	b480      	push	{r7}
200115c6:	af00      	add	r7, sp, #0
  /* Get the active voltage scaling */
  return (PWR->CSR1 & PWR_CSR1_ACTVOS);
200115c8:	4b04      	ldr	r3, [pc, #16]	@ (200115dc <HAL_PWREx_GetVoltageRange+0x18>)
200115ca:	685b      	ldr	r3, [r3, #4]
200115cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
200115d0:	4618      	mov	r0, r3
200115d2:	46bd      	mov	sp, r7
200115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200115d8:	4770      	bx	lr
200115da:	bf00      	nop
200115dc:	58024800 	.word	0x58024800

200115e0 <HAL_PWREx_ControlStopModeVoltageScaling>:
  * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
  *         when exiting from system Stop mode.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
{
200115e0:	b480      	push	{r7}
200115e2:	b083      	sub	sp, #12
200115e4:	af00      	add	r7, sp, #0
200115e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));

  /* Return the stop mode voltage range */
  MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
200115e8:	4b07      	ldr	r3, [pc, #28]	@ (20011608 <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
200115ea:	681b      	ldr	r3, [r3, #0]
200115ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
200115f0:	4905      	ldr	r1, [pc, #20]	@ (20011608 <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
200115f2:	687b      	ldr	r3, [r7, #4]
200115f4:	4313      	orrs	r3, r2
200115f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
200115f8:	2300      	movs	r3, #0
}
200115fa:	4618      	mov	r0, r3
200115fc:	370c      	adds	r7, #12
200115fe:	46bd      	mov	sp, r7
20011600:	f85d 7b04 	ldr.w	r7, [sp], #4
20011604:	4770      	bx	lr
20011606:	bf00      	nop
20011608:	58024800 	.word	0x58024800

2001160c <HAL_PWREx_GetStopModeVoltageRange>:
/**
  * @brief Get the main internal regulator output voltage in STOP mode.
  * @retval The actual applied VOS selection.
  */
uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
{
2001160c:	b480      	push	{r7}
2001160e:	af00      	add	r7, sp, #0
  /* Return the stop voltage scaling */
  return (PWR->CR1 & PWR_CR1_SVOS);
20011610:	4b04      	ldr	r3, [pc, #16]	@ (20011624 <HAL_PWREx_GetStopModeVoltageRange+0x18>)
20011612:	681b      	ldr	r3, [r3, #0]
20011614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
20011618:	4618      	mov	r0, r3
2001161a:	46bd      	mov	sp, r7
2001161c:	f85d 7b04 	ldr.w	r7, [sp], #4
20011620:	4770      	bx	lr
20011622:	bf00      	nop
20011624:	58024800 	.word	0x58024800

20011628 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
20011628:	b480      	push	{r7}
2001162a:	b085      	sub	sp, #20
2001162c:	af00      	add	r7, sp, #0
2001162e:	60f8      	str	r0, [r7, #12]
20011630:	460b      	mov	r3, r1
20011632:	607a      	str	r2, [r7, #4]
20011634:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
20011636:	4b20      	ldr	r3, [pc, #128]	@ (200116b8 <HAL_PWREx_EnterSTOPMode+0x90>)
20011638:	681b      	ldr	r3, [r3, #0]
2001163a:	f023 0201 	bic.w	r2, r3, #1
2001163e:	491e      	ldr	r1, [pc, #120]	@ (200116b8 <HAL_PWREx_EnterSTOPMode+0x90>)
20011640:	68fb      	ldr	r3, [r7, #12]
20011642:	4313      	orrs	r3, r2
20011644:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
20011646:	687b      	ldr	r3, [r7, #4]
20011648:	2b00      	cmp	r3, #0
2001164a:	d11e      	bne.n	2001168a <HAL_PWREx_EnterSTOPMode+0x62>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
2001164c:	4b1a      	ldr	r3, [pc, #104]	@ (200116b8 <HAL_PWREx_EnterSTOPMode+0x90>)
2001164e:	691b      	ldr	r3, [r3, #16]
20011650:	4a19      	ldr	r2, [pc, #100]	@ (200116b8 <HAL_PWREx_EnterSTOPMode+0x90>)
20011652:	f023 0301 	bic.w	r3, r3, #1
20011656:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
20011658:	4b18      	ldr	r3, [pc, #96]	@ (200116bc <HAL_PWREx_EnterSTOPMode+0x94>)
2001165a:	691b      	ldr	r3, [r3, #16]
2001165c:	4a17      	ldr	r2, [pc, #92]	@ (200116bc <HAL_PWREx_EnterSTOPMode+0x94>)
2001165e:	f043 0304 	orr.w	r3, r3, #4
20011662:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
20011664:	f3bf 8f4f 	dsb	sy
}
20011668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2001166a:	f3bf 8f6f 	isb	sy
}
2001166e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
20011670:	7afb      	ldrb	r3, [r7, #11]
20011672:	2b01      	cmp	r3, #1
20011674:	d101      	bne.n	2001167a <HAL_PWREx_EnterSTOPMode+0x52>
    {
      /* Request Wait For Interrupt */
      __WFI ();
20011676:	bf30      	wfi
20011678:	e000      	b.n	2001167c <HAL_PWREx_EnterSTOPMode+0x54>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
2001167a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2001167c:	4b0f      	ldr	r3, [pc, #60]	@ (200116bc <HAL_PWREx_EnterSTOPMode+0x94>)
2001167e:	691b      	ldr	r3, [r3, #16]
20011680:	4a0e      	ldr	r2, [pc, #56]	@ (200116bc <HAL_PWREx_EnterSTOPMode+0x94>)
20011682:	f023 0304 	bic.w	r3, r3, #4
20011686:	6113      	str	r3, [r2, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
20011688:	e00f      	b.n	200116aa <HAL_PWREx_EnterSTOPMode+0x82>
  else if (Domain == PWR_D2_DOMAIN)
2001168a:	687b      	ldr	r3, [r7, #4]
2001168c:	2b01      	cmp	r3, #1
2001168e:	d106      	bne.n	2001169e <HAL_PWREx_EnterSTOPMode+0x76>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
20011690:	4b09      	ldr	r3, [pc, #36]	@ (200116b8 <HAL_PWREx_EnterSTOPMode+0x90>)
20011692:	691b      	ldr	r3, [r3, #16]
20011694:	4a08      	ldr	r2, [pc, #32]	@ (200116b8 <HAL_PWREx_EnterSTOPMode+0x90>)
20011696:	f023 0302 	bic.w	r3, r3, #2
2001169a:	6113      	str	r3, [r2, #16]
}
2001169c:	e005      	b.n	200116aa <HAL_PWREx_EnterSTOPMode+0x82>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
2001169e:	4b06      	ldr	r3, [pc, #24]	@ (200116b8 <HAL_PWREx_EnterSTOPMode+0x90>)
200116a0:	691b      	ldr	r3, [r3, #16]
200116a2:	4a05      	ldr	r2, [pc, #20]	@ (200116b8 <HAL_PWREx_EnterSTOPMode+0x90>)
200116a4:	f023 0304 	bic.w	r3, r3, #4
200116a8:	6113      	str	r3, [r2, #16]
}
200116aa:	bf00      	nop
200116ac:	3714      	adds	r7, #20
200116ae:	46bd      	mov	sp, r7
200116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200116b4:	4770      	bx	lr
200116b6:	bf00      	nop
200116b8:	58024800 	.word	0x58024800
200116bc:	e000ed00 	.word	0xe000ed00

200116c0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
200116c0:	b480      	push	{r7}
200116c2:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
200116c4:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
200116c6:	bf00      	nop
200116c8:	46bd      	mov	sp, r7
200116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
200116ce:	4770      	bx	lr

200116d0 <HAL_PWREx_EnterSTANDBYMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
  *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
  * @retval None
  */
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
{
200116d0:	b480      	push	{r7}
200116d2:	b083      	sub	sp, #12
200116d4:	af00      	add	r7, sp, #0
200116d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
200116d8:	687b      	ldr	r3, [r7, #4]
200116da:	2b00      	cmp	r3, #0
200116dc:	d10d      	bne.n	200116fa <HAL_PWREx_EnterSTANDBYMode+0x2a>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
200116de:	4b12      	ldr	r3, [pc, #72]	@ (20011728 <HAL_PWREx_EnterSTANDBYMode+0x58>)
200116e0:	691b      	ldr	r3, [r3, #16]
200116e2:	4a11      	ldr	r2, [pc, #68]	@ (20011728 <HAL_PWREx_EnterSTANDBYMode+0x58>)
200116e4:	f043 0301 	orr.w	r3, r3, #1
200116e8:	6113      	str	r3, [r2, #16]
    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
#endif /*DUAL_CORE*/

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
200116ea:	4b10      	ldr	r3, [pc, #64]	@ (2001172c <HAL_PWREx_EnterSTANDBYMode+0x5c>)
200116ec:	691b      	ldr	r3, [r3, #16]
200116ee:	4a0f      	ldr	r2, [pc, #60]	@ (2001172c <HAL_PWREx_EnterSTANDBYMode+0x5c>)
200116f0:	f043 0304 	orr.w	r3, r3, #4
200116f4:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
    __force_stores ();
#endif /* defined (__CC_ARM) */

    /* Request Wait For Interrupt */
    __WFI ();
200116f6:	bf30      	wfi
#if defined (DUAL_CORE)
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
#endif /* defined (DUAL_CORE) */
  }
}
200116f8:	e00f      	b.n	2001171a <HAL_PWREx_EnterSTANDBYMode+0x4a>
  else if (Domain == PWR_D2_DOMAIN)
200116fa:	687b      	ldr	r3, [r7, #4]
200116fc:	2b01      	cmp	r3, #1
200116fe:	d106      	bne.n	2001170e <HAL_PWREx_EnterSTANDBYMode+0x3e>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
20011700:	4b09      	ldr	r3, [pc, #36]	@ (20011728 <HAL_PWREx_EnterSTANDBYMode+0x58>)
20011702:	691b      	ldr	r3, [r3, #16]
20011704:	4a08      	ldr	r2, [pc, #32]	@ (20011728 <HAL_PWREx_EnterSTANDBYMode+0x58>)
20011706:	f043 0302 	orr.w	r3, r3, #2
2001170a:	6113      	str	r3, [r2, #16]
}
2001170c:	e005      	b.n	2001171a <HAL_PWREx_EnterSTANDBYMode+0x4a>
    SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
2001170e:	4b06      	ldr	r3, [pc, #24]	@ (20011728 <HAL_PWREx_EnterSTANDBYMode+0x58>)
20011710:	691b      	ldr	r3, [r3, #16]
20011712:	4a05      	ldr	r2, [pc, #20]	@ (20011728 <HAL_PWREx_EnterSTANDBYMode+0x58>)
20011714:	f043 0304 	orr.w	r3, r3, #4
20011718:	6113      	str	r3, [r2, #16]
}
2001171a:	bf00      	nop
2001171c:	370c      	adds	r7, #12
2001171e:	46bd      	mov	sp, r7
20011720:	f85d 7b04 	ldr.w	r7, [sp], #4
20011724:	4770      	bx	lr
20011726:	bf00      	nop
20011728:	58024800 	.word	0x58024800
2001172c:	e000ed00 	.word	0xe000ed00

20011730 <HAL_PWREx_ConfigD3Domain>:
  *                                     regardless of the CPU sub-system low
  *                                     power mode.
  * @retval None
  */
void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
{
20011730:	b480      	push	{r7}
20011732:	b083      	sub	sp, #12
20011734:	af00      	add	r7, sp, #0
20011736:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_D3_STATE (D3State));

  /* Keep D3/SRD in run mode */
  MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
20011738:	4b06      	ldr	r3, [pc, #24]	@ (20011754 <HAL_PWREx_ConfigD3Domain+0x24>)
2001173a:	691b      	ldr	r3, [r3, #16]
2001173c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
20011740:	4904      	ldr	r1, [pc, #16]	@ (20011754 <HAL_PWREx_ConfigD3Domain+0x24>)
20011742:	687b      	ldr	r3, [r7, #4]
20011744:	4313      	orrs	r3, r2
20011746:	610b      	str	r3, [r1, #16]
}
20011748:	bf00      	nop
2001174a:	370c      	adds	r7, #12
2001174c:	46bd      	mov	sp, r7
2001174e:	f85d 7b04 	ldr.w	r7, [sp], #4
20011752:	4770      	bx	lr
20011754:	58024800 	.word	0x58024800

20011758 <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
20011758:	b480      	push	{r7}
2001175a:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
2001175c:	4b05      	ldr	r3, [pc, #20]	@ (20011774 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
2001175e:	681b      	ldr	r3, [r3, #0]
20011760:	4a04      	ldr	r2, [pc, #16]	@ (20011774 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
20011762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
20011766:	6013      	str	r3, [r2, #0]
}
20011768:	bf00      	nop
2001176a:	46bd      	mov	sp, r7
2001176c:	f85d 7b04 	ldr.w	r7, [sp], #4
20011770:	4770      	bx	lr
20011772:	bf00      	nop
20011774:	58024800 	.word	0x58024800

20011778 <HAL_PWREx_DisableFlashPowerDown>:
  *         to obtain the best trade-off between low-power consumption and
  *         restart time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_DisableFlashPowerDown (void)
{
20011778:	b480      	push	{r7}
2001177a:	af00      	add	r7, sp, #0
  /* Disable the Flash Power Down */
  CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
2001177c:	4b05      	ldr	r3, [pc, #20]	@ (20011794 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
2001177e:	681b      	ldr	r3, [r3, #0]
20011780:	4a04      	ldr	r2, [pc, #16]	@ (20011794 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
20011782:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
20011786:	6013      	str	r3, [r2, #0]
}
20011788:	bf00      	nop
2001178a:	46bd      	mov	sp, r7
2001178c:	f85d 7b04 	ldr.w	r7, [sp], #4
20011790:	4770      	bx	lr
20011792:	bf00      	nop
20011794:	58024800 	.word	0x58024800

20011798 <HAL_PWREx_EnableWakeUpPin>:
  *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
  *         Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
{
20011798:	b480      	push	{r7}
2001179a:	b093      	sub	sp, #76	@ 0x4c
2001179c:	af00      	add	r7, sp, #0
2001179e:	6078      	str	r0, [r7, #4]
  uint32_t pinConfig;
  uint32_t regMask;
  const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
200117a0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
200117a4:	647b      	str	r3, [r7, #68]	@ 0x44
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
  assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
  assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));

  pinConfig = sPinParams->WakeUpPin | \
200117a6:	687b      	ldr	r3, [r7, #4]
200117a8:	681a      	ldr	r2, [r3, #0]
              (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP1_Pos) & 0x1FU)) | \
200117aa:	687b      	ldr	r3, [r7, #4]
200117ac:	6859      	ldr	r1, [r3, #4]
200117ae:	687b      	ldr	r3, [r7, #4]
200117b0:	681b      	ldr	r3, [r3, #0]
200117b2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200117b4:	693b      	ldr	r3, [r7, #16]
200117b6:	fa93 f3a3 	rbit	r3, r3
200117ba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
200117bc:	68fb      	ldr	r3, [r7, #12]
200117be:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
200117c0:	697b      	ldr	r3, [r7, #20]
200117c2:	2b00      	cmp	r3, #0
200117c4:	d101      	bne.n	200117ca <HAL_PWREx_EnableWakeUpPin+0x32>
  {
    return 32U;
200117c6:	2320      	movs	r3, #32
200117c8:	e003      	b.n	200117d2 <HAL_PWREx_EnableWakeUpPin+0x3a>
  }
  return __builtin_clz(value);
200117ca:	697b      	ldr	r3, [r7, #20]
200117cc:	fab3 f383 	clz	r3, r3
200117d0:	b2db      	uxtb	r3, r3
200117d2:	3308      	adds	r3, #8
200117d4:	f003 031f 	and.w	r3, r3, #31
200117d8:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
200117dc:	431a      	orrs	r2, r3
              (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) + PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
200117de:	687b      	ldr	r3, [r7, #4]
200117e0:	6899      	ldr	r1, [r3, #8]
200117e2:	687b      	ldr	r3, [r7, #4]
200117e4:	681b      	ldr	r3, [r3, #0]
200117e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200117e8:	69fb      	ldr	r3, [r7, #28]
200117ea:	fa93 f3a3 	rbit	r3, r3
200117ee:	61bb      	str	r3, [r7, #24]
  return result;
200117f0:	69bb      	ldr	r3, [r7, #24]
200117f2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
200117f4:	6a3b      	ldr	r3, [r7, #32]
200117f6:	2b00      	cmp	r3, #0
200117f8:	d101      	bne.n	200117fe <HAL_PWREx_EnableWakeUpPin+0x66>
    return 32U;
200117fa:	2320      	movs	r3, #32
200117fc:	e003      	b.n	20011806 <HAL_PWREx_EnableWakeUpPin+0x6e>
  return __builtin_clz(value);
200117fe:	6a3b      	ldr	r3, [r7, #32]
20011800:	fab3 f383 	clz	r3, r3
20011804:	b2db      	uxtb	r3, r3
20011806:	3308      	adds	r3, #8
20011808:	005b      	lsls	r3, r3, #1
2001180a:	f003 031e 	and.w	r3, r3, #30
2001180e:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
20011812:	4313      	orrs	r3, r2
20011814:	643b      	str	r3, [r7, #64]	@ 0x40

  regMask   = sPinParams->WakeUpPin | \
20011816:	687b      	ldr	r3, [r7, #4]
20011818:	681a      	ldr	r2, [r3, #0]
              (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
2001181a:	687b      	ldr	r3, [r7, #4]
2001181c:	681b      	ldr	r3, [r3, #0]
2001181e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20011820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20011822:	fa93 f3a3 	rbit	r3, r3
20011826:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
20011828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
2001182c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2001182e:	2b00      	cmp	r3, #0
20011830:	d101      	bne.n	20011836 <HAL_PWREx_EnableWakeUpPin+0x9e>
    return 32U;
20011832:	2320      	movs	r3, #32
20011834:	e003      	b.n	2001183e <HAL_PWREx_EnableWakeUpPin+0xa6>
  return __builtin_clz(value);
20011836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20011838:	fab3 f383 	clz	r3, r3
2001183c:	b2db      	uxtb	r3, r3
2001183e:	f003 031f 	and.w	r3, r3, #31
20011842:	f44f 7180 	mov.w	r1, #256	@ 0x100
20011846:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
2001184a:	431a      	orrs	r2, r3
              (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) & 0x1FU));
2001184c:	687b      	ldr	r3, [r7, #4]
2001184e:	681b      	ldr	r3, [r3, #0]
20011850:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20011852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20011854:	fa93 f3a3 	rbit	r3, r3
20011858:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
2001185a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2001185c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
2001185e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20011860:	2b00      	cmp	r3, #0
20011862:	d101      	bne.n	20011868 <HAL_PWREx_EnableWakeUpPin+0xd0>
    return 32U;
20011864:	2320      	movs	r3, #32
20011866:	e003      	b.n	20011870 <HAL_PWREx_EnableWakeUpPin+0xd8>
  return __builtin_clz(value);
20011868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2001186a:	fab3 f383 	clz	r3, r3
2001186e:	b2db      	uxtb	r3, r3
20011870:	005b      	lsls	r3, r3, #1
20011872:	f003 031e 	and.w	r3, r3, #30
20011876:	6c79      	ldr	r1, [r7, #68]	@ 0x44
20011878:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
2001187c:	4313      	orrs	r3, r2
2001187e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge) */
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
20011880:	4b0e      	ldr	r3, [pc, #56]	@ (200118bc <HAL_PWREx_EnableWakeUpPin+0x124>)
20011882:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
20011884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20011886:	43db      	mvns	r3, r3
20011888:	401a      	ands	r2, r3
2001188a:	490c      	ldr	r1, [pc, #48]	@ (200118bc <HAL_PWREx_EnableWakeUpPin+0x124>)
2001188c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2001188e:	4313      	orrs	r3, r2
20011890:	628b      	str	r3, [r1, #40]	@ 0x28
#ifndef DUAL_CORE
  /* Configure the Wakeup Pin EXTI Line */
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
20011892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2001189a:	f023 52fc 	bic.w	r2, r3, #528482304	@ 0x1f800000
2001189e:	687b      	ldr	r3, [r7, #4]
200118a0:	681b      	ldr	r3, [r3, #0]
200118a2:	05db      	lsls	r3, r3, #23
200118a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
200118a8:	4313      	orrs	r3, r2
200118aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
#endif /* !DUAL_CORE */
}
200118ae:	bf00      	nop
200118b0:	374c      	adds	r7, #76	@ 0x4c
200118b2:	46bd      	mov	sp, r7
200118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200118b8:	4770      	bx	lr
200118ba:	bf00      	nop
200118bc:	58024800 	.word	0x58024800

200118c0 <HAL_PWREx_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
  *         devices that support GPIOI port.
  * @retval None
  */
void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
{
200118c0:	b480      	push	{r7}
200118c2:	b083      	sub	sp, #12
200118c4:	af00      	add	r7, sp, #0
200118c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));

  /* Disable the WakeUpPin */
  CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
200118c8:	4b06      	ldr	r3, [pc, #24]	@ (200118e4 <HAL_PWREx_DisableWakeUpPin+0x24>)
200118ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
200118cc:	687b      	ldr	r3, [r7, #4]
200118ce:	43db      	mvns	r3, r3
200118d0:	4904      	ldr	r1, [pc, #16]	@ (200118e4 <HAL_PWREx_DisableWakeUpPin+0x24>)
200118d2:	4013      	ands	r3, r2
200118d4:	628b      	str	r3, [r1, #40]	@ 0x28
}
200118d6:	bf00      	nop
200118d8:	370c      	adds	r7, #12
200118da:	46bd      	mov	sp, r7
200118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200118e0:	4770      	bx	lr
200118e2:	bf00      	nop
200118e4:	58024800 	.word	0x58024800

200118e8 <HAL_PWREx_GetWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval The Wake-Up pin flag.
  */
uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
{
200118e8:	b480      	push	{r7}
200118ea:	b083      	sub	sp, #12
200118ec:	af00      	add	r7, sp, #0
200118ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Return the wake up pin flag */
  return (PWR->WKUPFR & WakeUpFlag);
200118f0:	4b04      	ldr	r3, [pc, #16]	@ (20011904 <HAL_PWREx_GetWakeupFlag+0x1c>)
200118f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
200118f4:	687b      	ldr	r3, [r7, #4]
200118f6:	4013      	ands	r3, r2
}
200118f8:	4618      	mov	r0, r3
200118fa:	370c      	adds	r7, #12
200118fc:	46bd      	mov	sp, r7
200118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20011902:	4770      	bx	lr
20011904:	58024800 	.word	0x58024800

20011908 <HAL_PWREx_ClearWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
{
20011908:	b480      	push	{r7}
2001190a:	b083      	sub	sp, #12
2001190c:	af00      	add	r7, sp, #0
2001190e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Clear the wake up event received from wake up pin x */
  SET_BIT (PWR->WKUPCR, WakeUpFlag);
20011910:	4b0a      	ldr	r3, [pc, #40]	@ (2001193c <HAL_PWREx_ClearWakeupFlag+0x34>)
20011912:	6a1a      	ldr	r2, [r3, #32]
20011914:	4909      	ldr	r1, [pc, #36]	@ (2001193c <HAL_PWREx_ClearWakeupFlag+0x34>)
20011916:	687b      	ldr	r3, [r7, #4]
20011918:	4313      	orrs	r3, r2
2001191a:	620b      	str	r3, [r1, #32]

  /* Check if the wake up event is well cleared */
  if ((PWR->WKUPFR & WakeUpFlag) != 0U)
2001191c:	4b07      	ldr	r3, [pc, #28]	@ (2001193c <HAL_PWREx_ClearWakeupFlag+0x34>)
2001191e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
20011920:	687b      	ldr	r3, [r7, #4]
20011922:	4013      	ands	r3, r2
20011924:	2b00      	cmp	r3, #0
20011926:	d001      	beq.n	2001192c <HAL_PWREx_ClearWakeupFlag+0x24>
  {
    return HAL_ERROR;
20011928:	2301      	movs	r3, #1
2001192a:	e000      	b.n	2001192e <HAL_PWREx_ClearWakeupFlag+0x26>
  }

  return HAL_OK;
2001192c:	2300      	movs	r3, #0
}
2001192e:	4618      	mov	r0, r3
20011930:	370c      	adds	r7, #12
20011932:	46bd      	mov	sp, r7
20011934:	f85d 7b04 	ldr.w	r7, [sp], #4
20011938:	4770      	bx	lr
2001193a:	bf00      	nop
2001193c:	58024800 	.word	0x58024800

20011940 <HAL_PWREx_WAKEUP_PIN_IRQHandler>:
  * @brief This function handles the PWR WAKEUP PIN interrupt request.
  * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
  * @retval None.
  */
void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
{
20011940:	b580      	push	{r7, lr}
20011942:	af00      	add	r7, sp, #0
  /* Wakeup pin EXTI line interrupt detected */
  if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
20011944:	4b2a      	ldr	r3, [pc, #168]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
20011946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20011948:	f003 0301 	and.w	r3, r3, #1
2001194c:	2b00      	cmp	r3, #0
2001194e:	d008      	beq.n	20011962 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x22>
  {
    /* Clear PWR WKUPF1 flag */
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
20011950:	4b27      	ldr	r3, [pc, #156]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
20011952:	6a1b      	ldr	r3, [r3, #32]
20011954:	4a26      	ldr	r2, [pc, #152]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
20011956:	f043 0301 	orr.w	r3, r3, #1
2001195a:	6213      	str	r3, [r2, #32]

    /* PWR WKUP1 interrupt user callback */
    HAL_PWREx_WKUP1_Callback ();
2001195c:	f000 f84a 	bl	200119f4 <HAL_PWREx_WKUP1_Callback>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);

    /* PWR WKUP6 interrupt user callback */
    HAL_PWREx_WKUP6_Callback ();
  }
}
20011960:	e043      	b.n	200119ea <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
20011962:	4b23      	ldr	r3, [pc, #140]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
20011964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20011966:	f003 0302 	and.w	r3, r3, #2
2001196a:	2b00      	cmp	r3, #0
2001196c:	d008      	beq.n	20011980 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x40>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
2001196e:	4b20      	ldr	r3, [pc, #128]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
20011970:	6a1b      	ldr	r3, [r3, #32]
20011972:	4a1f      	ldr	r2, [pc, #124]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
20011974:	f043 0302 	orr.w	r3, r3, #2
20011978:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP2_Callback ();
2001197a:	f000 f842 	bl	20011a02 <HAL_PWREx_WKUP2_Callback>
}
2001197e:	e034      	b.n	200119ea <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
20011980:	4b1b      	ldr	r3, [pc, #108]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
20011982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20011984:	f003 0304 	and.w	r3, r3, #4
20011988:	2b00      	cmp	r3, #0
2001198a:	d008      	beq.n	2001199e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x5e>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
2001198c:	4b18      	ldr	r3, [pc, #96]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
2001198e:	6a1b      	ldr	r3, [r3, #32]
20011990:	4a17      	ldr	r2, [pc, #92]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
20011992:	f043 0304 	orr.w	r3, r3, #4
20011996:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP3_Callback ();
20011998:	f000 f83a 	bl	20011a10 <HAL_PWREx_WKUP3_Callback>
}
2001199c:	e025      	b.n	200119ea <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
2001199e:	4b14      	ldr	r3, [pc, #80]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
200119a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200119a2:	f003 0308 	and.w	r3, r3, #8
200119a6:	2b00      	cmp	r3, #0
200119a8:	d008      	beq.n	200119bc <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x7c>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
200119aa:	4b11      	ldr	r3, [pc, #68]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
200119ac:	6a1b      	ldr	r3, [r3, #32]
200119ae:	4a10      	ldr	r2, [pc, #64]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
200119b0:	f043 0308 	orr.w	r3, r3, #8
200119b4:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP4_Callback ();
200119b6:	f000 f832 	bl	20011a1e <HAL_PWREx_WKUP4_Callback>
}
200119ba:	e016      	b.n	200119ea <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
200119bc:	4b0c      	ldr	r3, [pc, #48]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
200119be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200119c0:	f003 0310 	and.w	r3, r3, #16
200119c4:	2b00      	cmp	r3, #0
200119c6:	d008      	beq.n	200119da <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x9a>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
200119c8:	4b09      	ldr	r3, [pc, #36]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
200119ca:	6a1b      	ldr	r3, [r3, #32]
200119cc:	4a08      	ldr	r2, [pc, #32]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
200119ce:	f043 0310 	orr.w	r3, r3, #16
200119d2:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP5_Callback ();
200119d4:	f000 f82a 	bl	20011a2c <HAL_PWREx_WKUP5_Callback>
}
200119d8:	e007      	b.n	200119ea <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
200119da:	4b05      	ldr	r3, [pc, #20]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
200119dc:	6a1b      	ldr	r3, [r3, #32]
200119de:	4a04      	ldr	r2, [pc, #16]	@ (200119f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
200119e0:	f043 0320 	orr.w	r3, r3, #32
200119e4:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP6_Callback ();
200119e6:	f000 f828 	bl	20011a3a <HAL_PWREx_WKUP6_Callback>
}
200119ea:	bf00      	nop
200119ec:	bd80      	pop	{r7, pc}
200119ee:	bf00      	nop
200119f0:	58024800 	.word	0x58024800

200119f4 <HAL_PWREx_WKUP1_Callback>:
/**
  * @brief PWR WKUP1 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP1_Callback (void)
{
200119f4:	b480      	push	{r7}
200119f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP1Callback can be implemented in the user file
  */
}
200119f8:	bf00      	nop
200119fa:	46bd      	mov	sp, r7
200119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20011a00:	4770      	bx	lr

20011a02 <HAL_PWREx_WKUP2_Callback>:
/**
  * @brief PWR WKUP2 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP2_Callback (void)
{
20011a02:	b480      	push	{r7}
20011a04:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP2Callback can be implemented in the user file
  */
}
20011a06:	bf00      	nop
20011a08:	46bd      	mov	sp, r7
20011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
20011a0e:	4770      	bx	lr

20011a10 <HAL_PWREx_WKUP3_Callback>:
/**
  * @brief PWR WKUP3 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP3_Callback (void)
{
20011a10:	b480      	push	{r7}
20011a12:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP3Callback can be implemented in the user file
  */
}
20011a14:	bf00      	nop
20011a16:	46bd      	mov	sp, r7
20011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
20011a1c:	4770      	bx	lr

20011a1e <HAL_PWREx_WKUP4_Callback>:
/**
  * @brief PWR WKUP4 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP4_Callback (void)
{
20011a1e:	b480      	push	{r7}
20011a20:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP4Callback can be implemented in the user file
  */
}
20011a22:	bf00      	nop
20011a24:	46bd      	mov	sp, r7
20011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
20011a2a:	4770      	bx	lr

20011a2c <HAL_PWREx_WKUP5_Callback>:
/**
  * @brief PWR WKUP5 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP5_Callback (void)
{
20011a2c:	b480      	push	{r7}
20011a2e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP5Callback can be implemented in the user file
  */
}
20011a30:	bf00      	nop
20011a32:	46bd      	mov	sp, r7
20011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
20011a38:	4770      	bx	lr

20011a3a <HAL_PWREx_WKUP6_Callback>:
/**
  * @brief PWR WKUP6 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP6_Callback (void)
{
20011a3a:	b480      	push	{r7}
20011a3c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP6Callback can be implemented in the user file
  */
}
20011a3e:	bf00      	nop
20011a40:	46bd      	mov	sp, r7
20011a42:	f85d 7b04 	ldr.w	r7, [sp], #4
20011a46:	4770      	bx	lr

20011a48 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
20011a48:	b580      	push	{r7, lr}
20011a4a:	b082      	sub	sp, #8
20011a4c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
20011a4e:	4b10      	ldr	r3, [pc, #64]	@ (20011a90 <HAL_PWREx_EnableBkUpReg+0x48>)
20011a50:	689b      	ldr	r3, [r3, #8]
20011a52:	4a0f      	ldr	r2, [pc, #60]	@ (20011a90 <HAL_PWREx_EnableBkUpReg+0x48>)
20011a54:	f043 0301 	orr.w	r3, r3, #1
20011a58:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
20011a5a:	f7f0 fc31 	bl	200022c0 <HAL_GetTick>
20011a5e:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
20011a60:	e009      	b.n	20011a76 <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
20011a62:	f7f0 fc2d 	bl	200022c0 <HAL_GetTick>
20011a66:	4602      	mov	r2, r0
20011a68:	687b      	ldr	r3, [r7, #4]
20011a6a:	1ad3      	subs	r3, r2, r3
20011a6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20011a70:	d901      	bls.n	20011a76 <HAL_PWREx_EnableBkUpReg+0x2e>
    {
      return HAL_ERROR;
20011a72:	2301      	movs	r3, #1
20011a74:	e007      	b.n	20011a86 <HAL_PWREx_EnableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
20011a76:	4b06      	ldr	r3, [pc, #24]	@ (20011a90 <HAL_PWREx_EnableBkUpReg+0x48>)
20011a78:	689b      	ldr	r3, [r3, #8]
20011a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20011a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20011a82:	d1ee      	bne.n	20011a62 <HAL_PWREx_EnableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
20011a84:	2300      	movs	r3, #0
}
20011a86:	4618      	mov	r0, r3
20011a88:	3708      	adds	r7, #8
20011a8a:	46bd      	mov	sp, r7
20011a8c:	bd80      	pop	{r7, pc}
20011a8e:	bf00      	nop
20011a90:	58024800 	.word	0x58024800

20011a94 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
20011a94:	b580      	push	{r7, lr}
20011a96:	b082      	sub	sp, #8
20011a98:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
20011a9a:	4b10      	ldr	r3, [pc, #64]	@ (20011adc <HAL_PWREx_DisableBkUpReg+0x48>)
20011a9c:	689b      	ldr	r3, [r3, #8]
20011a9e:	4a0f      	ldr	r2, [pc, #60]	@ (20011adc <HAL_PWREx_DisableBkUpReg+0x48>)
20011aa0:	f023 0301 	bic.w	r3, r3, #1
20011aa4:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
20011aa6:	f7f0 fc0b 	bl	200022c0 <HAL_GetTick>
20011aaa:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
20011aac:	e009      	b.n	20011ac2 <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
20011aae:	f7f0 fc07 	bl	200022c0 <HAL_GetTick>
20011ab2:	4602      	mov	r2, r0
20011ab4:	687b      	ldr	r3, [r7, #4]
20011ab6:	1ad3      	subs	r3, r2, r3
20011ab8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20011abc:	d901      	bls.n	20011ac2 <HAL_PWREx_DisableBkUpReg+0x2e>
    {
      return HAL_ERROR;
20011abe:	2301      	movs	r3, #1
20011ac0:	e007      	b.n	20011ad2 <HAL_PWREx_DisableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
20011ac2:	4b06      	ldr	r3, [pc, #24]	@ (20011adc <HAL_PWREx_DisableBkUpReg+0x48>)
20011ac4:	689b      	ldr	r3, [r3, #8]
20011ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20011aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20011ace:	d0ee      	beq.n	20011aae <HAL_PWREx_DisableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
20011ad0:	2300      	movs	r3, #0
}
20011ad2:	4618      	mov	r0, r3
20011ad4:	3708      	adds	r7, #8
20011ad6:	46bd      	mov	sp, r7
20011ad8:	bd80      	pop	{r7, pc}
20011ada:	bf00      	nop
20011adc:	58024800 	.word	0x58024800

20011ae0 <HAL_PWREx_EnableUSBReg>:
/**
  * @brief Enable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
{
20011ae0:	b580      	push	{r7, lr}
20011ae2:	b082      	sub	sp, #8
20011ae4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB regulator */
  SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
20011ae6:	4b10      	ldr	r3, [pc, #64]	@ (20011b28 <HAL_PWREx_EnableUSBReg+0x48>)
20011ae8:	68db      	ldr	r3, [r3, #12]
20011aea:	4a0f      	ldr	r2, [pc, #60]	@ (20011b28 <HAL_PWREx_EnableUSBReg+0x48>)
20011aec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
20011af0:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
20011af2:	f7f0 fbe5 	bl	200022c0 <HAL_GetTick>
20011af6:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
20011af8:	e009      	b.n	20011b0e <HAL_PWREx_EnableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
20011afa:	f7f0 fbe1 	bl	200022c0 <HAL_GetTick>
20011afe:	4602      	mov	r2, r0
20011b00:	687b      	ldr	r3, [r7, #4]
20011b02:	1ad3      	subs	r3, r2, r3
20011b04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20011b08:	d901      	bls.n	20011b0e <HAL_PWREx_EnableUSBReg+0x2e>
    {
      return HAL_ERROR;
20011b0a:	2301      	movs	r3, #1
20011b0c:	e007      	b.n	20011b1e <HAL_PWREx_EnableUSBReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
20011b0e:	4b06      	ldr	r3, [pc, #24]	@ (20011b28 <HAL_PWREx_EnableUSBReg+0x48>)
20011b10:	68db      	ldr	r3, [r3, #12]
20011b12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
20011b16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
20011b1a:	d1ee      	bne.n	20011afa <HAL_PWREx_EnableUSBReg+0x1a>
    }
  }

  return HAL_OK;
20011b1c:	2300      	movs	r3, #0
}
20011b1e:	4618      	mov	r0, r3
20011b20:	3708      	adds	r7, #8
20011b22:	46bd      	mov	sp, r7
20011b24:	bd80      	pop	{r7, pc}
20011b26:	bf00      	nop
20011b28:	58024800 	.word	0x58024800

20011b2c <HAL_PWREx_DisableUSBReg>:
/**
  * @brief Disable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
{
20011b2c:	b580      	push	{r7, lr}
20011b2e:	b082      	sub	sp, #8
20011b30:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the USB regulator */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
20011b32:	4b10      	ldr	r3, [pc, #64]	@ (20011b74 <HAL_PWREx_DisableUSBReg+0x48>)
20011b34:	68db      	ldr	r3, [r3, #12]
20011b36:	4a0f      	ldr	r2, [pc, #60]	@ (20011b74 <HAL_PWREx_DisableUSBReg+0x48>)
20011b38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
20011b3c:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
20011b3e:	f7f0 fbbf 	bl	200022c0 <HAL_GetTick>
20011b42:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is reset */
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
20011b44:	e009      	b.n	20011b5a <HAL_PWREx_DisableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
20011b46:	f7f0 fbbb 	bl	200022c0 <HAL_GetTick>
20011b4a:	4602      	mov	r2, r0
20011b4c:	687b      	ldr	r3, [r7, #4]
20011b4e:	1ad3      	subs	r3, r2, r3
20011b50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
20011b54:	d901      	bls.n	20011b5a <HAL_PWREx_DisableUSBReg+0x2e>
    {
      return HAL_ERROR;
20011b56:	2301      	movs	r3, #1
20011b58:	e007      	b.n	20011b6a <HAL_PWREx_DisableUSBReg+0x3e>
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
20011b5a:	4b06      	ldr	r3, [pc, #24]	@ (20011b74 <HAL_PWREx_DisableUSBReg+0x48>)
20011b5c:	68db      	ldr	r3, [r3, #12]
20011b5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
20011b62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
20011b66:	d0ee      	beq.n	20011b46 <HAL_PWREx_DisableUSBReg+0x1a>
    }
  }

  return HAL_OK;
20011b68:	2300      	movs	r3, #0
}
20011b6a:	4618      	mov	r0, r3
20011b6c:	3708      	adds	r7, #8
20011b6e:	46bd      	mov	sp, r7
20011b70:	bd80      	pop	{r7, pc}
20011b72:	bf00      	nop
20011b74:	58024800 	.word	0x58024800

20011b78 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
20011b78:	b480      	push	{r7}
20011b7a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
20011b7c:	4b05      	ldr	r3, [pc, #20]	@ (20011b94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
20011b7e:	68db      	ldr	r3, [r3, #12]
20011b80:	4a04      	ldr	r2, [pc, #16]	@ (20011b94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
20011b82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20011b86:	60d3      	str	r3, [r2, #12]
}
20011b88:	bf00      	nop
20011b8a:	46bd      	mov	sp, r7
20011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
20011b90:	4770      	bx	lr
20011b92:	bf00      	nop
20011b94:	58024800 	.word	0x58024800

20011b98 <HAL_PWREx_DisableUSBVoltageDetector>:
/**
  * @brief Disable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
20011b98:	b480      	push	{r7}
20011b9a:	af00      	add	r7, sp, #0
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
20011b9c:	4b05      	ldr	r3, [pc, #20]	@ (20011bb4 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
20011b9e:	68db      	ldr	r3, [r3, #12]
20011ba0:	4a04      	ldr	r2, [pc, #16]	@ (20011bb4 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
20011ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20011ba6:	60d3      	str	r3, [r2, #12]
}
20011ba8:	bf00      	nop
20011baa:	46bd      	mov	sp, r7
20011bac:	f85d 7b04 	ldr.w	r7, [sp], #4
20011bb0:	4770      	bx	lr
20011bb2:	bf00      	nop
20011bb4:	58024800 	.word	0x58024800

20011bb8 <HAL_PWREx_EnableBatteryCharging>:
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
  * @retval None.
  */
void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
{
20011bb8:	b480      	push	{r7}
20011bba:	b083      	sub	sp, #12
20011bbc:	af00      	add	r7, sp, #0
20011bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));

  /* Specify the charging resistor */
  MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
20011bc0:	4b09      	ldr	r3, [pc, #36]	@ (20011be8 <HAL_PWREx_EnableBatteryCharging+0x30>)
20011bc2:	68db      	ldr	r3, [r3, #12]
20011bc4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
20011bc8:	4907      	ldr	r1, [pc, #28]	@ (20011be8 <HAL_PWREx_EnableBatteryCharging+0x30>)
20011bca:	687b      	ldr	r3, [r7, #4]
20011bcc:	4313      	orrs	r3, r2
20011bce:	60cb      	str	r3, [r1, #12]

  /* Enable the Battery charging */
  SET_BIT (PWR->CR3, PWR_CR3_VBE);
20011bd0:	4b05      	ldr	r3, [pc, #20]	@ (20011be8 <HAL_PWREx_EnableBatteryCharging+0x30>)
20011bd2:	68db      	ldr	r3, [r3, #12]
20011bd4:	4a04      	ldr	r2, [pc, #16]	@ (20011be8 <HAL_PWREx_EnableBatteryCharging+0x30>)
20011bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20011bda:	60d3      	str	r3, [r2, #12]
}
20011bdc:	bf00      	nop
20011bde:	370c      	adds	r7, #12
20011be0:	46bd      	mov	sp, r7
20011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
20011be6:	4770      	bx	lr
20011be8:	58024800 	.word	0x58024800

20011bec <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable the Battery charging.
  * @retval None.
  */
void HAL_PWREx_DisableBatteryCharging (void)
{
20011bec:	b480      	push	{r7}
20011bee:	af00      	add	r7, sp, #0
  /* Disable the Battery charging */
  CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
20011bf0:	4b05      	ldr	r3, [pc, #20]	@ (20011c08 <HAL_PWREx_DisableBatteryCharging+0x1c>)
20011bf2:	68db      	ldr	r3, [r3, #12]
20011bf4:	4a04      	ldr	r2, [pc, #16]	@ (20011c08 <HAL_PWREx_DisableBatteryCharging+0x1c>)
20011bf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
20011bfa:	60d3      	str	r3, [r2, #12]
}
20011bfc:	bf00      	nop
20011bfe:	46bd      	mov	sp, r7
20011c00:	f85d 7b04 	ldr.w	r7, [sp], #4
20011c04:	4770      	bx	lr
20011c06:	bf00      	nop
20011c08:	58024800 	.word	0x58024800

20011c0c <HAL_PWREx_EnableMonitoring>:
/**
  * @brief Enable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_EnableMonitoring (void)
{
20011c0c:	b480      	push	{r7}
20011c0e:	af00      	add	r7, sp, #0
  /* Enable the VBAT and Temperature monitoring */
  SET_BIT (PWR->CR2, PWR_CR2_MONEN);
20011c10:	4b05      	ldr	r3, [pc, #20]	@ (20011c28 <HAL_PWREx_EnableMonitoring+0x1c>)
20011c12:	689b      	ldr	r3, [r3, #8]
20011c14:	4a04      	ldr	r2, [pc, #16]	@ (20011c28 <HAL_PWREx_EnableMonitoring+0x1c>)
20011c16:	f043 0310 	orr.w	r3, r3, #16
20011c1a:	6093      	str	r3, [r2, #8]
}
20011c1c:	bf00      	nop
20011c1e:	46bd      	mov	sp, r7
20011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
20011c24:	4770      	bx	lr
20011c26:	bf00      	nop
20011c28:	58024800 	.word	0x58024800

20011c2c <HAL_PWREx_DisableMonitoring>:
/**
  * @brief Disable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_DisableMonitoring (void)
{
20011c2c:	b480      	push	{r7}
20011c2e:	af00      	add	r7, sp, #0
  /* Disable the VBAT and Temperature monitoring */
  CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
20011c30:	4b05      	ldr	r3, [pc, #20]	@ (20011c48 <HAL_PWREx_DisableMonitoring+0x1c>)
20011c32:	689b      	ldr	r3, [r3, #8]
20011c34:	4a04      	ldr	r2, [pc, #16]	@ (20011c48 <HAL_PWREx_DisableMonitoring+0x1c>)
20011c36:	f023 0310 	bic.w	r3, r3, #16
20011c3a:	6093      	str	r3, [r2, #8]
}
20011c3c:	bf00      	nop
20011c3e:	46bd      	mov	sp, r7
20011c40:	f85d 7b04 	ldr.w	r7, [sp], #4
20011c44:	4770      	bx	lr
20011c46:	bf00      	nop
20011c48:	58024800 	.word	0x58024800

20011c4c <HAL_PWREx_GetTemperatureLevel>:
  * @brief Indicate whether the junction temperature is between, above or below
  *        the thresholds.
  * @retval Temperature level.
  */
uint32_t HAL_PWREx_GetTemperatureLevel (void)
{
20011c4c:	b480      	push	{r7}
20011c4e:	b083      	sub	sp, #12
20011c50:	af00      	add	r7, sp, #0
  uint32_t tempLevel, regValue;

  /* Read the temperature flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
20011c52:	4b0f      	ldr	r3, [pc, #60]	@ (20011c90 <HAL_PWREx_GetTemperatureLevel+0x44>)
20011c54:	689b      	ldr	r3, [r3, #8]
20011c56:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
20011c5a:	603b      	str	r3, [r7, #0]

  /* Check if the temperature is below the threshold */
  if (regValue == PWR_CR2_TEMPL)
20011c5c:	683b      	ldr	r3, [r7, #0]
20011c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20011c62:	d103      	bne.n	20011c6c <HAL_PWREx_GetTemperatureLevel+0x20>
  {
    tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
20011c64:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20011c68:	607b      	str	r3, [r7, #4]
20011c6a:	e009      	b.n	20011c80 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* Check if the temperature is above the threshold */
  else if (regValue == PWR_CR2_TEMPH)
20011c6c:	683b      	ldr	r3, [r7, #0]
20011c6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
20011c72:	d103      	bne.n	20011c7c <HAL_PWREx_GetTemperatureLevel+0x30>
  {
    tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
20011c74:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
20011c78:	607b      	str	r3, [r7, #4]
20011c7a:	e001      	b.n	20011c80 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* The temperature is between the thresholds */
  else
  {
    tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
20011c7c:	2300      	movs	r3, #0
20011c7e:	607b      	str	r3, [r7, #4]
  }

  return tempLevel;
20011c80:	687b      	ldr	r3, [r7, #4]
}
20011c82:	4618      	mov	r0, r3
20011c84:	370c      	adds	r7, #12
20011c86:	46bd      	mov	sp, r7
20011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
20011c8c:	4770      	bx	lr
20011c8e:	bf00      	nop
20011c90:	58024800 	.word	0x58024800

20011c94 <HAL_PWREx_GetVBATLevel>:
  * @brief Indicate whether the Battery voltage level is between, above or below
  *        the thresholds.
  * @retval VBAT level.
  */
uint32_t HAL_PWREx_GetVBATLevel (void)
{
20011c94:	b480      	push	{r7}
20011c96:	b083      	sub	sp, #12
20011c98:	af00      	add	r7, sp, #0
  uint32_t VBATLevel, regValue;

  /* Read the VBAT flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
20011c9a:	4b0f      	ldr	r3, [pc, #60]	@ (20011cd8 <HAL_PWREx_GetVBATLevel+0x44>)
20011c9c:	689b      	ldr	r3, [r3, #8]
20011c9e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
20011ca2:	603b      	str	r3, [r7, #0]

  /* Check if the VBAT is below the threshold */
  if (regValue == PWR_CR2_VBATL)
20011ca4:	683b      	ldr	r3, [r7, #0]
20011ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20011caa:	d103      	bne.n	20011cb4 <HAL_PWREx_GetVBATLevel+0x20>
  {
    VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
20011cac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20011cb0:	607b      	str	r3, [r7, #4]
20011cb2:	e009      	b.n	20011cc8 <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* Check if the VBAT is above the threshold */
  else if (regValue == PWR_CR2_VBATH)
20011cb4:	683b      	ldr	r3, [r7, #0]
20011cb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20011cba:	d103      	bne.n	20011cc4 <HAL_PWREx_GetVBATLevel+0x30>
  {
    VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
20011cbc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20011cc0:	607b      	str	r3, [r7, #4]
20011cc2:	e001      	b.n	20011cc8 <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* The VBAT is between the thresholds */
  else
  {
    VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
20011cc4:	2300      	movs	r3, #0
20011cc6:	607b      	str	r3, [r7, #4]
  }

  return VBATLevel;
20011cc8:	687b      	ldr	r3, [r7, #4]
}
20011cca:	4618      	mov	r0, r3
20011ccc:	370c      	adds	r7, #12
20011cce:	46bd      	mov	sp, r7
20011cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
20011cd4:	4770      	bx	lr
20011cd6:	bf00      	nop
20011cd8:	58024800 	.word	0x58024800

20011cdc <HAL_PWREx_ConfigAVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
{
20011cdc:	b480      	push	{r7}
20011cde:	b083      	sub	sp, #12
20011ce0:	af00      	add	r7, sp, #0
20011ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
  assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));

  /* Set the ALS[18:17] bits according to AVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
20011ce4:	4b37      	ldr	r3, [pc, #220]	@ (20011dc4 <HAL_PWREx_ConfigAVD+0xe8>)
20011ce6:	681b      	ldr	r3, [r3, #0]
20011ce8:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
20011cec:	687b      	ldr	r3, [r7, #4]
20011cee:	681b      	ldr	r3, [r3, #0]
20011cf0:	4934      	ldr	r1, [pc, #208]	@ (20011dc4 <HAL_PWREx_ConfigAVD+0xe8>)
20011cf2:	4313      	orrs	r3, r2
20011cf4:	600b      	str	r3, [r1, #0]

  /* Clear any previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
20011cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20011cfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20011d06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_AVD_EXTI_DISABLE_IT ();
20011d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20011d12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20011d1a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
20011d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011d22:	681b      	ldr	r3, [r3, #0]
20011d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20011d2c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
20011d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011d32:	685b      	ldr	r3, [r3, #4]
20011d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20011d3c:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Configure the interrupt mode */
  if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
20011d3e:	687b      	ldr	r3, [r7, #4]
20011d40:	685b      	ldr	r3, [r3, #4]
20011d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20011d46:	2b00      	cmp	r3, #0
20011d48:	d009      	beq.n	20011d5e <HAL_PWREx_ConfigAVD+0x82>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_IT ();
20011d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20011d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011d5a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the event mode */
  if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
20011d5e:	687b      	ldr	r3, [r7, #4]
20011d60:	685b      	ldr	r3, [r3, #4]
20011d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20011d66:	2b00      	cmp	r3, #0
20011d68:	d009      	beq.n	20011d7e <HAL_PWREx_ConfigAVD+0xa2>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
20011d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20011d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011d7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
20011d7e:	687b      	ldr	r3, [r7, #4]
20011d80:	685b      	ldr	r3, [r3, #4]
20011d82:	f003 0301 	and.w	r3, r3, #1
20011d86:	2b00      	cmp	r3, #0
20011d88:	d007      	beq.n	20011d9a <HAL_PWREx_ConfigAVD+0xbe>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
20011d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011d8e:	681b      	ldr	r3, [r3, #0]
20011d90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011d98:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
20011d9a:	687b      	ldr	r3, [r7, #4]
20011d9c:	685b      	ldr	r3, [r3, #4]
20011d9e:	f003 0302 	and.w	r3, r3, #2
20011da2:	2b00      	cmp	r3, #0
20011da4:	d007      	beq.n	20011db6 <HAL_PWREx_ConfigAVD+0xda>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
20011da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011daa:	685b      	ldr	r3, [r3, #4]
20011dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011db4:	6053      	str	r3, [r2, #4]
  }
}
20011db6:	bf00      	nop
20011db8:	370c      	adds	r7, #12
20011dba:	46bd      	mov	sp, r7
20011dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20011dc0:	4770      	bx	lr
20011dc2:	bf00      	nop
20011dc4:	58024800 	.word	0x58024800

20011dc8 <HAL_PWREx_EnableAVD>:
/**
  * @brief Enable the Analog Voltage Detector (AVD).
  * @retval None.
  */
void HAL_PWREx_EnableAVD (void)
{
20011dc8:	b480      	push	{r7}
20011dca:	af00      	add	r7, sp, #0
  /* Enable the Analog Voltage Detector */
  SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
20011dcc:	4b05      	ldr	r3, [pc, #20]	@ (20011de4 <HAL_PWREx_EnableAVD+0x1c>)
20011dce:	681b      	ldr	r3, [r3, #0]
20011dd0:	4a04      	ldr	r2, [pc, #16]	@ (20011de4 <HAL_PWREx_EnableAVD+0x1c>)
20011dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011dd6:	6013      	str	r3, [r2, #0]
}
20011dd8:	bf00      	nop
20011dda:	46bd      	mov	sp, r7
20011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
20011de0:	4770      	bx	lr
20011de2:	bf00      	nop
20011de4:	58024800 	.word	0x58024800

20011de8 <HAL_PWREx_DisableAVD>:
/**
  * @brief Disable the Analog Voltage Detector(AVD).
  * @retval None.
  */
void HAL_PWREx_DisableAVD (void)
{
20011de8:	b480      	push	{r7}
20011dea:	af00      	add	r7, sp, #0
  /* Disable the Analog Voltage Detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
20011dec:	4b05      	ldr	r3, [pc, #20]	@ (20011e04 <HAL_PWREx_DisableAVD+0x1c>)
20011dee:	681b      	ldr	r3, [r3, #0]
20011df0:	4a04      	ldr	r2, [pc, #16]	@ (20011e04 <HAL_PWREx_DisableAVD+0x1c>)
20011df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20011df6:	6013      	str	r3, [r2, #0]
}
20011df8:	bf00      	nop
20011dfa:	46bd      	mov	sp, r7
20011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20011e00:	4770      	bx	lr
20011e02:	bf00      	nop
20011e04:	58024800 	.word	0x58024800

20011e08 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
20011e08:	b580      	push	{r7, lr}
20011e0a:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
20011e0c:	4b22      	ldr	r3, [pc, #136]	@ (20011e98 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
20011e0e:	681b      	ldr	r3, [r3, #0]
20011e10:	f003 0310 	and.w	r3, r3, #16
20011e14:	2b00      	cmp	r3, #0
20011e16:	d01b      	beq.n	20011e50 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
20011e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20011e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20011e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20011e28:	d112      	bne.n	20011e50 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
20011e2a:	f7ff faf4 	bl	20011416 <HAL_PWR_PVDCallback>

        if(__HAL_PWR_GET_FLAG (PWR_FLAG_AVDO) == 0U)
20011e2e:	4b1a      	ldr	r3, [pc, #104]	@ (20011e98 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
20011e30:	685b      	ldr	r3, [r3, #4]
20011e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20011e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20011e3a:	d009      	beq.n	20011e50 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
        {
          /* Clear PWR EXTI D1/CD pending bit */
          __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
20011e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20011e44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
20011e50:	4b11      	ldr	r3, [pc, #68]	@ (20011e98 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
20011e52:	681b      	ldr	r3, [r3, #0]
20011e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20011e58:	2b00      	cmp	r3, #0
20011e5a:	d01a      	beq.n	20011e92 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
20011e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20011e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20011e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20011e6c:	d111      	bne.n	20011e92 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
20011e6e:	f000 f815 	bl	20011e9c <HAL_PWREx_AVDCallback>

        if(__HAL_PWR_GET_FLAG (PWR_FLAG_PVDO) == 0U)
20011e72:	4b09      	ldr	r3, [pc, #36]	@ (20011e98 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
20011e74:	685b      	ldr	r3, [r3, #4]
20011e76:	f003 0310 	and.w	r3, r3, #16
20011e7a:	2b10      	cmp	r3, #16
20011e7c:	d009      	beq.n	20011e92 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
        {
          /* Clear PWR EXTI D1/CD pending bit */
          __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
20011e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
20011e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20011e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
20011e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20011e8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        }
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
20011e92:	bf00      	nop
20011e94:	bd80      	pop	{r7, pc}
20011e96:	bf00      	nop
20011e98:	58024800 	.word	0x58024800

20011e9c <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
20011e9c:	b480      	push	{r7}
20011e9e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
20011ea0:	bf00      	nop
20011ea2:	46bd      	mov	sp, r7
20011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
20011ea8:	4770      	bx	lr
	...

20011eac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
20011eac:	b580      	push	{r7, lr}
20011eae:	b086      	sub	sp, #24
20011eb0:	af02      	add	r7, sp, #8
20011eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
20011eb4:	f7f0 fa04 	bl	200022c0 <HAL_GetTick>
20011eb8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
20011eba:	687b      	ldr	r3, [r7, #4]
20011ebc:	2b00      	cmp	r3, #0
20011ebe:	d101      	bne.n	20011ec4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
20011ec0:	2301      	movs	r3, #1
20011ec2:	e05f      	b.n	20011f84 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
20011ec4:	687b      	ldr	r3, [r7, #4]
20011ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20011eca:	b2db      	uxtb	r3, r3
20011ecc:	2b00      	cmp	r3, #0
20011ece:	d107      	bne.n	20011ee0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
20011ed0:	6878      	ldr	r0, [r7, #4]
20011ed2:	f7ef f827 	bl	20000f24 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
20011ed6:	f241 3188 	movw	r1, #5000	@ 0x1388
20011eda:	6878      	ldr	r0, [r7, #4]
20011edc:	f001 f98e 	bl	200131fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
20011ee0:	687b      	ldr	r3, [r7, #4]
20011ee2:	681b      	ldr	r3, [r3, #0]
20011ee4:	681b      	ldr	r3, [r3, #0]
20011ee6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
20011eea:	687b      	ldr	r3, [r7, #4]
20011eec:	689b      	ldr	r3, [r3, #8]
20011eee:	3b01      	subs	r3, #1
20011ef0:	021a      	lsls	r2, r3, #8
20011ef2:	687b      	ldr	r3, [r7, #4]
20011ef4:	681b      	ldr	r3, [r3, #0]
20011ef6:	430a      	orrs	r2, r1
20011ef8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
20011efa:	687b      	ldr	r3, [r7, #4]
20011efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20011efe:	9300      	str	r3, [sp, #0]
20011f00:	68fb      	ldr	r3, [r7, #12]
20011f02:	2200      	movs	r2, #0
20011f04:	2120      	movs	r1, #32
20011f06:	6878      	ldr	r0, [r7, #4]
20011f08:	f001 fa87 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
20011f0c:	4603      	mov	r3, r0
20011f0e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
20011f10:	7afb      	ldrb	r3, [r7, #11]
20011f12:	2b00      	cmp	r3, #0
20011f14:	d135      	bne.n	20011f82 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
20011f16:	687b      	ldr	r3, [r7, #4]
20011f18:	681b      	ldr	r3, [r3, #0]
20011f1a:	681a      	ldr	r2, [r3, #0]
20011f1c:	4b1b      	ldr	r3, [pc, #108]	@ (20011f8c <HAL_QSPI_Init+0xe0>)
20011f1e:	4013      	ands	r3, r2
20011f20:	687a      	ldr	r2, [r7, #4]
20011f22:	6852      	ldr	r2, [r2, #4]
20011f24:	0611      	lsls	r1, r2, #24
20011f26:	687a      	ldr	r2, [r7, #4]
20011f28:	68d2      	ldr	r2, [r2, #12]
20011f2a:	4311      	orrs	r1, r2
20011f2c:	687a      	ldr	r2, [r7, #4]
20011f2e:	69d2      	ldr	r2, [r2, #28]
20011f30:	4311      	orrs	r1, r2
20011f32:	687a      	ldr	r2, [r7, #4]
20011f34:	6a12      	ldr	r2, [r2, #32]
20011f36:	4311      	orrs	r1, r2
20011f38:	687a      	ldr	r2, [r7, #4]
20011f3a:	6812      	ldr	r2, [r2, #0]
20011f3c:	430b      	orrs	r3, r1
20011f3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
20011f40:	687b      	ldr	r3, [r7, #4]
20011f42:	681b      	ldr	r3, [r3, #0]
20011f44:	685a      	ldr	r2, [r3, #4]
20011f46:	4b12      	ldr	r3, [pc, #72]	@ (20011f90 <HAL_QSPI_Init+0xe4>)
20011f48:	4013      	ands	r3, r2
20011f4a:	687a      	ldr	r2, [r7, #4]
20011f4c:	6912      	ldr	r2, [r2, #16]
20011f4e:	0411      	lsls	r1, r2, #16
20011f50:	687a      	ldr	r2, [r7, #4]
20011f52:	6952      	ldr	r2, [r2, #20]
20011f54:	4311      	orrs	r1, r2
20011f56:	687a      	ldr	r2, [r7, #4]
20011f58:	6992      	ldr	r2, [r2, #24]
20011f5a:	4311      	orrs	r1, r2
20011f5c:	687a      	ldr	r2, [r7, #4]
20011f5e:	6812      	ldr	r2, [r2, #0]
20011f60:	430b      	orrs	r3, r1
20011f62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
20011f64:	687b      	ldr	r3, [r7, #4]
20011f66:	681b      	ldr	r3, [r3, #0]
20011f68:	681a      	ldr	r2, [r3, #0]
20011f6a:	687b      	ldr	r3, [r7, #4]
20011f6c:	681b      	ldr	r3, [r3, #0]
20011f6e:	f042 0201 	orr.w	r2, r2, #1
20011f72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20011f74:	687b      	ldr	r3, [r7, #4]
20011f76:	2200      	movs	r2, #0
20011f78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
20011f7a:	687b      	ldr	r3, [r7, #4]
20011f7c:	2201      	movs	r2, #1
20011f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
20011f82:	7afb      	ldrb	r3, [r7, #11]
}
20011f84:	4618      	mov	r0, r3
20011f86:	3710      	adds	r7, #16
20011f88:	46bd      	mov	sp, r7
20011f8a:	bd80      	pop	{r7, pc}
20011f8c:	00ffff2f 	.word	0x00ffff2f
20011f90:	ffe0f8fe 	.word	0xffe0f8fe

20011f94 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
20011f94:	b580      	push	{r7, lr}
20011f96:	b082      	sub	sp, #8
20011f98:	af00      	add	r7, sp, #0
20011f9a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
20011f9c:	687b      	ldr	r3, [r7, #4]
20011f9e:	2b00      	cmp	r3, #0
20011fa0:	d101      	bne.n	20011fa6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
20011fa2:	2301      	movs	r3, #1
20011fa4:	e012      	b.n	20011fcc <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
20011fa6:	687b      	ldr	r3, [r7, #4]
20011fa8:	681b      	ldr	r3, [r3, #0]
20011faa:	681a      	ldr	r2, [r3, #0]
20011fac:	687b      	ldr	r3, [r7, #4]
20011fae:	681b      	ldr	r3, [r3, #0]
20011fb0:	f022 0201 	bic.w	r2, r2, #1
20011fb4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
20011fb6:	6878      	ldr	r0, [r7, #4]
20011fb8:	f7ef f890 	bl	200010dc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20011fbc:	687b      	ldr	r3, [r7, #4]
20011fbe:	2200      	movs	r2, #0
20011fc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
20011fc2:	687b      	ldr	r3, [r7, #4]
20011fc4:	2200      	movs	r2, #0
20011fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
20011fca:	2300      	movs	r3, #0
}
20011fcc:	4618      	mov	r0, r3
20011fce:	3708      	adds	r7, #8
20011fd0:	46bd      	mov	sp, r7
20011fd2:	bd80      	pop	{r7, pc}
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
20011fd4:	b480      	push	{r7}
20011fd6:	b083      	sub	sp, #12
20011fd8:	af00      	add	r7, sp, #0
20011fda:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
20011fdc:	bf00      	nop
20011fde:	370c      	adds	r7, #12
20011fe0:	46bd      	mov	sp, r7
20011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
20011fe6:	4770      	bx	lr
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
20011fe8:	b480      	push	{r7}
20011fea:	b083      	sub	sp, #12
20011fec:	af00      	add	r7, sp, #0
20011fee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
20011ff0:	bf00      	nop
20011ff2:	370c      	adds	r7, #12
20011ff4:	46bd      	mov	sp, r7
20011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
20011ffa:	4770      	bx	lr

20011ffc <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
20011ffc:	b580      	push	{r7, lr}
20011ffe:	b086      	sub	sp, #24
20012000:	af00      	add	r7, sp, #0
20012002:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
20012004:	687b      	ldr	r3, [r7, #4]
20012006:	681b      	ldr	r3, [r3, #0]
20012008:	689b      	ldr	r3, [r3, #8]
2001200a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
2001200c:	687b      	ldr	r3, [r7, #4]
2001200e:	681b      	ldr	r3, [r3, #0]
20012010:	681b      	ldr	r3, [r3, #0]
20012012:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
20012014:	697b      	ldr	r3, [r7, #20]
20012016:	f003 0304 	and.w	r3, r3, #4
2001201a:	2b00      	cmp	r3, #0
2001201c:	d064      	beq.n	200120e8 <HAL_QSPI_IRQHandler+0xec>
2001201e:	693b      	ldr	r3, [r7, #16]
20012020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20012024:	2b00      	cmp	r3, #0
20012026:	d05f      	beq.n	200120e8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
20012028:	687b      	ldr	r3, [r7, #4]
2001202a:	681b      	ldr	r3, [r3, #0]
2001202c:	3320      	adds	r3, #32
2001202e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
20012030:	687b      	ldr	r3, [r7, #4]
20012032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012036:	b2db      	uxtb	r3, r3
20012038:	2b12      	cmp	r3, #18
2001203a:	d125      	bne.n	20012088 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2001203c:	e01c      	b.n	20012078 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
2001203e:	687b      	ldr	r3, [r7, #4]
20012040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20012042:	2b00      	cmp	r3, #0
20012044:	d00f      	beq.n	20012066 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
20012046:	687b      	ldr	r3, [r7, #4]
20012048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2001204a:	781a      	ldrb	r2, [r3, #0]
2001204c:	68fb      	ldr	r3, [r7, #12]
2001204e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
20012050:	687b      	ldr	r3, [r7, #4]
20012052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20012054:	1c5a      	adds	r2, r3, #1
20012056:	687b      	ldr	r3, [r7, #4]
20012058:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
2001205a:	687b      	ldr	r3, [r7, #4]
2001205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2001205e:	1e5a      	subs	r2, r3, #1
20012060:	687b      	ldr	r3, [r7, #4]
20012062:	62da      	str	r2, [r3, #44]	@ 0x2c
20012064:	e008      	b.n	20012078 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
20012066:	687b      	ldr	r3, [r7, #4]
20012068:	681b      	ldr	r3, [r3, #0]
2001206a:	681a      	ldr	r2, [r3, #0]
2001206c:	687b      	ldr	r3, [r7, #4]
2001206e:	681b      	ldr	r3, [r3, #0]
20012070:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
20012074:	601a      	str	r2, [r3, #0]
          break;
20012076:	e033      	b.n	200120e0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20012078:	687b      	ldr	r3, [r7, #4]
2001207a:	681b      	ldr	r3, [r3, #0]
2001207c:	689b      	ldr	r3, [r3, #8]
2001207e:	f003 0304 	and.w	r3, r3, #4
20012082:	2b00      	cmp	r3, #0
20012084:	d1db      	bne.n	2001203e <HAL_QSPI_IRQHandler+0x42>
20012086:	e02b      	b.n	200120e0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
20012088:	687b      	ldr	r3, [r7, #4]
2001208a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2001208e:	b2db      	uxtb	r3, r3
20012090:	2b22      	cmp	r3, #34	@ 0x22
20012092:	d125      	bne.n	200120e0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20012094:	e01d      	b.n	200120d2 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
20012096:	687b      	ldr	r3, [r7, #4]
20012098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2001209a:	2b00      	cmp	r3, #0
2001209c:	d010      	beq.n	200120c0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
2001209e:	687b      	ldr	r3, [r7, #4]
200120a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200120a2:	68fa      	ldr	r2, [r7, #12]
200120a4:	7812      	ldrb	r2, [r2, #0]
200120a6:	b2d2      	uxtb	r2, r2
200120a8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
200120aa:	687b      	ldr	r3, [r7, #4]
200120ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200120ae:	1c5a      	adds	r2, r3, #1
200120b0:	687b      	ldr	r3, [r7, #4]
200120b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
200120b4:	687b      	ldr	r3, [r7, #4]
200120b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200120b8:	1e5a      	subs	r2, r3, #1
200120ba:	687b      	ldr	r3, [r7, #4]
200120bc:	639a      	str	r2, [r3, #56]	@ 0x38
200120be:	e008      	b.n	200120d2 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
200120c0:	687b      	ldr	r3, [r7, #4]
200120c2:	681b      	ldr	r3, [r3, #0]
200120c4:	681a      	ldr	r2, [r3, #0]
200120c6:	687b      	ldr	r3, [r7, #4]
200120c8:	681b      	ldr	r3, [r3, #0]
200120ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
200120ce:	601a      	str	r2, [r3, #0]
          break;
200120d0:	e006      	b.n	200120e0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
200120d2:	687b      	ldr	r3, [r7, #4]
200120d4:	681b      	ldr	r3, [r3, #0]
200120d6:	689b      	ldr	r3, [r3, #8]
200120d8:	f003 0304 	and.w	r3, r3, #4
200120dc:	2b00      	cmp	r3, #0
200120de:	d1da      	bne.n	20012096 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
200120e0:	6878      	ldr	r0, [r7, #4]
200120e2:	f000 ff72 	bl	20012fca <HAL_QSPI_FifoThresholdCallback>
200120e6:	e13c      	b.n	20012362 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
200120e8:	697b      	ldr	r3, [r7, #20]
200120ea:	f003 0302 	and.w	r3, r3, #2
200120ee:	2b00      	cmp	r3, #0
200120f0:	f000 80b0 	beq.w	20012254 <HAL_QSPI_IRQHandler+0x258>
200120f4:	693b      	ldr	r3, [r7, #16]
200120f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200120fa:	2b00      	cmp	r3, #0
200120fc:	f000 80aa 	beq.w	20012254 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
20012100:	687b      	ldr	r3, [r7, #4]
20012102:	681b      	ldr	r3, [r3, #0]
20012104:	2202      	movs	r2, #2
20012106:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
20012108:	687b      	ldr	r3, [r7, #4]
2001210a:	681b      	ldr	r3, [r3, #0]
2001210c:	681a      	ldr	r2, [r3, #0]
2001210e:	687b      	ldr	r3, [r7, #4]
20012110:	681b      	ldr	r3, [r3, #0]
20012112:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
20012116:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
20012118:	687b      	ldr	r3, [r7, #4]
2001211a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2001211e:	b2db      	uxtb	r3, r3
20012120:	2b12      	cmp	r3, #18
20012122:	d120      	bne.n	20012166 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20012124:	687b      	ldr	r3, [r7, #4]
20012126:	681b      	ldr	r3, [r3, #0]
20012128:	681b      	ldr	r3, [r3, #0]
2001212a:	f003 0304 	and.w	r3, r3, #4
2001212e:	2b00      	cmp	r3, #0
20012130:	d011      	beq.n	20012156 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20012132:	687b      	ldr	r3, [r7, #4]
20012134:	681b      	ldr	r3, [r3, #0]
20012136:	681a      	ldr	r2, [r3, #0]
20012138:	687b      	ldr	r3, [r7, #4]
2001213a:	681b      	ldr	r3, [r3, #0]
2001213c:	f022 0204 	bic.w	r2, r2, #4
20012140:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
20012142:	687b      	ldr	r3, [r7, #4]
20012144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012146:	681b      	ldr	r3, [r3, #0]
20012148:	68da      	ldr	r2, [r3, #12]
2001214a:	687b      	ldr	r3, [r7, #4]
2001214c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2001214e:	681b      	ldr	r3, [r3, #0]
20012150:	f022 0201 	bic.w	r2, r2, #1
20012154:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
20012156:	687b      	ldr	r3, [r7, #4]
20012158:	2201      	movs	r2, #1
2001215a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
2001215e:	6878      	ldr	r0, [r7, #4]
20012160:	f000 ff29 	bl	20012fb6 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
20012164:	e0fa      	b.n	2001235c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
20012166:	687b      	ldr	r3, [r7, #4]
20012168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2001216c:	b2db      	uxtb	r3, r3
2001216e:	2b22      	cmp	r3, #34	@ 0x22
20012170:	d143      	bne.n	200121fa <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20012172:	687b      	ldr	r3, [r7, #4]
20012174:	681b      	ldr	r3, [r3, #0]
20012176:	681b      	ldr	r3, [r3, #0]
20012178:	f003 0304 	and.w	r3, r3, #4
2001217c:	2b00      	cmp	r3, #0
2001217e:	d012      	beq.n	200121a6 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20012180:	687b      	ldr	r3, [r7, #4]
20012182:	681b      	ldr	r3, [r3, #0]
20012184:	681a      	ldr	r2, [r3, #0]
20012186:	687b      	ldr	r3, [r7, #4]
20012188:	681b      	ldr	r3, [r3, #0]
2001218a:	f022 0204 	bic.w	r2, r2, #4
2001218e:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
20012190:	687b      	ldr	r3, [r7, #4]
20012192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012194:	681b      	ldr	r3, [r3, #0]
20012196:	68da      	ldr	r2, [r3, #12]
20012198:	687b      	ldr	r3, [r7, #4]
2001219a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2001219c:	681b      	ldr	r3, [r3, #0]
2001219e:	f022 0201 	bic.w	r2, r2, #1
200121a2:	60da      	str	r2, [r3, #12]
200121a4:	e021      	b.n	200121ea <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
200121a6:	687b      	ldr	r3, [r7, #4]
200121a8:	681b      	ldr	r3, [r3, #0]
200121aa:	3320      	adds	r3, #32
200121ac:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
200121ae:	e013      	b.n	200121d8 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
200121b0:	687b      	ldr	r3, [r7, #4]
200121b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200121b4:	2b00      	cmp	r3, #0
200121b6:	d017      	beq.n	200121e8 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
200121b8:	687b      	ldr	r3, [r7, #4]
200121ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200121bc:	68fa      	ldr	r2, [r7, #12]
200121be:	7812      	ldrb	r2, [r2, #0]
200121c0:	b2d2      	uxtb	r2, r2
200121c2:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
200121c4:	687b      	ldr	r3, [r7, #4]
200121c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200121c8:	1c5a      	adds	r2, r3, #1
200121ca:	687b      	ldr	r3, [r7, #4]
200121cc:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
200121ce:	687b      	ldr	r3, [r7, #4]
200121d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200121d2:	1e5a      	subs	r2, r3, #1
200121d4:	687b      	ldr	r3, [r7, #4]
200121d6:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
200121d8:	687b      	ldr	r3, [r7, #4]
200121da:	681b      	ldr	r3, [r3, #0]
200121dc:	689b      	ldr	r3, [r3, #8]
200121de:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
200121e2:	2b00      	cmp	r3, #0
200121e4:	d1e4      	bne.n	200121b0 <HAL_QSPI_IRQHandler+0x1b4>
200121e6:	e000      	b.n	200121ea <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
200121e8:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
200121ea:	687b      	ldr	r3, [r7, #4]
200121ec:	2201      	movs	r2, #1
200121ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
200121f2:	6878      	ldr	r0, [r7, #4]
200121f4:	f000 fed5 	bl	20012fa2 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
200121f8:	e0b0      	b.n	2001235c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
200121fa:	687b      	ldr	r3, [r7, #4]
200121fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012200:	b2db      	uxtb	r3, r3
20012202:	2b02      	cmp	r3, #2
20012204:	d107      	bne.n	20012216 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
20012206:	687b      	ldr	r3, [r7, #4]
20012208:	2201      	movs	r2, #1
2001220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
2001220e:	6878      	ldr	r0, [r7, #4]
20012210:	f000 febd 	bl	20012f8e <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
20012214:	e0a2      	b.n	2001235c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
20012216:	687b      	ldr	r3, [r7, #4]
20012218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2001221c:	b2db      	uxtb	r3, r3
2001221e:	2b08      	cmp	r3, #8
20012220:	f040 809c 	bne.w	2001235c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
20012224:	687b      	ldr	r3, [r7, #4]
20012226:	681b      	ldr	r3, [r3, #0]
20012228:	695a      	ldr	r2, [r3, #20]
2001222a:	687b      	ldr	r3, [r7, #4]
2001222c:	681b      	ldr	r3, [r3, #0]
2001222e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
20012232:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
20012234:	687b      	ldr	r3, [r7, #4]
20012236:	2201      	movs	r2, #1
20012238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
2001223c:	687b      	ldr	r3, [r7, #4]
2001223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012240:	2b00      	cmp	r3, #0
20012242:	d103      	bne.n	2001224c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
20012244:	6878      	ldr	r0, [r7, #4]
20012246:	f000 fe98 	bl	20012f7a <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2001224a:	e087      	b.n	2001235c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
2001224c:	6878      	ldr	r0, [r7, #4]
2001224e:	f000 fe8a 	bl	20012f66 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
20012252:	e083      	b.n	2001235c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
20012254:	697b      	ldr	r3, [r7, #20]
20012256:	f003 0308 	and.w	r3, r3, #8
2001225a:	2b00      	cmp	r3, #0
2001225c:	d01f      	beq.n	2001229e <HAL_QSPI_IRQHandler+0x2a2>
2001225e:	693b      	ldr	r3, [r7, #16]
20012260:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20012264:	2b00      	cmp	r3, #0
20012266:	d01a      	beq.n	2001229e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
20012268:	687b      	ldr	r3, [r7, #4]
2001226a:	681b      	ldr	r3, [r3, #0]
2001226c:	2208      	movs	r2, #8
2001226e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
20012270:	687b      	ldr	r3, [r7, #4]
20012272:	681b      	ldr	r3, [r3, #0]
20012274:	681b      	ldr	r3, [r3, #0]
20012276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
2001227a:	2b00      	cmp	r3, #0
2001227c:	d00b      	beq.n	20012296 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
2001227e:	687b      	ldr	r3, [r7, #4]
20012280:	681b      	ldr	r3, [r3, #0]
20012282:	681a      	ldr	r2, [r3, #0]
20012284:	687b      	ldr	r3, [r7, #4]
20012286:	681b      	ldr	r3, [r3, #0]
20012288:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
2001228c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2001228e:	687b      	ldr	r3, [r7, #4]
20012290:	2201      	movs	r2, #1
20012292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
20012296:	6878      	ldr	r0, [r7, #4]
20012298:	f000 fea1 	bl	20012fde <HAL_QSPI_StatusMatchCallback>
2001229c:	e061      	b.n	20012362 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
2001229e:	697b      	ldr	r3, [r7, #20]
200122a0:	f003 0301 	and.w	r3, r3, #1
200122a4:	2b00      	cmp	r3, #0
200122a6:	d047      	beq.n	20012338 <HAL_QSPI_IRQHandler+0x33c>
200122a8:	693b      	ldr	r3, [r7, #16]
200122aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200122ae:	2b00      	cmp	r3, #0
200122b0:	d042      	beq.n	20012338 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
200122b2:	687b      	ldr	r3, [r7, #4]
200122b4:	681b      	ldr	r3, [r3, #0]
200122b6:	2201      	movs	r2, #1
200122b8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
200122ba:	687b      	ldr	r3, [r7, #4]
200122bc:	681b      	ldr	r3, [r3, #0]
200122be:	681a      	ldr	r2, [r3, #0]
200122c0:	687b      	ldr	r3, [r7, #4]
200122c2:	681b      	ldr	r3, [r3, #0]
200122c4:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
200122c8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
200122ca:	687b      	ldr	r3, [r7, #4]
200122cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200122ce:	f043 0202 	orr.w	r2, r3, #2
200122d2:	687b      	ldr	r3, [r7, #4]
200122d4:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
200122d6:	687b      	ldr	r3, [r7, #4]
200122d8:	681b      	ldr	r3, [r3, #0]
200122da:	681b      	ldr	r3, [r3, #0]
200122dc:	f003 0304 	and.w	r3, r3, #4
200122e0:	2b00      	cmp	r3, #0
200122e2:	d021      	beq.n	20012328 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
200122e4:	687b      	ldr	r3, [r7, #4]
200122e6:	681b      	ldr	r3, [r3, #0]
200122e8:	681a      	ldr	r2, [r3, #0]
200122ea:	687b      	ldr	r3, [r7, #4]
200122ec:	681b      	ldr	r3, [r3, #0]
200122ee:	f022 0204 	bic.w	r2, r2, #4
200122f2:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
200122f4:	687b      	ldr	r3, [r7, #4]
200122f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200122f8:	4a1c      	ldr	r2, [pc, #112]	@ (2001236c <HAL_QSPI_IRQHandler+0x370>)
200122fa:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
200122fc:	687b      	ldr	r3, [r7, #4]
200122fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012300:	4618      	mov	r0, r3
20012302:	f7fe fb26 	bl	20010952 <HAL_MDMA_Abort_IT>
20012306:	4603      	mov	r3, r0
20012308:	2b00      	cmp	r3, #0
2001230a:	d029      	beq.n	20012360 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
2001230c:	687b      	ldr	r3, [r7, #4]
2001230e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012310:	f043 0204 	orr.w	r2, r3, #4
20012314:	687b      	ldr	r3, [r7, #4]
20012316:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
20012318:	687b      	ldr	r3, [r7, #4]
2001231a:	2201      	movs	r2, #1
2001231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
20012320:	6878      	ldr	r0, [r7, #4]
20012322:	f000 fe20 	bl	20012f66 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20012326:	e01b      	b.n	20012360 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
20012328:	687b      	ldr	r3, [r7, #4]
2001232a:	2201      	movs	r2, #1
2001232c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
20012330:	6878      	ldr	r0, [r7, #4]
20012332:	f000 fe18 	bl	20012f66 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20012336:	e013      	b.n	20012360 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
20012338:	697b      	ldr	r3, [r7, #20]
2001233a:	f003 0310 	and.w	r3, r3, #16
2001233e:	2b00      	cmp	r3, #0
20012340:	d00f      	beq.n	20012362 <HAL_QSPI_IRQHandler+0x366>
20012342:	693b      	ldr	r3, [r7, #16]
20012344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20012348:	2b00      	cmp	r3, #0
2001234a:	d00a      	beq.n	20012362 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
2001234c:	687b      	ldr	r3, [r7, #4]
2001234e:	681b      	ldr	r3, [r3, #0]
20012350:	2210      	movs	r2, #16
20012352:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
20012354:	6878      	ldr	r0, [r7, #4]
20012356:	f000 fe4c 	bl	20012ff2 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
2001235a:	e002      	b.n	20012362 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2001235c:	bf00      	nop
2001235e:	e000      	b.n	20012362 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20012360:	bf00      	nop
}
20012362:	bf00      	nop
20012364:	3718      	adds	r7, #24
20012366:	46bd      	mov	sp, r7
20012368:	bd80      	pop	{r7, pc}
2001236a:	bf00      	nop
2001236c:	200133b5 	.word	0x200133b5

20012370 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
20012370:	b580      	push	{r7, lr}
20012372:	b088      	sub	sp, #32
20012374:	af02      	add	r7, sp, #8
20012376:	60f8      	str	r0, [r7, #12]
20012378:	60b9      	str	r1, [r7, #8]
2001237a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2001237c:	f7ef ffa0 	bl	200022c0 <HAL_GetTick>
20012380:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
20012382:	68fb      	ldr	r3, [r7, #12]
20012384:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
20012388:	b2db      	uxtb	r3, r3
2001238a:	2b01      	cmp	r3, #1
2001238c:	d101      	bne.n	20012392 <HAL_QSPI_Command+0x22>
2001238e:	2302      	movs	r3, #2
20012390:	e048      	b.n	20012424 <HAL_QSPI_Command+0xb4>
20012392:	68fb      	ldr	r3, [r7, #12]
20012394:	2201      	movs	r2, #1
20012396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2001239a:	68fb      	ldr	r3, [r7, #12]
2001239c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
200123a0:	b2db      	uxtb	r3, r3
200123a2:	2b01      	cmp	r3, #1
200123a4:	d137      	bne.n	20012416 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
200123a6:	68fb      	ldr	r3, [r7, #12]
200123a8:	2200      	movs	r2, #0
200123aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
200123ac:	68fb      	ldr	r3, [r7, #12]
200123ae:	2202      	movs	r2, #2
200123b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
200123b4:	687b      	ldr	r3, [r7, #4]
200123b6:	9300      	str	r3, [sp, #0]
200123b8:	693b      	ldr	r3, [r7, #16]
200123ba:	2200      	movs	r2, #0
200123bc:	2120      	movs	r1, #32
200123be:	68f8      	ldr	r0, [r7, #12]
200123c0:	f001 f82b 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
200123c4:	4603      	mov	r3, r0
200123c6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
200123c8:	7dfb      	ldrb	r3, [r7, #23]
200123ca:	2b00      	cmp	r3, #0
200123cc:	d125      	bne.n	2001241a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
200123ce:	2200      	movs	r2, #0
200123d0:	68b9      	ldr	r1, [r7, #8]
200123d2:	68f8      	ldr	r0, [r7, #12]
200123d4:	f001 f858 	bl	20013488 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
200123d8:	68bb      	ldr	r3, [r7, #8]
200123da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200123dc:	2b00      	cmp	r3, #0
200123de:	d115      	bne.n	2001240c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
200123e0:	687b      	ldr	r3, [r7, #4]
200123e2:	9300      	str	r3, [sp, #0]
200123e4:	693b      	ldr	r3, [r7, #16]
200123e6:	2201      	movs	r2, #1
200123e8:	2102      	movs	r1, #2
200123ea:	68f8      	ldr	r0, [r7, #12]
200123ec:	f001 f815 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
200123f0:	4603      	mov	r3, r0
200123f2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
200123f4:	7dfb      	ldrb	r3, [r7, #23]
200123f6:	2b00      	cmp	r3, #0
200123f8:	d10f      	bne.n	2001241a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200123fa:	68fb      	ldr	r3, [r7, #12]
200123fc:	681b      	ldr	r3, [r3, #0]
200123fe:	2202      	movs	r2, #2
20012400:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
20012402:	68fb      	ldr	r3, [r7, #12]
20012404:	2201      	movs	r2, #1
20012406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
2001240a:	e006      	b.n	2001241a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
2001240c:	68fb      	ldr	r3, [r7, #12]
2001240e:	2201      	movs	r2, #1
20012410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
20012414:	e001      	b.n	2001241a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
20012416:	2302      	movs	r3, #2
20012418:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2001241a:	68fb      	ldr	r3, [r7, #12]
2001241c:	2200      	movs	r2, #0
2001241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
20012422:	7dfb      	ldrb	r3, [r7, #23]
}
20012424:	4618      	mov	r0, r3
20012426:	3718      	adds	r7, #24
20012428:	46bd      	mov	sp, r7
2001242a:	bd80      	pop	{r7, pc}

2001242c <HAL_QSPI_Command_IT>:
  * @param cmd structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
2001242c:	b580      	push	{r7, lr}
2001242e:	b086      	sub	sp, #24
20012430:	af02      	add	r7, sp, #8
20012432:	6078      	str	r0, [r7, #4]
20012434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
20012436:	f7ef ff43 	bl	200022c0 <HAL_GetTick>
2001243a:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
2001243c:	687b      	ldr	r3, [r7, #4]
2001243e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
20012442:	b2db      	uxtb	r3, r3
20012444:	2b01      	cmp	r3, #1
20012446:	d101      	bne.n	2001244c <HAL_QSPI_Command_IT+0x20>
20012448:	2302      	movs	r3, #2
2001244a:	e051      	b.n	200124f0 <HAL_QSPI_Command_IT+0xc4>
2001244c:	687b      	ldr	r3, [r7, #4]
2001244e:	2201      	movs	r2, #1
20012450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
20012454:	687b      	ldr	r3, [r7, #4]
20012456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2001245a:	b2db      	uxtb	r3, r3
2001245c:	2b01      	cmp	r3, #1
2001245e:	d140      	bne.n	200124e2 <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20012460:	687b      	ldr	r3, [r7, #4]
20012462:	2200      	movs	r2, #0
20012464:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
20012466:	687b      	ldr	r3, [r7, #4]
20012468:	2202      	movs	r2, #2
2001246a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2001246e:	687b      	ldr	r3, [r7, #4]
20012470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20012472:	9300      	str	r3, [sp, #0]
20012474:	68bb      	ldr	r3, [r7, #8]
20012476:	2200      	movs	r2, #0
20012478:	2120      	movs	r1, #32
2001247a:	6878      	ldr	r0, [r7, #4]
2001247c:	f000 ffcd 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
20012480:	4603      	mov	r3, r0
20012482:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
20012484:	7bfb      	ldrb	r3, [r7, #15]
20012486:	2b00      	cmp	r3, #0
20012488:	d126      	bne.n	200124d8 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
2001248a:	683b      	ldr	r3, [r7, #0]
2001248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2001248e:	2b00      	cmp	r3, #0
20012490:	d103      	bne.n	2001249a <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
20012492:	687b      	ldr	r3, [r7, #4]
20012494:	681b      	ldr	r3, [r3, #0]
20012496:	2203      	movs	r2, #3
20012498:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2001249a:	2200      	movs	r2, #0
2001249c:	6839      	ldr	r1, [r7, #0]
2001249e:	6878      	ldr	r0, [r7, #4]
200124a0:	f000 fff2 	bl	20013488 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
200124a4:	683b      	ldr	r3, [r7, #0]
200124a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200124a8:	2b00      	cmp	r3, #0
200124aa:	d10c      	bne.n	200124c6 <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
200124ac:	687b      	ldr	r3, [r7, #4]
200124ae:	2200      	movs	r2, #0
200124b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
200124b4:	687b      	ldr	r3, [r7, #4]
200124b6:	681b      	ldr	r3, [r3, #0]
200124b8:	681a      	ldr	r2, [r3, #0]
200124ba:	687b      	ldr	r3, [r7, #4]
200124bc:	681b      	ldr	r3, [r3, #0]
200124be:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
200124c2:	601a      	str	r2, [r3, #0]
200124c4:	e013      	b.n	200124ee <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
200124c6:	687b      	ldr	r3, [r7, #4]
200124c8:	2201      	movs	r2, #1
200124ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
200124ce:	687b      	ldr	r3, [r7, #4]
200124d0:	2200      	movs	r2, #0
200124d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
200124d6:	e00a      	b.n	200124ee <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
200124d8:	687b      	ldr	r3, [r7, #4]
200124da:	2200      	movs	r2, #0
200124dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
200124e0:	e005      	b.n	200124ee <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
200124e2:	2302      	movs	r3, #2
200124e4:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
200124e6:	687b      	ldr	r3, [r7, #4]
200124e8:	2200      	movs	r2, #0
200124ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  /* Return function status */
  return status;
200124ee:	7bfb      	ldrb	r3, [r7, #15]
}
200124f0:	4618      	mov	r0, r3
200124f2:	3710      	adds	r7, #16
200124f4:	46bd      	mov	sp, r7
200124f6:	bd80      	pop	{r7, pc}

200124f8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
200124f8:	b580      	push	{r7, lr}
200124fa:	b08a      	sub	sp, #40	@ 0x28
200124fc:	af02      	add	r7, sp, #8
200124fe:	60f8      	str	r0, [r7, #12]
20012500:	60b9      	str	r1, [r7, #8]
20012502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20012504:	2300      	movs	r3, #0
20012506:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
20012508:	f7ef feda 	bl	200022c0 <HAL_GetTick>
2001250c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
2001250e:	68fb      	ldr	r3, [r7, #12]
20012510:	681b      	ldr	r3, [r3, #0]
20012512:	3320      	adds	r3, #32
20012514:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
20012516:	68fb      	ldr	r3, [r7, #12]
20012518:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2001251c:	b2db      	uxtb	r3, r3
2001251e:	2b01      	cmp	r3, #1
20012520:	d101      	bne.n	20012526 <HAL_QSPI_Transmit+0x2e>
20012522:	2302      	movs	r3, #2
20012524:	e076      	b.n	20012614 <HAL_QSPI_Transmit+0x11c>
20012526:	68fb      	ldr	r3, [r7, #12]
20012528:	2201      	movs	r2, #1
2001252a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2001252e:	68fb      	ldr	r3, [r7, #12]
20012530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012534:	b2db      	uxtb	r3, r3
20012536:	2b01      	cmp	r3, #1
20012538:	d165      	bne.n	20012606 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2001253a:	68fb      	ldr	r3, [r7, #12]
2001253c:	2200      	movs	r2, #0
2001253e:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
20012540:	68bb      	ldr	r3, [r7, #8]
20012542:	2b00      	cmp	r3, #0
20012544:	d056      	beq.n	200125f4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
20012546:	68fb      	ldr	r3, [r7, #12]
20012548:	2212      	movs	r2, #18
2001254a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2001254e:	68fb      	ldr	r3, [r7, #12]
20012550:	681b      	ldr	r3, [r3, #0]
20012552:	691b      	ldr	r3, [r3, #16]
20012554:	1c5a      	adds	r2, r3, #1
20012556:	68fb      	ldr	r3, [r7, #12]
20012558:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2001255a:	68fb      	ldr	r3, [r7, #12]
2001255c:	681b      	ldr	r3, [r3, #0]
2001255e:	691b      	ldr	r3, [r3, #16]
20012560:	1c5a      	adds	r2, r3, #1
20012562:	68fb      	ldr	r3, [r7, #12]
20012564:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
20012566:	68fb      	ldr	r3, [r7, #12]
20012568:	68ba      	ldr	r2, [r7, #8]
2001256a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2001256c:	68fb      	ldr	r3, [r7, #12]
2001256e:	681b      	ldr	r3, [r3, #0]
20012570:	695a      	ldr	r2, [r3, #20]
20012572:	68fb      	ldr	r3, [r7, #12]
20012574:	681b      	ldr	r3, [r3, #0]
20012576:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
2001257a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
2001257c:	e01b      	b.n	200125b6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
2001257e:	687b      	ldr	r3, [r7, #4]
20012580:	9300      	str	r3, [sp, #0]
20012582:	69bb      	ldr	r3, [r7, #24]
20012584:	2201      	movs	r2, #1
20012586:	2104      	movs	r1, #4
20012588:	68f8      	ldr	r0, [r7, #12]
2001258a:	f000 ff46 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
2001258e:	4603      	mov	r3, r0
20012590:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
20012592:	7ffb      	ldrb	r3, [r7, #31]
20012594:	2b00      	cmp	r3, #0
20012596:	d113      	bne.n	200125c0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
20012598:	68fb      	ldr	r3, [r7, #12]
2001259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2001259c:	781a      	ldrb	r2, [r3, #0]
2001259e:	697b      	ldr	r3, [r7, #20]
200125a0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
200125a2:	68fb      	ldr	r3, [r7, #12]
200125a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200125a6:	1c5a      	adds	r2, r3, #1
200125a8:	68fb      	ldr	r3, [r7, #12]
200125aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
200125ac:	68fb      	ldr	r3, [r7, #12]
200125ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200125b0:	1e5a      	subs	r2, r3, #1
200125b2:	68fb      	ldr	r3, [r7, #12]
200125b4:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
200125b6:	68fb      	ldr	r3, [r7, #12]
200125b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200125ba:	2b00      	cmp	r3, #0
200125bc:	d1df      	bne.n	2001257e <HAL_QSPI_Transmit+0x86>
200125be:	e000      	b.n	200125c2 <HAL_QSPI_Transmit+0xca>
          break;
200125c0:	bf00      	nop
      }

      if (status == HAL_OK)
200125c2:	7ffb      	ldrb	r3, [r7, #31]
200125c4:	2b00      	cmp	r3, #0
200125c6:	d110      	bne.n	200125ea <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
200125c8:	687b      	ldr	r3, [r7, #4]
200125ca:	9300      	str	r3, [sp, #0]
200125cc:	69bb      	ldr	r3, [r7, #24]
200125ce:	2201      	movs	r2, #1
200125d0:	2102      	movs	r1, #2
200125d2:	68f8      	ldr	r0, [r7, #12]
200125d4:	f000 ff21 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
200125d8:	4603      	mov	r3, r0
200125da:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
200125dc:	7ffb      	ldrb	r3, [r7, #31]
200125de:	2b00      	cmp	r3, #0
200125e0:	d103      	bne.n	200125ea <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200125e2:	68fb      	ldr	r3, [r7, #12]
200125e4:	681b      	ldr	r3, [r3, #0]
200125e6:	2202      	movs	r2, #2
200125e8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
200125ea:	68fb      	ldr	r3, [r7, #12]
200125ec:	2201      	movs	r2, #1
200125ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
200125f2:	e00a      	b.n	2001260a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
200125f4:	68fb      	ldr	r3, [r7, #12]
200125f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200125f8:	f043 0208 	orr.w	r2, r3, #8
200125fc:	68fb      	ldr	r3, [r7, #12]
200125fe:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
20012600:	2301      	movs	r3, #1
20012602:	77fb      	strb	r3, [r7, #31]
20012604:	e001      	b.n	2001260a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
20012606:	2302      	movs	r3, #2
20012608:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2001260a:	68fb      	ldr	r3, [r7, #12]
2001260c:	2200      	movs	r2, #0
2001260e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
20012612:	7ffb      	ldrb	r3, [r7, #31]
}
20012614:	4618      	mov	r0, r3
20012616:	3720      	adds	r7, #32
20012618:	46bd      	mov	sp, r7
2001261a:	bd80      	pop	{r7, pc}

2001261c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
2001261c:	b580      	push	{r7, lr}
2001261e:	b08a      	sub	sp, #40	@ 0x28
20012620:	af02      	add	r7, sp, #8
20012622:	60f8      	str	r0, [r7, #12]
20012624:	60b9      	str	r1, [r7, #8]
20012626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20012628:	2300      	movs	r3, #0
2001262a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
2001262c:	f7ef fe48 	bl	200022c0 <HAL_GetTick>
20012630:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
20012632:	68fb      	ldr	r3, [r7, #12]
20012634:	681b      	ldr	r3, [r3, #0]
20012636:	699b      	ldr	r3, [r3, #24]
20012638:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
2001263a:	68fb      	ldr	r3, [r7, #12]
2001263c:	681b      	ldr	r3, [r3, #0]
2001263e:	3320      	adds	r3, #32
20012640:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
20012642:	68fb      	ldr	r3, [r7, #12]
20012644:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
20012648:	b2db      	uxtb	r3, r3
2001264a:	2b01      	cmp	r3, #1
2001264c:	d101      	bne.n	20012652 <HAL_QSPI_Receive+0x36>
2001264e:	2302      	movs	r3, #2
20012650:	e07d      	b.n	2001274e <HAL_QSPI_Receive+0x132>
20012652:	68fb      	ldr	r3, [r7, #12]
20012654:	2201      	movs	r2, #1
20012656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2001265a:	68fb      	ldr	r3, [r7, #12]
2001265c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012660:	b2db      	uxtb	r3, r3
20012662:	2b01      	cmp	r3, #1
20012664:	d16c      	bne.n	20012740 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20012666:	68fb      	ldr	r3, [r7, #12]
20012668:	2200      	movs	r2, #0
2001266a:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
2001266c:	68bb      	ldr	r3, [r7, #8]
2001266e:	2b00      	cmp	r3, #0
20012670:	d05d      	beq.n	2001272e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
20012672:	68fb      	ldr	r3, [r7, #12]
20012674:	2222      	movs	r2, #34	@ 0x22
20012676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2001267a:	68fb      	ldr	r3, [r7, #12]
2001267c:	681b      	ldr	r3, [r3, #0]
2001267e:	691b      	ldr	r3, [r3, #16]
20012680:	1c5a      	adds	r2, r3, #1
20012682:	68fb      	ldr	r3, [r7, #12]
20012684:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
20012686:	68fb      	ldr	r3, [r7, #12]
20012688:	681b      	ldr	r3, [r3, #0]
2001268a:	691b      	ldr	r3, [r3, #16]
2001268c:	1c5a      	adds	r2, r3, #1
2001268e:	68fb      	ldr	r3, [r7, #12]
20012690:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
20012692:	68fb      	ldr	r3, [r7, #12]
20012694:	68ba      	ldr	r2, [r7, #8]
20012696:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
20012698:	68fb      	ldr	r3, [r7, #12]
2001269a:	681b      	ldr	r3, [r3, #0]
2001269c:	695b      	ldr	r3, [r3, #20]
2001269e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
200126a2:	68fb      	ldr	r3, [r7, #12]
200126a4:	681b      	ldr	r3, [r3, #0]
200126a6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
200126aa:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
200126ac:	68fb      	ldr	r3, [r7, #12]
200126ae:	681b      	ldr	r3, [r3, #0]
200126b0:	697a      	ldr	r2, [r7, #20]
200126b2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
200126b4:	e01c      	b.n	200126f0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
200126b6:	687b      	ldr	r3, [r7, #4]
200126b8:	9300      	str	r3, [sp, #0]
200126ba:	69bb      	ldr	r3, [r7, #24]
200126bc:	2201      	movs	r2, #1
200126be:	2106      	movs	r1, #6
200126c0:	68f8      	ldr	r0, [r7, #12]
200126c2:	f000 feaa 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
200126c6:	4603      	mov	r3, r0
200126c8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
200126ca:	7ffb      	ldrb	r3, [r7, #31]
200126cc:	2b00      	cmp	r3, #0
200126ce:	d114      	bne.n	200126fa <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
200126d0:	68fb      	ldr	r3, [r7, #12]
200126d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200126d4:	693a      	ldr	r2, [r7, #16]
200126d6:	7812      	ldrb	r2, [r2, #0]
200126d8:	b2d2      	uxtb	r2, r2
200126da:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
200126dc:	68fb      	ldr	r3, [r7, #12]
200126de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200126e0:	1c5a      	adds	r2, r3, #1
200126e2:	68fb      	ldr	r3, [r7, #12]
200126e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
200126e6:	68fb      	ldr	r3, [r7, #12]
200126e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200126ea:	1e5a      	subs	r2, r3, #1
200126ec:	68fb      	ldr	r3, [r7, #12]
200126ee:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
200126f0:	68fb      	ldr	r3, [r7, #12]
200126f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200126f4:	2b00      	cmp	r3, #0
200126f6:	d1de      	bne.n	200126b6 <HAL_QSPI_Receive+0x9a>
200126f8:	e000      	b.n	200126fc <HAL_QSPI_Receive+0xe0>
          break;
200126fa:	bf00      	nop
      }

      if (status == HAL_OK)
200126fc:	7ffb      	ldrb	r3, [r7, #31]
200126fe:	2b00      	cmp	r3, #0
20012700:	d110      	bne.n	20012724 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
20012702:	687b      	ldr	r3, [r7, #4]
20012704:	9300      	str	r3, [sp, #0]
20012706:	69bb      	ldr	r3, [r7, #24]
20012708:	2201      	movs	r2, #1
2001270a:	2102      	movs	r1, #2
2001270c:	68f8      	ldr	r0, [r7, #12]
2001270e:	f000 fe84 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
20012712:	4603      	mov	r3, r0
20012714:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
20012716:	7ffb      	ldrb	r3, [r7, #31]
20012718:	2b00      	cmp	r3, #0
2001271a:	d103      	bne.n	20012724 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2001271c:	68fb      	ldr	r3, [r7, #12]
2001271e:	681b      	ldr	r3, [r3, #0]
20012720:	2202      	movs	r2, #2
20012722:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
20012724:	68fb      	ldr	r3, [r7, #12]
20012726:	2201      	movs	r2, #1
20012728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
2001272c:	e00a      	b.n	20012744 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2001272e:	68fb      	ldr	r3, [r7, #12]
20012730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012732:	f043 0208 	orr.w	r2, r3, #8
20012736:	68fb      	ldr	r3, [r7, #12]
20012738:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
2001273a:	2301      	movs	r3, #1
2001273c:	77fb      	strb	r3, [r7, #31]
2001273e:	e001      	b.n	20012744 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
20012740:	2302      	movs	r3, #2
20012742:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
20012744:	68fb      	ldr	r3, [r7, #12]
20012746:	2200      	movs	r2, #0
20012748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
2001274c:	7ffb      	ldrb	r3, [r7, #31]
}
2001274e:	4618      	mov	r0, r3
20012750:	3720      	adds	r7, #32
20012752:	46bd      	mov	sp, r7
20012754:	bd80      	pop	{r7, pc}

20012756 <HAL_QSPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
20012756:	b480      	push	{r7}
20012758:	b085      	sub	sp, #20
2001275a:	af00      	add	r7, sp, #0
2001275c:	6078      	str	r0, [r7, #4]
2001275e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20012760:	2300      	movs	r3, #0
20012762:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
20012764:	687b      	ldr	r3, [r7, #4]
20012766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2001276a:	b2db      	uxtb	r3, r3
2001276c:	2b01      	cmp	r3, #1
2001276e:	d101      	bne.n	20012774 <HAL_QSPI_Transmit_IT+0x1e>
20012770:	2302      	movs	r3, #2
20012772:	e04f      	b.n	20012814 <HAL_QSPI_Transmit_IT+0xbe>
20012774:	687b      	ldr	r3, [r7, #4]
20012776:	2201      	movs	r2, #1
20012778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2001277c:	687b      	ldr	r3, [r7, #4]
2001277e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012782:	b2db      	uxtb	r3, r3
20012784:	2b01      	cmp	r3, #1
20012786:	d13e      	bne.n	20012806 <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20012788:	687b      	ldr	r3, [r7, #4]
2001278a:	2200      	movs	r2, #0
2001278c:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
2001278e:	683b      	ldr	r3, [r7, #0]
20012790:	2b00      	cmp	r3, #0
20012792:	d02b      	beq.n	200127ec <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
20012794:	687b      	ldr	r3, [r7, #4]
20012796:	2212      	movs	r2, #18
20012798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2001279c:	687b      	ldr	r3, [r7, #4]
2001279e:	681b      	ldr	r3, [r3, #0]
200127a0:	691b      	ldr	r3, [r3, #16]
200127a2:	1c5a      	adds	r2, r3, #1
200127a4:	687b      	ldr	r3, [r7, #4]
200127a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
200127a8:	687b      	ldr	r3, [r7, #4]
200127aa:	681b      	ldr	r3, [r3, #0]
200127ac:	691b      	ldr	r3, [r3, #16]
200127ae:	1c5a      	adds	r2, r3, #1
200127b0:	687b      	ldr	r3, [r7, #4]
200127b2:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
200127b4:	687b      	ldr	r3, [r7, #4]
200127b6:	683a      	ldr	r2, [r7, #0]
200127b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
200127ba:	687b      	ldr	r3, [r7, #4]
200127bc:	681b      	ldr	r3, [r3, #0]
200127be:	2203      	movs	r2, #3
200127c0:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
200127c2:	687b      	ldr	r3, [r7, #4]
200127c4:	681b      	ldr	r3, [r3, #0]
200127c6:	695a      	ldr	r2, [r3, #20]
200127c8:	687b      	ldr	r3, [r7, #4]
200127ca:	681b      	ldr	r3, [r3, #0]
200127cc:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
200127d0:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
200127d2:	687b      	ldr	r3, [r7, #4]
200127d4:	2200      	movs	r2, #0
200127d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
200127da:	687b      	ldr	r3, [r7, #4]
200127dc:	681b      	ldr	r3, [r3, #0]
200127de:	681a      	ldr	r2, [r3, #0]
200127e0:	687b      	ldr	r3, [r7, #4]
200127e2:	681b      	ldr	r3, [r3, #0]
200127e4:	f442 22e0 	orr.w	r2, r2, #458752	@ 0x70000
200127e8:	601a      	str	r2, [r3, #0]
200127ea:	e012      	b.n	20012812 <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
200127ec:	687b      	ldr	r3, [r7, #4]
200127ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200127f0:	f043 0208 	orr.w	r2, r3, #8
200127f4:	687b      	ldr	r3, [r7, #4]
200127f6:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
200127f8:	2301      	movs	r3, #1
200127fa:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
200127fc:	687b      	ldr	r3, [r7, #4]
200127fe:	2200      	movs	r2, #0
20012800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
20012804:	e005      	b.n	20012812 <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
20012806:	2302      	movs	r3, #2
20012808:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2001280a:	687b      	ldr	r3, [r7, #4]
2001280c:	2200      	movs	r2, #0
2001280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
20012812:	7bfb      	ldrb	r3, [r7, #15]
}
20012814:	4618      	mov	r0, r3
20012816:	3714      	adds	r7, #20
20012818:	46bd      	mov	sp, r7
2001281a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001281e:	4770      	bx	lr

20012820 <HAL_QSPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
20012820:	b480      	push	{r7}
20012822:	b085      	sub	sp, #20
20012824:	af00      	add	r7, sp, #0
20012826:	6078      	str	r0, [r7, #4]
20012828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2001282a:	2300      	movs	r3, #0
2001282c:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
2001282e:	687b      	ldr	r3, [r7, #4]
20012830:	681b      	ldr	r3, [r3, #0]
20012832:	699b      	ldr	r3, [r3, #24]
20012834:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
20012836:	687b      	ldr	r3, [r7, #4]
20012838:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2001283c:	b2db      	uxtb	r3, r3
2001283e:	2b01      	cmp	r3, #1
20012840:	d101      	bne.n	20012846 <HAL_QSPI_Receive_IT+0x26>
20012842:	2302      	movs	r3, #2
20012844:	e055      	b.n	200128f2 <HAL_QSPI_Receive_IT+0xd2>
20012846:	687b      	ldr	r3, [r7, #4]
20012848:	2201      	movs	r2, #1
2001284a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2001284e:	687b      	ldr	r3, [r7, #4]
20012850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012854:	b2db      	uxtb	r3, r3
20012856:	2b01      	cmp	r3, #1
20012858:	d144      	bne.n	200128e4 <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2001285a:	687b      	ldr	r3, [r7, #4]
2001285c:	2200      	movs	r2, #0
2001285e:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
20012860:	683b      	ldr	r3, [r7, #0]
20012862:	2b00      	cmp	r3, #0
20012864:	d031      	beq.n	200128ca <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
20012866:	687b      	ldr	r3, [r7, #4]
20012868:	2222      	movs	r2, #34	@ 0x22
2001286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2001286e:	687b      	ldr	r3, [r7, #4]
20012870:	681b      	ldr	r3, [r3, #0]
20012872:	691b      	ldr	r3, [r3, #16]
20012874:	1c5a      	adds	r2, r3, #1
20012876:	687b      	ldr	r3, [r7, #4]
20012878:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2001287a:	687b      	ldr	r3, [r7, #4]
2001287c:	681b      	ldr	r3, [r3, #0]
2001287e:	691b      	ldr	r3, [r3, #16]
20012880:	1c5a      	adds	r2, r3, #1
20012882:	687b      	ldr	r3, [r7, #4]
20012884:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
20012886:	687b      	ldr	r3, [r7, #4]
20012888:	683a      	ldr	r2, [r7, #0]
2001288a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
2001288c:	687b      	ldr	r3, [r7, #4]
2001288e:	681b      	ldr	r3, [r3, #0]
20012890:	2203      	movs	r2, #3
20012892:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
20012894:	687b      	ldr	r3, [r7, #4]
20012896:	681b      	ldr	r3, [r3, #0]
20012898:	695b      	ldr	r3, [r3, #20]
2001289a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
2001289e:	687b      	ldr	r3, [r7, #4]
200128a0:	681b      	ldr	r3, [r3, #0]
200128a2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
200128a6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
200128a8:	687b      	ldr	r3, [r7, #4]
200128aa:	681b      	ldr	r3, [r3, #0]
200128ac:	68ba      	ldr	r2, [r7, #8]
200128ae:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
200128b0:	687b      	ldr	r3, [r7, #4]
200128b2:	2200      	movs	r2, #0
200128b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
200128b8:	687b      	ldr	r3, [r7, #4]
200128ba:	681b      	ldr	r3, [r3, #0]
200128bc:	681a      	ldr	r2, [r3, #0]
200128be:	687b      	ldr	r3, [r7, #4]
200128c0:	681b      	ldr	r3, [r3, #0]
200128c2:	f442 22e0 	orr.w	r2, r2, #458752	@ 0x70000
200128c6:	601a      	str	r2, [r3, #0]
200128c8:	e012      	b.n	200128f0 <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
200128ca:	687b      	ldr	r3, [r7, #4]
200128cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200128ce:	f043 0208 	orr.w	r2, r3, #8
200128d2:	687b      	ldr	r3, [r7, #4]
200128d4:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
200128d6:	2301      	movs	r3, #1
200128d8:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
200128da:	687b      	ldr	r3, [r7, #4]
200128dc:	2200      	movs	r2, #0
200128de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
200128e2:	e005      	b.n	200128f0 <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
200128e4:	2302      	movs	r3, #2
200128e6:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
200128e8:	687b      	ldr	r3, [r7, #4]
200128ea:	2200      	movs	r2, #0
200128ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
200128f0:	7bfb      	ldrb	r3, [r7, #15]
}
200128f2:	4618      	mov	r0, r3
200128f4:	3714      	adds	r7, #20
200128f6:	46bd      	mov	sp, r7
200128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200128fc:	4770      	bx	lr
	...

20012900 <HAL_QSPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
20012900:	b590      	push	{r4, r7, lr}
20012902:	b087      	sub	sp, #28
20012904:	af02      	add	r7, sp, #8
20012906:	6078      	str	r0, [r7, #4]
20012908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2001290a:	2300      	movs	r3, #0
2001290c:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
2001290e:	687b      	ldr	r3, [r7, #4]
20012910:	681b      	ldr	r3, [r3, #0]
20012912:	691b      	ldr	r3, [r3, #16]
20012914:	3301      	adds	r3, #1
20012916:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
20012918:	687b      	ldr	r3, [r7, #4]
2001291a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2001291e:	b2db      	uxtb	r3, r3
20012920:	2b01      	cmp	r3, #1
20012922:	d101      	bne.n	20012928 <HAL_QSPI_Transmit_DMA+0x28>
20012924:	2302      	movs	r3, #2
20012926:	e0cb      	b.n	20012ac0 <HAL_QSPI_Transmit_DMA+0x1c0>
20012928:	687b      	ldr	r3, [r7, #4]
2001292a:	2201      	movs	r2, #1
2001292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
20012930:	687b      	ldr	r3, [r7, #4]
20012932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012936:	b2db      	uxtb	r3, r3
20012938:	2b01      	cmp	r3, #1
2001293a:	f040 80ba 	bne.w	20012ab2 <HAL_QSPI_Transmit_DMA+0x1b2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2001293e:	687b      	ldr	r3, [r7, #4]
20012940:	2200      	movs	r2, #0
20012942:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
20012944:	683b      	ldr	r3, [r7, #0]
20012946:	2b00      	cmp	r3, #0
20012948:	f000 80a6 	beq.w	20012a98 <HAL_QSPI_Transmit_DMA+0x198>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
2001294c:	687b      	ldr	r3, [r7, #4]
2001294e:	68ba      	ldr	r2, [r7, #8]
20012950:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
20012952:	687b      	ldr	r3, [r7, #4]
20012954:	2212      	movs	r2, #18
20012956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
2001295a:	687b      	ldr	r3, [r7, #4]
2001295c:	681b      	ldr	r3, [r3, #0]
2001295e:	2203      	movs	r2, #3
20012960:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
20012962:	687b      	ldr	r3, [r7, #4]
20012964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
20012966:	687b      	ldr	r3, [r7, #4]
20012968:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->pTxBuffPtr = pData;
2001296a:	687b      	ldr	r3, [r7, #4]
2001296c:	683a      	ldr	r2, [r7, #0]
2001296e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
20012970:	687b      	ldr	r3, [r7, #4]
20012972:	681b      	ldr	r3, [r3, #0]
20012974:	695a      	ldr	r2, [r3, #20]
20012976:	687b      	ldr	r3, [r7, #4]
20012978:	681b      	ldr	r3, [r3, #0]
2001297a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
2001297e:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
20012980:	687b      	ldr	r3, [r7, #4]
20012982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012984:	4a50      	ldr	r2, [pc, #320]	@ (20012ac8 <HAL_QSPI_Transmit_DMA+0x1c8>)
20012986:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
20012988:	687b      	ldr	r3, [r7, #4]
2001298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2001298c:	4a4f      	ldr	r2, [pc, #316]	@ (20012acc <HAL_QSPI_Transmit_DMA+0x1cc>)
2001298e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
20012990:	687b      	ldr	r3, [r7, #4]
20012992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012994:	2200      	movs	r2, #0
20012996:	659a      	str	r2, [r3, #88]	@ 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
20012998:	687b      	ldr	r3, [r7, #4]
2001299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2001299c:	681b      	ldr	r3, [r3, #0]
2001299e:	6919      	ldr	r1, [r3, #16]
200129a0:	687b      	ldr	r3, [r7, #4]
200129a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200129a4:	681a      	ldr	r2, [r3, #0]
200129a6:	4b4a      	ldr	r3, [pc, #296]	@ (20012ad0 <HAL_QSPI_Transmit_DMA+0x1d0>)
200129a8:	400b      	ands	r3, r1
200129aa:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
200129ac:	687b      	ldr	r3, [r7, #4]
200129ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200129b0:	69db      	ldr	r3, [r3, #28]
200129b2:	2b00      	cmp	r3, #0
200129b4:	d10c      	bne.n	200129d0 <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
200129b6:	687b      	ldr	r3, [r7, #4]
200129b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200129ba:	681b      	ldr	r3, [r3, #0]
200129bc:	691a      	ldr	r2, [r3, #16]
200129be:	4b45      	ldr	r3, [pc, #276]	@ (20012ad4 <HAL_QSPI_Transmit_DMA+0x1d4>)
200129c0:	4013      	ands	r3, r2
200129c2:	687a      	ldr	r2, [r7, #4]
200129c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
200129c6:	6812      	ldr	r2, [r2, #0]
200129c8:	f043 0302 	orr.w	r3, r3, #2
200129cc:	6113      	str	r3, [r2, #16]
200129ce:	e02c      	b.n	20012a2a <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
200129d0:	687b      	ldr	r3, [r7, #4]
200129d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200129d4:	69db      	ldr	r3, [r3, #28]
200129d6:	2b10      	cmp	r3, #16
200129d8:	d10c      	bne.n	200129f4 <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
200129da:	687b      	ldr	r3, [r7, #4]
200129dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200129de:	681b      	ldr	r3, [r3, #0]
200129e0:	691a      	ldr	r2, [r3, #16]
200129e2:	4b3c      	ldr	r3, [pc, #240]	@ (20012ad4 <HAL_QSPI_Transmit_DMA+0x1d4>)
200129e4:	4013      	ands	r3, r2
200129e6:	687a      	ldr	r2, [r7, #4]
200129e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
200129ea:	6812      	ldr	r2, [r2, #0]
200129ec:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
200129f0:	6113      	str	r3, [r2, #16]
200129f2:	e01a      	b.n	20012a2a <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
200129f4:	687b      	ldr	r3, [r7, #4]
200129f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200129f8:	69db      	ldr	r3, [r3, #28]
200129fa:	2b20      	cmp	r3, #32
200129fc:	d10d      	bne.n	20012a1a <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
200129fe:	687b      	ldr	r3, [r7, #4]
20012a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012a02:	681b      	ldr	r3, [r3, #0]
20012a04:	691b      	ldr	r3, [r3, #16]
20012a06:	4a33      	ldr	r2, [pc, #204]	@ (20012ad4 <HAL_QSPI_Transmit_DMA+0x1d4>)
20012a08:	401a      	ands	r2, r3
20012a0a:	687b      	ldr	r3, [r7, #4]
20012a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012a0e:	6819      	ldr	r1, [r3, #0]
20012a10:	f240 2302 	movw	r3, #514	@ 0x202
20012a14:	4313      	orrs	r3, r2
20012a16:	610b      	str	r3, [r1, #16]
20012a18:	e007      	b.n	20012a2a <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20012a1a:	687b      	ldr	r3, [r7, #4]
20012a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012a1e:	f043 0204 	orr.w	r2, r3, #4
20012a22:	687b      	ldr	r3, [r7, #4]
20012a24:	645a      	str	r2, [r3, #68]	@ 0x44
          status = HAL_ERROR;
20012a26:	2301      	movs	r3, #1
20012a28:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
20012a2a:	687b      	ldr	r3, [r7, #4]
20012a2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
20012a2e:	6839      	ldr	r1, [r7, #0]
20012a30:	687b      	ldr	r3, [r7, #4]
20012a32:	681b      	ldr	r3, [r3, #0]
20012a34:	3320      	adds	r3, #32
20012a36:	461c      	mov	r4, r3
20012a38:	687b      	ldr	r3, [r7, #4]
20012a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20012a3c:	2201      	movs	r2, #1
20012a3e:	9200      	str	r2, [sp, #0]
20012a40:	4622      	mov	r2, r4
20012a42:	f7fd feaa 	bl	2001079a <HAL_MDMA_Start_IT>
20012a46:	4603      	mov	r3, r0
20012a48:	2b00      	cmp	r3, #0
20012a4a:	d114      	bne.n	20012a76 <HAL_QSPI_Transmit_DMA+0x176>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
20012a4c:	687b      	ldr	r3, [r7, #4]
20012a4e:	2200      	movs	r2, #0
20012a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
20012a54:	687b      	ldr	r3, [r7, #4]
20012a56:	681b      	ldr	r3, [r3, #0]
20012a58:	681a      	ldr	r2, [r3, #0]
20012a5a:	687b      	ldr	r3, [r7, #4]
20012a5c:	681b      	ldr	r3, [r3, #0]
20012a5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
20012a62:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20012a64:	687b      	ldr	r3, [r7, #4]
20012a66:	681b      	ldr	r3, [r3, #0]
20012a68:	681a      	ldr	r2, [r3, #0]
20012a6a:	687b      	ldr	r3, [r7, #4]
20012a6c:	681b      	ldr	r3, [r3, #0]
20012a6e:	f042 0204 	orr.w	r2, r2, #4
20012a72:	601a      	str	r2, [r3, #0]
20012a74:	e023      	b.n	20012abe <HAL_QSPI_Transmit_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
20012a76:	2301      	movs	r3, #1
20012a78:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20012a7a:	687b      	ldr	r3, [r7, #4]
20012a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012a7e:	f043 0204 	orr.w	r2, r3, #4
20012a82:	687b      	ldr	r3, [r7, #4]
20012a84:	645a      	str	r2, [r3, #68]	@ 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
20012a86:	687b      	ldr	r3, [r7, #4]
20012a88:	2201      	movs	r2, #1
20012a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
20012a8e:	687b      	ldr	r3, [r7, #4]
20012a90:	2200      	movs	r2, #0
20012a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
20012a96:	e012      	b.n	20012abe <HAL_QSPI_Transmit_DMA+0x1be>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
20012a98:	687b      	ldr	r3, [r7, #4]
20012a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012a9c:	f043 0208 	orr.w	r2, r3, #8
20012aa0:	687b      	ldr	r3, [r7, #4]
20012aa2:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
20012aa4:	2301      	movs	r3, #1
20012aa6:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
20012aa8:	687b      	ldr	r3, [r7, #4]
20012aaa:	2200      	movs	r2, #0
20012aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
20012ab0:	e005      	b.n	20012abe <HAL_QSPI_Transmit_DMA+0x1be>
    }
  }
  else
  {
    status = HAL_BUSY;
20012ab2:	2302      	movs	r3, #2
20012ab4:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
20012ab6:	687b      	ldr	r3, [r7, #4]
20012ab8:	2200      	movs	r2, #0
20012aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
20012abe:	7bfb      	ldrb	r3, [r7, #15]
}
20012ac0:	4618      	mov	r0, r3
20012ac2:	3714      	adds	r7, #20
20012ac4:	46bd      	mov	sp, r7
20012ac6:	bd90      	pop	{r4, r7, pc}
20012ac8:	20013341 	.word	0x20013341
20012acc:	20013371 	.word	0x20013371
20012ad0:	fffff3f3 	.word	0xfffff3f3
20012ad4:	fffffcfc 	.word	0xfffffcfc

20012ad8 <HAL_QSPI_Receive_DMA>:
  * @param  pData pointer to data buffer.
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
20012ad8:	b590      	push	{r4, r7, lr}
20012ada:	b089      	sub	sp, #36	@ 0x24
20012adc:	af02      	add	r7, sp, #8
20012ade:	6078      	str	r0, [r7, #4]
20012ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20012ae2:	2300      	movs	r3, #0
20012ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
20012ae6:	687b      	ldr	r3, [r7, #4]
20012ae8:	681b      	ldr	r3, [r3, #0]
20012aea:	699b      	ldr	r3, [r3, #24]
20012aec:	613b      	str	r3, [r7, #16]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
20012aee:	687b      	ldr	r3, [r7, #4]
20012af0:	681b      	ldr	r3, [r3, #0]
20012af2:	691b      	ldr	r3, [r3, #16]
20012af4:	3301      	adds	r3, #1
20012af6:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hqspi);
20012af8:	687b      	ldr	r3, [r7, #4]
20012afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
20012afe:	b2db      	uxtb	r3, r3
20012b00:	2b01      	cmp	r3, #1
20012b02:	d101      	bne.n	20012b08 <HAL_QSPI_Receive_DMA+0x30>
20012b04:	2302      	movs	r3, #2
20012b06:	e0d1      	b.n	20012cac <HAL_QSPI_Receive_DMA+0x1d4>
20012b08:	687b      	ldr	r3, [r7, #4]
20012b0a:	2201      	movs	r2, #1
20012b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
20012b10:	687b      	ldr	r3, [r7, #4]
20012b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012b16:	b2db      	uxtb	r3, r3
20012b18:	2b01      	cmp	r3, #1
20012b1a:	f040 80c0 	bne.w	20012c9e <HAL_QSPI_Receive_DMA+0x1c6>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20012b1e:	687b      	ldr	r3, [r7, #4]
20012b20:	2200      	movs	r2, #0
20012b22:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
20012b24:	683b      	ldr	r3, [r7, #0]
20012b26:	2b00      	cmp	r3, #0
20012b28:	f000 80ac 	beq.w	20012c84 <HAL_QSPI_Receive_DMA+0x1ac>
    {
      /* Configure counters of the handle */
      hqspi->RxXferCount = data_size;
20012b2c:	687b      	ldr	r3, [r7, #4]
20012b2e:	68fa      	ldr	r2, [r7, #12]
20012b30:	639a      	str	r2, [r3, #56]	@ 0x38
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
20012b32:	687b      	ldr	r3, [r7, #4]
20012b34:	2222      	movs	r2, #34	@ 0x22
20012b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
20012b3a:	687b      	ldr	r3, [r7, #4]
20012b3c:	681b      	ldr	r3, [r3, #0]
20012b3e:	2203      	movs	r2, #3
20012b40:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->RxXferSize = hqspi->RxXferCount;
20012b42:	687b      	ldr	r3, [r7, #4]
20012b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
20012b46:	687b      	ldr	r3, [r7, #4]
20012b48:	635a      	str	r2, [r3, #52]	@ 0x34
        hqspi->pRxBuffPtr = pData;
20012b4a:	687b      	ldr	r3, [r7, #4]
20012b4c:	683a      	ldr	r2, [r7, #0]
20012b4e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMARxCplt;
20012b50:	687b      	ldr	r3, [r7, #4]
20012b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012b54:	4a57      	ldr	r2, [pc, #348]	@ (20012cb4 <HAL_QSPI_Receive_DMA+0x1dc>)
20012b56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
20012b58:	687b      	ldr	r3, [r7, #4]
20012b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012b5c:	4a56      	ldr	r2, [pc, #344]	@ (20012cb8 <HAL_QSPI_Receive_DMA+0x1e0>)
20012b5e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
20012b60:	687b      	ldr	r3, [r7, #4]
20012b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012b64:	2200      	movs	r2, #0
20012b66:	659a      	str	r2, [r3, #88]	@ 0x58

      /* In Receive mode , the MDMA source is the QSPI DR register : Force the MDMA Source Increment to disable */
      MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_DISABLE);
20012b68:	687b      	ldr	r3, [r7, #4]
20012b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012b6c:	681b      	ldr	r3, [r3, #0]
20012b6e:	6919      	ldr	r1, [r3, #16]
20012b70:	687b      	ldr	r3, [r7, #4]
20012b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012b74:	681a      	ldr	r2, [r3, #0]
20012b76:	4b51      	ldr	r3, [pc, #324]	@ (20012cbc <HAL_QSPI_Receive_DMA+0x1e4>)
20012b78:	400b      	ands	r3, r1
20012b7a:	6113      	str	r3, [r2, #16]

      /* Update MDMA configuration with the correct DestinationInc field for read operation */
      if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_BYTE)
20012b7c:	687b      	ldr	r3, [r7, #4]
20012b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012b80:	6a1b      	ldr	r3, [r3, #32]
20012b82:	2b00      	cmp	r3, #0
20012b84:	d10c      	bne.n	20012ba0 <HAL_QSPI_Receive_DMA+0xc8>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_BYTE);
20012b86:	687b      	ldr	r3, [r7, #4]
20012b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012b8a:	681b      	ldr	r3, [r3, #0]
20012b8c:	691a      	ldr	r2, [r3, #16]
20012b8e:	4b4c      	ldr	r3, [pc, #304]	@ (20012cc0 <HAL_QSPI_Receive_DMA+0x1e8>)
20012b90:	4013      	ands	r3, r2
20012b92:	687a      	ldr	r2, [r7, #4]
20012b94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
20012b96:	6812      	ldr	r2, [r2, #0]
20012b98:	f043 0308 	orr.w	r3, r3, #8
20012b9c:	6113      	str	r3, [r2, #16]
20012b9e:	e02c      	b.n	20012bfa <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_HALFWORD)
20012ba0:	687b      	ldr	r3, [r7, #4]
20012ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012ba4:	6a1b      	ldr	r3, [r3, #32]
20012ba6:	2b40      	cmp	r3, #64	@ 0x40
20012ba8:	d10c      	bne.n	20012bc4 <HAL_QSPI_Receive_DMA+0xec>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_HALFWORD);
20012baa:	687b      	ldr	r3, [r7, #4]
20012bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012bae:	681b      	ldr	r3, [r3, #0]
20012bb0:	691a      	ldr	r2, [r3, #16]
20012bb2:	4b43      	ldr	r3, [pc, #268]	@ (20012cc0 <HAL_QSPI_Receive_DMA+0x1e8>)
20012bb4:	4013      	ands	r3, r2
20012bb6:	687a      	ldr	r2, [r7, #4]
20012bb8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
20012bba:	6812      	ldr	r2, [r2, #0]
20012bbc:	f443 6381 	orr.w	r3, r3, #1032	@ 0x408
20012bc0:	6113      	str	r3, [r2, #16]
20012bc2:	e01a      	b.n	20012bfa <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_WORD)
20012bc4:	687b      	ldr	r3, [r7, #4]
20012bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012bc8:	6a1b      	ldr	r3, [r3, #32]
20012bca:	2b80      	cmp	r3, #128	@ 0x80
20012bcc:	d10d      	bne.n	20012bea <HAL_QSPI_Receive_DMA+0x112>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_WORD);
20012bce:	687b      	ldr	r3, [r7, #4]
20012bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012bd2:	681b      	ldr	r3, [r3, #0]
20012bd4:	691b      	ldr	r3, [r3, #16]
20012bd6:	4a3a      	ldr	r2, [pc, #232]	@ (20012cc0 <HAL_QSPI_Receive_DMA+0x1e8>)
20012bd8:	401a      	ands	r2, r3
20012bda:	687b      	ldr	r3, [r7, #4]
20012bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20012bde:	6819      	ldr	r1, [r3, #0]
20012be0:	f640 0308 	movw	r3, #2056	@ 0x808
20012be4:	4313      	orrs	r3, r2
20012be6:	610b      	str	r3, [r1, #16]
20012be8:	e007      	b.n	20012bfa <HAL_QSPI_Receive_DMA+0x122>
      }
      else
      {
       /* in case of incorrect destination data size */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20012bea:	687b      	ldr	r3, [r7, #4]
20012bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012bee:	f043 0204 	orr.w	r2, r3, #4
20012bf2:	687b      	ldr	r3, [r7, #4]
20012bf4:	645a      	str	r2, [r3, #68]	@ 0x44
        status = HAL_ERROR;
20012bf6:	2301      	movs	r3, #1
20012bf8:	75fb      	strb	r3, [r7, #23]
      }
          /* Configure QSPI: CCR register with functional as indirect read */
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
20012bfa:	687b      	ldr	r3, [r7, #4]
20012bfc:	681b      	ldr	r3, [r3, #0]
20012bfe:	695b      	ldr	r3, [r3, #20]
20012c00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
20012c04:	687b      	ldr	r3, [r7, #4]
20012c06:	681b      	ldr	r3, [r3, #0]
20012c08:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
20012c0c:	615a      	str	r2, [r3, #20]

          /* Start the transfer by re-writing the address in AR register */
          WRITE_REG(hqspi->Instance->AR, addr_reg);
20012c0e:	687b      	ldr	r3, [r7, #4]
20012c10:	681b      	ldr	r3, [r3, #0]
20012c12:	693a      	ldr	r2, [r7, #16]
20012c14:	619a      	str	r2, [r3, #24]

        /* Enable the MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize, 1) == HAL_OK)
20012c16:	687b      	ldr	r3, [r7, #4]
20012c18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
20012c1a:	687b      	ldr	r3, [r7, #4]
20012c1c:	681b      	ldr	r3, [r3, #0]
20012c1e:	3320      	adds	r3, #32
20012c20:	461c      	mov	r4, r3
20012c22:	683a      	ldr	r2, [r7, #0]
20012c24:	687b      	ldr	r3, [r7, #4]
20012c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20012c28:	2101      	movs	r1, #1
20012c2a:	9100      	str	r1, [sp, #0]
20012c2c:	4621      	mov	r1, r4
20012c2e:	f7fd fdb4 	bl	2001079a <HAL_MDMA_Start_IT>
20012c32:	4603      	mov	r3, r0
20012c34:	2b00      	cmp	r3, #0
20012c36:	d114      	bne.n	20012c62 <HAL_QSPI_Receive_DMA+0x18a>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
20012c38:	687b      	ldr	r3, [r7, #4]
20012c3a:	2200      	movs	r2, #0
20012c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
20012c40:	687b      	ldr	r3, [r7, #4]
20012c42:	681b      	ldr	r3, [r3, #0]
20012c44:	681a      	ldr	r2, [r3, #0]
20012c46:	687b      	ldr	r3, [r7, #4]
20012c48:	681b      	ldr	r3, [r3, #0]
20012c4a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
20012c4e:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20012c50:	687b      	ldr	r3, [r7, #4]
20012c52:	681b      	ldr	r3, [r3, #0]
20012c54:	681a      	ldr	r2, [r3, #0]
20012c56:	687b      	ldr	r3, [r7, #4]
20012c58:	681b      	ldr	r3, [r3, #0]
20012c5a:	f042 0204 	orr.w	r2, r2, #4
20012c5e:	601a      	str	r2, [r3, #0]
20012c60:	e023      	b.n	20012caa <HAL_QSPI_Receive_DMA+0x1d2>
        }
        else
        {
          status = HAL_ERROR;
20012c62:	2301      	movs	r3, #1
20012c64:	75fb      	strb	r3, [r7, #23]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20012c66:	687b      	ldr	r3, [r7, #4]
20012c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012c6a:	f043 0204 	orr.w	r2, r3, #4
20012c6e:	687b      	ldr	r3, [r7, #4]
20012c70:	645a      	str	r2, [r3, #68]	@ 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
20012c72:	687b      	ldr	r3, [r7, #4]
20012c74:	2201      	movs	r2, #1
20012c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
20012c7a:	687b      	ldr	r3, [r7, #4]
20012c7c:	2200      	movs	r2, #0
20012c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
20012c82:	e012      	b.n	20012caa <HAL_QSPI_Receive_DMA+0x1d2>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
20012c84:	687b      	ldr	r3, [r7, #4]
20012c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20012c88:	f043 0208 	orr.w	r2, r3, #8
20012c8c:	687b      	ldr	r3, [r7, #4]
20012c8e:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
20012c90:	2301      	movs	r3, #1
20012c92:	75fb      	strb	r3, [r7, #23]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
20012c94:	687b      	ldr	r3, [r7, #4]
20012c96:	2200      	movs	r2, #0
20012c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
20012c9c:	e005      	b.n	20012caa <HAL_QSPI_Receive_DMA+0x1d2>
    }
  }
  else
  {
    status = HAL_BUSY;
20012c9e:	2302      	movs	r3, #2
20012ca0:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
20012ca2:	687b      	ldr	r3, [r7, #4]
20012ca4:	2200      	movs	r2, #0
20012ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
20012caa:	7dfb      	ldrb	r3, [r7, #23]
}
20012cac:	4618      	mov	r0, r3
20012cae:	371c      	adds	r7, #28
20012cb0:	46bd      	mov	sp, r7
20012cb2:	bd90      	pop	{r4, r7, pc}
20012cb4:	20013311 	.word	0x20013311
20012cb8:	20013371 	.word	0x20013371
20012cbc:	fffffcfc 	.word	0xfffffcfc
20012cc0:	fffff3f3 	.word	0xfffff3f3

20012cc4 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
20012cc4:	b580      	push	{r7, lr}
20012cc6:	b088      	sub	sp, #32
20012cc8:	af02      	add	r7, sp, #8
20012cca:	60f8      	str	r0, [r7, #12]
20012ccc:	60b9      	str	r1, [r7, #8]
20012cce:	607a      	str	r2, [r7, #4]
20012cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
20012cd2:	f7ef faf5 	bl	200022c0 <HAL_GetTick>
20012cd6:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
20012cd8:	68fb      	ldr	r3, [r7, #12]
20012cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
20012cde:	b2db      	uxtb	r3, r3
20012ce0:	2b01      	cmp	r3, #1
20012ce2:	d101      	bne.n	20012ce8 <HAL_QSPI_AutoPolling+0x24>
20012ce4:	2302      	movs	r3, #2
20012ce6:	e060      	b.n	20012daa <HAL_QSPI_AutoPolling+0xe6>
20012ce8:	68fb      	ldr	r3, [r7, #12]
20012cea:	2201      	movs	r2, #1
20012cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
20012cf0:	68fb      	ldr	r3, [r7, #12]
20012cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012cf6:	b2db      	uxtb	r3, r3
20012cf8:	2b01      	cmp	r3, #1
20012cfa:	d14f      	bne.n	20012d9c <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20012cfc:	68fb      	ldr	r3, [r7, #12]
20012cfe:	2200      	movs	r2, #0
20012d00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
20012d02:	68fb      	ldr	r3, [r7, #12]
20012d04:	2242      	movs	r2, #66	@ 0x42
20012d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
20012d0a:	683b      	ldr	r3, [r7, #0]
20012d0c:	9300      	str	r3, [sp, #0]
20012d0e:	693b      	ldr	r3, [r7, #16]
20012d10:	2200      	movs	r2, #0
20012d12:	2120      	movs	r1, #32
20012d14:	68f8      	ldr	r0, [r7, #12]
20012d16:	f000 fb80 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
20012d1a:	4603      	mov	r3, r0
20012d1c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
20012d1e:	7dfb      	ldrb	r3, [r7, #23]
20012d20:	2b00      	cmp	r3, #0
20012d22:	d13d      	bne.n	20012da0 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
20012d24:	68fb      	ldr	r3, [r7, #12]
20012d26:	681b      	ldr	r3, [r3, #0]
20012d28:	687a      	ldr	r2, [r7, #4]
20012d2a:	6812      	ldr	r2, [r2, #0]
20012d2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
20012d2e:	68fb      	ldr	r3, [r7, #12]
20012d30:	681b      	ldr	r3, [r3, #0]
20012d32:	687a      	ldr	r2, [r7, #4]
20012d34:	6852      	ldr	r2, [r2, #4]
20012d36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
20012d38:	68fb      	ldr	r3, [r7, #12]
20012d3a:	681b      	ldr	r3, [r3, #0]
20012d3c:	687a      	ldr	r2, [r7, #4]
20012d3e:	6892      	ldr	r2, [r2, #8]
20012d40:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
20012d42:	68fb      	ldr	r3, [r7, #12]
20012d44:	681b      	ldr	r3, [r3, #0]
20012d46:	681b      	ldr	r3, [r3, #0]
20012d48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
20012d4c:	687b      	ldr	r3, [r7, #4]
20012d4e:	691b      	ldr	r3, [r3, #16]
20012d50:	431a      	orrs	r2, r3
20012d52:	68fb      	ldr	r3, [r7, #12]
20012d54:	681b      	ldr	r3, [r3, #0]
20012d56:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
20012d5a:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
20012d5c:	687b      	ldr	r3, [r7, #4]
20012d5e:	68da      	ldr	r2, [r3, #12]
20012d60:	68bb      	ldr	r3, [r7, #8]
20012d62:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
20012d64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
20012d68:	68b9      	ldr	r1, [r7, #8]
20012d6a:	68f8      	ldr	r0, [r7, #12]
20012d6c:	f000 fb8c 	bl	20013488 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
20012d70:	683b      	ldr	r3, [r7, #0]
20012d72:	9300      	str	r3, [sp, #0]
20012d74:	693b      	ldr	r3, [r7, #16]
20012d76:	2201      	movs	r2, #1
20012d78:	2108      	movs	r1, #8
20012d7a:	68f8      	ldr	r0, [r7, #12]
20012d7c:	f000 fb4d 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
20012d80:	4603      	mov	r3, r0
20012d82:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
20012d84:	7dfb      	ldrb	r3, [r7, #23]
20012d86:	2b00      	cmp	r3, #0
20012d88:	d10a      	bne.n	20012da0 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
20012d8a:	68fb      	ldr	r3, [r7, #12]
20012d8c:	681b      	ldr	r3, [r3, #0]
20012d8e:	2208      	movs	r2, #8
20012d90:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
20012d92:	68fb      	ldr	r3, [r7, #12]
20012d94:	2201      	movs	r2, #1
20012d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
20012d9a:	e001      	b.n	20012da0 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
20012d9c:	2302      	movs	r3, #2
20012d9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
20012da0:	68fb      	ldr	r3, [r7, #12]
20012da2:	2200      	movs	r2, #0
20012da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
20012da8:	7dfb      	ldrb	r3, [r7, #23]
}
20012daa:	4618      	mov	r0, r3
20012dac:	3718      	adds	r7, #24
20012dae:	46bd      	mov	sp, r7
20012db0:	bd80      	pop	{r7, pc}

20012db2 <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
20012db2:	b580      	push	{r7, lr}
20012db4:	b088      	sub	sp, #32
20012db6:	af02      	add	r7, sp, #8
20012db8:	60f8      	str	r0, [r7, #12]
20012dba:	60b9      	str	r1, [r7, #8]
20012dbc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
20012dbe:	f7ef fa7f 	bl	200022c0 <HAL_GetTick>
20012dc2:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
20012dc4:	68fb      	ldr	r3, [r7, #12]
20012dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
20012dca:	b2db      	uxtb	r3, r3
20012dcc:	2b01      	cmp	r3, #1
20012dce:	d101      	bne.n	20012dd4 <HAL_QSPI_AutoPolling_IT+0x22>
20012dd0:	2302      	movs	r3, #2
20012dd2:	e062      	b.n	20012e9a <HAL_QSPI_AutoPolling_IT+0xe8>
20012dd4:	68fb      	ldr	r3, [r7, #12]
20012dd6:	2201      	movs	r2, #1
20012dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
20012ddc:	68fb      	ldr	r3, [r7, #12]
20012dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012de2:	b2db      	uxtb	r3, r3
20012de4:	2b01      	cmp	r3, #1
20012de6:	d151      	bne.n	20012e8c <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20012de8:	68fb      	ldr	r3, [r7, #12]
20012dea:	2200      	movs	r2, #0
20012dec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
20012dee:	68fb      	ldr	r3, [r7, #12]
20012df0:	2242      	movs	r2, #66	@ 0x42
20012df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
20012df6:	68fb      	ldr	r3, [r7, #12]
20012df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20012dfa:	9300      	str	r3, [sp, #0]
20012dfc:	693b      	ldr	r3, [r7, #16]
20012dfe:	2200      	movs	r2, #0
20012e00:	2120      	movs	r1, #32
20012e02:	68f8      	ldr	r0, [r7, #12]
20012e04:	f000 fb09 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
20012e08:	4603      	mov	r3, r0
20012e0a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
20012e0c:	7dfb      	ldrb	r3, [r7, #23]
20012e0e:	2b00      	cmp	r3, #0
20012e10:	d137      	bne.n	20012e82 <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
20012e12:	68fb      	ldr	r3, [r7, #12]
20012e14:	681b      	ldr	r3, [r3, #0]
20012e16:	687a      	ldr	r2, [r7, #4]
20012e18:	6812      	ldr	r2, [r2, #0]
20012e1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
20012e1c:	68fb      	ldr	r3, [r7, #12]
20012e1e:	681b      	ldr	r3, [r3, #0]
20012e20:	687a      	ldr	r2, [r7, #4]
20012e22:	6852      	ldr	r2, [r2, #4]
20012e24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
20012e26:	68fb      	ldr	r3, [r7, #12]
20012e28:	681b      	ldr	r3, [r3, #0]
20012e2a:	687a      	ldr	r2, [r7, #4]
20012e2c:	6892      	ldr	r2, [r2, #8]
20012e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
20012e30:	68fb      	ldr	r3, [r7, #12]
20012e32:	681b      	ldr	r3, [r3, #0]
20012e34:	681b      	ldr	r3, [r3, #0]
20012e36:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
20012e3a:	687b      	ldr	r3, [r7, #4]
20012e3c:	691a      	ldr	r2, [r3, #16]
20012e3e:	687b      	ldr	r3, [r7, #4]
20012e40:	695b      	ldr	r3, [r3, #20]
20012e42:	431a      	orrs	r2, r3
20012e44:	68fb      	ldr	r3, [r7, #12]
20012e46:	681b      	ldr	r3, [r3, #0]
20012e48:	430a      	orrs	r2, r1
20012e4a:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
20012e4c:	68fb      	ldr	r3, [r7, #12]
20012e4e:	681b      	ldr	r3, [r3, #0]
20012e50:	2209      	movs	r2, #9
20012e52:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
20012e54:	687b      	ldr	r3, [r7, #4]
20012e56:	68da      	ldr	r2, [r3, #12]
20012e58:	68bb      	ldr	r3, [r7, #8]
20012e5a:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
20012e5c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
20012e60:	68b9      	ldr	r1, [r7, #8]
20012e62:	68f8      	ldr	r0, [r7, #12]
20012e64:	f000 fb10 	bl	20013488 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
20012e68:	68fb      	ldr	r3, [r7, #12]
20012e6a:	2200      	movs	r2, #0
20012e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
20012e70:	68fb      	ldr	r3, [r7, #12]
20012e72:	681b      	ldr	r3, [r3, #0]
20012e74:	681a      	ldr	r2, [r3, #0]
20012e76:	68fb      	ldr	r3, [r7, #12]
20012e78:	681b      	ldr	r3, [r3, #0]
20012e7a:	f442 2210 	orr.w	r2, r2, #589824	@ 0x90000
20012e7e:	601a      	str	r2, [r3, #0]
20012e80:	e00a      	b.n	20012e98 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
20012e82:	68fb      	ldr	r3, [r7, #12]
20012e84:	2200      	movs	r2, #0
20012e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
20012e8a:	e005      	b.n	20012e98 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
20012e8c:	2302      	movs	r3, #2
20012e8e:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
20012e90:	68fb      	ldr	r3, [r7, #12]
20012e92:	2200      	movs	r2, #0
20012e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  /* Return function status */
  return status;
20012e98:	7dfb      	ldrb	r3, [r7, #23]
}
20012e9a:	4618      	mov	r0, r3
20012e9c:	3718      	adds	r7, #24
20012e9e:	46bd      	mov	sp, r7
20012ea0:	bd80      	pop	{r7, pc}

20012ea2 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
20012ea2:	b580      	push	{r7, lr}
20012ea4:	b088      	sub	sp, #32
20012ea6:	af02      	add	r7, sp, #8
20012ea8:	60f8      	str	r0, [r7, #12]
20012eaa:	60b9      	str	r1, [r7, #8]
20012eac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
20012eae:	f7ef fa07 	bl	200022c0 <HAL_GetTick>
20012eb2:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
20012eb4:	68fb      	ldr	r3, [r7, #12]
20012eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
20012eba:	b2db      	uxtb	r3, r3
20012ebc:	2b01      	cmp	r3, #1
20012ebe:	d101      	bne.n	20012ec4 <HAL_QSPI_MemoryMapped+0x22>
20012ec0:	2302      	movs	r3, #2
20012ec2:	e04c      	b.n	20012f5e <HAL_QSPI_MemoryMapped+0xbc>
20012ec4:	68fb      	ldr	r3, [r7, #12]
20012ec6:	2201      	movs	r2, #1
20012ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
20012ecc:	68fb      	ldr	r3, [r7, #12]
20012ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20012ed2:	b2db      	uxtb	r3, r3
20012ed4:	2b01      	cmp	r3, #1
20012ed6:	d13b      	bne.n	20012f50 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20012ed8:	68fb      	ldr	r3, [r7, #12]
20012eda:	2200      	movs	r2, #0
20012edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
20012ede:	68fb      	ldr	r3, [r7, #12]
20012ee0:	2282      	movs	r2, #130	@ 0x82
20012ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
20012ee6:	68fb      	ldr	r3, [r7, #12]
20012ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20012eea:	9300      	str	r3, [sp, #0]
20012eec:	693b      	ldr	r3, [r7, #16]
20012eee:	2200      	movs	r2, #0
20012ef0:	2120      	movs	r1, #32
20012ef2:	68f8      	ldr	r0, [r7, #12]
20012ef4:	f000 fa91 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
20012ef8:	4603      	mov	r3, r0
20012efa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
20012efc:	7dfb      	ldrb	r3, [r7, #23]
20012efe:	2b00      	cmp	r3, #0
20012f00:	d128      	bne.n	20012f54 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
20012f02:	68fb      	ldr	r3, [r7, #12]
20012f04:	681b      	ldr	r3, [r3, #0]
20012f06:	681b      	ldr	r3, [r3, #0]
20012f08:	f023 0108 	bic.w	r1, r3, #8
20012f0c:	687b      	ldr	r3, [r7, #4]
20012f0e:	685a      	ldr	r2, [r3, #4]
20012f10:	68fb      	ldr	r3, [r7, #12]
20012f12:	681b      	ldr	r3, [r3, #0]
20012f14:	430a      	orrs	r2, r1
20012f16:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
20012f18:	687b      	ldr	r3, [r7, #4]
20012f1a:	685b      	ldr	r3, [r3, #4]
20012f1c:	2b08      	cmp	r3, #8
20012f1e:	d110      	bne.n	20012f42 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
20012f20:	68fb      	ldr	r3, [r7, #12]
20012f22:	681b      	ldr	r3, [r3, #0]
20012f24:	687a      	ldr	r2, [r7, #4]
20012f26:	6812      	ldr	r2, [r2, #0]
20012f28:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
20012f2a:	68fb      	ldr	r3, [r7, #12]
20012f2c:	681b      	ldr	r3, [r3, #0]
20012f2e:	2210      	movs	r2, #16
20012f30:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
20012f32:	68fb      	ldr	r3, [r7, #12]
20012f34:	681b      	ldr	r3, [r3, #0]
20012f36:	681a      	ldr	r2, [r3, #0]
20012f38:	68fb      	ldr	r3, [r7, #12]
20012f3a:	681b      	ldr	r3, [r3, #0]
20012f3c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
20012f40:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
20012f42:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
20012f46:	68b9      	ldr	r1, [r7, #8]
20012f48:	68f8      	ldr	r0, [r7, #12]
20012f4a:	f000 fa9d 	bl	20013488 <QSPI_Config>
20012f4e:	e001      	b.n	20012f54 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
20012f50:	2302      	movs	r3, #2
20012f52:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
20012f54:	68fb      	ldr	r3, [r7, #12]
20012f56:	2200      	movs	r2, #0
20012f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
20012f5c:	7dfb      	ldrb	r3, [r7, #23]
}
20012f5e:	4618      	mov	r0, r3
20012f60:	3718      	adds	r7, #24
20012f62:	46bd      	mov	sp, r7
20012f64:	bd80      	pop	{r7, pc}

20012f66 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
20012f66:	b480      	push	{r7}
20012f68:	b083      	sub	sp, #12
20012f6a:	af00      	add	r7, sp, #0
20012f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
20012f6e:	bf00      	nop
20012f70:	370c      	adds	r7, #12
20012f72:	46bd      	mov	sp, r7
20012f74:	f85d 7b04 	ldr.w	r7, [sp], #4
20012f78:	4770      	bx	lr

20012f7a <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
20012f7a:	b480      	push	{r7}
20012f7c:	b083      	sub	sp, #12
20012f7e:	af00      	add	r7, sp, #0
20012f80:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
20012f82:	bf00      	nop
20012f84:	370c      	adds	r7, #12
20012f86:	46bd      	mov	sp, r7
20012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
20012f8c:	4770      	bx	lr

20012f8e <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
20012f8e:	b480      	push	{r7}
20012f90:	b083      	sub	sp, #12
20012f92:	af00      	add	r7, sp, #0
20012f94:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
20012f96:	bf00      	nop
20012f98:	370c      	adds	r7, #12
20012f9a:	46bd      	mov	sp, r7
20012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
20012fa0:	4770      	bx	lr

20012fa2 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
20012fa2:	b480      	push	{r7}
20012fa4:	b083      	sub	sp, #12
20012fa6:	af00      	add	r7, sp, #0
20012fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
20012faa:	bf00      	nop
20012fac:	370c      	adds	r7, #12
20012fae:	46bd      	mov	sp, r7
20012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
20012fb4:	4770      	bx	lr

20012fb6 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
20012fb6:	b480      	push	{r7}
20012fb8:	b083      	sub	sp, #12
20012fba:	af00      	add	r7, sp, #0
20012fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
20012fbe:	bf00      	nop
20012fc0:	370c      	adds	r7, #12
20012fc2:	46bd      	mov	sp, r7
20012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
20012fc8:	4770      	bx	lr

20012fca <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
20012fca:	b480      	push	{r7}
20012fcc:	b083      	sub	sp, #12
20012fce:	af00      	add	r7, sp, #0
20012fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
20012fd2:	bf00      	nop
20012fd4:	370c      	adds	r7, #12
20012fd6:	46bd      	mov	sp, r7
20012fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
20012fdc:	4770      	bx	lr

20012fde <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
20012fde:	b480      	push	{r7}
20012fe0:	b083      	sub	sp, #12
20012fe2:	af00      	add	r7, sp, #0
20012fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
20012fe6:	bf00      	nop
20012fe8:	370c      	adds	r7, #12
20012fea:	46bd      	mov	sp, r7
20012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
20012ff0:	4770      	bx	lr

20012ff2 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
20012ff2:	b480      	push	{r7}
20012ff4:	b083      	sub	sp, #12
20012ff6:	af00      	add	r7, sp, #0
20012ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
20012ffa:	bf00      	nop
20012ffc:	370c      	adds	r7, #12
20012ffe:	46bd      	mov	sp, r7
20013000:	f85d 7b04 	ldr.w	r7, [sp], #4
20013004:	4770      	bx	lr

20013006 <HAL_QSPI_GetState>:
  * @brief  Return the QSPI handle state.
  * @param  hqspi QSPI handle
  * @retval HAL state
  */
HAL_QSPI_StateTypeDef HAL_QSPI_GetState(const QSPI_HandleTypeDef *hqspi)
{
20013006:	b480      	push	{r7}
20013008:	b083      	sub	sp, #12
2001300a:	af00      	add	r7, sp, #0
2001300c:	6078      	str	r0, [r7, #4]
  /* Return QSPI handle state */
  return hqspi->State;
2001300e:	687b      	ldr	r3, [r7, #4]
20013010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20013014:	b2db      	uxtb	r3, r3
}
20013016:	4618      	mov	r0, r3
20013018:	370c      	adds	r7, #12
2001301a:	46bd      	mov	sp, r7
2001301c:	f85d 7b04 	ldr.w	r7, [sp], #4
20013020:	4770      	bx	lr

20013022 <HAL_QSPI_GetError>:
* @brief  Return the QSPI error code.
* @param  hqspi QSPI handle
* @retval QSPI Error Code
*/
uint32_t HAL_QSPI_GetError(const QSPI_HandleTypeDef *hqspi)
{
20013022:	b480      	push	{r7}
20013024:	b083      	sub	sp, #12
20013026:	af00      	add	r7, sp, #0
20013028:	6078      	str	r0, [r7, #4]
  return hqspi->ErrorCode;
2001302a:	687b      	ldr	r3, [r7, #4]
2001302c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
2001302e:	4618      	mov	r0, r3
20013030:	370c      	adds	r7, #12
20013032:	46bd      	mov	sp, r7
20013034:	f85d 7b04 	ldr.w	r7, [sp], #4
20013038:	4770      	bx	lr

2001303a <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
2001303a:	b580      	push	{r7, lr}
2001303c:	b086      	sub	sp, #24
2001303e:	af02      	add	r7, sp, #8
20013040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20013042:	2300      	movs	r3, #0
20013044:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
20013046:	f7ef f93b 	bl	200022c0 <HAL_GetTick>
2001304a:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
2001304c:	687b      	ldr	r3, [r7, #4]
2001304e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20013052:	b2db      	uxtb	r3, r3
20013054:	f003 0302 	and.w	r3, r3, #2
20013058:	2b00      	cmp	r3, #0
2001305a:	d062      	beq.n	20013122 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2001305c:	687b      	ldr	r3, [r7, #4]
2001305e:	2200      	movs	r2, #0
20013060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20013064:	687b      	ldr	r3, [r7, #4]
20013066:	681b      	ldr	r3, [r3, #0]
20013068:	681b      	ldr	r3, [r3, #0]
2001306a:	f003 0304 	and.w	r3, r3, #4
2001306e:	2b00      	cmp	r3, #0
20013070:	d017      	beq.n	200130a2 <HAL_QSPI_Abort+0x68>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20013072:	687b      	ldr	r3, [r7, #4]
20013074:	681b      	ldr	r3, [r3, #0]
20013076:	681a      	ldr	r2, [r3, #0]
20013078:	687b      	ldr	r3, [r7, #4]
2001307a:	681b      	ldr	r3, [r3, #0]
2001307c:	f022 0204 	bic.w	r2, r2, #4
20013080:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
20013082:	687b      	ldr	r3, [r7, #4]
20013084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20013086:	4618      	mov	r0, r3
20013088:	f7fd fc08 	bl	2001089c <HAL_MDMA_Abort>
2001308c:	4603      	mov	r3, r0
2001308e:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
20013090:	7bfb      	ldrb	r3, [r7, #15]
20013092:	2b00      	cmp	r3, #0
20013094:	d005      	beq.n	200130a2 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20013096:	687b      	ldr	r3, [r7, #4]
20013098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2001309a:	f043 0204 	orr.w	r2, r3, #4
2001309e:	687b      	ldr	r3, [r7, #4]
200130a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
200130a2:	687b      	ldr	r3, [r7, #4]
200130a4:	681b      	ldr	r3, [r3, #0]
200130a6:	689b      	ldr	r3, [r3, #8]
200130a8:	f003 0320 	and.w	r3, r3, #32
200130ac:	2b00      	cmp	r3, #0
200130ae:	d034      	beq.n	2001311a <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
200130b0:	687b      	ldr	r3, [r7, #4]
200130b2:	681b      	ldr	r3, [r3, #0]
200130b4:	681a      	ldr	r2, [r3, #0]
200130b6:	687b      	ldr	r3, [r7, #4]
200130b8:	681b      	ldr	r3, [r3, #0]
200130ba:	f042 0202 	orr.w	r2, r2, #2
200130be:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
200130c0:	687b      	ldr	r3, [r7, #4]
200130c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200130c4:	9300      	str	r3, [sp, #0]
200130c6:	68bb      	ldr	r3, [r7, #8]
200130c8:	2201      	movs	r2, #1
200130ca:	2102      	movs	r1, #2
200130cc:	6878      	ldr	r0, [r7, #4]
200130ce:	f000 f9a4 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
200130d2:	4603      	mov	r3, r0
200130d4:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
200130d6:	7bfb      	ldrb	r3, [r7, #15]
200130d8:	2b00      	cmp	r3, #0
200130da:	d10e      	bne.n	200130fa <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200130dc:	687b      	ldr	r3, [r7, #4]
200130de:	681b      	ldr	r3, [r3, #0]
200130e0:	2202      	movs	r2, #2
200130e2:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
200130e4:	687b      	ldr	r3, [r7, #4]
200130e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200130e8:	9300      	str	r3, [sp, #0]
200130ea:	68bb      	ldr	r3, [r7, #8]
200130ec:	2200      	movs	r2, #0
200130ee:	2120      	movs	r1, #32
200130f0:	6878      	ldr	r0, [r7, #4]
200130f2:	f000 f992 	bl	2001341a <QSPI_WaitFlagStateUntilTimeout>
200130f6:	4603      	mov	r3, r0
200130f8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
200130fa:	7bfb      	ldrb	r3, [r7, #15]
200130fc:	2b00      	cmp	r3, #0
200130fe:	d110      	bne.n	20013122 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
20013100:	687b      	ldr	r3, [r7, #4]
20013102:	681b      	ldr	r3, [r3, #0]
20013104:	695a      	ldr	r2, [r3, #20]
20013106:	687b      	ldr	r3, [r7, #4]
20013108:	681b      	ldr	r3, [r3, #0]
2001310a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
2001310e:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
20013110:	687b      	ldr	r3, [r7, #4]
20013112:	2201      	movs	r2, #1
20013114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
20013118:	e003      	b.n	20013122 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
2001311a:	687b      	ldr	r3, [r7, #4]
2001311c:	2201      	movs	r2, #1
2001311e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
  }

  return status;
20013122:	7bfb      	ldrb	r3, [r7, #15]
}
20013124:	4618      	mov	r0, r3
20013126:	3710      	adds	r7, #16
20013128:	46bd      	mov	sp, r7
2001312a:	bd80      	pop	{r7, pc}

2001312c <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
2001312c:	b580      	push	{r7, lr}
2001312e:	b084      	sub	sp, #16
20013130:	af00      	add	r7, sp, #0
20013132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20013134:	2300      	movs	r3, #0
20013136:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
20013138:	687b      	ldr	r3, [r7, #4]
2001313a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2001313e:	b2db      	uxtb	r3, r3
20013140:	f003 0302 	and.w	r3, r3, #2
20013144:	2b00      	cmp	r3, #0
20013146:	d052      	beq.n	200131ee <HAL_QSPI_Abort_IT+0xc2>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
20013148:	687b      	ldr	r3, [r7, #4]
2001314a:	2200      	movs	r2, #0
2001314c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
20013150:	687b      	ldr	r3, [r7, #4]
20013152:	2208      	movs	r2, #8
20013154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
20013158:	687b      	ldr	r3, [r7, #4]
2001315a:	681b      	ldr	r3, [r3, #0]
2001315c:	681a      	ldr	r2, [r3, #0]
2001315e:	687b      	ldr	r3, [r7, #4]
20013160:	681b      	ldr	r3, [r3, #0]
20013162:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
20013166:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20013168:	687b      	ldr	r3, [r7, #4]
2001316a:	681b      	ldr	r3, [r3, #0]
2001316c:	681b      	ldr	r3, [r3, #0]
2001316e:	f003 0304 	and.w	r3, r3, #4
20013172:	2b00      	cmp	r3, #0
20013174:	d01b      	beq.n	200131ae <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20013176:	687b      	ldr	r3, [r7, #4]
20013178:	681b      	ldr	r3, [r3, #0]
2001317a:	681a      	ldr	r2, [r3, #0]
2001317c:	687b      	ldr	r3, [r7, #4]
2001317e:	681b      	ldr	r3, [r3, #0]
20013180:	f022 0204 	bic.w	r2, r2, #4
20013184:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
20013186:	687b      	ldr	r3, [r7, #4]
20013188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2001318a:	4a1b      	ldr	r2, [pc, #108]	@ (200131f8 <HAL_QSPI_Abort_IT+0xcc>)
2001318c:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
2001318e:	687b      	ldr	r3, [r7, #4]
20013190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20013192:	4618      	mov	r0, r3
20013194:	f7fd fbdd 	bl	20010952 <HAL_MDMA_Abort_IT>
20013198:	4603      	mov	r3, r0
2001319a:	2b00      	cmp	r3, #0
2001319c:	d027      	beq.n	200131ee <HAL_QSPI_Abort_IT+0xc2>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
2001319e:	687b      	ldr	r3, [r7, #4]
200131a0:	2201      	movs	r2, #1
200131a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
200131a6:	6878      	ldr	r0, [r7, #4]
200131a8:	f7ff fee7 	bl	20012f7a <HAL_QSPI_AbortCpltCallback>
200131ac:	e01f      	b.n	200131ee <HAL_QSPI_Abort_IT+0xc2>
#endif
      }
    }
    else
    {
      if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
200131ae:	687b      	ldr	r3, [r7, #4]
200131b0:	681b      	ldr	r3, [r3, #0]
200131b2:	689b      	ldr	r3, [r3, #8]
200131b4:	f003 0320 	and.w	r3, r3, #32
200131b8:	2b00      	cmp	r3, #0
200131ba:	d014      	beq.n	200131e6 <HAL_QSPI_Abort_IT+0xba>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200131bc:	687b      	ldr	r3, [r7, #4]
200131be:	681b      	ldr	r3, [r3, #0]
200131c0:	2202      	movs	r2, #2
200131c2:	60da      	str	r2, [r3, #12]
        
        /* Enable the QSPI Transfer Complete Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
200131c4:	687b      	ldr	r3, [r7, #4]
200131c6:	681b      	ldr	r3, [r3, #0]
200131c8:	681a      	ldr	r2, [r3, #0]
200131ca:	687b      	ldr	r3, [r7, #4]
200131cc:	681b      	ldr	r3, [r3, #0]
200131ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
200131d2:	601a      	str	r2, [r3, #0]
        
        /* Configure QSPI: CR register with Abort request */
        SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
200131d4:	687b      	ldr	r3, [r7, #4]
200131d6:	681b      	ldr	r3, [r3, #0]
200131d8:	681a      	ldr	r2, [r3, #0]
200131da:	687b      	ldr	r3, [r7, #4]
200131dc:	681b      	ldr	r3, [r3, #0]
200131de:	f042 0202 	orr.w	r2, r2, #2
200131e2:	601a      	str	r2, [r3, #0]
200131e4:	e003      	b.n	200131ee <HAL_QSPI_Abort_IT+0xc2>
      }    
      else
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
200131e6:	687b      	ldr	r3, [r7, #4]
200131e8:	2201      	movs	r2, #1
200131ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      }
    }
  }
  return status;
200131ee:	7bfb      	ldrb	r3, [r7, #15]
}
200131f0:	4618      	mov	r0, r3
200131f2:	3710      	adds	r7, #16
200131f4:	46bd      	mov	sp, r7
200131f6:	bd80      	pop	{r7, pc}
200131f8:	200133b5 	.word	0x200133b5

200131fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
200131fc:	b480      	push	{r7}
200131fe:	b083      	sub	sp, #12
20013200:	af00      	add	r7, sp, #0
20013202:	6078      	str	r0, [r7, #4]
20013204:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
20013206:	687b      	ldr	r3, [r7, #4]
20013208:	683a      	ldr	r2, [r7, #0]
2001320a:	649a      	str	r2, [r3, #72]	@ 0x48
}
2001320c:	bf00      	nop
2001320e:	370c      	adds	r7, #12
20013210:	46bd      	mov	sp, r7
20013212:	f85d 7b04 	ldr.w	r7, [sp], #4
20013216:	4770      	bx	lr

20013218 <HAL_QSPI_SetFifoThreshold>:
  * @param  hqspi QSPI handle.
  * @param  Threshold Threshold of the Fifo (value between 1 and 16).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold)
{
20013218:	b480      	push	{r7}
2001321a:	b085      	sub	sp, #20
2001321c:	af00      	add	r7, sp, #0
2001321e:	6078      	str	r0, [r7, #4]
20013220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20013222:	2300      	movs	r3, #0
20013224:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
20013226:	687b      	ldr	r3, [r7, #4]
20013228:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2001322c:	b2db      	uxtb	r3, r3
2001322e:	2b01      	cmp	r3, #1
20013230:	d101      	bne.n	20013236 <HAL_QSPI_SetFifoThreshold+0x1e>
20013232:	2302      	movs	r3, #2
20013234:	e021      	b.n	2001327a <HAL_QSPI_SetFifoThreshold+0x62>
20013236:	687b      	ldr	r3, [r7, #4]
20013238:	2201      	movs	r2, #1
2001323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2001323e:	687b      	ldr	r3, [r7, #4]
20013240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
20013244:	b2db      	uxtb	r3, r3
20013246:	2b01      	cmp	r3, #1
20013248:	d110      	bne.n	2001326c <HAL_QSPI_SetFifoThreshold+0x54>
  {
    /* Synchronize init structure with new FIFO threshold value */
    hqspi->Init.FifoThreshold = Threshold;
2001324a:	687b      	ldr	r3, [r7, #4]
2001324c:	683a      	ldr	r2, [r7, #0]
2001324e:	609a      	str	r2, [r3, #8]

    /* Configure QSPI FIFO Threshold */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
20013250:	687b      	ldr	r3, [r7, #4]
20013252:	681b      	ldr	r3, [r3, #0]
20013254:	681b      	ldr	r3, [r3, #0]
20013256:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
2001325a:	687b      	ldr	r3, [r7, #4]
2001325c:	689b      	ldr	r3, [r3, #8]
2001325e:	3b01      	subs	r3, #1
20013260:	021a      	lsls	r2, r3, #8
20013262:	687b      	ldr	r3, [r7, #4]
20013264:	681b      	ldr	r3, [r3, #0]
20013266:	430a      	orrs	r2, r1
20013268:	601a      	str	r2, [r3, #0]
2001326a:	e001      	b.n	20013270 <HAL_QSPI_SetFifoThreshold+0x58>
               ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
  }
  else
  {
    status = HAL_BUSY;
2001326c:	2302      	movs	r3, #2
2001326e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
20013270:	687b      	ldr	r3, [r7, #4]
20013272:	2200      	movs	r2, #0
20013274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
20013278:	7bfb      	ldrb	r3, [r7, #15]
}
2001327a:	4618      	mov	r0, r3
2001327c:	3714      	adds	r7, #20
2001327e:	46bd      	mov	sp, r7
20013280:	f85d 7b04 	ldr.w	r7, [sp], #4
20013284:	4770      	bx	lr

20013286 <HAL_QSPI_GetFifoThreshold>:
/** @brief Get QSPI Fifo threshold.
  * @param  hqspi QSPI handle.
  * @retval Fifo threshold (value between 1 and 16)
  */
uint32_t HAL_QSPI_GetFifoThreshold(const QSPI_HandleTypeDef *hqspi)
{
20013286:	b480      	push	{r7}
20013288:	b083      	sub	sp, #12
2001328a:	af00      	add	r7, sp, #0
2001328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1U);
2001328e:	687b      	ldr	r3, [r7, #4]
20013290:	681b      	ldr	r3, [r3, #0]
20013292:	681b      	ldr	r3, [r3, #0]
20013294:	0a1b      	lsrs	r3, r3, #8
20013296:	f003 031f 	and.w	r3, r3, #31
2001329a:	3301      	adds	r3, #1
}
2001329c:	4618      	mov	r0, r3
2001329e:	370c      	adds	r7, #12
200132a0:	46bd      	mov	sp, r7
200132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200132a6:	4770      	bx	lr

200132a8 <HAL_QSPI_SetFlashID>:
  *                   This parameter can be a value of @ref QSPI_Flash_Select.
  * @note   The FlashID is ignored when dual flash mode is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFlashID(QSPI_HandleTypeDef *hqspi, uint32_t FlashID)
{
200132a8:	b480      	push	{r7}
200132aa:	b085      	sub	sp, #20
200132ac:	af00      	add	r7, sp, #0
200132ae:	6078      	str	r0, [r7, #4]
200132b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200132b2:	2300      	movs	r3, #0
200132b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_QSPI_FLASH_ID(FlashID));

  /* Process locked */
  __HAL_LOCK(hqspi);
200132b6:	687b      	ldr	r3, [r7, #4]
200132b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
200132bc:	b2db      	uxtb	r3, r3
200132be:	2b01      	cmp	r3, #1
200132c0:	d101      	bne.n	200132c6 <HAL_QSPI_SetFlashID+0x1e>
200132c2:	2302      	movs	r3, #2
200132c4:	e01e      	b.n	20013304 <HAL_QSPI_SetFlashID+0x5c>
200132c6:	687b      	ldr	r3, [r7, #4]
200132c8:	2201      	movs	r2, #1
200132ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
200132ce:	687b      	ldr	r3, [r7, #4]
200132d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
200132d4:	b2db      	uxtb	r3, r3
200132d6:	2b01      	cmp	r3, #1
200132d8:	d10d      	bne.n	200132f6 <HAL_QSPI_SetFlashID+0x4e>
  {
    /* Synchronize init structure with new FlashID value */
    hqspi->Init.FlashID = FlashID;
200132da:	687b      	ldr	r3, [r7, #4]
200132dc:	683a      	ldr	r2, [r7, #0]
200132de:	61da      	str	r2, [r3, #28]

    /* Configure QSPI FlashID */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
200132e0:	687b      	ldr	r3, [r7, #4]
200132e2:	681b      	ldr	r3, [r3, #0]
200132e4:	681b      	ldr	r3, [r3, #0]
200132e6:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
200132ea:	687b      	ldr	r3, [r7, #4]
200132ec:	681b      	ldr	r3, [r3, #0]
200132ee:	683a      	ldr	r2, [r7, #0]
200132f0:	430a      	orrs	r2, r1
200132f2:	601a      	str	r2, [r3, #0]
200132f4:	e001      	b.n	200132fa <HAL_QSPI_SetFlashID+0x52>
  }
  else
  {
    status = HAL_BUSY;
200132f6:	2302      	movs	r3, #2
200132f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
200132fa:	687b      	ldr	r3, [r7, #4]
200132fc:	2200      	movs	r2, #0
200132fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
20013302:	7bfb      	ldrb	r3, [r7, #15]
}
20013304:	4618      	mov	r0, r3
20013306:	3714      	adds	r7, #20
20013308:	46bd      	mov	sp, r7
2001330a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001330e:	4770      	bx	lr

20013310 <QSPI_DMARxCplt>:
  * @brief  DMA QSPI receive process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(MDMA_HandleTypeDef *hmdma)
{
20013310:	b480      	push	{r7}
20013312:	b085      	sub	sp, #20
20013314:	af00      	add	r7, sp, #0
20013316:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
20013318:	687b      	ldr	r3, [r7, #4]
2001331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2001331c:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
2001331e:	68fb      	ldr	r3, [r7, #12]
20013320:	2200      	movs	r2, #0
20013322:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
20013324:	68fb      	ldr	r3, [r7, #12]
20013326:	681b      	ldr	r3, [r3, #0]
20013328:	681a      	ldr	r2, [r3, #0]
2001332a:	68fb      	ldr	r3, [r7, #12]
2001332c:	681b      	ldr	r3, [r3, #0]
2001332e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
20013332:	601a      	str	r2, [r3, #0]
}
20013334:	bf00      	nop
20013336:	3714      	adds	r7, #20
20013338:	46bd      	mov	sp, r7
2001333a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001333e:	4770      	bx	lr

20013340 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
20013340:	b480      	push	{r7}
20013342:	b085      	sub	sp, #20
20013344:	af00      	add	r7, sp, #0
20013346:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
20013348:	687b      	ldr	r3, [r7, #4]
2001334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2001334c:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
2001334e:	68fb      	ldr	r3, [r7, #12]
20013350:	2200      	movs	r2, #0
20013352:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
20013354:	68fb      	ldr	r3, [r7, #12]
20013356:	681b      	ldr	r3, [r3, #0]
20013358:	681a      	ldr	r2, [r3, #0]
2001335a:	68fb      	ldr	r3, [r7, #12]
2001335c:	681b      	ldr	r3, [r3, #0]
2001335e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
20013362:	601a      	str	r2, [r3, #0]
}
20013364:	bf00      	nop
20013366:	3714      	adds	r7, #20
20013368:	46bd      	mov	sp, r7
2001336a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001336e:	4770      	bx	lr

20013370 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
20013370:	b580      	push	{r7, lr}
20013372:	b084      	sub	sp, #16
20013374:	af00      	add	r7, sp, #0
20013376:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
20013378:	687b      	ldr	r3, [r7, #4]
2001337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2001337c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
2001337e:	68fb      	ldr	r3, [r7, #12]
20013380:	2200      	movs	r2, #0
20013382:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
20013384:	68fb      	ldr	r3, [r7, #12]
20013386:	2200      	movs	r2, #0
20013388:	62da      	str	r2, [r3, #44]	@ 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
2001338a:	68fb      	ldr	r3, [r7, #12]
2001338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2001338e:	f043 0204 	orr.w	r2, r3, #4
20013392:	68fb      	ldr	r3, [r7, #12]
20013394:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
     but no impact on H7 HW and it minimize the cost in the footprint */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20013396:	68fb      	ldr	r3, [r7, #12]
20013398:	681b      	ldr	r3, [r3, #0]
2001339a:	681a      	ldr	r2, [r3, #0]
2001339c:	68fb      	ldr	r3, [r7, #12]
2001339e:	681b      	ldr	r3, [r3, #0]
200133a0:	f022 0204 	bic.w	r2, r2, #4
200133a4:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
200133a6:	68f8      	ldr	r0, [r7, #12]
200133a8:	f7ff fec0 	bl	2001312c <HAL_QSPI_Abort_IT>

}
200133ac:	bf00      	nop
200133ae:	3710      	adds	r7, #16
200133b0:	46bd      	mov	sp, r7
200133b2:	bd80      	pop	{r7, pc}

200133b4 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
200133b4:	b580      	push	{r7, lr}
200133b6:	b084      	sub	sp, #16
200133b8:	af00      	add	r7, sp, #0
200133ba:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
200133bc:	687b      	ldr	r3, [r7, #4]
200133be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200133c0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
200133c2:	68fb      	ldr	r3, [r7, #12]
200133c4:	2200      	movs	r2, #0
200133c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
200133c8:	68fb      	ldr	r3, [r7, #12]
200133ca:	2200      	movs	r2, #0
200133cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
200133ce:	68fb      	ldr	r3, [r7, #12]
200133d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
200133d4:	b2db      	uxtb	r3, r3
200133d6:	2b08      	cmp	r3, #8
200133d8:	d114      	bne.n	20013404 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200133da:	68fb      	ldr	r3, [r7, #12]
200133dc:	681b      	ldr	r3, [r3, #0]
200133de:	2202      	movs	r2, #2
200133e0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
200133e2:	68fb      	ldr	r3, [r7, #12]
200133e4:	681b      	ldr	r3, [r3, #0]
200133e6:	681a      	ldr	r2, [r3, #0]
200133e8:	68fb      	ldr	r3, [r7, #12]
200133ea:	681b      	ldr	r3, [r3, #0]
200133ec:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
200133f0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
200133f2:	68fb      	ldr	r3, [r7, #12]
200133f4:	681b      	ldr	r3, [r3, #0]
200133f6:	681a      	ldr	r2, [r3, #0]
200133f8:	68fb      	ldr	r3, [r7, #12]
200133fa:	681b      	ldr	r3, [r3, #0]
200133fc:	f042 0202 	orr.w	r2, r2, #2
20013400:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
20013402:	e006      	b.n	20013412 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
20013404:	68fb      	ldr	r3, [r7, #12]
20013406:	2201      	movs	r2, #1
20013408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
2001340c:	68f8      	ldr	r0, [r7, #12]
2001340e:	f7ff fdaa 	bl	20012f66 <HAL_QSPI_ErrorCallback>
}
20013412:	bf00      	nop
20013414:	3710      	adds	r7, #16
20013416:	46bd      	mov	sp, r7
20013418:	bd80      	pop	{r7, pc}

2001341a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
2001341a:	b580      	push	{r7, lr}
2001341c:	b084      	sub	sp, #16
2001341e:	af00      	add	r7, sp, #0
20013420:	60f8      	str	r0, [r7, #12]
20013422:	60b9      	str	r1, [r7, #8]
20013424:	603b      	str	r3, [r7, #0]
20013426:	4613      	mov	r3, r2
20013428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2001342a:	e01a      	b.n	20013462 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2001342c:	69bb      	ldr	r3, [r7, #24]
2001342e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
20013432:	d016      	beq.n	20013462 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20013434:	f7ee ff44 	bl	200022c0 <HAL_GetTick>
20013438:	4602      	mov	r2, r0
2001343a:	683b      	ldr	r3, [r7, #0]
2001343c:	1ad3      	subs	r3, r2, r3
2001343e:	69ba      	ldr	r2, [r7, #24]
20013440:	429a      	cmp	r2, r3
20013442:	d302      	bcc.n	2001344a <QSPI_WaitFlagStateUntilTimeout+0x30>
20013444:	69bb      	ldr	r3, [r7, #24]
20013446:	2b00      	cmp	r3, #0
20013448:	d10b      	bne.n	20013462 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
2001344a:	68fb      	ldr	r3, [r7, #12]
2001344c:	2204      	movs	r2, #4
2001344e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
20013452:	68fb      	ldr	r3, [r7, #12]
20013454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20013456:	f043 0201 	orr.w	r2, r3, #1
2001345a:	68fb      	ldr	r3, [r7, #12]
2001345c:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
2001345e:	2301      	movs	r3, #1
20013460:	e00e      	b.n	20013480 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20013462:	68fb      	ldr	r3, [r7, #12]
20013464:	681b      	ldr	r3, [r3, #0]
20013466:	689a      	ldr	r2, [r3, #8]
20013468:	68bb      	ldr	r3, [r7, #8]
2001346a:	4013      	ands	r3, r2
2001346c:	2b00      	cmp	r3, #0
2001346e:	bf14      	ite	ne
20013470:	2301      	movne	r3, #1
20013472:	2300      	moveq	r3, #0
20013474:	b2db      	uxtb	r3, r3
20013476:	461a      	mov	r2, r3
20013478:	79fb      	ldrb	r3, [r7, #7]
2001347a:	429a      	cmp	r2, r3
2001347c:	d1d6      	bne.n	2001342c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2001347e:	2300      	movs	r3, #0
}
20013480:	4618      	mov	r0, r3
20013482:	3710      	adds	r7, #16
20013484:	46bd      	mov	sp, r7
20013486:	bd80      	pop	{r7, pc}

20013488 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
20013488:	b480      	push	{r7}
2001348a:	b085      	sub	sp, #20
2001348c:	af00      	add	r7, sp, #0
2001348e:	60f8      	str	r0, [r7, #12]
20013490:	60b9      	str	r1, [r7, #8]
20013492:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
20013494:	68bb      	ldr	r3, [r7, #8]
20013496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20013498:	2b00      	cmp	r3, #0
2001349a:	d009      	beq.n	200134b0 <QSPI_Config+0x28>
2001349c:	687b      	ldr	r3, [r7, #4]
2001349e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
200134a2:	d005      	beq.n	200134b0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
200134a4:	68bb      	ldr	r3, [r7, #8]
200134a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
200134a8:	68fb      	ldr	r3, [r7, #12]
200134aa:	681b      	ldr	r3, [r3, #0]
200134ac:	3a01      	subs	r2, #1
200134ae:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
200134b0:	68bb      	ldr	r3, [r7, #8]
200134b2:	699b      	ldr	r3, [r3, #24]
200134b4:	2b00      	cmp	r3, #0
200134b6:	f000 80b9 	beq.w	2001362c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
200134ba:	68bb      	ldr	r3, [r7, #8]
200134bc:	6a1b      	ldr	r3, [r3, #32]
200134be:	2b00      	cmp	r3, #0
200134c0:	d05f      	beq.n	20013582 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
200134c2:	68fb      	ldr	r3, [r7, #12]
200134c4:	681b      	ldr	r3, [r3, #0]
200134c6:	68ba      	ldr	r2, [r7, #8]
200134c8:	6892      	ldr	r2, [r2, #8]
200134ca:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
200134cc:	68bb      	ldr	r3, [r7, #8]
200134ce:	69db      	ldr	r3, [r3, #28]
200134d0:	2b00      	cmp	r3, #0
200134d2:	d031      	beq.n	20013538 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
200134d4:	68bb      	ldr	r3, [r7, #8]
200134d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
200134d8:	68bb      	ldr	r3, [r7, #8]
200134da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200134dc:	431a      	orrs	r2, r3
200134de:	68bb      	ldr	r3, [r7, #8]
200134e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200134e2:	431a      	orrs	r2, r3
200134e4:	68bb      	ldr	r3, [r7, #8]
200134e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200134e8:	431a      	orrs	r2, r3
200134ea:	68bb      	ldr	r3, [r7, #8]
200134ec:	695b      	ldr	r3, [r3, #20]
200134ee:	049b      	lsls	r3, r3, #18
200134f0:	431a      	orrs	r2, r3
200134f2:	68bb      	ldr	r3, [r7, #8]
200134f4:	691b      	ldr	r3, [r3, #16]
200134f6:	431a      	orrs	r2, r3
200134f8:	68bb      	ldr	r3, [r7, #8]
200134fa:	6a1b      	ldr	r3, [r3, #32]
200134fc:	431a      	orrs	r2, r3
200134fe:	68bb      	ldr	r3, [r7, #8]
20013500:	68db      	ldr	r3, [r3, #12]
20013502:	431a      	orrs	r2, r3
20013504:	68bb      	ldr	r3, [r7, #8]
20013506:	69db      	ldr	r3, [r3, #28]
20013508:	431a      	orrs	r2, r3
2001350a:	68bb      	ldr	r3, [r7, #8]
2001350c:	699b      	ldr	r3, [r3, #24]
2001350e:	431a      	orrs	r2, r3
20013510:	68bb      	ldr	r3, [r7, #8]
20013512:	681b      	ldr	r3, [r3, #0]
20013514:	ea42 0103 	orr.w	r1, r2, r3
20013518:	68fb      	ldr	r3, [r7, #12]
2001351a:	681b      	ldr	r3, [r3, #0]
2001351c:	687a      	ldr	r2, [r7, #4]
2001351e:	430a      	orrs	r2, r1
20013520:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20013522:	687b      	ldr	r3, [r7, #4]
20013524:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
20013528:	f000 812e 	beq.w	20013788 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
2001352c:	68fb      	ldr	r3, [r7, #12]
2001352e:	681b      	ldr	r3, [r3, #0]
20013530:	68ba      	ldr	r2, [r7, #8]
20013532:	6852      	ldr	r2, [r2, #4]
20013534:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
20013536:	e127      	b.n	20013788 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20013538:	68bb      	ldr	r3, [r7, #8]
2001353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
2001353c:	68bb      	ldr	r3, [r7, #8]
2001353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20013540:	431a      	orrs	r2, r3
20013542:	68bb      	ldr	r3, [r7, #8]
20013544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20013546:	431a      	orrs	r2, r3
20013548:	68bb      	ldr	r3, [r7, #8]
2001354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2001354c:	431a      	orrs	r2, r3
2001354e:	68bb      	ldr	r3, [r7, #8]
20013550:	695b      	ldr	r3, [r3, #20]
20013552:	049b      	lsls	r3, r3, #18
20013554:	431a      	orrs	r2, r3
20013556:	68bb      	ldr	r3, [r7, #8]
20013558:	691b      	ldr	r3, [r3, #16]
2001355a:	431a      	orrs	r2, r3
2001355c:	68bb      	ldr	r3, [r7, #8]
2001355e:	6a1b      	ldr	r3, [r3, #32]
20013560:	431a      	orrs	r2, r3
20013562:	68bb      	ldr	r3, [r7, #8]
20013564:	69db      	ldr	r3, [r3, #28]
20013566:	431a      	orrs	r2, r3
20013568:	68bb      	ldr	r3, [r7, #8]
2001356a:	699b      	ldr	r3, [r3, #24]
2001356c:	431a      	orrs	r2, r3
2001356e:	68bb      	ldr	r3, [r7, #8]
20013570:	681b      	ldr	r3, [r3, #0]
20013572:	ea42 0103 	orr.w	r1, r2, r3
20013576:	68fb      	ldr	r3, [r7, #12]
20013578:	681b      	ldr	r3, [r3, #0]
2001357a:	687a      	ldr	r2, [r7, #4]
2001357c:	430a      	orrs	r2, r1
2001357e:	615a      	str	r2, [r3, #20]
}
20013580:	e102      	b.n	20013788 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
20013582:	68bb      	ldr	r3, [r7, #8]
20013584:	69db      	ldr	r3, [r3, #28]
20013586:	2b00      	cmp	r3, #0
20013588:	d02e      	beq.n	200135e8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2001358a:	68bb      	ldr	r3, [r7, #8]
2001358c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
2001358e:	68bb      	ldr	r3, [r7, #8]
20013590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20013592:	431a      	orrs	r2, r3
20013594:	68bb      	ldr	r3, [r7, #8]
20013596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20013598:	431a      	orrs	r2, r3
2001359a:	68bb      	ldr	r3, [r7, #8]
2001359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2001359e:	431a      	orrs	r2, r3
200135a0:	68bb      	ldr	r3, [r7, #8]
200135a2:	695b      	ldr	r3, [r3, #20]
200135a4:	049b      	lsls	r3, r3, #18
200135a6:	431a      	orrs	r2, r3
200135a8:	68bb      	ldr	r3, [r7, #8]
200135aa:	6a1b      	ldr	r3, [r3, #32]
200135ac:	431a      	orrs	r2, r3
200135ae:	68bb      	ldr	r3, [r7, #8]
200135b0:	68db      	ldr	r3, [r3, #12]
200135b2:	431a      	orrs	r2, r3
200135b4:	68bb      	ldr	r3, [r7, #8]
200135b6:	69db      	ldr	r3, [r3, #28]
200135b8:	431a      	orrs	r2, r3
200135ba:	68bb      	ldr	r3, [r7, #8]
200135bc:	699b      	ldr	r3, [r3, #24]
200135be:	431a      	orrs	r2, r3
200135c0:	68bb      	ldr	r3, [r7, #8]
200135c2:	681b      	ldr	r3, [r3, #0]
200135c4:	ea42 0103 	orr.w	r1, r2, r3
200135c8:	68fb      	ldr	r3, [r7, #12]
200135ca:	681b      	ldr	r3, [r3, #0]
200135cc:	687a      	ldr	r2, [r7, #4]
200135ce:	430a      	orrs	r2, r1
200135d0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
200135d2:	687b      	ldr	r3, [r7, #4]
200135d4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
200135d8:	f000 80d6 	beq.w	20013788 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
200135dc:	68fb      	ldr	r3, [r7, #12]
200135de:	681b      	ldr	r3, [r3, #0]
200135e0:	68ba      	ldr	r2, [r7, #8]
200135e2:	6852      	ldr	r2, [r2, #4]
200135e4:	619a      	str	r2, [r3, #24]
}
200135e6:	e0cf      	b.n	20013788 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
200135e8:	68bb      	ldr	r3, [r7, #8]
200135ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
200135ec:	68bb      	ldr	r3, [r7, #8]
200135ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200135f0:	431a      	orrs	r2, r3
200135f2:	68bb      	ldr	r3, [r7, #8]
200135f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200135f6:	431a      	orrs	r2, r3
200135f8:	68bb      	ldr	r3, [r7, #8]
200135fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200135fc:	431a      	orrs	r2, r3
200135fe:	68bb      	ldr	r3, [r7, #8]
20013600:	695b      	ldr	r3, [r3, #20]
20013602:	049b      	lsls	r3, r3, #18
20013604:	431a      	orrs	r2, r3
20013606:	68bb      	ldr	r3, [r7, #8]
20013608:	6a1b      	ldr	r3, [r3, #32]
2001360a:	431a      	orrs	r2, r3
2001360c:	68bb      	ldr	r3, [r7, #8]
2001360e:	69db      	ldr	r3, [r3, #28]
20013610:	431a      	orrs	r2, r3
20013612:	68bb      	ldr	r3, [r7, #8]
20013614:	699b      	ldr	r3, [r3, #24]
20013616:	431a      	orrs	r2, r3
20013618:	68bb      	ldr	r3, [r7, #8]
2001361a:	681b      	ldr	r3, [r3, #0]
2001361c:	ea42 0103 	orr.w	r1, r2, r3
20013620:	68fb      	ldr	r3, [r7, #12]
20013622:	681b      	ldr	r3, [r3, #0]
20013624:	687a      	ldr	r2, [r7, #4]
20013626:	430a      	orrs	r2, r1
20013628:	615a      	str	r2, [r3, #20]
}
2001362a:	e0ad      	b.n	20013788 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
2001362c:	68bb      	ldr	r3, [r7, #8]
2001362e:	6a1b      	ldr	r3, [r3, #32]
20013630:	2b00      	cmp	r3, #0
20013632:	d058      	beq.n	200136e6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
20013634:	68fb      	ldr	r3, [r7, #12]
20013636:	681b      	ldr	r3, [r3, #0]
20013638:	68ba      	ldr	r2, [r7, #8]
2001363a:	6892      	ldr	r2, [r2, #8]
2001363c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2001363e:	68bb      	ldr	r3, [r7, #8]
20013640:	69db      	ldr	r3, [r3, #28]
20013642:	2b00      	cmp	r3, #0
20013644:	d02d      	beq.n	200136a2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20013646:	68bb      	ldr	r3, [r7, #8]
20013648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
2001364a:	68bb      	ldr	r3, [r7, #8]
2001364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2001364e:	431a      	orrs	r2, r3
20013650:	68bb      	ldr	r3, [r7, #8]
20013652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20013654:	431a      	orrs	r2, r3
20013656:	68bb      	ldr	r3, [r7, #8]
20013658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2001365a:	431a      	orrs	r2, r3
2001365c:	68bb      	ldr	r3, [r7, #8]
2001365e:	695b      	ldr	r3, [r3, #20]
20013660:	049b      	lsls	r3, r3, #18
20013662:	431a      	orrs	r2, r3
20013664:	68bb      	ldr	r3, [r7, #8]
20013666:	691b      	ldr	r3, [r3, #16]
20013668:	431a      	orrs	r2, r3
2001366a:	68bb      	ldr	r3, [r7, #8]
2001366c:	6a1b      	ldr	r3, [r3, #32]
2001366e:	431a      	orrs	r2, r3
20013670:	68bb      	ldr	r3, [r7, #8]
20013672:	68db      	ldr	r3, [r3, #12]
20013674:	431a      	orrs	r2, r3
20013676:	68bb      	ldr	r3, [r7, #8]
20013678:	69db      	ldr	r3, [r3, #28]
2001367a:	431a      	orrs	r2, r3
2001367c:	68bb      	ldr	r3, [r7, #8]
2001367e:	699b      	ldr	r3, [r3, #24]
20013680:	ea42 0103 	orr.w	r1, r2, r3
20013684:	68fb      	ldr	r3, [r7, #12]
20013686:	681b      	ldr	r3, [r3, #0]
20013688:	687a      	ldr	r2, [r7, #4]
2001368a:	430a      	orrs	r2, r1
2001368c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2001368e:	687b      	ldr	r3, [r7, #4]
20013690:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
20013694:	d078      	beq.n	20013788 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
20013696:	68fb      	ldr	r3, [r7, #12]
20013698:	681b      	ldr	r3, [r3, #0]
2001369a:	68ba      	ldr	r2, [r7, #8]
2001369c:	6852      	ldr	r2, [r2, #4]
2001369e:	619a      	str	r2, [r3, #24]
}
200136a0:	e072      	b.n	20013788 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
200136a2:	68bb      	ldr	r3, [r7, #8]
200136a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
200136a6:	68bb      	ldr	r3, [r7, #8]
200136a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200136aa:	431a      	orrs	r2, r3
200136ac:	68bb      	ldr	r3, [r7, #8]
200136ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200136b0:	431a      	orrs	r2, r3
200136b2:	68bb      	ldr	r3, [r7, #8]
200136b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200136b6:	431a      	orrs	r2, r3
200136b8:	68bb      	ldr	r3, [r7, #8]
200136ba:	695b      	ldr	r3, [r3, #20]
200136bc:	049b      	lsls	r3, r3, #18
200136be:	431a      	orrs	r2, r3
200136c0:	68bb      	ldr	r3, [r7, #8]
200136c2:	691b      	ldr	r3, [r3, #16]
200136c4:	431a      	orrs	r2, r3
200136c6:	68bb      	ldr	r3, [r7, #8]
200136c8:	6a1b      	ldr	r3, [r3, #32]
200136ca:	431a      	orrs	r2, r3
200136cc:	68bb      	ldr	r3, [r7, #8]
200136ce:	69db      	ldr	r3, [r3, #28]
200136d0:	431a      	orrs	r2, r3
200136d2:	68bb      	ldr	r3, [r7, #8]
200136d4:	699b      	ldr	r3, [r3, #24]
200136d6:	ea42 0103 	orr.w	r1, r2, r3
200136da:	68fb      	ldr	r3, [r7, #12]
200136dc:	681b      	ldr	r3, [r3, #0]
200136de:	687a      	ldr	r2, [r7, #4]
200136e0:	430a      	orrs	r2, r1
200136e2:	615a      	str	r2, [r3, #20]
}
200136e4:	e050      	b.n	20013788 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
200136e6:	68bb      	ldr	r3, [r7, #8]
200136e8:	69db      	ldr	r3, [r3, #28]
200136ea:	2b00      	cmp	r3, #0
200136ec:	d02a      	beq.n	20013744 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
200136ee:	68bb      	ldr	r3, [r7, #8]
200136f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
200136f2:	68bb      	ldr	r3, [r7, #8]
200136f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200136f6:	431a      	orrs	r2, r3
200136f8:	68bb      	ldr	r3, [r7, #8]
200136fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200136fc:	431a      	orrs	r2, r3
200136fe:	68bb      	ldr	r3, [r7, #8]
20013700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20013702:	431a      	orrs	r2, r3
20013704:	68bb      	ldr	r3, [r7, #8]
20013706:	695b      	ldr	r3, [r3, #20]
20013708:	049b      	lsls	r3, r3, #18
2001370a:	431a      	orrs	r2, r3
2001370c:	68bb      	ldr	r3, [r7, #8]
2001370e:	6a1b      	ldr	r3, [r3, #32]
20013710:	431a      	orrs	r2, r3
20013712:	68bb      	ldr	r3, [r7, #8]
20013714:	68db      	ldr	r3, [r3, #12]
20013716:	431a      	orrs	r2, r3
20013718:	68bb      	ldr	r3, [r7, #8]
2001371a:	69db      	ldr	r3, [r3, #28]
2001371c:	431a      	orrs	r2, r3
2001371e:	68bb      	ldr	r3, [r7, #8]
20013720:	699b      	ldr	r3, [r3, #24]
20013722:	ea42 0103 	orr.w	r1, r2, r3
20013726:	68fb      	ldr	r3, [r7, #12]
20013728:	681b      	ldr	r3, [r3, #0]
2001372a:	687a      	ldr	r2, [r7, #4]
2001372c:	430a      	orrs	r2, r1
2001372e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20013730:	687b      	ldr	r3, [r7, #4]
20013732:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
20013736:	d027      	beq.n	20013788 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
20013738:	68fb      	ldr	r3, [r7, #12]
2001373a:	681b      	ldr	r3, [r3, #0]
2001373c:	68ba      	ldr	r2, [r7, #8]
2001373e:	6852      	ldr	r2, [r2, #4]
20013740:	619a      	str	r2, [r3, #24]
}
20013742:	e021      	b.n	20013788 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
20013744:	68bb      	ldr	r3, [r7, #8]
20013746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20013748:	2b00      	cmp	r3, #0
2001374a:	d01d      	beq.n	20013788 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2001374c:	68bb      	ldr	r3, [r7, #8]
2001374e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
20013750:	68bb      	ldr	r3, [r7, #8]
20013752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20013754:	431a      	orrs	r2, r3
20013756:	68bb      	ldr	r3, [r7, #8]
20013758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2001375a:	431a      	orrs	r2, r3
2001375c:	68bb      	ldr	r3, [r7, #8]
2001375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20013760:	431a      	orrs	r2, r3
20013762:	68bb      	ldr	r3, [r7, #8]
20013764:	695b      	ldr	r3, [r3, #20]
20013766:	049b      	lsls	r3, r3, #18
20013768:	431a      	orrs	r2, r3
2001376a:	68bb      	ldr	r3, [r7, #8]
2001376c:	6a1b      	ldr	r3, [r3, #32]
2001376e:	431a      	orrs	r2, r3
20013770:	68bb      	ldr	r3, [r7, #8]
20013772:	69db      	ldr	r3, [r3, #28]
20013774:	431a      	orrs	r2, r3
20013776:	68bb      	ldr	r3, [r7, #8]
20013778:	699b      	ldr	r3, [r3, #24]
2001377a:	ea42 0103 	orr.w	r1, r2, r3
2001377e:	68fb      	ldr	r3, [r7, #12]
20013780:	681b      	ldr	r3, [r3, #0]
20013782:	687a      	ldr	r2, [r7, #4]
20013784:	430a      	orrs	r2, r1
20013786:	615a      	str	r2, [r3, #20]
}
20013788:	bf00      	nop
2001378a:	3714      	adds	r7, #20
2001378c:	46bd      	mov	sp, r7
2001378e:	f85d 7b04 	ldr.w	r7, [sp], #4
20013792:	4770      	bx	lr

20013794 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20013794:	b580      	push	{r7, lr}
20013796:	b082      	sub	sp, #8
20013798:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
2001379a:	4b89      	ldr	r3, [pc, #548]	@ (200139c0 <HAL_RCC_DeInit+0x22c>)
2001379c:	681b      	ldr	r3, [r3, #0]
2001379e:	f003 030f 	and.w	r3, r3, #15
200137a2:	2b06      	cmp	r3, #6
200137a4:	d80f      	bhi.n	200137c6 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
200137a6:	4b86      	ldr	r3, [pc, #536]	@ (200139c0 <HAL_RCC_DeInit+0x22c>)
200137a8:	681b      	ldr	r3, [r3, #0]
200137aa:	f023 030f 	bic.w	r3, r3, #15
200137ae:	4a84      	ldr	r2, [pc, #528]	@ (200139c0 <HAL_RCC_DeInit+0x22c>)
200137b0:	f043 0307 	orr.w	r3, r3, #7
200137b4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
200137b6:	4b82      	ldr	r3, [pc, #520]	@ (200139c0 <HAL_RCC_DeInit+0x22c>)
200137b8:	681b      	ldr	r3, [r3, #0]
200137ba:	f003 030f 	and.w	r3, r3, #15
200137be:	2b07      	cmp	r3, #7
200137c0:	d001      	beq.n	200137c6 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
200137c2:	2301      	movs	r3, #1
200137c4:	e0f7      	b.n	200139b6 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
200137c6:	f7ee fd7b 	bl	200022c0 <HAL_GetTick>
200137ca:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
200137cc:	4b7d      	ldr	r3, [pc, #500]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200137ce:	681b      	ldr	r3, [r3, #0]
200137d0:	4a7c      	ldr	r2, [pc, #496]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200137d2:	f043 0301 	orr.w	r3, r3, #1
200137d6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
200137d8:	e008      	b.n	200137ec <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200137da:	f7ee fd71 	bl	200022c0 <HAL_GetTick>
200137de:	4602      	mov	r2, r0
200137e0:	687b      	ldr	r3, [r7, #4]
200137e2:	1ad3      	subs	r3, r2, r3
200137e4:	2b02      	cmp	r3, #2
200137e6:	d901      	bls.n	200137ec <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
200137e8:	2303      	movs	r3, #3
200137ea:	e0e4      	b.n	200139b6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
200137ec:	4b75      	ldr	r3, [pc, #468]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200137ee:	681b      	ldr	r3, [r3, #0]
200137f0:	f003 0304 	and.w	r3, r3, #4
200137f4:	2b00      	cmp	r3, #0
200137f6:	d0f0      	beq.n	200137da <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
200137f8:	4b72      	ldr	r3, [pc, #456]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200137fa:	685b      	ldr	r3, [r3, #4]
200137fc:	4a71      	ldr	r2, [pc, #452]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200137fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20013802:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
20013804:	4b6f      	ldr	r3, [pc, #444]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013806:	2200      	movs	r2, #0
20013808:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
2001380a:	4b6f      	ldr	r3, [pc, #444]	@ (200139c8 <HAL_RCC_DeInit+0x234>)
2001380c:	4a6f      	ldr	r2, [pc, #444]	@ (200139cc <HAL_RCC_DeInit+0x238>)
2001380e:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
20013810:	4b6f      	ldr	r3, [pc, #444]	@ (200139d0 <HAL_RCC_DeInit+0x23c>)
20013812:	4a6e      	ldr	r2, [pc, #440]	@ (200139cc <HAL_RCC_DeInit+0x238>)
20013814:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
20013816:	4b6f      	ldr	r3, [pc, #444]	@ (200139d4 <HAL_RCC_DeInit+0x240>)
20013818:	681b      	ldr	r3, [r3, #0]
2001381a:	4618      	mov	r0, r3
2001381c:	f7ee fd06 	bl	2000222c <HAL_InitTick>
20013820:	4603      	mov	r3, r0
20013822:	2b00      	cmp	r3, #0
20013824:	d001      	beq.n	2001382a <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
20013826:	2301      	movs	r3, #1
20013828:	e0c5      	b.n	200139b6 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2001382a:	f7ee fd49 	bl	200022c0 <HAL_GetTick>
2001382e:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
20013830:	e00a      	b.n	20013848 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20013832:	f7ee fd45 	bl	200022c0 <HAL_GetTick>
20013836:	4602      	mov	r2, r0
20013838:	687b      	ldr	r3, [r7, #4]
2001383a:	1ad3      	subs	r3, r2, r3
2001383c:	f241 3288 	movw	r2, #5000	@ 0x1388
20013840:	4293      	cmp	r3, r2
20013842:	d901      	bls.n	20013848 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
20013844:	2303      	movs	r3, #3
20013846:	e0b6      	b.n	200139b6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
20013848:	4b5e      	ldr	r3, [pc, #376]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001384a:	691b      	ldr	r3, [r3, #16]
2001384c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20013850:	2b00      	cmp	r3, #0
20013852:	d1ee      	bne.n	20013832 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20013854:	f7ee fd34 	bl	200022c0 <HAL_GetTick>
20013858:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
2001385a:	4b5a      	ldr	r3, [pc, #360]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001385c:	681a      	ldr	r2, [r3, #0]
2001385e:	4959      	ldr	r1, [pc, #356]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013860:	4b5d      	ldr	r3, [pc, #372]	@ (200139d8 <HAL_RCC_DeInit+0x244>)
20013862:	4013      	ands	r3, r2
20013864:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
20013866:	e008      	b.n	2001387a <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20013868:	f7ee fd2a 	bl	200022c0 <HAL_GetTick>
2001386c:	4602      	mov	r2, r0
2001386e:	687b      	ldr	r3, [r7, #4]
20013870:	1ad3      	subs	r3, r2, r3
20013872:	2b64      	cmp	r3, #100	@ 0x64
20013874:	d901      	bls.n	2001387a <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
20013876:	2303      	movs	r3, #3
20013878:	e09d      	b.n	200139b6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
2001387a:	4b52      	ldr	r3, [pc, #328]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001387c:	681b      	ldr	r3, [r3, #0]
2001387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20013882:	2b00      	cmp	r3, #0
20013884:	d1f0      	bne.n	20013868 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20013886:	f7ee fd1b 	bl	200022c0 <HAL_GetTick>
2001388a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
2001388c:	4b4d      	ldr	r3, [pc, #308]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001388e:	681b      	ldr	r3, [r3, #0]
20013890:	4a4c      	ldr	r2, [pc, #304]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20013896:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
20013898:	e008      	b.n	200138ac <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2001389a:	f7ee fd11 	bl	200022c0 <HAL_GetTick>
2001389e:	4602      	mov	r2, r0
200138a0:	687b      	ldr	r3, [r7, #4]
200138a2:	1ad3      	subs	r3, r2, r3
200138a4:	2b02      	cmp	r3, #2
200138a6:	d901      	bls.n	200138ac <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
200138a8:	2303      	movs	r3, #3
200138aa:	e084      	b.n	200139b6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
200138ac:	4b45      	ldr	r3, [pc, #276]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200138ae:	681b      	ldr	r3, [r3, #0]
200138b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200138b4:	2b00      	cmp	r3, #0
200138b6:	d1f0      	bne.n	2001389a <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200138b8:	f7ee fd02 	bl	200022c0 <HAL_GetTick>
200138bc:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
200138be:	4b41      	ldr	r3, [pc, #260]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200138c0:	681b      	ldr	r3, [r3, #0]
200138c2:	4a40      	ldr	r2, [pc, #256]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200138c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
200138c8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
200138ca:	e008      	b.n	200138de <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200138cc:	f7ee fcf8 	bl	200022c0 <HAL_GetTick>
200138d0:	4602      	mov	r2, r0
200138d2:	687b      	ldr	r3, [r7, #4]
200138d4:	1ad3      	subs	r3, r2, r3
200138d6:	2b02      	cmp	r3, #2
200138d8:	d901      	bls.n	200138de <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
200138da:	2303      	movs	r3, #3
200138dc:	e06b      	b.n	200139b6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
200138de:	4b39      	ldr	r3, [pc, #228]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200138e0:	681b      	ldr	r3, [r3, #0]
200138e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200138e6:	2b00      	cmp	r3, #0
200138e8:	d1f0      	bne.n	200138cc <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200138ea:	f7ee fce9 	bl	200022c0 <HAL_GetTick>
200138ee:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
200138f0:	4b34      	ldr	r3, [pc, #208]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200138f2:	681b      	ldr	r3, [r3, #0]
200138f4:	4a33      	ldr	r2, [pc, #204]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
200138f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
200138fa:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
200138fc:	e008      	b.n	20013910 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200138fe:	f7ee fcdf 	bl	200022c0 <HAL_GetTick>
20013902:	4602      	mov	r2, r0
20013904:	687b      	ldr	r3, [r7, #4]
20013906:	1ad3      	subs	r3, r2, r3
20013908:	2b02      	cmp	r3, #2
2001390a:	d901      	bls.n	20013910 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
2001390c:	2303      	movs	r3, #3
2001390e:	e052      	b.n	200139b6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
20013910:	4b2c      	ldr	r3, [pc, #176]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013912:	681b      	ldr	r3, [r3, #0]
20013914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20013918:	2b00      	cmp	r3, #0
2001391a:	d1f0      	bne.n	200138fe <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
2001391c:	4b29      	ldr	r3, [pc, #164]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001391e:	2200      	movs	r2, #0
20013920:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
20013922:	4b28      	ldr	r3, [pc, #160]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013924:	2200      	movs	r2, #0
20013926:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
20013928:	4b26      	ldr	r3, [pc, #152]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001392a:	2200      	movs	r2, #0
2001392c:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
2001392e:	4b25      	ldr	r3, [pc, #148]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013930:	4a2a      	ldr	r2, [pc, #168]	@ (200139dc <HAL_RCC_DeInit+0x248>)
20013932:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
20013934:	4b23      	ldr	r3, [pc, #140]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013936:	4a2a      	ldr	r2, [pc, #168]	@ (200139e0 <HAL_RCC_DeInit+0x24c>)
20013938:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
2001393a:	4b22      	ldr	r3, [pc, #136]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001393c:	4a29      	ldr	r2, [pc, #164]	@ (200139e4 <HAL_RCC_DeInit+0x250>)
2001393e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
20013940:	4b20      	ldr	r3, [pc, #128]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013942:	2200      	movs	r2, #0
20013944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
20013946:	4b1f      	ldr	r3, [pc, #124]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013948:	4a26      	ldr	r2, [pc, #152]	@ (200139e4 <HAL_RCC_DeInit+0x250>)
2001394a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
2001394c:	4b1d      	ldr	r3, [pc, #116]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001394e:	2200      	movs	r2, #0
20013950:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
20013952:	4b1c      	ldr	r3, [pc, #112]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013954:	4a23      	ldr	r2, [pc, #140]	@ (200139e4 <HAL_RCC_DeInit+0x250>)
20013956:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
20013958:	4b1a      	ldr	r3, [pc, #104]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001395a:	2200      	movs	r2, #0
2001395c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
2001395e:	4b19      	ldr	r3, [pc, #100]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013960:	681b      	ldr	r3, [r3, #0]
20013962:	4a18      	ldr	r2, [pc, #96]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013964:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20013968:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
2001396a:	4b16      	ldr	r3, [pc, #88]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001396c:	2200      	movs	r2, #0
2001396e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
20013970:	4b14      	ldr	r3, [pc, #80]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013972:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
20013976:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
20013978:	4b12      	ldr	r3, [pc, #72]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
2001397a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
2001397e:	4a11      	ldr	r2, [pc, #68]	@ (200139c4 <HAL_RCC_DeInit+0x230>)
20013980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20013984:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
20013988:	4b0d      	ldr	r3, [pc, #52]	@ (200139c0 <HAL_RCC_DeInit+0x22c>)
2001398a:	681b      	ldr	r3, [r3, #0]
2001398c:	f003 0308 	and.w	r3, r3, #8
20013990:	2b00      	cmp	r3, #0
20013992:	d00f      	beq.n	200139b4 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
20013994:	4b0a      	ldr	r3, [pc, #40]	@ (200139c0 <HAL_RCC_DeInit+0x22c>)
20013996:	681b      	ldr	r3, [r3, #0]
20013998:	f023 030f 	bic.w	r3, r3, #15
2001399c:	4a08      	ldr	r2, [pc, #32]	@ (200139c0 <HAL_RCC_DeInit+0x22c>)
2001399e:	f043 0307 	orr.w	r3, r3, #7
200139a2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
200139a4:	4b06      	ldr	r3, [pc, #24]	@ (200139c0 <HAL_RCC_DeInit+0x22c>)
200139a6:	681b      	ldr	r3, [r3, #0]
200139a8:	f003 030f 	and.w	r3, r3, #15
200139ac:	2b07      	cmp	r3, #7
200139ae:	d001      	beq.n	200139b4 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
200139b0:	2301      	movs	r3, #1
200139b2:	e000      	b.n	200139b6 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
200139b4:	2300      	movs	r3, #0
}
200139b6:	4618      	mov	r0, r3
200139b8:	3708      	adds	r7, #8
200139ba:	46bd      	mov	sp, r7
200139bc:	bd80      	pop	{r7, pc}
200139be:	bf00      	nop
200139c0:	52002000 	.word	0x52002000
200139c4:	58024400 	.word	0x58024400
200139c8:	200004b0 	.word	0x200004b0
200139cc:	03d09000 	.word	0x03d09000
200139d0:	200004b4 	.word	0x200004b4
200139d4:	200004b8 	.word	0x200004b8
200139d8:	fff6ed45 	.word	0xfff6ed45
200139dc:	02020200 	.word	0x02020200
200139e0:	01ff0000 	.word	0x01ff0000
200139e4:	01010280 	.word	0x01010280

200139e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200139e8:	b580      	push	{r7, lr}
200139ea:	b08c      	sub	sp, #48	@ 0x30
200139ec:	af00      	add	r7, sp, #0
200139ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
200139f0:	687b      	ldr	r3, [r7, #4]
200139f2:	2b00      	cmp	r3, #0
200139f4:	d102      	bne.n	200139fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
200139f6:	2301      	movs	r3, #1
200139f8:	f000 bc48 	b.w	2001428c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
200139fc:	687b      	ldr	r3, [r7, #4]
200139fe:	681b      	ldr	r3, [r3, #0]
20013a00:	f003 0301 	and.w	r3, r3, #1
20013a04:	2b00      	cmp	r3, #0
20013a06:	f000 8088 	beq.w	20013b1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
20013a0a:	4b99      	ldr	r3, [pc, #612]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a0c:	691b      	ldr	r3, [r3, #16]
20013a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20013a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
20013a14:	4b96      	ldr	r3, [pc, #600]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20013a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
20013a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20013a1c:	2b10      	cmp	r3, #16
20013a1e:	d007      	beq.n	20013a30 <HAL_RCC_OscConfig+0x48>
20013a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20013a22:	2b18      	cmp	r3, #24
20013a24:	d111      	bne.n	20013a4a <HAL_RCC_OscConfig+0x62>
20013a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20013a28:	f003 0303 	and.w	r3, r3, #3
20013a2c:	2b02      	cmp	r3, #2
20013a2e:	d10c      	bne.n	20013a4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20013a30:	4b8f      	ldr	r3, [pc, #572]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a32:	681b      	ldr	r3, [r3, #0]
20013a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20013a38:	2b00      	cmp	r3, #0
20013a3a:	d06d      	beq.n	20013b18 <HAL_RCC_OscConfig+0x130>
20013a3c:	687b      	ldr	r3, [r7, #4]
20013a3e:	685b      	ldr	r3, [r3, #4]
20013a40:	2b00      	cmp	r3, #0
20013a42:	d169      	bne.n	20013b18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
20013a44:	2301      	movs	r3, #1
20013a46:	f000 bc21 	b.w	2001428c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20013a4a:	687b      	ldr	r3, [r7, #4]
20013a4c:	685b      	ldr	r3, [r3, #4]
20013a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20013a52:	d106      	bne.n	20013a62 <HAL_RCC_OscConfig+0x7a>
20013a54:	4b86      	ldr	r3, [pc, #536]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a56:	681b      	ldr	r3, [r3, #0]
20013a58:	4a85      	ldr	r2, [pc, #532]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20013a5e:	6013      	str	r3, [r2, #0]
20013a60:	e02e      	b.n	20013ac0 <HAL_RCC_OscConfig+0xd8>
20013a62:	687b      	ldr	r3, [r7, #4]
20013a64:	685b      	ldr	r3, [r3, #4]
20013a66:	2b00      	cmp	r3, #0
20013a68:	d10c      	bne.n	20013a84 <HAL_RCC_OscConfig+0x9c>
20013a6a:	4b81      	ldr	r3, [pc, #516]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a6c:	681b      	ldr	r3, [r3, #0]
20013a6e:	4a80      	ldr	r2, [pc, #512]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20013a74:	6013      	str	r3, [r2, #0]
20013a76:	4b7e      	ldr	r3, [pc, #504]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a78:	681b      	ldr	r3, [r3, #0]
20013a7a:	4a7d      	ldr	r2, [pc, #500]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20013a80:	6013      	str	r3, [r2, #0]
20013a82:	e01d      	b.n	20013ac0 <HAL_RCC_OscConfig+0xd8>
20013a84:	687b      	ldr	r3, [r7, #4]
20013a86:	685b      	ldr	r3, [r3, #4]
20013a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20013a8c:	d10c      	bne.n	20013aa8 <HAL_RCC_OscConfig+0xc0>
20013a8e:	4b78      	ldr	r3, [pc, #480]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a90:	681b      	ldr	r3, [r3, #0]
20013a92:	4a77      	ldr	r2, [pc, #476]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20013a98:	6013      	str	r3, [r2, #0]
20013a9a:	4b75      	ldr	r3, [pc, #468]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013a9c:	681b      	ldr	r3, [r3, #0]
20013a9e:	4a74      	ldr	r2, [pc, #464]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20013aa4:	6013      	str	r3, [r2, #0]
20013aa6:	e00b      	b.n	20013ac0 <HAL_RCC_OscConfig+0xd8>
20013aa8:	4b71      	ldr	r3, [pc, #452]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013aaa:	681b      	ldr	r3, [r3, #0]
20013aac:	4a70      	ldr	r2, [pc, #448]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20013ab2:	6013      	str	r3, [r2, #0]
20013ab4:	4b6e      	ldr	r3, [pc, #440]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013ab6:	681b      	ldr	r3, [r3, #0]
20013ab8:	4a6d      	ldr	r2, [pc, #436]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20013abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
20013ac0:	687b      	ldr	r3, [r7, #4]
20013ac2:	685b      	ldr	r3, [r3, #4]
20013ac4:	2b00      	cmp	r3, #0
20013ac6:	d013      	beq.n	20013af0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20013ac8:	f7ee fbfa 	bl	200022c0 <HAL_GetTick>
20013acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
20013ace:	e008      	b.n	20013ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20013ad0:	f7ee fbf6 	bl	200022c0 <HAL_GetTick>
20013ad4:	4602      	mov	r2, r0
20013ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013ad8:	1ad3      	subs	r3, r2, r3
20013ada:	2b64      	cmp	r3, #100	@ 0x64
20013adc:	d901      	bls.n	20013ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20013ade:	2303      	movs	r3, #3
20013ae0:	e3d4      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
20013ae2:	4b63      	ldr	r3, [pc, #396]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013ae4:	681b      	ldr	r3, [r3, #0]
20013ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20013aea:	2b00      	cmp	r3, #0
20013aec:	d0f0      	beq.n	20013ad0 <HAL_RCC_OscConfig+0xe8>
20013aee:	e014      	b.n	20013b1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20013af0:	f7ee fbe6 	bl	200022c0 <HAL_GetTick>
20013af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
20013af6:	e008      	b.n	20013b0a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20013af8:	f7ee fbe2 	bl	200022c0 <HAL_GetTick>
20013afc:	4602      	mov	r2, r0
20013afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013b00:	1ad3      	subs	r3, r2, r3
20013b02:	2b64      	cmp	r3, #100	@ 0x64
20013b04:	d901      	bls.n	20013b0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
20013b06:	2303      	movs	r3, #3
20013b08:	e3c0      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
20013b0a:	4b59      	ldr	r3, [pc, #356]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013b0c:	681b      	ldr	r3, [r3, #0]
20013b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20013b12:	2b00      	cmp	r3, #0
20013b14:	d1f0      	bne.n	20013af8 <HAL_RCC_OscConfig+0x110>
20013b16:	e000      	b.n	20013b1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20013b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20013b1a:	687b      	ldr	r3, [r7, #4]
20013b1c:	681b      	ldr	r3, [r3, #0]
20013b1e:	f003 0302 	and.w	r3, r3, #2
20013b22:	2b00      	cmp	r3, #0
20013b24:	f000 80ca 	beq.w	20013cbc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
20013b28:	4b51      	ldr	r3, [pc, #324]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013b2a:	691b      	ldr	r3, [r3, #16]
20013b2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20013b30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
20013b32:	4b4f      	ldr	r3, [pc, #316]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20013b36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
20013b38:	6a3b      	ldr	r3, [r7, #32]
20013b3a:	2b00      	cmp	r3, #0
20013b3c:	d007      	beq.n	20013b4e <HAL_RCC_OscConfig+0x166>
20013b3e:	6a3b      	ldr	r3, [r7, #32]
20013b40:	2b18      	cmp	r3, #24
20013b42:	d156      	bne.n	20013bf2 <HAL_RCC_OscConfig+0x20a>
20013b44:	69fb      	ldr	r3, [r7, #28]
20013b46:	f003 0303 	and.w	r3, r3, #3
20013b4a:	2b00      	cmp	r3, #0
20013b4c:	d151      	bne.n	20013bf2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
20013b4e:	4b48      	ldr	r3, [pc, #288]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013b50:	681b      	ldr	r3, [r3, #0]
20013b52:	f003 0304 	and.w	r3, r3, #4
20013b56:	2b00      	cmp	r3, #0
20013b58:	d005      	beq.n	20013b66 <HAL_RCC_OscConfig+0x17e>
20013b5a:	687b      	ldr	r3, [r7, #4]
20013b5c:	68db      	ldr	r3, [r3, #12]
20013b5e:	2b00      	cmp	r3, #0
20013b60:	d101      	bne.n	20013b66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
20013b62:	2301      	movs	r3, #1
20013b64:	e392      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
20013b66:	4b42      	ldr	r3, [pc, #264]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013b68:	681b      	ldr	r3, [r3, #0]
20013b6a:	f023 0219 	bic.w	r2, r3, #25
20013b6e:	687b      	ldr	r3, [r7, #4]
20013b70:	68db      	ldr	r3, [r3, #12]
20013b72:	493f      	ldr	r1, [pc, #252]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013b74:	4313      	orrs	r3, r2
20013b76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20013b78:	f7ee fba2 	bl	200022c0 <HAL_GetTick>
20013b7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
20013b7e:	e008      	b.n	20013b92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20013b80:	f7ee fb9e 	bl	200022c0 <HAL_GetTick>
20013b84:	4602      	mov	r2, r0
20013b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013b88:	1ad3      	subs	r3, r2, r3
20013b8a:	2b02      	cmp	r3, #2
20013b8c:	d901      	bls.n	20013b92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
20013b8e:	2303      	movs	r3, #3
20013b90:	e37c      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
20013b92:	4b37      	ldr	r3, [pc, #220]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013b94:	681b      	ldr	r3, [r3, #0]
20013b96:	f003 0304 	and.w	r3, r3, #4
20013b9a:	2b00      	cmp	r3, #0
20013b9c:	d0f0      	beq.n	20013b80 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20013b9e:	f7ee fc29 	bl	200023f4 <HAL_GetREVID>
20013ba2:	4603      	mov	r3, r0
20013ba4:	f241 0203 	movw	r2, #4099	@ 0x1003
20013ba8:	4293      	cmp	r3, r2
20013baa:	d817      	bhi.n	20013bdc <HAL_RCC_OscConfig+0x1f4>
20013bac:	687b      	ldr	r3, [r7, #4]
20013bae:	691b      	ldr	r3, [r3, #16]
20013bb0:	2b40      	cmp	r3, #64	@ 0x40
20013bb2:	d108      	bne.n	20013bc6 <HAL_RCC_OscConfig+0x1de>
20013bb4:	4b2e      	ldr	r3, [pc, #184]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013bb6:	685b      	ldr	r3, [r3, #4]
20013bb8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
20013bbc:	4a2c      	ldr	r2, [pc, #176]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20013bc2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
20013bc4:	e07a      	b.n	20013cbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20013bc6:	4b2a      	ldr	r3, [pc, #168]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013bc8:	685b      	ldr	r3, [r3, #4]
20013bca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
20013bce:	687b      	ldr	r3, [r7, #4]
20013bd0:	691b      	ldr	r3, [r3, #16]
20013bd2:	031b      	lsls	r3, r3, #12
20013bd4:	4926      	ldr	r1, [pc, #152]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013bd6:	4313      	orrs	r3, r2
20013bd8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
20013bda:	e06f      	b.n	20013cbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20013bdc:	4b24      	ldr	r3, [pc, #144]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013bde:	685b      	ldr	r3, [r3, #4]
20013be0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
20013be4:	687b      	ldr	r3, [r7, #4]
20013be6:	691b      	ldr	r3, [r3, #16]
20013be8:	061b      	lsls	r3, r3, #24
20013bea:	4921      	ldr	r1, [pc, #132]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013bec:	4313      	orrs	r3, r2
20013bee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
20013bf0:	e064      	b.n	20013cbc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
20013bf2:	687b      	ldr	r3, [r7, #4]
20013bf4:	68db      	ldr	r3, [r3, #12]
20013bf6:	2b00      	cmp	r3, #0
20013bf8:	d047      	beq.n	20013c8a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
20013bfa:	4b1d      	ldr	r3, [pc, #116]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013bfc:	681b      	ldr	r3, [r3, #0]
20013bfe:	f023 0219 	bic.w	r2, r3, #25
20013c02:	687b      	ldr	r3, [r7, #4]
20013c04:	68db      	ldr	r3, [r3, #12]
20013c06:	491a      	ldr	r1, [pc, #104]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013c08:	4313      	orrs	r3, r2
20013c0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20013c0c:	f7ee fb58 	bl	200022c0 <HAL_GetTick>
20013c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
20013c12:	e008      	b.n	20013c26 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20013c14:	f7ee fb54 	bl	200022c0 <HAL_GetTick>
20013c18:	4602      	mov	r2, r0
20013c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013c1c:	1ad3      	subs	r3, r2, r3
20013c1e:	2b02      	cmp	r3, #2
20013c20:	d901      	bls.n	20013c26 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
20013c22:	2303      	movs	r3, #3
20013c24:	e332      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
20013c26:	4b12      	ldr	r3, [pc, #72]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013c28:	681b      	ldr	r3, [r3, #0]
20013c2a:	f003 0304 	and.w	r3, r3, #4
20013c2e:	2b00      	cmp	r3, #0
20013c30:	d0f0      	beq.n	20013c14 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20013c32:	f7ee fbdf 	bl	200023f4 <HAL_GetREVID>
20013c36:	4603      	mov	r3, r0
20013c38:	f241 0203 	movw	r2, #4099	@ 0x1003
20013c3c:	4293      	cmp	r3, r2
20013c3e:	d819      	bhi.n	20013c74 <HAL_RCC_OscConfig+0x28c>
20013c40:	687b      	ldr	r3, [r7, #4]
20013c42:	691b      	ldr	r3, [r3, #16]
20013c44:	2b40      	cmp	r3, #64	@ 0x40
20013c46:	d108      	bne.n	20013c5a <HAL_RCC_OscConfig+0x272>
20013c48:	4b09      	ldr	r3, [pc, #36]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013c4a:	685b      	ldr	r3, [r3, #4]
20013c4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
20013c50:	4a07      	ldr	r2, [pc, #28]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20013c56:	6053      	str	r3, [r2, #4]
20013c58:	e030      	b.n	20013cbc <HAL_RCC_OscConfig+0x2d4>
20013c5a:	4b05      	ldr	r3, [pc, #20]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013c5c:	685b      	ldr	r3, [r3, #4]
20013c5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
20013c62:	687b      	ldr	r3, [r7, #4]
20013c64:	691b      	ldr	r3, [r3, #16]
20013c66:	031b      	lsls	r3, r3, #12
20013c68:	4901      	ldr	r1, [pc, #4]	@ (20013c70 <HAL_RCC_OscConfig+0x288>)
20013c6a:	4313      	orrs	r3, r2
20013c6c:	604b      	str	r3, [r1, #4]
20013c6e:	e025      	b.n	20013cbc <HAL_RCC_OscConfig+0x2d4>
20013c70:	58024400 	.word	0x58024400
20013c74:	4b9a      	ldr	r3, [pc, #616]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013c76:	685b      	ldr	r3, [r3, #4]
20013c78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
20013c7c:	687b      	ldr	r3, [r7, #4]
20013c7e:	691b      	ldr	r3, [r3, #16]
20013c80:	061b      	lsls	r3, r3, #24
20013c82:	4997      	ldr	r1, [pc, #604]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013c84:	4313      	orrs	r3, r2
20013c86:	604b      	str	r3, [r1, #4]
20013c88:	e018      	b.n	20013cbc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20013c8a:	4b95      	ldr	r3, [pc, #596]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013c8c:	681b      	ldr	r3, [r3, #0]
20013c8e:	4a94      	ldr	r2, [pc, #592]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013c90:	f023 0301 	bic.w	r3, r3, #1
20013c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20013c96:	f7ee fb13 	bl	200022c0 <HAL_GetTick>
20013c9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
20013c9c:	e008      	b.n	20013cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20013c9e:	f7ee fb0f 	bl	200022c0 <HAL_GetTick>
20013ca2:	4602      	mov	r2, r0
20013ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013ca6:	1ad3      	subs	r3, r2, r3
20013ca8:	2b02      	cmp	r3, #2
20013caa:	d901      	bls.n	20013cb0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
20013cac:	2303      	movs	r3, #3
20013cae:	e2ed      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
20013cb0:	4b8b      	ldr	r3, [pc, #556]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013cb2:	681b      	ldr	r3, [r3, #0]
20013cb4:	f003 0304 	and.w	r3, r3, #4
20013cb8:	2b00      	cmp	r3, #0
20013cba:	d1f0      	bne.n	20013c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
20013cbc:	687b      	ldr	r3, [r7, #4]
20013cbe:	681b      	ldr	r3, [r3, #0]
20013cc0:	f003 0310 	and.w	r3, r3, #16
20013cc4:	2b00      	cmp	r3, #0
20013cc6:	f000 80a9 	beq.w	20013e1c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
20013cca:	4b85      	ldr	r3, [pc, #532]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013ccc:	691b      	ldr	r3, [r3, #16]
20013cce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20013cd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
20013cd4:	4b82      	ldr	r3, [pc, #520]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20013cd8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
20013cda:	69bb      	ldr	r3, [r7, #24]
20013cdc:	2b08      	cmp	r3, #8
20013cde:	d007      	beq.n	20013cf0 <HAL_RCC_OscConfig+0x308>
20013ce0:	69bb      	ldr	r3, [r7, #24]
20013ce2:	2b18      	cmp	r3, #24
20013ce4:	d13a      	bne.n	20013d5c <HAL_RCC_OscConfig+0x374>
20013ce6:	697b      	ldr	r3, [r7, #20]
20013ce8:	f003 0303 	and.w	r3, r3, #3
20013cec:	2b01      	cmp	r3, #1
20013cee:	d135      	bne.n	20013d5c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
20013cf0:	4b7b      	ldr	r3, [pc, #492]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013cf2:	681b      	ldr	r3, [r3, #0]
20013cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20013cf8:	2b00      	cmp	r3, #0
20013cfa:	d005      	beq.n	20013d08 <HAL_RCC_OscConfig+0x320>
20013cfc:	687b      	ldr	r3, [r7, #4]
20013cfe:	69db      	ldr	r3, [r3, #28]
20013d00:	2b80      	cmp	r3, #128	@ 0x80
20013d02:	d001      	beq.n	20013d08 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
20013d04:	2301      	movs	r3, #1
20013d06:	e2c1      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
20013d08:	f7ee fb74 	bl	200023f4 <HAL_GetREVID>
20013d0c:	4603      	mov	r3, r0
20013d0e:	f241 0203 	movw	r2, #4099	@ 0x1003
20013d12:	4293      	cmp	r3, r2
20013d14:	d817      	bhi.n	20013d46 <HAL_RCC_OscConfig+0x35e>
20013d16:	687b      	ldr	r3, [r7, #4]
20013d18:	6a1b      	ldr	r3, [r3, #32]
20013d1a:	2b20      	cmp	r3, #32
20013d1c:	d108      	bne.n	20013d30 <HAL_RCC_OscConfig+0x348>
20013d1e:	4b70      	ldr	r3, [pc, #448]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d20:	685b      	ldr	r3, [r3, #4]
20013d22:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
20013d26:	4a6e      	ldr	r2, [pc, #440]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20013d2c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
20013d2e:	e075      	b.n	20013e1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
20013d30:	4b6b      	ldr	r3, [pc, #428]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d32:	685b      	ldr	r3, [r3, #4]
20013d34:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
20013d38:	687b      	ldr	r3, [r7, #4]
20013d3a:	6a1b      	ldr	r3, [r3, #32]
20013d3c:	069b      	lsls	r3, r3, #26
20013d3e:	4968      	ldr	r1, [pc, #416]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d40:	4313      	orrs	r3, r2
20013d42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
20013d44:	e06a      	b.n	20013e1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
20013d46:	4b66      	ldr	r3, [pc, #408]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d48:	68db      	ldr	r3, [r3, #12]
20013d4a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
20013d4e:	687b      	ldr	r3, [r7, #4]
20013d50:	6a1b      	ldr	r3, [r3, #32]
20013d52:	061b      	lsls	r3, r3, #24
20013d54:	4962      	ldr	r1, [pc, #392]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d56:	4313      	orrs	r3, r2
20013d58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
20013d5a:	e05f      	b.n	20013e1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
20013d5c:	687b      	ldr	r3, [r7, #4]
20013d5e:	69db      	ldr	r3, [r3, #28]
20013d60:	2b00      	cmp	r3, #0
20013d62:	d042      	beq.n	20013dea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
20013d64:	4b5e      	ldr	r3, [pc, #376]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d66:	681b      	ldr	r3, [r3, #0]
20013d68:	4a5d      	ldr	r2, [pc, #372]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20013d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20013d70:	f7ee faa6 	bl	200022c0 <HAL_GetTick>
20013d74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
20013d76:	e008      	b.n	20013d8a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
20013d78:	f7ee faa2 	bl	200022c0 <HAL_GetTick>
20013d7c:	4602      	mov	r2, r0
20013d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013d80:	1ad3      	subs	r3, r2, r3
20013d82:	2b02      	cmp	r3, #2
20013d84:	d901      	bls.n	20013d8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
20013d86:	2303      	movs	r3, #3
20013d88:	e280      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
20013d8a:	4b55      	ldr	r3, [pc, #340]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013d8c:	681b      	ldr	r3, [r3, #0]
20013d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20013d92:	2b00      	cmp	r3, #0
20013d94:	d0f0      	beq.n	20013d78 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
20013d96:	f7ee fb2d 	bl	200023f4 <HAL_GetREVID>
20013d9a:	4603      	mov	r3, r0
20013d9c:	f241 0203 	movw	r2, #4099	@ 0x1003
20013da0:	4293      	cmp	r3, r2
20013da2:	d817      	bhi.n	20013dd4 <HAL_RCC_OscConfig+0x3ec>
20013da4:	687b      	ldr	r3, [r7, #4]
20013da6:	6a1b      	ldr	r3, [r3, #32]
20013da8:	2b20      	cmp	r3, #32
20013daa:	d108      	bne.n	20013dbe <HAL_RCC_OscConfig+0x3d6>
20013dac:	4b4c      	ldr	r3, [pc, #304]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013dae:	685b      	ldr	r3, [r3, #4]
20013db0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
20013db4:	4a4a      	ldr	r2, [pc, #296]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013db6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
20013dba:	6053      	str	r3, [r2, #4]
20013dbc:	e02e      	b.n	20013e1c <HAL_RCC_OscConfig+0x434>
20013dbe:	4b48      	ldr	r3, [pc, #288]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013dc0:	685b      	ldr	r3, [r3, #4]
20013dc2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
20013dc6:	687b      	ldr	r3, [r7, #4]
20013dc8:	6a1b      	ldr	r3, [r3, #32]
20013dca:	069b      	lsls	r3, r3, #26
20013dcc:	4944      	ldr	r1, [pc, #272]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013dce:	4313      	orrs	r3, r2
20013dd0:	604b      	str	r3, [r1, #4]
20013dd2:	e023      	b.n	20013e1c <HAL_RCC_OscConfig+0x434>
20013dd4:	4b42      	ldr	r3, [pc, #264]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013dd6:	68db      	ldr	r3, [r3, #12]
20013dd8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
20013ddc:	687b      	ldr	r3, [r7, #4]
20013dde:	6a1b      	ldr	r3, [r3, #32]
20013de0:	061b      	lsls	r3, r3, #24
20013de2:	493f      	ldr	r1, [pc, #252]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013de4:	4313      	orrs	r3, r2
20013de6:	60cb      	str	r3, [r1, #12]
20013de8:	e018      	b.n	20013e1c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
20013dea:	4b3d      	ldr	r3, [pc, #244]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013dec:	681b      	ldr	r3, [r3, #0]
20013dee:	4a3c      	ldr	r2, [pc, #240]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
20013df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20013df6:	f7ee fa63 	bl	200022c0 <HAL_GetTick>
20013dfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
20013dfc:	e008      	b.n	20013e10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
20013dfe:	f7ee fa5f 	bl	200022c0 <HAL_GetTick>
20013e02:	4602      	mov	r2, r0
20013e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013e06:	1ad3      	subs	r3, r2, r3
20013e08:	2b02      	cmp	r3, #2
20013e0a:	d901      	bls.n	20013e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
20013e0c:	2303      	movs	r3, #3
20013e0e:	e23d      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
20013e10:	4b33      	ldr	r3, [pc, #204]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013e12:	681b      	ldr	r3, [r3, #0]
20013e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20013e18:	2b00      	cmp	r3, #0
20013e1a:	d1f0      	bne.n	20013dfe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20013e1c:	687b      	ldr	r3, [r7, #4]
20013e1e:	681b      	ldr	r3, [r3, #0]
20013e20:	f003 0308 	and.w	r3, r3, #8
20013e24:	2b00      	cmp	r3, #0
20013e26:	d036      	beq.n	20013e96 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
20013e28:	687b      	ldr	r3, [r7, #4]
20013e2a:	695b      	ldr	r3, [r3, #20]
20013e2c:	2b00      	cmp	r3, #0
20013e2e:	d019      	beq.n	20013e64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20013e30:	4b2b      	ldr	r3, [pc, #172]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20013e34:	4a2a      	ldr	r2, [pc, #168]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013e36:	f043 0301 	orr.w	r3, r3, #1
20013e3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20013e3c:	f7ee fa40 	bl	200022c0 <HAL_GetTick>
20013e40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
20013e42:	e008      	b.n	20013e56 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20013e44:	f7ee fa3c 	bl	200022c0 <HAL_GetTick>
20013e48:	4602      	mov	r2, r0
20013e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013e4c:	1ad3      	subs	r3, r2, r3
20013e4e:	2b02      	cmp	r3, #2
20013e50:	d901      	bls.n	20013e56 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
20013e52:	2303      	movs	r3, #3
20013e54:	e21a      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
20013e56:	4b22      	ldr	r3, [pc, #136]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20013e5a:	f003 0302 	and.w	r3, r3, #2
20013e5e:	2b00      	cmp	r3, #0
20013e60:	d0f0      	beq.n	20013e44 <HAL_RCC_OscConfig+0x45c>
20013e62:	e018      	b.n	20013e96 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20013e64:	4b1e      	ldr	r3, [pc, #120]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20013e68:	4a1d      	ldr	r2, [pc, #116]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013e6a:	f023 0301 	bic.w	r3, r3, #1
20013e6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20013e70:	f7ee fa26 	bl	200022c0 <HAL_GetTick>
20013e74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
20013e76:	e008      	b.n	20013e8a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20013e78:	f7ee fa22 	bl	200022c0 <HAL_GetTick>
20013e7c:	4602      	mov	r2, r0
20013e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013e80:	1ad3      	subs	r3, r2, r3
20013e82:	2b02      	cmp	r3, #2
20013e84:	d901      	bls.n	20013e8a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
20013e86:	2303      	movs	r3, #3
20013e88:	e200      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
20013e8a:	4b15      	ldr	r3, [pc, #84]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20013e8e:	f003 0302 	and.w	r3, r3, #2
20013e92:	2b00      	cmp	r3, #0
20013e94:	d1f0      	bne.n	20013e78 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
20013e96:	687b      	ldr	r3, [r7, #4]
20013e98:	681b      	ldr	r3, [r3, #0]
20013e9a:	f003 0320 	and.w	r3, r3, #32
20013e9e:	2b00      	cmp	r3, #0
20013ea0:	d039      	beq.n	20013f16 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
20013ea2:	687b      	ldr	r3, [r7, #4]
20013ea4:	699b      	ldr	r3, [r3, #24]
20013ea6:	2b00      	cmp	r3, #0
20013ea8:	d01c      	beq.n	20013ee4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
20013eaa:	4b0d      	ldr	r3, [pc, #52]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013eac:	681b      	ldr	r3, [r3, #0]
20013eae:	4a0c      	ldr	r2, [pc, #48]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013eb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
20013eb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
20013eb6:	f7ee fa03 	bl	200022c0 <HAL_GetTick>
20013eba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
20013ebc:	e008      	b.n	20013ed0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
20013ebe:	f7ee f9ff 	bl	200022c0 <HAL_GetTick>
20013ec2:	4602      	mov	r2, r0
20013ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013ec6:	1ad3      	subs	r3, r2, r3
20013ec8:	2b02      	cmp	r3, #2
20013eca:	d901      	bls.n	20013ed0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
20013ecc:	2303      	movs	r3, #3
20013ece:	e1dd      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
20013ed0:	4b03      	ldr	r3, [pc, #12]	@ (20013ee0 <HAL_RCC_OscConfig+0x4f8>)
20013ed2:	681b      	ldr	r3, [r3, #0]
20013ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20013ed8:	2b00      	cmp	r3, #0
20013eda:	d0f0      	beq.n	20013ebe <HAL_RCC_OscConfig+0x4d6>
20013edc:	e01b      	b.n	20013f16 <HAL_RCC_OscConfig+0x52e>
20013ede:	bf00      	nop
20013ee0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
20013ee4:	4b9b      	ldr	r3, [pc, #620]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013ee6:	681b      	ldr	r3, [r3, #0]
20013ee8:	4a9a      	ldr	r2, [pc, #616]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013eea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
20013eee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
20013ef0:	f7ee f9e6 	bl	200022c0 <HAL_GetTick>
20013ef4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
20013ef6:	e008      	b.n	20013f0a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
20013ef8:	f7ee f9e2 	bl	200022c0 <HAL_GetTick>
20013efc:	4602      	mov	r2, r0
20013efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013f00:	1ad3      	subs	r3, r2, r3
20013f02:	2b02      	cmp	r3, #2
20013f04:	d901      	bls.n	20013f0a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
20013f06:	2303      	movs	r3, #3
20013f08:	e1c0      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
20013f0a:	4b92      	ldr	r3, [pc, #584]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f0c:	681b      	ldr	r3, [r3, #0]
20013f0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
20013f12:	2b00      	cmp	r3, #0
20013f14:	d1f0      	bne.n	20013ef8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20013f16:	687b      	ldr	r3, [r7, #4]
20013f18:	681b      	ldr	r3, [r3, #0]
20013f1a:	f003 0304 	and.w	r3, r3, #4
20013f1e:	2b00      	cmp	r3, #0
20013f20:	f000 8081 	beq.w	20014026 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
20013f24:	4b8c      	ldr	r3, [pc, #560]	@ (20014158 <HAL_RCC_OscConfig+0x770>)
20013f26:	681b      	ldr	r3, [r3, #0]
20013f28:	4a8b      	ldr	r2, [pc, #556]	@ (20014158 <HAL_RCC_OscConfig+0x770>)
20013f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20013f2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
20013f30:	f7ee f9c6 	bl	200022c0 <HAL_GetTick>
20013f34:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
20013f36:	e008      	b.n	20013f4a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20013f38:	f7ee f9c2 	bl	200022c0 <HAL_GetTick>
20013f3c:	4602      	mov	r2, r0
20013f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013f40:	1ad3      	subs	r3, r2, r3
20013f42:	2b64      	cmp	r3, #100	@ 0x64
20013f44:	d901      	bls.n	20013f4a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
20013f46:	2303      	movs	r3, #3
20013f48:	e1a0      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
20013f4a:	4b83      	ldr	r3, [pc, #524]	@ (20014158 <HAL_RCC_OscConfig+0x770>)
20013f4c:	681b      	ldr	r3, [r3, #0]
20013f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20013f52:	2b00      	cmp	r3, #0
20013f54:	d0f0      	beq.n	20013f38 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20013f56:	687b      	ldr	r3, [r7, #4]
20013f58:	689b      	ldr	r3, [r3, #8]
20013f5a:	2b01      	cmp	r3, #1
20013f5c:	d106      	bne.n	20013f6c <HAL_RCC_OscConfig+0x584>
20013f5e:	4b7d      	ldr	r3, [pc, #500]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20013f62:	4a7c      	ldr	r2, [pc, #496]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f64:	f043 0301 	orr.w	r3, r3, #1
20013f68:	6713      	str	r3, [r2, #112]	@ 0x70
20013f6a:	e02d      	b.n	20013fc8 <HAL_RCC_OscConfig+0x5e0>
20013f6c:	687b      	ldr	r3, [r7, #4]
20013f6e:	689b      	ldr	r3, [r3, #8]
20013f70:	2b00      	cmp	r3, #0
20013f72:	d10c      	bne.n	20013f8e <HAL_RCC_OscConfig+0x5a6>
20013f74:	4b77      	ldr	r3, [pc, #476]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20013f78:	4a76      	ldr	r2, [pc, #472]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f7a:	f023 0301 	bic.w	r3, r3, #1
20013f7e:	6713      	str	r3, [r2, #112]	@ 0x70
20013f80:	4b74      	ldr	r3, [pc, #464]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20013f84:	4a73      	ldr	r2, [pc, #460]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f86:	f023 0304 	bic.w	r3, r3, #4
20013f8a:	6713      	str	r3, [r2, #112]	@ 0x70
20013f8c:	e01c      	b.n	20013fc8 <HAL_RCC_OscConfig+0x5e0>
20013f8e:	687b      	ldr	r3, [r7, #4]
20013f90:	689b      	ldr	r3, [r3, #8]
20013f92:	2b05      	cmp	r3, #5
20013f94:	d10c      	bne.n	20013fb0 <HAL_RCC_OscConfig+0x5c8>
20013f96:	4b6f      	ldr	r3, [pc, #444]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20013f9a:	4a6e      	ldr	r2, [pc, #440]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013f9c:	f043 0304 	orr.w	r3, r3, #4
20013fa0:	6713      	str	r3, [r2, #112]	@ 0x70
20013fa2:	4b6c      	ldr	r3, [pc, #432]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20013fa6:	4a6b      	ldr	r2, [pc, #428]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013fa8:	f043 0301 	orr.w	r3, r3, #1
20013fac:	6713      	str	r3, [r2, #112]	@ 0x70
20013fae:	e00b      	b.n	20013fc8 <HAL_RCC_OscConfig+0x5e0>
20013fb0:	4b68      	ldr	r3, [pc, #416]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20013fb4:	4a67      	ldr	r2, [pc, #412]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013fb6:	f023 0301 	bic.w	r3, r3, #1
20013fba:	6713      	str	r3, [r2, #112]	@ 0x70
20013fbc:	4b65      	ldr	r3, [pc, #404]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20013fc0:	4a64      	ldr	r2, [pc, #400]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013fc2:	f023 0304 	bic.w	r3, r3, #4
20013fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20013fc8:	687b      	ldr	r3, [r7, #4]
20013fca:	689b      	ldr	r3, [r3, #8]
20013fcc:	2b00      	cmp	r3, #0
20013fce:	d015      	beq.n	20013ffc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20013fd0:	f7ee f976 	bl	200022c0 <HAL_GetTick>
20013fd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
20013fd6:	e00a      	b.n	20013fee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20013fd8:	f7ee f972 	bl	200022c0 <HAL_GetTick>
20013fdc:	4602      	mov	r2, r0
20013fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20013fe0:	1ad3      	subs	r3, r2, r3
20013fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
20013fe6:	4293      	cmp	r3, r2
20013fe8:	d901      	bls.n	20013fee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
20013fea:	2303      	movs	r3, #3
20013fec:	e14e      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
20013fee:	4b59      	ldr	r3, [pc, #356]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20013ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20013ff2:	f003 0302 	and.w	r3, r3, #2
20013ff6:	2b00      	cmp	r3, #0
20013ff8:	d0ee      	beq.n	20013fd8 <HAL_RCC_OscConfig+0x5f0>
20013ffa:	e014      	b.n	20014026 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20013ffc:	f7ee f960 	bl	200022c0 <HAL_GetTick>
20014000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
20014002:	e00a      	b.n	2001401a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20014004:	f7ee f95c 	bl	200022c0 <HAL_GetTick>
20014008:	4602      	mov	r2, r0
2001400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001400c:	1ad3      	subs	r3, r2, r3
2001400e:	f241 3288 	movw	r2, #5000	@ 0x1388
20014012:	4293      	cmp	r3, r2
20014014:	d901      	bls.n	2001401a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
20014016:	2303      	movs	r3, #3
20014018:	e138      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2001401a:	4b4e      	ldr	r3, [pc, #312]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
2001401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2001401e:	f003 0302 	and.w	r3, r3, #2
20014022:	2b00      	cmp	r3, #0
20014024:	d1ee      	bne.n	20014004 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20014026:	687b      	ldr	r3, [r7, #4]
20014028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2001402a:	2b00      	cmp	r3, #0
2001402c:	f000 812d 	beq.w	2001428a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
20014030:	4b48      	ldr	r3, [pc, #288]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014032:	691b      	ldr	r3, [r3, #16]
20014034:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20014038:	2b18      	cmp	r3, #24
2001403a:	f000 80bd 	beq.w	200141b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2001403e:	687b      	ldr	r3, [r7, #4]
20014040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20014042:	2b02      	cmp	r3, #2
20014044:	f040 809e 	bne.w	20014184 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20014048:	4b42      	ldr	r3, [pc, #264]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
2001404a:	681b      	ldr	r3, [r3, #0]
2001404c:	4a41      	ldr	r2, [pc, #260]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
2001404e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20014052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20014054:	f7ee f934 	bl	200022c0 <HAL_GetTick>
20014058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2001405a:	e008      	b.n	2001406e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2001405c:	f7ee f930 	bl	200022c0 <HAL_GetTick>
20014060:	4602      	mov	r2, r0
20014062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20014064:	1ad3      	subs	r3, r2, r3
20014066:	2b02      	cmp	r3, #2
20014068:	d901      	bls.n	2001406e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
2001406a:	2303      	movs	r3, #3
2001406c:	e10e      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2001406e:	4b39      	ldr	r3, [pc, #228]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014070:	681b      	ldr	r3, [r3, #0]
20014072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20014076:	2b00      	cmp	r3, #0
20014078:	d1f0      	bne.n	2001405c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2001407a:	4b36      	ldr	r3, [pc, #216]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
2001407c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
2001407e:	4b37      	ldr	r3, [pc, #220]	@ (2001415c <HAL_RCC_OscConfig+0x774>)
20014080:	4013      	ands	r3, r2
20014082:	687a      	ldr	r2, [r7, #4]
20014084:	6a91      	ldr	r1, [r2, #40]	@ 0x28
20014086:	687a      	ldr	r2, [r7, #4]
20014088:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
2001408a:	0112      	lsls	r2, r2, #4
2001408c:	430a      	orrs	r2, r1
2001408e:	4931      	ldr	r1, [pc, #196]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014090:	4313      	orrs	r3, r2
20014092:	628b      	str	r3, [r1, #40]	@ 0x28
20014094:	687b      	ldr	r3, [r7, #4]
20014096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20014098:	3b01      	subs	r3, #1
2001409a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2001409e:	687b      	ldr	r3, [r7, #4]
200140a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200140a2:	3b01      	subs	r3, #1
200140a4:	025b      	lsls	r3, r3, #9
200140a6:	b29b      	uxth	r3, r3
200140a8:	431a      	orrs	r2, r3
200140aa:	687b      	ldr	r3, [r7, #4]
200140ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200140ae:	3b01      	subs	r3, #1
200140b0:	041b      	lsls	r3, r3, #16
200140b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
200140b6:	431a      	orrs	r2, r3
200140b8:	687b      	ldr	r3, [r7, #4]
200140ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
200140bc:	3b01      	subs	r3, #1
200140be:	061b      	lsls	r3, r3, #24
200140c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
200140c4:	4923      	ldr	r1, [pc, #140]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
200140c6:	4313      	orrs	r3, r2
200140c8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
200140ca:	4b22      	ldr	r3, [pc, #136]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
200140cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200140ce:	4a21      	ldr	r2, [pc, #132]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
200140d0:	f023 0301 	bic.w	r3, r3, #1
200140d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
200140d6:	4b1f      	ldr	r3, [pc, #124]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
200140d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
200140da:	4b21      	ldr	r3, [pc, #132]	@ (20014160 <HAL_RCC_OscConfig+0x778>)
200140dc:	4013      	ands	r3, r2
200140de:	687a      	ldr	r2, [r7, #4]
200140e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
200140e2:	00d2      	lsls	r2, r2, #3
200140e4:	491b      	ldr	r1, [pc, #108]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
200140e6:	4313      	orrs	r3, r2
200140e8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
200140ea:	4b1a      	ldr	r3, [pc, #104]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
200140ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200140ee:	f023 020c 	bic.w	r2, r3, #12
200140f2:	687b      	ldr	r3, [r7, #4]
200140f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200140f6:	4917      	ldr	r1, [pc, #92]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
200140f8:	4313      	orrs	r3, r2
200140fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
200140fc:	4b15      	ldr	r3, [pc, #84]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
200140fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014100:	f023 0202 	bic.w	r2, r3, #2
20014104:	687b      	ldr	r3, [r7, #4]
20014106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20014108:	4912      	ldr	r1, [pc, #72]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
2001410a:	4313      	orrs	r3, r2
2001410c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
2001410e:	4b11      	ldr	r3, [pc, #68]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014112:	4a10      	ldr	r2, [pc, #64]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20014118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2001411a:	4b0e      	ldr	r3, [pc, #56]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
2001411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2001411e:	4a0d      	ldr	r2, [pc, #52]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20014124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
20014126:	4b0b      	ldr	r3, [pc, #44]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2001412a:	4a0a      	ldr	r2, [pc, #40]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
2001412c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20014130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
20014132:	4b08      	ldr	r3, [pc, #32]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014136:	4a07      	ldr	r2, [pc, #28]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014138:	f043 0301 	orr.w	r3, r3, #1
2001413c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2001413e:	4b05      	ldr	r3, [pc, #20]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014140:	681b      	ldr	r3, [r3, #0]
20014142:	4a04      	ldr	r2, [pc, #16]	@ (20014154 <HAL_RCC_OscConfig+0x76c>)
20014144:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20014148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2001414a:	f7ee f8b9 	bl	200022c0 <HAL_GetTick>
2001414e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
20014150:	e011      	b.n	20014176 <HAL_RCC_OscConfig+0x78e>
20014152:	bf00      	nop
20014154:	58024400 	.word	0x58024400
20014158:	58024800 	.word	0x58024800
2001415c:	fffffc0c 	.word	0xfffffc0c
20014160:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20014164:	f7ee f8ac 	bl	200022c0 <HAL_GetTick>
20014168:	4602      	mov	r2, r0
2001416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001416c:	1ad3      	subs	r3, r2, r3
2001416e:	2b02      	cmp	r3, #2
20014170:	d901      	bls.n	20014176 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
20014172:	2303      	movs	r3, #3
20014174:	e08a      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
20014176:	4b47      	ldr	r3, [pc, #284]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
20014178:	681b      	ldr	r3, [r3, #0]
2001417a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2001417e:	2b00      	cmp	r3, #0
20014180:	d0f0      	beq.n	20014164 <HAL_RCC_OscConfig+0x77c>
20014182:	e082      	b.n	2001428a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20014184:	4b43      	ldr	r3, [pc, #268]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
20014186:	681b      	ldr	r3, [r3, #0]
20014188:	4a42      	ldr	r2, [pc, #264]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
2001418a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
2001418e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20014190:	f7ee f896 	bl	200022c0 <HAL_GetTick>
20014194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
20014196:	e008      	b.n	200141aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20014198:	f7ee f892 	bl	200022c0 <HAL_GetTick>
2001419c:	4602      	mov	r2, r0
2001419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200141a0:	1ad3      	subs	r3, r2, r3
200141a2:	2b02      	cmp	r3, #2
200141a4:	d901      	bls.n	200141aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
200141a6:	2303      	movs	r3, #3
200141a8:	e070      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
200141aa:	4b3a      	ldr	r3, [pc, #232]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
200141ac:	681b      	ldr	r3, [r3, #0]
200141ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200141b2:	2b00      	cmp	r3, #0
200141b4:	d1f0      	bne.n	20014198 <HAL_RCC_OscConfig+0x7b0>
200141b6:	e068      	b.n	2001428a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
200141b8:	4b36      	ldr	r3, [pc, #216]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
200141ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200141bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
200141be:	4b35      	ldr	r3, [pc, #212]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
200141c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200141c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200141c4:	687b      	ldr	r3, [r7, #4]
200141c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200141c8:	2b01      	cmp	r3, #1
200141ca:	d031      	beq.n	20014230 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200141cc:	693b      	ldr	r3, [r7, #16]
200141ce:	f003 0203 	and.w	r2, r3, #3
200141d2:	687b      	ldr	r3, [r7, #4]
200141d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200141d6:	429a      	cmp	r2, r3
200141d8:	d12a      	bne.n	20014230 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
200141da:	693b      	ldr	r3, [r7, #16]
200141dc:	091b      	lsrs	r3, r3, #4
200141de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
200141e2:	687b      	ldr	r3, [r7, #4]
200141e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200141e6:	429a      	cmp	r2, r3
200141e8:	d122      	bne.n	20014230 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
200141ea:	68fb      	ldr	r3, [r7, #12]
200141ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
200141f0:	687b      	ldr	r3, [r7, #4]
200141f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200141f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
200141f6:	429a      	cmp	r2, r3
200141f8:	d11a      	bne.n	20014230 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
200141fa:	68fb      	ldr	r3, [r7, #12]
200141fc:	0a5b      	lsrs	r3, r3, #9
200141fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
20014202:	687b      	ldr	r3, [r7, #4]
20014204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20014206:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
20014208:	429a      	cmp	r2, r3
2001420a:	d111      	bne.n	20014230 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2001420c:	68fb      	ldr	r3, [r7, #12]
2001420e:	0c1b      	lsrs	r3, r3, #16
20014210:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
20014214:	687b      	ldr	r3, [r7, #4]
20014216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20014218:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2001421a:	429a      	cmp	r2, r3
2001421c:	d108      	bne.n	20014230 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
2001421e:	68fb      	ldr	r3, [r7, #12]
20014220:	0e1b      	lsrs	r3, r3, #24
20014222:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
20014226:	687b      	ldr	r3, [r7, #4]
20014228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2001422a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2001422c:	429a      	cmp	r2, r3
2001422e:	d001      	beq.n	20014234 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
20014230:	2301      	movs	r3, #1
20014232:	e02b      	b.n	2001428c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
20014234:	4b17      	ldr	r3, [pc, #92]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
20014236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20014238:	08db      	lsrs	r3, r3, #3
2001423a:	f3c3 030c 	ubfx	r3, r3, #0, #13
2001423e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
20014240:	687b      	ldr	r3, [r7, #4]
20014242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20014244:	693a      	ldr	r2, [r7, #16]
20014246:	429a      	cmp	r2, r3
20014248:	d01f      	beq.n	2001428a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
2001424a:	4b12      	ldr	r3, [pc, #72]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
2001424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2001424e:	4a11      	ldr	r2, [pc, #68]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
20014250:	f023 0301 	bic.w	r3, r3, #1
20014254:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
20014256:	f7ee f833 	bl	200022c0 <HAL_GetTick>
2001425a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
2001425c:	bf00      	nop
2001425e:	f7ee f82f 	bl	200022c0 <HAL_GetTick>
20014262:	4602      	mov	r2, r0
20014264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20014266:	4293      	cmp	r3, r2
20014268:	d0f9      	beq.n	2001425e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2001426a:	4b0a      	ldr	r3, [pc, #40]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
2001426c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2001426e:	4b0a      	ldr	r3, [pc, #40]	@ (20014298 <HAL_RCC_OscConfig+0x8b0>)
20014270:	4013      	ands	r3, r2
20014272:	687a      	ldr	r2, [r7, #4]
20014274:	6c92      	ldr	r2, [r2, #72]	@ 0x48
20014276:	00d2      	lsls	r2, r2, #3
20014278:	4906      	ldr	r1, [pc, #24]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
2001427a:	4313      	orrs	r3, r2
2001427c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
2001427e:	4b05      	ldr	r3, [pc, #20]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
20014280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014282:	4a04      	ldr	r2, [pc, #16]	@ (20014294 <HAL_RCC_OscConfig+0x8ac>)
20014284:	f043 0301 	orr.w	r3, r3, #1
20014288:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
2001428a:	2300      	movs	r3, #0
}
2001428c:	4618      	mov	r0, r3
2001428e:	3730      	adds	r7, #48	@ 0x30
20014290:	46bd      	mov	sp, r7
20014292:	bd80      	pop	{r7, pc}
20014294:	58024400 	.word	0x58024400
20014298:	ffff0007 	.word	0xffff0007

2001429c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2001429c:	b580      	push	{r7, lr}
2001429e:	b086      	sub	sp, #24
200142a0:	af00      	add	r7, sp, #0
200142a2:	6078      	str	r0, [r7, #4]
200142a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
200142a6:	687b      	ldr	r3, [r7, #4]
200142a8:	2b00      	cmp	r3, #0
200142aa:	d101      	bne.n	200142b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
200142ac:	2301      	movs	r3, #1
200142ae:	e19c      	b.n	200145ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
200142b0:	4b8a      	ldr	r3, [pc, #552]	@ (200144dc <HAL_RCC_ClockConfig+0x240>)
200142b2:	681b      	ldr	r3, [r3, #0]
200142b4:	f003 030f 	and.w	r3, r3, #15
200142b8:	683a      	ldr	r2, [r7, #0]
200142ba:	429a      	cmp	r2, r3
200142bc:	d910      	bls.n	200142e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200142be:	4b87      	ldr	r3, [pc, #540]	@ (200144dc <HAL_RCC_ClockConfig+0x240>)
200142c0:	681b      	ldr	r3, [r3, #0]
200142c2:	f023 020f 	bic.w	r2, r3, #15
200142c6:	4985      	ldr	r1, [pc, #532]	@ (200144dc <HAL_RCC_ClockConfig+0x240>)
200142c8:	683b      	ldr	r3, [r7, #0]
200142ca:	4313      	orrs	r3, r2
200142cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
200142ce:	4b83      	ldr	r3, [pc, #524]	@ (200144dc <HAL_RCC_ClockConfig+0x240>)
200142d0:	681b      	ldr	r3, [r3, #0]
200142d2:	f003 030f 	and.w	r3, r3, #15
200142d6:	683a      	ldr	r2, [r7, #0]
200142d8:	429a      	cmp	r2, r3
200142da:	d001      	beq.n	200142e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
200142dc:	2301      	movs	r3, #1
200142de:	e184      	b.n	200145ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
200142e0:	687b      	ldr	r3, [r7, #4]
200142e2:	681b      	ldr	r3, [r3, #0]
200142e4:	f003 0304 	and.w	r3, r3, #4
200142e8:	2b00      	cmp	r3, #0
200142ea:	d010      	beq.n	2001430e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
200142ec:	687b      	ldr	r3, [r7, #4]
200142ee:	691a      	ldr	r2, [r3, #16]
200142f0:	4b7b      	ldr	r3, [pc, #492]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200142f2:	699b      	ldr	r3, [r3, #24]
200142f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
200142f8:	429a      	cmp	r2, r3
200142fa:	d908      	bls.n	2001430e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
200142fc:	4b78      	ldr	r3, [pc, #480]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200142fe:	699b      	ldr	r3, [r3, #24]
20014300:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
20014304:	687b      	ldr	r3, [r7, #4]
20014306:	691b      	ldr	r3, [r3, #16]
20014308:	4975      	ldr	r1, [pc, #468]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001430a:	4313      	orrs	r3, r2
2001430c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2001430e:	687b      	ldr	r3, [r7, #4]
20014310:	681b      	ldr	r3, [r3, #0]
20014312:	f003 0308 	and.w	r3, r3, #8
20014316:	2b00      	cmp	r3, #0
20014318:	d010      	beq.n	2001433c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2001431a:	687b      	ldr	r3, [r7, #4]
2001431c:	695a      	ldr	r2, [r3, #20]
2001431e:	4b70      	ldr	r3, [pc, #448]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
20014320:	69db      	ldr	r3, [r3, #28]
20014322:	f003 0370 	and.w	r3, r3, #112	@ 0x70
20014326:	429a      	cmp	r2, r3
20014328:	d908      	bls.n	2001433c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2001432a:	4b6d      	ldr	r3, [pc, #436]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001432c:	69db      	ldr	r3, [r3, #28]
2001432e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
20014332:	687b      	ldr	r3, [r7, #4]
20014334:	695b      	ldr	r3, [r3, #20]
20014336:	496a      	ldr	r1, [pc, #424]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
20014338:	4313      	orrs	r3, r2
2001433a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2001433c:	687b      	ldr	r3, [r7, #4]
2001433e:	681b      	ldr	r3, [r3, #0]
20014340:	f003 0310 	and.w	r3, r3, #16
20014344:	2b00      	cmp	r3, #0
20014346:	d010      	beq.n	2001436a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
20014348:	687b      	ldr	r3, [r7, #4]
2001434a:	699a      	ldr	r2, [r3, #24]
2001434c:	4b64      	ldr	r3, [pc, #400]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001434e:	69db      	ldr	r3, [r3, #28]
20014350:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
20014354:	429a      	cmp	r2, r3
20014356:	d908      	bls.n	2001436a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
20014358:	4b61      	ldr	r3, [pc, #388]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001435a:	69db      	ldr	r3, [r3, #28]
2001435c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
20014360:	687b      	ldr	r3, [r7, #4]
20014362:	699b      	ldr	r3, [r3, #24]
20014364:	495e      	ldr	r1, [pc, #376]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
20014366:	4313      	orrs	r3, r2
20014368:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2001436a:	687b      	ldr	r3, [r7, #4]
2001436c:	681b      	ldr	r3, [r3, #0]
2001436e:	f003 0320 	and.w	r3, r3, #32
20014372:	2b00      	cmp	r3, #0
20014374:	d010      	beq.n	20014398 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
20014376:	687b      	ldr	r3, [r7, #4]
20014378:	69da      	ldr	r2, [r3, #28]
2001437a:	4b59      	ldr	r3, [pc, #356]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001437c:	6a1b      	ldr	r3, [r3, #32]
2001437e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
20014382:	429a      	cmp	r2, r3
20014384:	d908      	bls.n	20014398 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
20014386:	4b56      	ldr	r3, [pc, #344]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
20014388:	6a1b      	ldr	r3, [r3, #32]
2001438a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
2001438e:	687b      	ldr	r3, [r7, #4]
20014390:	69db      	ldr	r3, [r3, #28]
20014392:	4953      	ldr	r1, [pc, #332]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
20014394:	4313      	orrs	r3, r2
20014396:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20014398:	687b      	ldr	r3, [r7, #4]
2001439a:	681b      	ldr	r3, [r3, #0]
2001439c:	f003 0302 	and.w	r3, r3, #2
200143a0:	2b00      	cmp	r3, #0
200143a2:	d010      	beq.n	200143c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
200143a4:	687b      	ldr	r3, [r7, #4]
200143a6:	68da      	ldr	r2, [r3, #12]
200143a8:	4b4d      	ldr	r3, [pc, #308]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200143aa:	699b      	ldr	r3, [r3, #24]
200143ac:	f003 030f 	and.w	r3, r3, #15
200143b0:	429a      	cmp	r2, r3
200143b2:	d908      	bls.n	200143c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
200143b4:	4b4a      	ldr	r3, [pc, #296]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200143b6:	699b      	ldr	r3, [r3, #24]
200143b8:	f023 020f 	bic.w	r2, r3, #15
200143bc:	687b      	ldr	r3, [r7, #4]
200143be:	68db      	ldr	r3, [r3, #12]
200143c0:	4947      	ldr	r1, [pc, #284]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200143c2:	4313      	orrs	r3, r2
200143c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
200143c6:	687b      	ldr	r3, [r7, #4]
200143c8:	681b      	ldr	r3, [r3, #0]
200143ca:	f003 0301 	and.w	r3, r3, #1
200143ce:	2b00      	cmp	r3, #0
200143d0:	d055      	beq.n	2001447e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
200143d2:	4b43      	ldr	r3, [pc, #268]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200143d4:	699b      	ldr	r3, [r3, #24]
200143d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
200143da:	687b      	ldr	r3, [r7, #4]
200143dc:	689b      	ldr	r3, [r3, #8]
200143de:	4940      	ldr	r1, [pc, #256]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200143e0:	4313      	orrs	r3, r2
200143e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
200143e4:	687b      	ldr	r3, [r7, #4]
200143e6:	685b      	ldr	r3, [r3, #4]
200143e8:	2b02      	cmp	r3, #2
200143ea:	d107      	bne.n	200143fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
200143ec:	4b3c      	ldr	r3, [pc, #240]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200143ee:	681b      	ldr	r3, [r3, #0]
200143f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200143f4:	2b00      	cmp	r3, #0
200143f6:	d121      	bne.n	2001443c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
200143f8:	2301      	movs	r3, #1
200143fa:	e0f6      	b.n	200145ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
200143fc:	687b      	ldr	r3, [r7, #4]
200143fe:	685b      	ldr	r3, [r3, #4]
20014400:	2b03      	cmp	r3, #3
20014402:	d107      	bne.n	20014414 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
20014404:	4b36      	ldr	r3, [pc, #216]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
20014406:	681b      	ldr	r3, [r3, #0]
20014408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2001440c:	2b00      	cmp	r3, #0
2001440e:	d115      	bne.n	2001443c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
20014410:	2301      	movs	r3, #1
20014412:	e0ea      	b.n	200145ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
20014414:	687b      	ldr	r3, [r7, #4]
20014416:	685b      	ldr	r3, [r3, #4]
20014418:	2b01      	cmp	r3, #1
2001441a:	d107      	bne.n	2001442c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2001441c:	4b30      	ldr	r3, [pc, #192]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001441e:	681b      	ldr	r3, [r3, #0]
20014420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20014424:	2b00      	cmp	r3, #0
20014426:	d109      	bne.n	2001443c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
20014428:	2301      	movs	r3, #1
2001442a:	e0de      	b.n	200145ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2001442c:	4b2c      	ldr	r3, [pc, #176]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001442e:	681b      	ldr	r3, [r3, #0]
20014430:	f003 0304 	and.w	r3, r3, #4
20014434:	2b00      	cmp	r3, #0
20014436:	d101      	bne.n	2001443c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
20014438:	2301      	movs	r3, #1
2001443a:	e0d6      	b.n	200145ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2001443c:	4b28      	ldr	r3, [pc, #160]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001443e:	691b      	ldr	r3, [r3, #16]
20014440:	f023 0207 	bic.w	r2, r3, #7
20014444:	687b      	ldr	r3, [r7, #4]
20014446:	685b      	ldr	r3, [r3, #4]
20014448:	4925      	ldr	r1, [pc, #148]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001444a:	4313      	orrs	r3, r2
2001444c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2001444e:	f7ed ff37 	bl	200022c0 <HAL_GetTick>
20014452:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20014454:	e00a      	b.n	2001446c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20014456:	f7ed ff33 	bl	200022c0 <HAL_GetTick>
2001445a:	4602      	mov	r2, r0
2001445c:	697b      	ldr	r3, [r7, #20]
2001445e:	1ad3      	subs	r3, r2, r3
20014460:	f241 3288 	movw	r2, #5000	@ 0x1388
20014464:	4293      	cmp	r3, r2
20014466:	d901      	bls.n	2001446c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
20014468:	2303      	movs	r3, #3
2001446a:	e0be      	b.n	200145ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2001446c:	4b1c      	ldr	r3, [pc, #112]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001446e:	691b      	ldr	r3, [r3, #16]
20014470:	f003 0238 	and.w	r2, r3, #56	@ 0x38
20014474:	687b      	ldr	r3, [r7, #4]
20014476:	685b      	ldr	r3, [r3, #4]
20014478:	00db      	lsls	r3, r3, #3
2001447a:	429a      	cmp	r2, r3
2001447c:	d1eb      	bne.n	20014456 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2001447e:	687b      	ldr	r3, [r7, #4]
20014480:	681b      	ldr	r3, [r3, #0]
20014482:	f003 0302 	and.w	r3, r3, #2
20014486:	2b00      	cmp	r3, #0
20014488:	d010      	beq.n	200144ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
2001448a:	687b      	ldr	r3, [r7, #4]
2001448c:	68da      	ldr	r2, [r3, #12]
2001448e:	4b14      	ldr	r3, [pc, #80]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
20014490:	699b      	ldr	r3, [r3, #24]
20014492:	f003 030f 	and.w	r3, r3, #15
20014496:	429a      	cmp	r2, r3
20014498:	d208      	bcs.n	200144ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2001449a:	4b11      	ldr	r3, [pc, #68]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
2001449c:	699b      	ldr	r3, [r3, #24]
2001449e:	f023 020f 	bic.w	r2, r3, #15
200144a2:	687b      	ldr	r3, [r7, #4]
200144a4:	68db      	ldr	r3, [r3, #12]
200144a6:	490e      	ldr	r1, [pc, #56]	@ (200144e0 <HAL_RCC_ClockConfig+0x244>)
200144a8:	4313      	orrs	r3, r2
200144aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
200144ac:	4b0b      	ldr	r3, [pc, #44]	@ (200144dc <HAL_RCC_ClockConfig+0x240>)
200144ae:	681b      	ldr	r3, [r3, #0]
200144b0:	f003 030f 	and.w	r3, r3, #15
200144b4:	683a      	ldr	r2, [r7, #0]
200144b6:	429a      	cmp	r2, r3
200144b8:	d214      	bcs.n	200144e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200144ba:	4b08      	ldr	r3, [pc, #32]	@ (200144dc <HAL_RCC_ClockConfig+0x240>)
200144bc:	681b      	ldr	r3, [r3, #0]
200144be:	f023 020f 	bic.w	r2, r3, #15
200144c2:	4906      	ldr	r1, [pc, #24]	@ (200144dc <HAL_RCC_ClockConfig+0x240>)
200144c4:	683b      	ldr	r3, [r7, #0]
200144c6:	4313      	orrs	r3, r2
200144c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
200144ca:	4b04      	ldr	r3, [pc, #16]	@ (200144dc <HAL_RCC_ClockConfig+0x240>)
200144cc:	681b      	ldr	r3, [r3, #0]
200144ce:	f003 030f 	and.w	r3, r3, #15
200144d2:	683a      	ldr	r2, [r7, #0]
200144d4:	429a      	cmp	r2, r3
200144d6:	d005      	beq.n	200144e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
200144d8:	2301      	movs	r3, #1
200144da:	e086      	b.n	200145ea <HAL_RCC_ClockConfig+0x34e>
200144dc:	52002000 	.word	0x52002000
200144e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
200144e4:	687b      	ldr	r3, [r7, #4]
200144e6:	681b      	ldr	r3, [r3, #0]
200144e8:	f003 0304 	and.w	r3, r3, #4
200144ec:	2b00      	cmp	r3, #0
200144ee:	d010      	beq.n	20014512 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
200144f0:	687b      	ldr	r3, [r7, #4]
200144f2:	691a      	ldr	r2, [r3, #16]
200144f4:	4b3f      	ldr	r3, [pc, #252]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
200144f6:	699b      	ldr	r3, [r3, #24]
200144f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
200144fc:	429a      	cmp	r2, r3
200144fe:	d208      	bcs.n	20014512 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
20014500:	4b3c      	ldr	r3, [pc, #240]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
20014502:	699b      	ldr	r3, [r3, #24]
20014504:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
20014508:	687b      	ldr	r3, [r7, #4]
2001450a:	691b      	ldr	r3, [r3, #16]
2001450c:	4939      	ldr	r1, [pc, #228]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
2001450e:	4313      	orrs	r3, r2
20014510:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20014512:	687b      	ldr	r3, [r7, #4]
20014514:	681b      	ldr	r3, [r3, #0]
20014516:	f003 0308 	and.w	r3, r3, #8
2001451a:	2b00      	cmp	r3, #0
2001451c:	d010      	beq.n	20014540 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2001451e:	687b      	ldr	r3, [r7, #4]
20014520:	695a      	ldr	r2, [r3, #20]
20014522:	4b34      	ldr	r3, [pc, #208]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
20014524:	69db      	ldr	r3, [r3, #28]
20014526:	f003 0370 	and.w	r3, r3, #112	@ 0x70
2001452a:	429a      	cmp	r2, r3
2001452c:	d208      	bcs.n	20014540 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2001452e:	4b31      	ldr	r3, [pc, #196]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
20014530:	69db      	ldr	r3, [r3, #28]
20014532:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
20014536:	687b      	ldr	r3, [r7, #4]
20014538:	695b      	ldr	r3, [r3, #20]
2001453a:	492e      	ldr	r1, [pc, #184]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
2001453c:	4313      	orrs	r3, r2
2001453e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20014540:	687b      	ldr	r3, [r7, #4]
20014542:	681b      	ldr	r3, [r3, #0]
20014544:	f003 0310 	and.w	r3, r3, #16
20014548:	2b00      	cmp	r3, #0
2001454a:	d010      	beq.n	2001456e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2001454c:	687b      	ldr	r3, [r7, #4]
2001454e:	699a      	ldr	r2, [r3, #24]
20014550:	4b28      	ldr	r3, [pc, #160]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
20014552:	69db      	ldr	r3, [r3, #28]
20014554:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
20014558:	429a      	cmp	r2, r3
2001455a:	d208      	bcs.n	2001456e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2001455c:	4b25      	ldr	r3, [pc, #148]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
2001455e:	69db      	ldr	r3, [r3, #28]
20014560:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
20014564:	687b      	ldr	r3, [r7, #4]
20014566:	699b      	ldr	r3, [r3, #24]
20014568:	4922      	ldr	r1, [pc, #136]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
2001456a:	4313      	orrs	r3, r2
2001456c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2001456e:	687b      	ldr	r3, [r7, #4]
20014570:	681b      	ldr	r3, [r3, #0]
20014572:	f003 0320 	and.w	r3, r3, #32
20014576:	2b00      	cmp	r3, #0
20014578:	d010      	beq.n	2001459c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
2001457a:	687b      	ldr	r3, [r7, #4]
2001457c:	69da      	ldr	r2, [r3, #28]
2001457e:	4b1d      	ldr	r3, [pc, #116]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
20014580:	6a1b      	ldr	r3, [r3, #32]
20014582:	f003 0370 	and.w	r3, r3, #112	@ 0x70
20014586:	429a      	cmp	r2, r3
20014588:	d208      	bcs.n	2001459c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2001458a:	4b1a      	ldr	r3, [pc, #104]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
2001458c:	6a1b      	ldr	r3, [r3, #32]
2001458e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
20014592:	687b      	ldr	r3, [r7, #4]
20014594:	69db      	ldr	r3, [r3, #28]
20014596:	4917      	ldr	r1, [pc, #92]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
20014598:	4313      	orrs	r3, r2
2001459a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2001459c:	f000 f8be 	bl	2001471c <HAL_RCC_GetSysClockFreq>
200145a0:	4602      	mov	r2, r0
200145a2:	4b14      	ldr	r3, [pc, #80]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
200145a4:	699b      	ldr	r3, [r3, #24]
200145a6:	0a1b      	lsrs	r3, r3, #8
200145a8:	f003 030f 	and.w	r3, r3, #15
200145ac:	4912      	ldr	r1, [pc, #72]	@ (200145f8 <HAL_RCC_ClockConfig+0x35c>)
200145ae:	5ccb      	ldrb	r3, [r1, r3]
200145b0:	f003 031f 	and.w	r3, r3, #31
200145b4:	fa22 f303 	lsr.w	r3, r2, r3
200145b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
200145ba:	4b0e      	ldr	r3, [pc, #56]	@ (200145f4 <HAL_RCC_ClockConfig+0x358>)
200145bc:	699b      	ldr	r3, [r3, #24]
200145be:	f003 030f 	and.w	r3, r3, #15
200145c2:	4a0d      	ldr	r2, [pc, #52]	@ (200145f8 <HAL_RCC_ClockConfig+0x35c>)
200145c4:	5cd3      	ldrb	r3, [r2, r3]
200145c6:	f003 031f 	and.w	r3, r3, #31
200145ca:	693a      	ldr	r2, [r7, #16]
200145cc:	fa22 f303 	lsr.w	r3, r2, r3
200145d0:	4a0a      	ldr	r2, [pc, #40]	@ (200145fc <HAL_RCC_ClockConfig+0x360>)
200145d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
200145d4:	4a0a      	ldr	r2, [pc, #40]	@ (20014600 <HAL_RCC_ClockConfig+0x364>)
200145d6:	693b      	ldr	r3, [r7, #16]
200145d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
200145da:	4b0a      	ldr	r3, [pc, #40]	@ (20014604 <HAL_RCC_ClockConfig+0x368>)
200145dc:	681b      	ldr	r3, [r3, #0]
200145de:	4618      	mov	r0, r3
200145e0:	f7ed fe24 	bl	2000222c <HAL_InitTick>
200145e4:	4603      	mov	r3, r0
200145e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
200145e8:	7bfb      	ldrb	r3, [r7, #15]
}
200145ea:	4618      	mov	r0, r3
200145ec:	3718      	adds	r7, #24
200145ee:	46bd      	mov	sp, r7
200145f0:	bd80      	pop	{r7, pc}
200145f2:	bf00      	nop
200145f4:	58024400 	.word	0x58024400
200145f8:	2001891c 	.word	0x2001891c
200145fc:	200004b4 	.word	0x200004b4
20014600:	200004b0 	.word	0x200004b0
20014604:	200004b8 	.word	0x200004b8

20014608 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
20014608:	b580      	push	{r7, lr}
2001460a:	b08c      	sub	sp, #48	@ 0x30
2001460c:	af00      	add	r7, sp, #0
2001460e:	60f8      	str	r0, [r7, #12]
20014610:	60b9      	str	r1, [r7, #8]
20014612:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
20014614:	68fb      	ldr	r3, [r7, #12]
20014616:	2b00      	cmp	r3, #0
20014618:	d12a      	bne.n	20014670 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
2001461a:	4b2d      	ldr	r3, [pc, #180]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
2001461c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20014620:	4a2b      	ldr	r2, [pc, #172]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
20014622:	f043 0301 	orr.w	r3, r3, #1
20014626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2001462a:	4b29      	ldr	r3, [pc, #164]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
2001462c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20014630:	f003 0301 	and.w	r3, r3, #1
20014634:	61bb      	str	r3, [r7, #24]
20014636:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
20014638:	f44f 7380 	mov.w	r3, #256	@ 0x100
2001463c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2001463e:	2302      	movs	r3, #2
20014640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20014642:	2303      	movs	r3, #3
20014644:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20014646:	2300      	movs	r3, #0
20014648:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
2001464a:	2300      	movs	r3, #0
2001464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
2001464e:	f107 031c 	add.w	r3, r7, #28
20014652:	4619      	mov	r1, r3
20014654:	481f      	ldr	r0, [pc, #124]	@ (200146d4 <HAL_RCC_MCOConfig+0xcc>)
20014656:	f7f5 f863 	bl	20009720 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
2001465a:	4b1d      	ldr	r3, [pc, #116]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
2001465c:	691b      	ldr	r3, [r3, #16]
2001465e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
20014662:	68b9      	ldr	r1, [r7, #8]
20014664:	687b      	ldr	r3, [r7, #4]
20014666:	430b      	orrs	r3, r1
20014668:	4919      	ldr	r1, [pc, #100]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
2001466a:	4313      	orrs	r3, r2
2001466c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
2001466e:	e02a      	b.n	200146c6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
20014670:	4b17      	ldr	r3, [pc, #92]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
20014672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20014676:	4a16      	ldr	r2, [pc, #88]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
20014678:	f043 0304 	orr.w	r3, r3, #4
2001467c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
20014680:	4b13      	ldr	r3, [pc, #76]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
20014682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
20014686:	f003 0304 	and.w	r3, r3, #4
2001468a:	617b      	str	r3, [r7, #20]
2001468c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
2001468e:	f44f 7300 	mov.w	r3, #512	@ 0x200
20014692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20014694:	2302      	movs	r3, #2
20014696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20014698:	2303      	movs	r3, #3
2001469a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2001469c:	2300      	movs	r3, #0
2001469e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
200146a0:	2300      	movs	r3, #0
200146a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
200146a4:	f107 031c 	add.w	r3, r7, #28
200146a8:	4619      	mov	r1, r3
200146aa:	480b      	ldr	r0, [pc, #44]	@ (200146d8 <HAL_RCC_MCOConfig+0xd0>)
200146ac:	f7f5 f838 	bl	20009720 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
200146b0:	4b07      	ldr	r3, [pc, #28]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
200146b2:	691b      	ldr	r3, [r3, #16]
200146b4:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
200146b8:	687b      	ldr	r3, [r7, #4]
200146ba:	01d9      	lsls	r1, r3, #7
200146bc:	68bb      	ldr	r3, [r7, #8]
200146be:	430b      	orrs	r3, r1
200146c0:	4903      	ldr	r1, [pc, #12]	@ (200146d0 <HAL_RCC_MCOConfig+0xc8>)
200146c2:	4313      	orrs	r3, r2
200146c4:	610b      	str	r3, [r1, #16]
}
200146c6:	bf00      	nop
200146c8:	3730      	adds	r7, #48	@ 0x30
200146ca:	46bd      	mov	sp, r7
200146cc:	bd80      	pop	{r7, pc}
200146ce:	bf00      	nop
200146d0:	58024400 	.word	0x58024400
200146d4:	58020000 	.word	0x58020000
200146d8:	58020800 	.word	0x58020800

200146dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
200146dc:	b480      	push	{r7}
200146de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
200146e0:	4b05      	ldr	r3, [pc, #20]	@ (200146f8 <HAL_RCC_EnableCSS+0x1c>)
200146e2:	681b      	ldr	r3, [r3, #0]
200146e4:	4a04      	ldr	r2, [pc, #16]	@ (200146f8 <HAL_RCC_EnableCSS+0x1c>)
200146e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
200146ea:	6013      	str	r3, [r2, #0]
}
200146ec:	bf00      	nop
200146ee:	46bd      	mov	sp, r7
200146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200146f4:	4770      	bx	lr
200146f6:	bf00      	nop
200146f8:	58024400 	.word	0x58024400

200146fc <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
200146fc:	b480      	push	{r7}
200146fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSHSEON);
20014700:	4b05      	ldr	r3, [pc, #20]	@ (20014718 <HAL_RCC_DisableCSS+0x1c>)
20014702:	681b      	ldr	r3, [r3, #0]
20014704:	4a04      	ldr	r2, [pc, #16]	@ (20014718 <HAL_RCC_DisableCSS+0x1c>)
20014706:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
2001470a:	6013      	str	r3, [r2, #0]
}
2001470c:	bf00      	nop
2001470e:	46bd      	mov	sp, r7
20014710:	f85d 7b04 	ldr.w	r7, [sp], #4
20014714:	4770      	bx	lr
20014716:	bf00      	nop
20014718:	58024400 	.word	0x58024400

2001471c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
2001471c:	b480      	push	{r7}
2001471e:	b089      	sub	sp, #36	@ 0x24
20014720:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
20014722:	4bb3      	ldr	r3, [pc, #716]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
20014724:	691b      	ldr	r3, [r3, #16]
20014726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
2001472a:	2b18      	cmp	r3, #24
2001472c:	f200 8155 	bhi.w	200149da <HAL_RCC_GetSysClockFreq+0x2be>
20014730:	a201      	add	r2, pc, #4	@ (adr r2, 20014738 <HAL_RCC_GetSysClockFreq+0x1c>)
20014732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20014736:	bf00      	nop
20014738:	2001479d 	.word	0x2001479d
2001473c:	200149db 	.word	0x200149db
20014740:	200149db 	.word	0x200149db
20014744:	200149db 	.word	0x200149db
20014748:	200149db 	.word	0x200149db
2001474c:	200149db 	.word	0x200149db
20014750:	200149db 	.word	0x200149db
20014754:	200149db 	.word	0x200149db
20014758:	200147c3 	.word	0x200147c3
2001475c:	200149db 	.word	0x200149db
20014760:	200149db 	.word	0x200149db
20014764:	200149db 	.word	0x200149db
20014768:	200149db 	.word	0x200149db
2001476c:	200149db 	.word	0x200149db
20014770:	200149db 	.word	0x200149db
20014774:	200149db 	.word	0x200149db
20014778:	200147c9 	.word	0x200147c9
2001477c:	200149db 	.word	0x200149db
20014780:	200149db 	.word	0x200149db
20014784:	200149db 	.word	0x200149db
20014788:	200149db 	.word	0x200149db
2001478c:	200149db 	.word	0x200149db
20014790:	200149db 	.word	0x200149db
20014794:	200149db 	.word	0x200149db
20014798:	200147cf 	.word	0x200147cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2001479c:	4b94      	ldr	r3, [pc, #592]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2001479e:	681b      	ldr	r3, [r3, #0]
200147a0:	f003 0320 	and.w	r3, r3, #32
200147a4:	2b00      	cmp	r3, #0
200147a6:	d009      	beq.n	200147bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
200147a8:	4b91      	ldr	r3, [pc, #580]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
200147aa:	681b      	ldr	r3, [r3, #0]
200147ac:	08db      	lsrs	r3, r3, #3
200147ae:	f003 0303 	and.w	r3, r3, #3
200147b2:	4a90      	ldr	r2, [pc, #576]	@ (200149f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
200147b4:	fa22 f303 	lsr.w	r3, r2, r3
200147b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
200147ba:	e111      	b.n	200149e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
200147bc:	4b8d      	ldr	r3, [pc, #564]	@ (200149f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
200147be:	61bb      	str	r3, [r7, #24]
      break;
200147c0:	e10e      	b.n	200149e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
200147c2:	4b8d      	ldr	r3, [pc, #564]	@ (200149f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
200147c4:	61bb      	str	r3, [r7, #24]
      break;
200147c6:	e10b      	b.n	200149e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
200147c8:	4b8c      	ldr	r3, [pc, #560]	@ (200149fc <HAL_RCC_GetSysClockFreq+0x2e0>)
200147ca:	61bb      	str	r3, [r7, #24]
      break;
200147cc:	e108      	b.n	200149e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
200147ce:	4b88      	ldr	r3, [pc, #544]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
200147d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200147d2:	f003 0303 	and.w	r3, r3, #3
200147d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
200147d8:	4b85      	ldr	r3, [pc, #532]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
200147da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200147dc:	091b      	lsrs	r3, r3, #4
200147de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200147e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
200147e4:	4b82      	ldr	r3, [pc, #520]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
200147e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200147e8:	f003 0301 	and.w	r3, r3, #1
200147ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
200147ee:	4b80      	ldr	r3, [pc, #512]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
200147f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
200147f2:	08db      	lsrs	r3, r3, #3
200147f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
200147f8:	68fa      	ldr	r2, [r7, #12]
200147fa:	fb02 f303 	mul.w	r3, r2, r3
200147fe:	ee07 3a90 	vmov	s15, r3
20014802:	eef8 7a67 	vcvt.f32.u32	s15, s15
20014806:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
2001480a:	693b      	ldr	r3, [r7, #16]
2001480c:	2b00      	cmp	r3, #0
2001480e:	f000 80e1 	beq.w	200149d4 <HAL_RCC_GetSysClockFreq+0x2b8>
20014812:	697b      	ldr	r3, [r7, #20]
20014814:	2b02      	cmp	r3, #2
20014816:	f000 8083 	beq.w	20014920 <HAL_RCC_GetSysClockFreq+0x204>
2001481a:	697b      	ldr	r3, [r7, #20]
2001481c:	2b02      	cmp	r3, #2
2001481e:	f200 80a1 	bhi.w	20014964 <HAL_RCC_GetSysClockFreq+0x248>
20014822:	697b      	ldr	r3, [r7, #20]
20014824:	2b00      	cmp	r3, #0
20014826:	d003      	beq.n	20014830 <HAL_RCC_GetSysClockFreq+0x114>
20014828:	697b      	ldr	r3, [r7, #20]
2001482a:	2b01      	cmp	r3, #1
2001482c:	d056      	beq.n	200148dc <HAL_RCC_GetSysClockFreq+0x1c0>
2001482e:	e099      	b.n	20014964 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
20014830:	4b6f      	ldr	r3, [pc, #444]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
20014832:	681b      	ldr	r3, [r3, #0]
20014834:	f003 0320 	and.w	r3, r3, #32
20014838:	2b00      	cmp	r3, #0
2001483a:	d02d      	beq.n	20014898 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2001483c:	4b6c      	ldr	r3, [pc, #432]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2001483e:	681b      	ldr	r3, [r3, #0]
20014840:	08db      	lsrs	r3, r3, #3
20014842:	f003 0303 	and.w	r3, r3, #3
20014846:	4a6b      	ldr	r2, [pc, #428]	@ (200149f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
20014848:	fa22 f303 	lsr.w	r3, r2, r3
2001484c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2001484e:	687b      	ldr	r3, [r7, #4]
20014850:	ee07 3a90 	vmov	s15, r3
20014854:	eef8 6a67 	vcvt.f32.u32	s13, s15
20014858:	693b      	ldr	r3, [r7, #16]
2001485a:	ee07 3a90 	vmov	s15, r3
2001485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20014862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20014866:	4b62      	ldr	r3, [pc, #392]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
20014868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2001486a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2001486e:	ee07 3a90 	vmov	s15, r3
20014872:	eef8 6a67 	vcvt.f32.u32	s13, s15
20014876:	ed97 6a02 	vldr	s12, [r7, #8]
2001487a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 20014a00 <HAL_RCC_GetSysClockFreq+0x2e4>
2001487e:	eec6 7a25 	vdiv.f32	s15, s12, s11
20014882:	ee76 7aa7 	vadd.f32	s15, s13, s15
20014886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2001488a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2001488e:	ee67 7a27 	vmul.f32	s15, s14, s15
20014892:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
20014896:	e087      	b.n	200149a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
20014898:	693b      	ldr	r3, [r7, #16]
2001489a:	ee07 3a90 	vmov	s15, r3
2001489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
200148a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 20014a04 <HAL_RCC_GetSysClockFreq+0x2e8>
200148a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200148aa:	4b51      	ldr	r3, [pc, #324]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
200148ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200148ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
200148b2:	ee07 3a90 	vmov	s15, r3
200148b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
200148ba:	ed97 6a02 	vldr	s12, [r7, #8]
200148be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 20014a00 <HAL_RCC_GetSysClockFreq+0x2e4>
200148c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
200148c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
200148ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
200148ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
200148d2:	ee67 7a27 	vmul.f32	s15, s14, s15
200148d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
200148da:	e065      	b.n	200149a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
200148dc:	693b      	ldr	r3, [r7, #16]
200148de:	ee07 3a90 	vmov	s15, r3
200148e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
200148e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 20014a08 <HAL_RCC_GetSysClockFreq+0x2ec>
200148ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200148ee:	4b40      	ldr	r3, [pc, #256]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
200148f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200148f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
200148f6:	ee07 3a90 	vmov	s15, r3
200148fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
200148fe:	ed97 6a02 	vldr	s12, [r7, #8]
20014902:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 20014a00 <HAL_RCC_GetSysClockFreq+0x2e4>
20014906:	eec6 7a25 	vdiv.f32	s15, s12, s11
2001490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2001490e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20014912:	ee77 7aa6 	vadd.f32	s15, s15, s13
20014916:	ee67 7a27 	vmul.f32	s15, s14, s15
2001491a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2001491e:	e043      	b.n	200149a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
20014920:	693b      	ldr	r3, [r7, #16]
20014922:	ee07 3a90 	vmov	s15, r3
20014926:	eef8 7a67 	vcvt.f32.u32	s15, s15
2001492a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 20014a0c <HAL_RCC_GetSysClockFreq+0x2f0>
2001492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20014932:	4b2f      	ldr	r3, [pc, #188]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
20014934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20014936:	f3c3 0308 	ubfx	r3, r3, #0, #9
2001493a:	ee07 3a90 	vmov	s15, r3
2001493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
20014942:	ed97 6a02 	vldr	s12, [r7, #8]
20014946:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 20014a00 <HAL_RCC_GetSysClockFreq+0x2e4>
2001494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2001494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
20014952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20014956:	ee77 7aa6 	vadd.f32	s15, s15, s13
2001495a:	ee67 7a27 	vmul.f32	s15, s14, s15
2001495e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
20014962:	e021      	b.n	200149a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
20014964:	693b      	ldr	r3, [r7, #16]
20014966:	ee07 3a90 	vmov	s15, r3
2001496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2001496e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 20014a08 <HAL_RCC_GetSysClockFreq+0x2ec>
20014972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20014976:	4b1e      	ldr	r3, [pc, #120]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
20014978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2001497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2001497e:	ee07 3a90 	vmov	s15, r3
20014982:	eef8 6a67 	vcvt.f32.u32	s13, s15
20014986:	ed97 6a02 	vldr	s12, [r7, #8]
2001498a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 20014a00 <HAL_RCC_GetSysClockFreq+0x2e4>
2001498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
20014992:	ee76 7aa7 	vadd.f32	s15, s13, s15
20014996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2001499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2001499e:	ee67 7a27 	vmul.f32	s15, s14, s15
200149a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
200149a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
200149a8:	4b11      	ldr	r3, [pc, #68]	@ (200149f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
200149aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200149ac:	0a5b      	lsrs	r3, r3, #9
200149ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200149b2:	3301      	adds	r3, #1
200149b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
200149b6:	683b      	ldr	r3, [r7, #0]
200149b8:	ee07 3a90 	vmov	s15, r3
200149bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
200149c0:	edd7 6a07 	vldr	s13, [r7, #28]
200149c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
200149c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
200149cc:	ee17 3a90 	vmov	r3, s15
200149d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
200149d2:	e005      	b.n	200149e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
200149d4:	2300      	movs	r3, #0
200149d6:	61bb      	str	r3, [r7, #24]
      break;
200149d8:	e002      	b.n	200149e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
200149da:	4b07      	ldr	r3, [pc, #28]	@ (200149f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
200149dc:	61bb      	str	r3, [r7, #24]
      break;
200149de:	bf00      	nop
  }

  return sysclockfreq;
200149e0:	69bb      	ldr	r3, [r7, #24]
}
200149e2:	4618      	mov	r0, r3
200149e4:	3724      	adds	r7, #36	@ 0x24
200149e6:	46bd      	mov	sp, r7
200149e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200149ec:	4770      	bx	lr
200149ee:	bf00      	nop
200149f0:	58024400 	.word	0x58024400
200149f4:	03d09000 	.word	0x03d09000
200149f8:	003d0900 	.word	0x003d0900
200149fc:	00b71b00 	.word	0x00b71b00
20014a00:	46000000 	.word	0x46000000
20014a04:	4c742400 	.word	0x4c742400
20014a08:	4a742400 	.word	0x4a742400
20014a0c:	4b371b00 	.word	0x4b371b00

20014a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20014a10:	b580      	push	{r7, lr}
20014a12:	b082      	sub	sp, #8
20014a14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
20014a16:	f7ff fe81 	bl	2001471c <HAL_RCC_GetSysClockFreq>
20014a1a:	4602      	mov	r2, r0
20014a1c:	4b10      	ldr	r3, [pc, #64]	@ (20014a60 <HAL_RCC_GetHCLKFreq+0x50>)
20014a1e:	699b      	ldr	r3, [r3, #24]
20014a20:	0a1b      	lsrs	r3, r3, #8
20014a22:	f003 030f 	and.w	r3, r3, #15
20014a26:	490f      	ldr	r1, [pc, #60]	@ (20014a64 <HAL_RCC_GetHCLKFreq+0x54>)
20014a28:	5ccb      	ldrb	r3, [r1, r3]
20014a2a:	f003 031f 	and.w	r3, r3, #31
20014a2e:	fa22 f303 	lsr.w	r3, r2, r3
20014a32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
20014a34:	4b0a      	ldr	r3, [pc, #40]	@ (20014a60 <HAL_RCC_GetHCLKFreq+0x50>)
20014a36:	699b      	ldr	r3, [r3, #24]
20014a38:	f003 030f 	and.w	r3, r3, #15
20014a3c:	4a09      	ldr	r2, [pc, #36]	@ (20014a64 <HAL_RCC_GetHCLKFreq+0x54>)
20014a3e:	5cd3      	ldrb	r3, [r2, r3]
20014a40:	f003 031f 	and.w	r3, r3, #31
20014a44:	687a      	ldr	r2, [r7, #4]
20014a46:	fa22 f303 	lsr.w	r3, r2, r3
20014a4a:	4a07      	ldr	r2, [pc, #28]	@ (20014a68 <HAL_RCC_GetHCLKFreq+0x58>)
20014a4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
20014a4e:	4a07      	ldr	r2, [pc, #28]	@ (20014a6c <HAL_RCC_GetHCLKFreq+0x5c>)
20014a50:	687b      	ldr	r3, [r7, #4]
20014a52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
20014a54:	4b04      	ldr	r3, [pc, #16]	@ (20014a68 <HAL_RCC_GetHCLKFreq+0x58>)
20014a56:	681b      	ldr	r3, [r3, #0]
}
20014a58:	4618      	mov	r0, r3
20014a5a:	3708      	adds	r7, #8
20014a5c:	46bd      	mov	sp, r7
20014a5e:	bd80      	pop	{r7, pc}
20014a60:	58024400 	.word	0x58024400
20014a64:	2001891c 	.word	0x2001891c
20014a68:	200004b4 	.word	0x200004b4
20014a6c:	200004b0 	.word	0x200004b0

20014a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20014a70:	b580      	push	{r7, lr}
20014a72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
20014a74:	f7ff ffcc 	bl	20014a10 <HAL_RCC_GetHCLKFreq>
20014a78:	4602      	mov	r2, r0
20014a7a:	4b06      	ldr	r3, [pc, #24]	@ (20014a94 <HAL_RCC_GetPCLK1Freq+0x24>)
20014a7c:	69db      	ldr	r3, [r3, #28]
20014a7e:	091b      	lsrs	r3, r3, #4
20014a80:	f003 0307 	and.w	r3, r3, #7
20014a84:	4904      	ldr	r1, [pc, #16]	@ (20014a98 <HAL_RCC_GetPCLK1Freq+0x28>)
20014a86:	5ccb      	ldrb	r3, [r1, r3]
20014a88:	f003 031f 	and.w	r3, r3, #31
20014a8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
20014a90:	4618      	mov	r0, r3
20014a92:	bd80      	pop	{r7, pc}
20014a94:	58024400 	.word	0x58024400
20014a98:	2001891c 	.word	0x2001891c

20014a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20014a9c:	b580      	push	{r7, lr}
20014a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
20014aa0:	f7ff ffb6 	bl	20014a10 <HAL_RCC_GetHCLKFreq>
20014aa4:	4602      	mov	r2, r0
20014aa6:	4b06      	ldr	r3, [pc, #24]	@ (20014ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
20014aa8:	69db      	ldr	r3, [r3, #28]
20014aaa:	0a1b      	lsrs	r3, r3, #8
20014aac:	f003 0307 	and.w	r3, r3, #7
20014ab0:	4904      	ldr	r1, [pc, #16]	@ (20014ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
20014ab2:	5ccb      	ldrb	r3, [r1, r3]
20014ab4:	f003 031f 	and.w	r3, r3, #31
20014ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
20014abc:	4618      	mov	r0, r3
20014abe:	bd80      	pop	{r7, pc}
20014ac0:	58024400 	.word	0x58024400
20014ac4:	2001891c 	.word	0x2001891c

20014ac8 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20014ac8:	b580      	push	{r7, lr}
20014aca:	b082      	sub	sp, #8
20014acc:	af00      	add	r7, sp, #0
20014ace:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_CSI | \
20014ad0:	687b      	ldr	r3, [r7, #4]
20014ad2:	223f      	movs	r2, #63	@ 0x3f
20014ad4:	601a      	str	r2, [r3, #0]
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#else
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
20014ad6:	4b72      	ldr	r3, [pc, #456]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014ad8:	681b      	ldr	r3, [r3, #0]
20014ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20014ade:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
20014ae2:	d104      	bne.n	20014aee <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
20014ae4:	687b      	ldr	r3, [r7, #4]
20014ae6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
20014aea:	605a      	str	r2, [r3, #4]
20014aec:	e00e      	b.n	20014b0c <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
20014aee:	4b6c      	ldr	r3, [pc, #432]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014af0:	681b      	ldr	r3, [r3, #0]
20014af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20014af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20014afa:	d104      	bne.n	20014b06 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
20014afc:	687b      	ldr	r3, [r7, #4]
20014afe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20014b02:	605a      	str	r2, [r3, #4]
20014b04:	e002      	b.n	20014b0c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
20014b06:	687b      	ldr	r3, [r7, #4]
20014b08:	2200      	movs	r2, #0
20014b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* RCC_CR_HSEEXT */

  /* Get the CSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_CSION) == RCC_CR_CSION)
20014b0c:	4b64      	ldr	r3, [pc, #400]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014b0e:	681b      	ldr	r3, [r3, #0]
20014b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20014b14:	2b80      	cmp	r3, #128	@ 0x80
20014b16:	d103      	bne.n	20014b20 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_ON;
20014b18:	687b      	ldr	r3, [r7, #4]
20014b1a:	2280      	movs	r2, #128	@ 0x80
20014b1c:	61da      	str	r2, [r3, #28]
20014b1e:	e002      	b.n	20014b26 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
20014b20:	687b      	ldr	r3, [r7, #4]
20014b22:	2200      	movs	r2, #0
20014b24:	61da      	str	r2, [r3, #28]
  }

#if defined(RCC_VER_X)
  if (HAL_GetREVID() <= REV_ID_Y)
20014b26:	f7ed fc65 	bl	200023f4 <HAL_GetREVID>
20014b2a:	4603      	mov	r3, r0
20014b2c:	f241 0203 	movw	r2, #4099	@ 0x1003
20014b30:	4293      	cmp	r3, r2
20014b32:	d807      	bhi.n	20014b44 <HAL_RCC_GetOscConfig+0x7c>
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_CSITRIM_Msk) >> HAL_RCC_REV_Y_CSITRIM_Pos);
20014b34:	4b5a      	ldr	r3, [pc, #360]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014b36:	685b      	ldr	r3, [r3, #4]
20014b38:	0e9b      	lsrs	r3, r3, #26
20014b3a:	f003 021f 	and.w	r2, r3, #31
20014b3e:	687b      	ldr	r3, [r7, #4]
20014b40:	621a      	str	r2, [r3, #32]
20014b42:	e006      	b.n	20014b52 <HAL_RCC_GetOscConfig+0x8a>
  }
  else
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
20014b44:	4b56      	ldr	r3, [pc, #344]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014b46:	68db      	ldr	r3, [r3, #12]
20014b48:	0e1b      	lsrs	r3, r3, #24
20014b4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20014b4e:	687b      	ldr	r3, [r7, #4]
20014b50:	621a      	str	r2, [r3, #32]
#else
  RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
#endif /*RCC_VER_X*/

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
20014b52:	4b53      	ldr	r3, [pc, #332]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014b54:	681b      	ldr	r3, [r3, #0]
20014b56:	f003 0301 	and.w	r3, r3, #1
20014b5a:	2b01      	cmp	r3, #1
20014b5c:	d103      	bne.n	20014b66 <HAL_RCC_GetOscConfig+0x9e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
20014b5e:	687b      	ldr	r3, [r7, #4]
20014b60:	2201      	movs	r2, #1
20014b62:	60da      	str	r2, [r3, #12]
20014b64:	e002      	b.n	20014b6c <HAL_RCC_GetOscConfig+0xa4>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
20014b66:	687b      	ldr	r3, [r7, #4]
20014b68:	2200      	movs	r2, #0
20014b6a:	60da      	str	r2, [r3, #12]
  }

#if defined(RCC_VER_X)
  if (HAL_GetREVID() <= REV_ID_Y)
20014b6c:	f7ed fc42 	bl	200023f4 <HAL_GetREVID>
20014b70:	4603      	mov	r3, r0
20014b72:	f241 0203 	movw	r2, #4099	@ 0x1003
20014b76:	4293      	cmp	r3, r2
20014b78:	d807      	bhi.n	20014b8a <HAL_RCC_GetOscConfig+0xc2>
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk) >> HAL_RCC_REV_Y_HSITRIM_Pos);
20014b7a:	4b49      	ldr	r3, [pc, #292]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014b7c:	685b      	ldr	r3, [r3, #4]
20014b7e:	0b1b      	lsrs	r3, r3, #12
20014b80:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20014b84:	687b      	ldr	r3, [r7, #4]
20014b86:	611a      	str	r2, [r3, #16]
20014b88:	e006      	b.n	20014b98 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
20014b8a:	4b45      	ldr	r3, [pc, #276]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014b8c:	685b      	ldr	r3, [r3, #4]
20014b8e:	0e1b      	lsrs	r3, r3, #24
20014b90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
20014b94:	687b      	ldr	r3, [r7, #4]
20014b96:	611a      	str	r2, [r3, #16]
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#else
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
20014b98:	4b41      	ldr	r3, [pc, #260]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20014b9c:	f003 0304 	and.w	r3, r3, #4
20014ba0:	2b04      	cmp	r3, #4
20014ba2:	d103      	bne.n	20014bac <HAL_RCC_GetOscConfig+0xe4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
20014ba4:	687b      	ldr	r3, [r7, #4]
20014ba6:	2205      	movs	r2, #5
20014ba8:	609a      	str	r2, [r3, #8]
20014baa:	e00c      	b.n	20014bc6 <HAL_RCC_GetOscConfig+0xfe>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
20014bac:	4b3c      	ldr	r3, [pc, #240]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20014bb0:	f003 0301 	and.w	r3, r3, #1
20014bb4:	2b01      	cmp	r3, #1
20014bb6:	d103      	bne.n	20014bc0 <HAL_RCC_GetOscConfig+0xf8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
20014bb8:	687b      	ldr	r3, [r7, #4]
20014bba:	2201      	movs	r2, #1
20014bbc:	609a      	str	r2, [r3, #8]
20014bbe:	e002      	b.n	20014bc6 <HAL_RCC_GetOscConfig+0xfe>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
20014bc0:	687b      	ldr	r3, [r7, #4]
20014bc2:	2200      	movs	r2, #0
20014bc4:	609a      	str	r2, [r3, #8]
  }
#endif /* RCC_BDCR_LSEEXT */

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
20014bc6:	4b36      	ldr	r3, [pc, #216]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20014bca:	f003 0301 	and.w	r3, r3, #1
20014bce:	2b01      	cmp	r3, #1
20014bd0:	d103      	bne.n	20014bda <HAL_RCC_GetOscConfig+0x112>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
20014bd2:	687b      	ldr	r3, [r7, #4]
20014bd4:	2201      	movs	r2, #1
20014bd6:	615a      	str	r2, [r3, #20]
20014bd8:	e002      	b.n	20014be0 <HAL_RCC_GetOscConfig+0x118>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
20014bda:	687b      	ldr	r3, [r7, #4]
20014bdc:	2200      	movs	r2, #0
20014bde:	615a      	str	r2, [r3, #20]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
20014be0:	4b2f      	ldr	r3, [pc, #188]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014be2:	681b      	ldr	r3, [r3, #0]
20014be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
20014be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20014bec:	d103      	bne.n	20014bf6 <HAL_RCC_GetOscConfig+0x12e>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
20014bee:	687b      	ldr	r3, [r7, #4]
20014bf0:	2201      	movs	r2, #1
20014bf2:	619a      	str	r2, [r3, #24]
20014bf4:	e002      	b.n	20014bfc <HAL_RCC_GetOscConfig+0x134>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
20014bf6:	687b      	ldr	r3, [r7, #4]
20014bf8:	2200      	movs	r2, #0
20014bfa:	619a      	str	r2, [r3, #24]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
20014bfc:	4b28      	ldr	r3, [pc, #160]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014bfe:	681b      	ldr	r3, [r3, #0]
20014c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20014c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
20014c08:	d103      	bne.n	20014c12 <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
20014c0a:	687b      	ldr	r3, [r7, #4]
20014c0c:	2202      	movs	r2, #2
20014c0e:	625a      	str	r2, [r3, #36]	@ 0x24
20014c10:	e002      	b.n	20014c18 <HAL_RCC_GetOscConfig+0x150>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
20014c12:	687b      	ldr	r3, [r7, #4]
20014c14:	2201      	movs	r2, #1
20014c16:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
20014c18:	4b21      	ldr	r3, [pc, #132]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20014c1c:	f003 0203 	and.w	r2, r3, #3
20014c20:	687b      	ldr	r3, [r7, #4]
20014c22:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos);
20014c24:	4b1e      	ldr	r3, [pc, #120]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20014c28:	091b      	lsrs	r3, r3, #4
20014c2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20014c2e:	687b      	ldr	r3, [r7, #4]
20014c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> RCC_PLL1DIVR_N1_Pos) + 1U;
20014c32:	4b1b      	ldr	r3, [pc, #108]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20014c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
20014c3a:	1c5a      	adds	r2, r3, #1
20014c3c:	687b      	ldr	r3, [r7, #4]
20014c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) + 1U;
20014c40:	4b17      	ldr	r3, [pc, #92]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20014c44:	0e1b      	lsrs	r3, r3, #24
20014c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20014c4a:	1c5a      	adds	r2, r3, #1
20014c4c:	687b      	ldr	r3, [r7, #4]
20014c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) + 1U;
20014c50:	4b13      	ldr	r3, [pc, #76]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20014c54:	0a5b      	lsrs	r3, r3, #9
20014c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20014c5a:	1c5a      	adds	r2, r3, #1
20014c5c:	687b      	ldr	r3, [r7, #4]
20014c5e:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) + 1U;
20014c60:	4b0f      	ldr	r3, [pc, #60]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20014c64:	0c1b      	lsrs	r3, r3, #16
20014c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20014c6a:	1c5a      	adds	r2, r3, #1
20014c6c:	687b      	ldr	r3, [r7, #4]
20014c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE));
20014c70:	4b0b      	ldr	r3, [pc, #44]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014c74:	f003 020c 	and.w	r2, r3, #12
20014c78:	687b      	ldr	r3, [r7, #4]
20014c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> RCC_PLLCFGR_PLL1VCOSEL_Pos);
20014c7c:	4b08      	ldr	r3, [pc, #32]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014c80:	085b      	lsrs	r3, r3, #1
20014c82:	f003 0201 	and.w	r2, r3, #1
20014c86:	687b      	ldr	r3, [r7, #4]
20014c88:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos));
20014c8a:	4b05      	ldr	r3, [pc, #20]	@ (20014ca0 <HAL_RCC_GetOscConfig+0x1d8>)
20014c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
20014c8e:	08db      	lsrs	r3, r3, #3
20014c90:	f3c3 020c 	ubfx	r2, r3, #0, #13
20014c94:	687b      	ldr	r3, [r7, #4]
20014c96:	649a      	str	r2, [r3, #72]	@ 0x48
}
20014c98:	bf00      	nop
20014c9a:	3708      	adds	r7, #8
20014c9c:	46bd      	mov	sp, r7
20014c9e:	bd80      	pop	{r7, pc}
20014ca0:	58024400 	.word	0x58024400

20014ca4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
20014ca4:	b480      	push	{r7}
20014ca6:	b083      	sub	sp, #12
20014ca8:	af00      	add	r7, sp, #0
20014caa:	6078      	str	r0, [r7, #4]
20014cac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
20014cae:	687b      	ldr	r3, [r7, #4]
20014cb0:	223f      	movs	r2, #63	@ 0x3f
20014cb2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
20014cb4:	4b1a      	ldr	r3, [pc, #104]	@ (20014d20 <HAL_RCC_GetClockConfig+0x7c>)
20014cb6:	691b      	ldr	r3, [r3, #16]
20014cb8:	f003 0207 	and.w	r2, r3, #7
20014cbc:	687b      	ldr	r3, [r7, #4]
20014cbe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
20014cc0:	4b17      	ldr	r3, [pc, #92]	@ (20014d20 <HAL_RCC_GetClockConfig+0x7c>)
20014cc2:	699b      	ldr	r3, [r3, #24]
20014cc4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
20014cc8:	687b      	ldr	r3, [r7, #4]
20014cca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
20014ccc:	4b14      	ldr	r3, [pc, #80]	@ (20014d20 <HAL_RCC_GetClockConfig+0x7c>)
20014cce:	699b      	ldr	r3, [r3, #24]
20014cd0:	f003 020f 	and.w	r2, r3, #15
20014cd4:	687b      	ldr	r3, [r7, #4]
20014cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
20014cd8:	4b11      	ldr	r3, [pc, #68]	@ (20014d20 <HAL_RCC_GetClockConfig+0x7c>)
20014cda:	699b      	ldr	r3, [r3, #24]
20014cdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
20014ce0:	687b      	ldr	r3, [r7, #4]
20014ce2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
20014ce4:	4b0e      	ldr	r3, [pc, #56]	@ (20014d20 <HAL_RCC_GetClockConfig+0x7c>)
20014ce6:	69db      	ldr	r3, [r3, #28]
20014ce8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
20014cec:	687b      	ldr	r3, [r7, #4]
20014cee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
20014cf0:	4b0b      	ldr	r3, [pc, #44]	@ (20014d20 <HAL_RCC_GetClockConfig+0x7c>)
20014cf2:	69db      	ldr	r3, [r3, #28]
20014cf4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
20014cf8:	687b      	ldr	r3, [r7, #4]
20014cfa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
20014cfc:	4b08      	ldr	r3, [pc, #32]	@ (20014d20 <HAL_RCC_GetClockConfig+0x7c>)
20014cfe:	6a1b      	ldr	r3, [r3, #32]
20014d00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
20014d04:	687b      	ldr	r3, [r7, #4]
20014d06:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
20014d08:	4b06      	ldr	r3, [pc, #24]	@ (20014d24 <HAL_RCC_GetClockConfig+0x80>)
20014d0a:	681b      	ldr	r3, [r3, #0]
20014d0c:	f003 020f 	and.w	r2, r3, #15
20014d10:	683b      	ldr	r3, [r7, #0]
20014d12:	601a      	str	r2, [r3, #0]
}
20014d14:	bf00      	nop
20014d16:	370c      	adds	r7, #12
20014d18:	46bd      	mov	sp, r7
20014d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
20014d1e:	4770      	bx	lr
20014d20:	58024400 	.word	0x58024400
20014d24:	52002000 	.word	0x52002000

20014d28 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
20014d28:	b580      	push	{r7, lr}
20014d2a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
20014d2c:	4b07      	ldr	r3, [pc, #28]	@ (20014d4c <HAL_RCC_NMI_IRQHandler+0x24>)
20014d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20014d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20014d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20014d38:	d105      	bne.n	20014d46 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
20014d3a:	f000 f809 	bl	20014d50 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
20014d3e:	4b03      	ldr	r3, [pc, #12]	@ (20014d4c <HAL_RCC_NMI_IRQHandler+0x24>)
20014d40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
20014d44:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
20014d46:	bf00      	nop
20014d48:	bd80      	pop	{r7, pc}
20014d4a:	bf00      	nop
20014d4c:	58024400 	.word	0x58024400

20014d50 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
20014d50:	b480      	push	{r7}
20014d52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
20014d54:	bf00      	nop
20014d56:	46bd      	mov	sp, r7
20014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
20014d5c:	4770      	bx	lr
	...

20014d60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20014d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20014d64:	b0ca      	sub	sp, #296	@ 0x128
20014d66:	af00      	add	r7, sp, #0
20014d68:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
20014d6c:	2300      	movs	r3, #0
20014d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
20014d72:	2300      	movs	r3, #0
20014d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20014d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
20014d80:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
20014d84:	2500      	movs	r5, #0
20014d86:	ea54 0305 	orrs.w	r3, r4, r5
20014d8a:	d049      	beq.n	20014e20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
20014d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20014d92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
20014d96:	d02f      	beq.n	20014df8 <HAL_RCCEx_PeriphCLKConfig+0x98>
20014d98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
20014d9c:	d828      	bhi.n	20014df0 <HAL_RCCEx_PeriphCLKConfig+0x90>
20014d9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20014da2:	d01a      	beq.n	20014dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
20014da4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20014da8:	d822      	bhi.n	20014df0 <HAL_RCCEx_PeriphCLKConfig+0x90>
20014daa:	2b00      	cmp	r3, #0
20014dac:	d003      	beq.n	20014db6 <HAL_RCCEx_PeriphCLKConfig+0x56>
20014dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20014db2:	d007      	beq.n	20014dc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
20014db4:	e01c      	b.n	20014df0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
20014db6:	4bb8      	ldr	r3, [pc, #736]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014dba:	4ab7      	ldr	r2, [pc, #732]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20014dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
20014dc2:	e01a      	b.n	20014dfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
20014dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014dc8:	3308      	adds	r3, #8
20014dca:	2102      	movs	r1, #2
20014dcc:	4618      	mov	r0, r3
20014dce:	f002 ff4d 	bl	20017c6c <RCCEx_PLL2_Config>
20014dd2:	4603      	mov	r3, r0
20014dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
20014dd8:	e00f      	b.n	20014dfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
20014dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014dde:	3328      	adds	r3, #40	@ 0x28
20014de0:	2102      	movs	r1, #2
20014de2:	4618      	mov	r0, r3
20014de4:	f002 fff4 	bl	20017dd0 <RCCEx_PLL3_Config>
20014de8:	4603      	mov	r3, r0
20014dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
20014dee:	e004      	b.n	20014dfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20014df0:	2301      	movs	r3, #1
20014df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20014df6:	e000      	b.n	20014dfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
20014df8:	bf00      	nop
    }

    if (ret == HAL_OK)
20014dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20014dfe:	2b00      	cmp	r3, #0
20014e00:	d10a      	bne.n	20014e18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
20014e02:	4ba5      	ldr	r3, [pc, #660]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20014e06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
20014e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
20014e10:	4aa1      	ldr	r2, [pc, #644]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014e12:	430b      	orrs	r3, r1
20014e14:	6513      	str	r3, [r2, #80]	@ 0x50
20014e16:	e003      	b.n	20014e20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
20014e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20014e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
20014e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014e24:	e9d3 2300 	ldrd	r2, r3, [r3]
20014e28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
20014e2c:	f04f 0900 	mov.w	r9, #0
20014e30:	ea58 0309 	orrs.w	r3, r8, r9
20014e34:	d047      	beq.n	20014ec6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
20014e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20014e3c:	2b04      	cmp	r3, #4
20014e3e:	d82a      	bhi.n	20014e96 <HAL_RCCEx_PeriphCLKConfig+0x136>
20014e40:	a201      	add	r2, pc, #4	@ (adr r2, 20014e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
20014e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20014e46:	bf00      	nop
20014e48:	20014e5d 	.word	0x20014e5d
20014e4c:	20014e6b 	.word	0x20014e6b
20014e50:	20014e81 	.word	0x20014e81
20014e54:	20014e9f 	.word	0x20014e9f
20014e58:	20014e9f 	.word	0x20014e9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
20014e5c:	4b8e      	ldr	r3, [pc, #568]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014e60:	4a8d      	ldr	r2, [pc, #564]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20014e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
20014e68:	e01a      	b.n	20014ea0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20014e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014e6e:	3308      	adds	r3, #8
20014e70:	2100      	movs	r1, #0
20014e72:	4618      	mov	r0, r3
20014e74:	f002 fefa 	bl	20017c6c <RCCEx_PLL2_Config>
20014e78:	4603      	mov	r3, r0
20014e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
20014e7e:	e00f      	b.n	20014ea0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
20014e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014e84:	3328      	adds	r3, #40	@ 0x28
20014e86:	2100      	movs	r1, #0
20014e88:	4618      	mov	r0, r3
20014e8a:	f002 ffa1 	bl	20017dd0 <RCCEx_PLL3_Config>
20014e8e:	4603      	mov	r3, r0
20014e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
20014e94:	e004      	b.n	20014ea0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20014e96:	2301      	movs	r3, #1
20014e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20014e9c:	e000      	b.n	20014ea0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
20014e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
20014ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20014ea4:	2b00      	cmp	r3, #0
20014ea6:	d10a      	bne.n	20014ebe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
20014ea8:	4b7b      	ldr	r3, [pc, #492]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20014eac:	f023 0107 	bic.w	r1, r3, #7
20014eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20014eb6:	4a78      	ldr	r2, [pc, #480]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014eb8:	430b      	orrs	r3, r1
20014eba:	6513      	str	r3, [r2, #80]	@ 0x50
20014ebc:	e003      	b.n	20014ec6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
20014ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20014ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
20014ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014eca:	e9d3 2300 	ldrd	r2, r3, [r3]
20014ece:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
20014ed2:	f04f 0b00 	mov.w	fp, #0
20014ed6:	ea5a 030b 	orrs.w	r3, sl, fp
20014eda:	d04c      	beq.n	20014f76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
20014edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20014ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20014ee6:	d030      	beq.n	20014f4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
20014ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20014eec:	d829      	bhi.n	20014f42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
20014eee:	2bc0      	cmp	r3, #192	@ 0xc0
20014ef0:	d02d      	beq.n	20014f4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
20014ef2:	2bc0      	cmp	r3, #192	@ 0xc0
20014ef4:	d825      	bhi.n	20014f42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
20014ef6:	2b80      	cmp	r3, #128	@ 0x80
20014ef8:	d018      	beq.n	20014f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
20014efa:	2b80      	cmp	r3, #128	@ 0x80
20014efc:	d821      	bhi.n	20014f42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
20014efe:	2b00      	cmp	r3, #0
20014f00:	d002      	beq.n	20014f08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
20014f02:	2b40      	cmp	r3, #64	@ 0x40
20014f04:	d007      	beq.n	20014f16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
20014f06:	e01c      	b.n	20014f42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
20014f08:	4b63      	ldr	r3, [pc, #396]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014f0c:	4a62      	ldr	r2, [pc, #392]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20014f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
20014f14:	e01c      	b.n	20014f50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20014f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014f1a:	3308      	adds	r3, #8
20014f1c:	2100      	movs	r1, #0
20014f1e:	4618      	mov	r0, r3
20014f20:	f002 fea4 	bl	20017c6c <RCCEx_PLL2_Config>
20014f24:	4603      	mov	r3, r0
20014f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
20014f2a:	e011      	b.n	20014f50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
20014f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014f30:	3328      	adds	r3, #40	@ 0x28
20014f32:	2100      	movs	r1, #0
20014f34:	4618      	mov	r0, r3
20014f36:	f002 ff4b 	bl	20017dd0 <RCCEx_PLL3_Config>
20014f3a:	4603      	mov	r3, r0
20014f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
20014f40:	e006      	b.n	20014f50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20014f42:	2301      	movs	r3, #1
20014f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20014f48:	e002      	b.n	20014f50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
20014f4a:	bf00      	nop
20014f4c:	e000      	b.n	20014f50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
20014f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
20014f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20014f54:	2b00      	cmp	r3, #0
20014f56:	d10a      	bne.n	20014f6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
20014f58:	4b4f      	ldr	r3, [pc, #316]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20014f5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
20014f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20014f66:	4a4c      	ldr	r2, [pc, #304]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014f68:	430b      	orrs	r3, r1
20014f6a:	6513      	str	r3, [r2, #80]	@ 0x50
20014f6c:	e003      	b.n	20014f76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
20014f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20014f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
20014f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
20014f7e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
20014f82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
20014f86:	2300      	movs	r3, #0
20014f88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
20014f8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
20014f90:	460b      	mov	r3, r1
20014f92:	4313      	orrs	r3, r2
20014f94:	d053      	beq.n	2001503e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
20014f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
20014f9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
20014fa2:	d035      	beq.n	20015010 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
20014fa4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
20014fa8:	d82e      	bhi.n	20015008 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
20014faa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
20014fae:	d031      	beq.n	20015014 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
20014fb0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
20014fb4:	d828      	bhi.n	20015008 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
20014fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20014fba:	d01a      	beq.n	20014ff2 <HAL_RCCEx_PeriphCLKConfig+0x292>
20014fbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20014fc0:	d822      	bhi.n	20015008 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
20014fc2:	2b00      	cmp	r3, #0
20014fc4:	d003      	beq.n	20014fce <HAL_RCCEx_PeriphCLKConfig+0x26e>
20014fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20014fca:	d007      	beq.n	20014fdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
20014fcc:	e01c      	b.n	20015008 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
20014fce:	4b32      	ldr	r3, [pc, #200]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20014fd2:	4a31      	ldr	r2, [pc, #196]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20014fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20014fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
20014fda:	e01c      	b.n	20015016 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20014fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014fe0:	3308      	adds	r3, #8
20014fe2:	2100      	movs	r1, #0
20014fe4:	4618      	mov	r0, r3
20014fe6:	f002 fe41 	bl	20017c6c <RCCEx_PLL2_Config>
20014fea:	4603      	mov	r3, r0
20014fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
20014ff0:	e011      	b.n	20015016 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
20014ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20014ff6:	3328      	adds	r3, #40	@ 0x28
20014ff8:	2100      	movs	r1, #0
20014ffa:	4618      	mov	r0, r3
20014ffc:	f002 fee8 	bl	20017dd0 <RCCEx_PLL3_Config>
20015000:	4603      	mov	r3, r0
20015002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
20015006:	e006      	b.n	20015016 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
20015008:	2301      	movs	r3, #1
2001500a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
2001500e:	e002      	b.n	20015016 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
20015010:	bf00      	nop
20015012:	e000      	b.n	20015016 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
20015014:	bf00      	nop
    }

    if (ret == HAL_OK)
20015016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001501a:	2b00      	cmp	r3, #0
2001501c:	d10b      	bne.n	20015036 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
2001501e:	4b1e      	ldr	r3, [pc, #120]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20015020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20015022:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
20015026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001502a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
2001502e:	4a1a      	ldr	r2, [pc, #104]	@ (20015098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
20015030:	430b      	orrs	r3, r1
20015032:	6593      	str	r3, [r2, #88]	@ 0x58
20015034:	e003      	b.n	2001503e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
20015036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001503a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2001503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015042:	e9d3 2300 	ldrd	r2, r3, [r3]
20015046:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
2001504a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
2001504e:	2300      	movs	r3, #0
20015050:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
20015054:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
20015058:	460b      	mov	r3, r1
2001505a:	4313      	orrs	r3, r2
2001505c:	d056      	beq.n	2001510c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
2001505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015062:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
20015066:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2001506a:	d038      	beq.n	200150de <HAL_RCCEx_PeriphCLKConfig+0x37e>
2001506c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
20015070:	d831      	bhi.n	200150d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
20015072:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
20015076:	d034      	beq.n	200150e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
20015078:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
2001507c:	d82b      	bhi.n	200150d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
2001507e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
20015082:	d01d      	beq.n	200150c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
20015084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
20015088:	d825      	bhi.n	200150d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
2001508a:	2b00      	cmp	r3, #0
2001508c:	d006      	beq.n	2001509c <HAL_RCCEx_PeriphCLKConfig+0x33c>
2001508e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
20015092:	d00a      	beq.n	200150aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
20015094:	e01f      	b.n	200150d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
20015096:	bf00      	nop
20015098:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2001509c:	4ba2      	ldr	r3, [pc, #648]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2001509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200150a0:	4aa1      	ldr	r2, [pc, #644]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
200150a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
200150a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
200150a8:	e01c      	b.n	200150e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
200150aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200150ae:	3308      	adds	r3, #8
200150b0:	2100      	movs	r1, #0
200150b2:	4618      	mov	r0, r3
200150b4:	f002 fdda 	bl	20017c6c <RCCEx_PLL2_Config>
200150b8:	4603      	mov	r3, r0
200150ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
200150be:	e011      	b.n	200150e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
200150c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200150c4:	3328      	adds	r3, #40	@ 0x28
200150c6:	2100      	movs	r1, #0
200150c8:	4618      	mov	r0, r3
200150ca:	f002 fe81 	bl	20017dd0 <RCCEx_PLL3_Config>
200150ce:	4603      	mov	r3, r0
200150d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
200150d4:	e006      	b.n	200150e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
200150d6:	2301      	movs	r3, #1
200150d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
200150dc:	e002      	b.n	200150e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
200150de:	bf00      	nop
200150e0:	e000      	b.n	200150e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
200150e2:	bf00      	nop
    }

    if (ret == HAL_OK)
200150e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200150e8:	2b00      	cmp	r3, #0
200150ea:	d10b      	bne.n	20015104 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
200150ec:	4b8e      	ldr	r3, [pc, #568]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
200150ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200150f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
200150f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200150f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
200150fc:	4a8a      	ldr	r2, [pc, #552]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
200150fe:	430b      	orrs	r3, r1
20015100:	6593      	str	r3, [r2, #88]	@ 0x58
20015102:	e003      	b.n	2001510c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
20015104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2001510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015110:	e9d3 2300 	ldrd	r2, r3, [r3]
20015114:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
20015118:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
2001511c:	2300      	movs	r3, #0
2001511e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
20015122:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
20015126:	460b      	mov	r3, r1
20015128:	4313      	orrs	r3, r2
2001512a:	d03a      	beq.n	200151a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
2001512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20015132:	2b30      	cmp	r3, #48	@ 0x30
20015134:	d01f      	beq.n	20015176 <HAL_RCCEx_PeriphCLKConfig+0x416>
20015136:	2b30      	cmp	r3, #48	@ 0x30
20015138:	d819      	bhi.n	2001516e <HAL_RCCEx_PeriphCLKConfig+0x40e>
2001513a:	2b20      	cmp	r3, #32
2001513c:	d00c      	beq.n	20015158 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
2001513e:	2b20      	cmp	r3, #32
20015140:	d815      	bhi.n	2001516e <HAL_RCCEx_PeriphCLKConfig+0x40e>
20015142:	2b00      	cmp	r3, #0
20015144:	d019      	beq.n	2001517a <HAL_RCCEx_PeriphCLKConfig+0x41a>
20015146:	2b10      	cmp	r3, #16
20015148:	d111      	bne.n	2001516e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2001514a:	4b77      	ldr	r3, [pc, #476]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2001514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2001514e:	4a76      	ldr	r2, [pc, #472]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
20015150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20015154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
20015156:	e011      	b.n	2001517c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
20015158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001515c:	3308      	adds	r3, #8
2001515e:	2102      	movs	r1, #2
20015160:	4618      	mov	r0, r3
20015162:	f002 fd83 	bl	20017c6c <RCCEx_PLL2_Config>
20015166:	4603      	mov	r3, r0
20015168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
2001516c:	e006      	b.n	2001517c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2001516e:	2301      	movs	r3, #1
20015170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015174:	e002      	b.n	2001517c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
20015176:	bf00      	nop
20015178:	e000      	b.n	2001517c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
2001517a:	bf00      	nop
    }

    if (ret == HAL_OK)
2001517c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015180:	2b00      	cmp	r3, #0
20015182:	d10a      	bne.n	2001519a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
20015184:	4b68      	ldr	r3, [pc, #416]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
20015186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20015188:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
2001518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20015192:	4a65      	ldr	r2, [pc, #404]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
20015194:	430b      	orrs	r3, r1
20015196:	64d3      	str	r3, [r2, #76]	@ 0x4c
20015198:	e003      	b.n	200151a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
2001519a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001519e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
200151a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200151a6:	e9d3 2300 	ldrd	r2, r3, [r3]
200151aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
200151ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
200151b2:	2300      	movs	r3, #0
200151b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
200151b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
200151bc:	460b      	mov	r3, r1
200151be:	4313      	orrs	r3, r2
200151c0:	d051      	beq.n	20015266 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
200151c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200151c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200151c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
200151cc:	d035      	beq.n	2001523a <HAL_RCCEx_PeriphCLKConfig+0x4da>
200151ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
200151d2:	d82e      	bhi.n	20015232 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
200151d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
200151d8:	d031      	beq.n	2001523e <HAL_RCCEx_PeriphCLKConfig+0x4de>
200151da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
200151de:	d828      	bhi.n	20015232 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
200151e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
200151e4:	d01a      	beq.n	2001521c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
200151e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
200151ea:	d822      	bhi.n	20015232 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
200151ec:	2b00      	cmp	r3, #0
200151ee:	d003      	beq.n	200151f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
200151f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
200151f4:	d007      	beq.n	20015206 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
200151f6:	e01c      	b.n	20015232 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
200151f8:	4b4b      	ldr	r3, [pc, #300]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
200151fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200151fc:	4a4a      	ldr	r2, [pc, #296]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
200151fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20015202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
20015204:	e01c      	b.n	20015240 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20015206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001520a:	3308      	adds	r3, #8
2001520c:	2100      	movs	r1, #0
2001520e:	4618      	mov	r0, r3
20015210:	f002 fd2c 	bl	20017c6c <RCCEx_PLL2_Config>
20015214:	4603      	mov	r3, r0
20015216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2001521a:	e011      	b.n	20015240 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2001521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015220:	3328      	adds	r3, #40	@ 0x28
20015222:	2100      	movs	r1, #0
20015224:	4618      	mov	r0, r3
20015226:	f002 fdd3 	bl	20017dd0 <RCCEx_PLL3_Config>
2001522a:	4603      	mov	r3, r0
2001522c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
20015230:	e006      	b.n	20015240 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015232:	2301      	movs	r3, #1
20015234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015238:	e002      	b.n	20015240 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
2001523a:	bf00      	nop
2001523c:	e000      	b.n	20015240 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
2001523e:	bf00      	nop
    }

    if (ret == HAL_OK)
20015240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015244:	2b00      	cmp	r3, #0
20015246:	d10a      	bne.n	2001525e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
20015248:	4b37      	ldr	r3, [pc, #220]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
2001524a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2001524c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
20015250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20015256:	4a34      	ldr	r2, [pc, #208]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
20015258:	430b      	orrs	r3, r1
2001525a:	6513      	str	r3, [r2, #80]	@ 0x50
2001525c:	e003      	b.n	20015266 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
2001525e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
20015266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001526a:	e9d3 2300 	ldrd	r2, r3, [r3]
2001526e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
20015272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
20015276:	2300      	movs	r3, #0
20015278:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
2001527c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
20015280:	460b      	mov	r3, r1
20015282:	4313      	orrs	r3, r2
20015284:	d056      	beq.n	20015334 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
20015286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001528a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2001528c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20015290:	d033      	beq.n	200152fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
20015292:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20015296:	d82c      	bhi.n	200152f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
20015298:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
2001529c:	d02f      	beq.n	200152fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
2001529e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
200152a2:	d826      	bhi.n	200152f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
200152a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
200152a8:	d02b      	beq.n	20015302 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
200152aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
200152ae:	d820      	bhi.n	200152f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
200152b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
200152b4:	d012      	beq.n	200152dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
200152b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
200152ba:	d81a      	bhi.n	200152f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
200152bc:	2b00      	cmp	r3, #0
200152be:	d022      	beq.n	20015306 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
200152c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200152c4:	d115      	bne.n	200152f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
200152c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200152ca:	3308      	adds	r3, #8
200152cc:	2101      	movs	r1, #1
200152ce:	4618      	mov	r0, r3
200152d0:	f002 fccc 	bl	20017c6c <RCCEx_PLL2_Config>
200152d4:	4603      	mov	r3, r0
200152d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
200152da:	e015      	b.n	20015308 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
200152dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200152e0:	3328      	adds	r3, #40	@ 0x28
200152e2:	2101      	movs	r1, #1
200152e4:	4618      	mov	r0, r3
200152e6:	f002 fd73 	bl	20017dd0 <RCCEx_PLL3_Config>
200152ea:	4603      	mov	r3, r0
200152ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
200152f0:	e00a      	b.n	20015308 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
200152f2:	2301      	movs	r3, #1
200152f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
200152f8:	e006      	b.n	20015308 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
200152fa:	bf00      	nop
200152fc:	e004      	b.n	20015308 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
200152fe:	bf00      	nop
20015300:	e002      	b.n	20015308 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
20015302:	bf00      	nop
20015304:	e000      	b.n	20015308 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
20015306:	bf00      	nop
    }

    if (ret == HAL_OK)
20015308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001530c:	2b00      	cmp	r3, #0
2001530e:	d10d      	bne.n	2001532c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
20015310:	4b05      	ldr	r3, [pc, #20]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
20015312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20015314:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
20015318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001531c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2001531e:	4a02      	ldr	r2, [pc, #8]	@ (20015328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
20015320:	430b      	orrs	r3, r1
20015322:	6513      	str	r3, [r2, #80]	@ 0x50
20015324:	e006      	b.n	20015334 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
20015326:	bf00      	nop
20015328:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2001532c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
20015334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015338:	e9d3 2300 	ldrd	r2, r3, [r3]
2001533c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
20015340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
20015344:	2300      	movs	r3, #0
20015346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
2001534a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
2001534e:	460b      	mov	r3, r1
20015350:	4313      	orrs	r3, r2
20015352:	d055      	beq.n	20015400 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
20015354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015358:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
2001535c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20015360:	d033      	beq.n	200153ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
20015362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20015366:	d82c      	bhi.n	200153c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
20015368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2001536c:	d02f      	beq.n	200153ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
2001536e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20015372:	d826      	bhi.n	200153c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
20015374:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
20015378:	d02b      	beq.n	200153d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
2001537a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
2001537e:	d820      	bhi.n	200153c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
20015380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20015384:	d012      	beq.n	200153ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
20015386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2001538a:	d81a      	bhi.n	200153c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
2001538c:	2b00      	cmp	r3, #0
2001538e:	d022      	beq.n	200153d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
20015390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20015394:	d115      	bne.n	200153c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
20015396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001539a:	3308      	adds	r3, #8
2001539c:	2101      	movs	r1, #1
2001539e:	4618      	mov	r0, r3
200153a0:	f002 fc64 	bl	20017c6c <RCCEx_PLL2_Config>
200153a4:	4603      	mov	r3, r0
200153a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
200153aa:	e015      	b.n	200153d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
200153ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200153b0:	3328      	adds	r3, #40	@ 0x28
200153b2:	2101      	movs	r1, #1
200153b4:	4618      	mov	r0, r3
200153b6:	f002 fd0b 	bl	20017dd0 <RCCEx_PLL3_Config>
200153ba:	4603      	mov	r3, r0
200153bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
200153c0:	e00a      	b.n	200153d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
200153c2:	2301      	movs	r3, #1
200153c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
200153c8:	e006      	b.n	200153d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
200153ca:	bf00      	nop
200153cc:	e004      	b.n	200153d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
200153ce:	bf00      	nop
200153d0:	e002      	b.n	200153d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
200153d2:	bf00      	nop
200153d4:	e000      	b.n	200153d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
200153d6:	bf00      	nop
    }

    if (ret == HAL_OK)
200153d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200153dc:	2b00      	cmp	r3, #0
200153de:	d10b      	bne.n	200153f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
200153e0:	4ba3      	ldr	r3, [pc, #652]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200153e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200153e4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
200153e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200153ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
200153f0:	4a9f      	ldr	r2, [pc, #636]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200153f2:	430b      	orrs	r3, r1
200153f4:	6593      	str	r3, [r2, #88]	@ 0x58
200153f6:	e003      	b.n	20015400 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
200153f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200153fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
20015400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015404:	e9d3 2300 	ldrd	r2, r3, [r3]
20015408:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
2001540c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
20015410:	2300      	movs	r3, #0
20015412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
20015416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
2001541a:	460b      	mov	r3, r1
2001541c:	4313      	orrs	r3, r2
2001541e:	d037      	beq.n	20015490 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
20015420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20015426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2001542a:	d00e      	beq.n	2001544a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
2001542c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20015430:	d816      	bhi.n	20015460 <HAL_RCCEx_PeriphCLKConfig+0x700>
20015432:	2b00      	cmp	r3, #0
20015434:	d018      	beq.n	20015468 <HAL_RCCEx_PeriphCLKConfig+0x708>
20015436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2001543a:	d111      	bne.n	20015460 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2001543c:	4b8c      	ldr	r3, [pc, #560]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
2001543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20015440:	4a8b      	ldr	r2, [pc, #556]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20015446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
20015448:	e00f      	b.n	2001546a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2001544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001544e:	3308      	adds	r3, #8
20015450:	2101      	movs	r1, #1
20015452:	4618      	mov	r0, r3
20015454:	f002 fc0a 	bl	20017c6c <RCCEx_PLL2_Config>
20015458:	4603      	mov	r3, r0
2001545a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2001545e:	e004      	b.n	2001546a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015460:	2301      	movs	r3, #1
20015462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015466:	e000      	b.n	2001546a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
20015468:	bf00      	nop
    }

    if (ret == HAL_OK)
2001546a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001546e:	2b00      	cmp	r3, #0
20015470:	d10a      	bne.n	20015488 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
20015472:	4b7f      	ldr	r3, [pc, #508]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20015476:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
2001547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001547e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20015480:	4a7b      	ldr	r2, [pc, #492]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015482:	430b      	orrs	r3, r1
20015484:	6513      	str	r3, [r2, #80]	@ 0x50
20015486:	e003      	b.n	20015490 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
20015488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001548c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
20015490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015494:	e9d3 2300 	ldrd	r2, r3, [r3]
20015498:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
2001549c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
200154a0:	2300      	movs	r3, #0
200154a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
200154a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
200154aa:	460b      	mov	r3, r1
200154ac:	4313      	orrs	r3, r2
200154ae:	d039      	beq.n	20015524 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
200154b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200154b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200154b6:	2b03      	cmp	r3, #3
200154b8:	d81c      	bhi.n	200154f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
200154ba:	a201      	add	r2, pc, #4	@ (adr r2, 200154c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
200154bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200154c0:	200154fd 	.word	0x200154fd
200154c4:	200154d1 	.word	0x200154d1
200154c8:	200154df 	.word	0x200154df
200154cc:	200154fd 	.word	0x200154fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
200154d0:	4b67      	ldr	r3, [pc, #412]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200154d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200154d4:	4a66      	ldr	r2, [pc, #408]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200154d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
200154da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
200154dc:	e00f      	b.n	200154fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
200154de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200154e2:	3308      	adds	r3, #8
200154e4:	2102      	movs	r1, #2
200154e6:	4618      	mov	r0, r3
200154e8:	f002 fbc0 	bl	20017c6c <RCCEx_PLL2_Config>
200154ec:	4603      	mov	r3, r0
200154ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
200154f2:	e004      	b.n	200154fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
200154f4:	2301      	movs	r3, #1
200154f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
200154fa:	e000      	b.n	200154fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
200154fc:	bf00      	nop
    }

    if (ret == HAL_OK)
200154fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015502:	2b00      	cmp	r3, #0
20015504:	d10a      	bne.n	2001551c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
20015506:	4b5a      	ldr	r3, [pc, #360]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2001550a:	f023 0103 	bic.w	r1, r3, #3
2001550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20015514:	4a56      	ldr	r2, [pc, #344]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015516:	430b      	orrs	r3, r1
20015518:	64d3      	str	r3, [r2, #76]	@ 0x4c
2001551a:	e003      	b.n	20015524 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
2001551c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
20015524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015528:	e9d3 2300 	ldrd	r2, r3, [r3]
2001552c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
20015530:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
20015534:	2300      	movs	r3, #0
20015536:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
2001553a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
2001553e:	460b      	mov	r3, r1
20015540:	4313      	orrs	r3, r2
20015542:	f000 809f 	beq.w	20015684 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
20015546:	4b4b      	ldr	r3, [pc, #300]	@ (20015674 <HAL_RCCEx_PeriphCLKConfig+0x914>)
20015548:	681b      	ldr	r3, [r3, #0]
2001554a:	4a4a      	ldr	r2, [pc, #296]	@ (20015674 <HAL_RCCEx_PeriphCLKConfig+0x914>)
2001554c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20015550:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
20015552:	f7ec feb5 	bl	200022c0 <HAL_GetTick>
20015556:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2001555a:	e00b      	b.n	20015574 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2001555c:	f7ec feb0 	bl	200022c0 <HAL_GetTick>
20015560:	4602      	mov	r2, r0
20015562:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
20015566:	1ad3      	subs	r3, r2, r3
20015568:	2b64      	cmp	r3, #100	@ 0x64
2001556a:	d903      	bls.n	20015574 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
2001556c:	2303      	movs	r3, #3
2001556e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015572:	e005      	b.n	20015580 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
20015574:	4b3f      	ldr	r3, [pc, #252]	@ (20015674 <HAL_RCCEx_PeriphCLKConfig+0x914>)
20015576:	681b      	ldr	r3, [r3, #0]
20015578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2001557c:	2b00      	cmp	r3, #0
2001557e:	d0ed      	beq.n	2001555c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
20015580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015584:	2b00      	cmp	r3, #0
20015586:	d179      	bne.n	2001567c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
20015588:	4b39      	ldr	r3, [pc, #228]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
2001558a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
2001558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015590:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
20015594:	4053      	eors	r3, r2
20015596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
2001559a:	2b00      	cmp	r3, #0
2001559c:	d015      	beq.n	200155ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2001559e:	4b34      	ldr	r3, [pc, #208]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200155a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200155a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
200155a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
200155aa:	4b31      	ldr	r3, [pc, #196]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200155ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200155ae:	4a30      	ldr	r2, [pc, #192]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200155b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200155b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
200155b6:	4b2e      	ldr	r3, [pc, #184]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200155b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200155ba:	4a2d      	ldr	r2, [pc, #180]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200155bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
200155c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
200155c2:	4a2b      	ldr	r2, [pc, #172]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
200155c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
200155c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
200155ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200155ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
200155d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
200155d6:	d118      	bne.n	2001560a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200155d8:	f7ec fe72 	bl	200022c0 <HAL_GetTick>
200155dc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
200155e0:	e00d      	b.n	200155fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
200155e2:	f7ec fe6d 	bl	200022c0 <HAL_GetTick>
200155e6:	4602      	mov	r2, r0
200155e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
200155ec:	1ad2      	subs	r2, r2, r3
200155ee:	f241 3388 	movw	r3, #5000	@ 0x1388
200155f2:	429a      	cmp	r2, r3
200155f4:	d903      	bls.n	200155fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
200155f6:	2303      	movs	r3, #3
200155f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
200155fc:	e005      	b.n	2001560a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
200155fe:	4b1c      	ldr	r3, [pc, #112]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20015602:	f003 0302 	and.w	r3, r3, #2
20015606:	2b00      	cmp	r3, #0
20015608:	d0eb      	beq.n	200155e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
2001560a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001560e:	2b00      	cmp	r3, #0
20015610:	d129      	bne.n	20015666 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
20015612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
2001561a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
2001561e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20015622:	d10e      	bne.n	20015642 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
20015624:	4b12      	ldr	r3, [pc, #72]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015626:	691b      	ldr	r3, [r3, #16]
20015628:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
2001562c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
20015634:	091a      	lsrs	r2, r3, #4
20015636:	4b10      	ldr	r3, [pc, #64]	@ (20015678 <HAL_RCCEx_PeriphCLKConfig+0x918>)
20015638:	4013      	ands	r3, r2
2001563a:	4a0d      	ldr	r2, [pc, #52]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
2001563c:	430b      	orrs	r3, r1
2001563e:	6113      	str	r3, [r2, #16]
20015640:	e005      	b.n	2001564e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
20015642:	4b0b      	ldr	r3, [pc, #44]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015644:	691b      	ldr	r3, [r3, #16]
20015646:	4a0a      	ldr	r2, [pc, #40]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015648:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
2001564c:	6113      	str	r3, [r2, #16]
2001564e:	4b08      	ldr	r3, [pc, #32]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015650:	6f19      	ldr	r1, [r3, #112]	@ 0x70
20015652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015656:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
2001565a:	f3c3 030b 	ubfx	r3, r3, #0, #12
2001565e:	4a04      	ldr	r2, [pc, #16]	@ (20015670 <HAL_RCCEx_PeriphCLKConfig+0x910>)
20015660:	430b      	orrs	r3, r1
20015662:	6713      	str	r3, [r2, #112]	@ 0x70
20015664:	e00e      	b.n	20015684 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
20015666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001566a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
2001566e:	e009      	b.n	20015684 <HAL_RCCEx_PeriphCLKConfig+0x924>
20015670:	58024400 	.word	0x58024400
20015674:	58024800 	.word	0x58024800
20015678:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
2001567c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
20015684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015688:	e9d3 2300 	ldrd	r2, r3, [r3]
2001568c:	f002 0301 	and.w	r3, r2, #1
20015690:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
20015694:	2300      	movs	r3, #0
20015696:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
2001569a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
2001569e:	460b      	mov	r3, r1
200156a0:	4313      	orrs	r3, r2
200156a2:	f000 8089 	beq.w	200157b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
200156a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200156aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
200156ac:	2b28      	cmp	r3, #40	@ 0x28
200156ae:	d86b      	bhi.n	20015788 <HAL_RCCEx_PeriphCLKConfig+0xa28>
200156b0:	a201      	add	r2, pc, #4	@ (adr r2, 200156b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
200156b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200156b6:	bf00      	nop
200156b8:	20015791 	.word	0x20015791
200156bc:	20015789 	.word	0x20015789
200156c0:	20015789 	.word	0x20015789
200156c4:	20015789 	.word	0x20015789
200156c8:	20015789 	.word	0x20015789
200156cc:	20015789 	.word	0x20015789
200156d0:	20015789 	.word	0x20015789
200156d4:	20015789 	.word	0x20015789
200156d8:	2001575d 	.word	0x2001575d
200156dc:	20015789 	.word	0x20015789
200156e0:	20015789 	.word	0x20015789
200156e4:	20015789 	.word	0x20015789
200156e8:	20015789 	.word	0x20015789
200156ec:	20015789 	.word	0x20015789
200156f0:	20015789 	.word	0x20015789
200156f4:	20015789 	.word	0x20015789
200156f8:	20015773 	.word	0x20015773
200156fc:	20015789 	.word	0x20015789
20015700:	20015789 	.word	0x20015789
20015704:	20015789 	.word	0x20015789
20015708:	20015789 	.word	0x20015789
2001570c:	20015789 	.word	0x20015789
20015710:	20015789 	.word	0x20015789
20015714:	20015789 	.word	0x20015789
20015718:	20015791 	.word	0x20015791
2001571c:	20015789 	.word	0x20015789
20015720:	20015789 	.word	0x20015789
20015724:	20015789 	.word	0x20015789
20015728:	20015789 	.word	0x20015789
2001572c:	20015789 	.word	0x20015789
20015730:	20015789 	.word	0x20015789
20015734:	20015789 	.word	0x20015789
20015738:	20015791 	.word	0x20015791
2001573c:	20015789 	.word	0x20015789
20015740:	20015789 	.word	0x20015789
20015744:	20015789 	.word	0x20015789
20015748:	20015789 	.word	0x20015789
2001574c:	20015789 	.word	0x20015789
20015750:	20015789 	.word	0x20015789
20015754:	20015789 	.word	0x20015789
20015758:	20015791 	.word	0x20015791
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2001575c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015760:	3308      	adds	r3, #8
20015762:	2101      	movs	r1, #1
20015764:	4618      	mov	r0, r3
20015766:	f002 fa81 	bl	20017c6c <RCCEx_PLL2_Config>
2001576a:	4603      	mov	r3, r0
2001576c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
20015770:	e00f      	b.n	20015792 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
20015772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015776:	3328      	adds	r3, #40	@ 0x28
20015778:	2101      	movs	r1, #1
2001577a:	4618      	mov	r0, r3
2001577c:	f002 fb28 	bl	20017dd0 <RCCEx_PLL3_Config>
20015780:	4603      	mov	r3, r0
20015782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
20015786:	e004      	b.n	20015792 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015788:	2301      	movs	r3, #1
2001578a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
2001578e:	e000      	b.n	20015792 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
20015790:	bf00      	nop
    }

    if (ret == HAL_OK)
20015792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015796:	2b00      	cmp	r3, #0
20015798:	d10a      	bne.n	200157b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2001579a:	4bbf      	ldr	r3, [pc, #764]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
2001579c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2001579e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
200157a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200157a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
200157a8:	4abb      	ldr	r2, [pc, #748]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
200157aa:	430b      	orrs	r3, r1
200157ac:	6553      	str	r3, [r2, #84]	@ 0x54
200157ae:	e003      	b.n	200157b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
200157b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200157b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
200157b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200157bc:	e9d3 2300 	ldrd	r2, r3, [r3]
200157c0:	f002 0302 	and.w	r3, r2, #2
200157c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
200157c8:	2300      	movs	r3, #0
200157ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
200157ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
200157d2:	460b      	mov	r3, r1
200157d4:	4313      	orrs	r3, r2
200157d6:	d041      	beq.n	2001585c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
200157d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200157dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
200157de:	2b05      	cmp	r3, #5
200157e0:	d824      	bhi.n	2001582c <HAL_RCCEx_PeriphCLKConfig+0xacc>
200157e2:	a201      	add	r2, pc, #4	@ (adr r2, 200157e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
200157e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200157e8:	20015835 	.word	0x20015835
200157ec:	20015801 	.word	0x20015801
200157f0:	20015817 	.word	0x20015817
200157f4:	20015835 	.word	0x20015835
200157f8:	20015835 	.word	0x20015835
200157fc:	20015835 	.word	0x20015835
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
20015800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015804:	3308      	adds	r3, #8
20015806:	2101      	movs	r1, #1
20015808:	4618      	mov	r0, r3
2001580a:	f002 fa2f 	bl	20017c6c <RCCEx_PLL2_Config>
2001580e:	4603      	mov	r3, r0
20015810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
20015814:	e00f      	b.n	20015836 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
20015816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001581a:	3328      	adds	r3, #40	@ 0x28
2001581c:	2101      	movs	r1, #1
2001581e:	4618      	mov	r0, r3
20015820:	f002 fad6 	bl	20017dd0 <RCCEx_PLL3_Config>
20015824:	4603      	mov	r3, r0
20015826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2001582a:	e004      	b.n	20015836 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2001582c:	2301      	movs	r3, #1
2001582e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015832:	e000      	b.n	20015836 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
20015834:	bf00      	nop
    }

    if (ret == HAL_OK)
20015836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001583a:	2b00      	cmp	r3, #0
2001583c:	d10a      	bne.n	20015854 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2001583e:	4b96      	ldr	r3, [pc, #600]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
20015840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20015842:	f023 0107 	bic.w	r1, r3, #7
20015846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001584a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
2001584c:	4a92      	ldr	r2, [pc, #584]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
2001584e:	430b      	orrs	r3, r1
20015850:	6553      	str	r3, [r2, #84]	@ 0x54
20015852:	e003      	b.n	2001585c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
20015854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2001585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015860:	e9d3 2300 	ldrd	r2, r3, [r3]
20015864:	f002 0304 	and.w	r3, r2, #4
20015868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
2001586c:	2300      	movs	r3, #0
2001586e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
20015872:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
20015876:	460b      	mov	r3, r1
20015878:	4313      	orrs	r3, r2
2001587a:	d044      	beq.n	20015906 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
2001587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
20015884:	2b05      	cmp	r3, #5
20015886:	d825      	bhi.n	200158d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
20015888:	a201      	add	r2, pc, #4	@ (adr r2, 20015890 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
2001588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2001588e:	bf00      	nop
20015890:	200158dd 	.word	0x200158dd
20015894:	200158a9 	.word	0x200158a9
20015898:	200158bf 	.word	0x200158bf
2001589c:	200158dd 	.word	0x200158dd
200158a0:	200158dd 	.word	0x200158dd
200158a4:	200158dd 	.word	0x200158dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
200158a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200158ac:	3308      	adds	r3, #8
200158ae:	2101      	movs	r1, #1
200158b0:	4618      	mov	r0, r3
200158b2:	f002 f9db 	bl	20017c6c <RCCEx_PLL2_Config>
200158b6:	4603      	mov	r3, r0
200158b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
200158bc:	e00f      	b.n	200158de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
200158be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200158c2:	3328      	adds	r3, #40	@ 0x28
200158c4:	2101      	movs	r1, #1
200158c6:	4618      	mov	r0, r3
200158c8:	f002 fa82 	bl	20017dd0 <RCCEx_PLL3_Config>
200158cc:	4603      	mov	r3, r0
200158ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
200158d2:	e004      	b.n	200158de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
200158d4:	2301      	movs	r3, #1
200158d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
200158da:	e000      	b.n	200158de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
200158dc:	bf00      	nop
    }

    if (ret == HAL_OK)
200158de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200158e2:	2b00      	cmp	r3, #0
200158e4:	d10b      	bne.n	200158fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
200158e6:	4b6c      	ldr	r3, [pc, #432]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
200158e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200158ea:	f023 0107 	bic.w	r1, r3, #7
200158ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200158f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
200158f6:	4a68      	ldr	r2, [pc, #416]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
200158f8:	430b      	orrs	r3, r1
200158fa:	6593      	str	r3, [r2, #88]	@ 0x58
200158fc:	e003      	b.n	20015906 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
200158fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
20015906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001590a:	e9d3 2300 	ldrd	r2, r3, [r3]
2001590e:	f002 0320 	and.w	r3, r2, #32
20015912:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
20015916:	2300      	movs	r3, #0
20015918:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
2001591c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
20015920:	460b      	mov	r3, r1
20015922:	4313      	orrs	r3, r2
20015924:	d055      	beq.n	200159d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
20015926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2001592e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20015932:	d033      	beq.n	2001599c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
20015934:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20015938:	d82c      	bhi.n	20015994 <HAL_RCCEx_PeriphCLKConfig+0xc34>
2001593a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2001593e:	d02f      	beq.n	200159a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
20015940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20015944:	d826      	bhi.n	20015994 <HAL_RCCEx_PeriphCLKConfig+0xc34>
20015946:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
2001594a:	d02b      	beq.n	200159a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
2001594c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
20015950:	d820      	bhi.n	20015994 <HAL_RCCEx_PeriphCLKConfig+0xc34>
20015952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20015956:	d012      	beq.n	2001597e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
20015958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2001595c:	d81a      	bhi.n	20015994 <HAL_RCCEx_PeriphCLKConfig+0xc34>
2001595e:	2b00      	cmp	r3, #0
20015960:	d022      	beq.n	200159a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
20015962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20015966:	d115      	bne.n	20015994 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20015968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001596c:	3308      	adds	r3, #8
2001596e:	2100      	movs	r1, #0
20015970:	4618      	mov	r0, r3
20015972:	f002 f97b 	bl	20017c6c <RCCEx_PLL2_Config>
20015976:	4603      	mov	r3, r0
20015978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2001597c:	e015      	b.n	200159aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2001597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015982:	3328      	adds	r3, #40	@ 0x28
20015984:	2102      	movs	r1, #2
20015986:	4618      	mov	r0, r3
20015988:	f002 fa22 	bl	20017dd0 <RCCEx_PLL3_Config>
2001598c:	4603      	mov	r3, r0
2001598e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
20015992:	e00a      	b.n	200159aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015994:	2301      	movs	r3, #1
20015996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
2001599a:	e006      	b.n	200159aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
2001599c:	bf00      	nop
2001599e:	e004      	b.n	200159aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
200159a0:	bf00      	nop
200159a2:	e002      	b.n	200159aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
200159a4:	bf00      	nop
200159a6:	e000      	b.n	200159aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
200159a8:	bf00      	nop
    }

    if (ret == HAL_OK)
200159aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200159ae:	2b00      	cmp	r3, #0
200159b0:	d10b      	bne.n	200159ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
200159b2:	4b39      	ldr	r3, [pc, #228]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
200159b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200159b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
200159ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200159be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
200159c2:	4a35      	ldr	r2, [pc, #212]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
200159c4:	430b      	orrs	r3, r1
200159c6:	6553      	str	r3, [r2, #84]	@ 0x54
200159c8:	e003      	b.n	200159d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
200159ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200159ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
200159d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200159d6:	e9d3 2300 	ldrd	r2, r3, [r3]
200159da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
200159de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
200159e2:	2300      	movs	r3, #0
200159e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
200159e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
200159ec:	460b      	mov	r3, r1
200159ee:	4313      	orrs	r3, r2
200159f0:	d058      	beq.n	20015aa4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
200159f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200159f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
200159fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
200159fe:	d033      	beq.n	20015a68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
20015a00:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
20015a04:	d82c      	bhi.n	20015a60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
20015a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20015a0a:	d02f      	beq.n	20015a6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
20015a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20015a10:	d826      	bhi.n	20015a60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
20015a12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20015a16:	d02b      	beq.n	20015a70 <HAL_RCCEx_PeriphCLKConfig+0xd10>
20015a18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
20015a1c:	d820      	bhi.n	20015a60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
20015a1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20015a22:	d012      	beq.n	20015a4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
20015a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20015a28:	d81a      	bhi.n	20015a60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
20015a2a:	2b00      	cmp	r3, #0
20015a2c:	d022      	beq.n	20015a74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
20015a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20015a32:	d115      	bne.n	20015a60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20015a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015a38:	3308      	adds	r3, #8
20015a3a:	2100      	movs	r1, #0
20015a3c:	4618      	mov	r0, r3
20015a3e:	f002 f915 	bl	20017c6c <RCCEx_PLL2_Config>
20015a42:	4603      	mov	r3, r0
20015a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
20015a48:	e015      	b.n	20015a76 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
20015a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015a4e:	3328      	adds	r3, #40	@ 0x28
20015a50:	2102      	movs	r1, #2
20015a52:	4618      	mov	r0, r3
20015a54:	f002 f9bc 	bl	20017dd0 <RCCEx_PLL3_Config>
20015a58:	4603      	mov	r3, r0
20015a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
20015a5e:	e00a      	b.n	20015a76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015a60:	2301      	movs	r3, #1
20015a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015a66:	e006      	b.n	20015a76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
20015a68:	bf00      	nop
20015a6a:	e004      	b.n	20015a76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
20015a6c:	bf00      	nop
20015a6e:	e002      	b.n	20015a76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
20015a70:	bf00      	nop
20015a72:	e000      	b.n	20015a76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
20015a74:	bf00      	nop
    }

    if (ret == HAL_OK)
20015a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015a7a:	2b00      	cmp	r3, #0
20015a7c:	d10e      	bne.n	20015a9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
20015a7e:	4b06      	ldr	r3, [pc, #24]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
20015a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20015a82:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
20015a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
20015a8e:	4a02      	ldr	r2, [pc, #8]	@ (20015a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
20015a90:	430b      	orrs	r3, r1
20015a92:	6593      	str	r3, [r2, #88]	@ 0x58
20015a94:	e006      	b.n	20015aa4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
20015a96:	bf00      	nop
20015a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
20015a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
20015aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
20015aac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
20015ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
20015ab4:	2300      	movs	r3, #0
20015ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
20015aba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
20015abe:	460b      	mov	r3, r1
20015ac0:	4313      	orrs	r3, r2
20015ac2:	d055      	beq.n	20015b70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
20015ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015ac8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
20015acc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
20015ad0:	d033      	beq.n	20015b3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
20015ad2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
20015ad6:	d82c      	bhi.n	20015b32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
20015ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20015adc:	d02f      	beq.n	20015b3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
20015ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20015ae2:	d826      	bhi.n	20015b32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
20015ae4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
20015ae8:	d02b      	beq.n	20015b42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
20015aea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
20015aee:	d820      	bhi.n	20015b32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
20015af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20015af4:	d012      	beq.n	20015b1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
20015af6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20015afa:	d81a      	bhi.n	20015b32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
20015afc:	2b00      	cmp	r3, #0
20015afe:	d022      	beq.n	20015b46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
20015b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20015b04:	d115      	bne.n	20015b32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20015b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015b0a:	3308      	adds	r3, #8
20015b0c:	2100      	movs	r1, #0
20015b0e:	4618      	mov	r0, r3
20015b10:	f002 f8ac 	bl	20017c6c <RCCEx_PLL2_Config>
20015b14:	4603      	mov	r3, r0
20015b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
20015b1a:	e015      	b.n	20015b48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
20015b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015b20:	3328      	adds	r3, #40	@ 0x28
20015b22:	2102      	movs	r1, #2
20015b24:	4618      	mov	r0, r3
20015b26:	f002 f953 	bl	20017dd0 <RCCEx_PLL3_Config>
20015b2a:	4603      	mov	r3, r0
20015b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
20015b30:	e00a      	b.n	20015b48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015b32:	2301      	movs	r3, #1
20015b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015b38:	e006      	b.n	20015b48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
20015b3a:	bf00      	nop
20015b3c:	e004      	b.n	20015b48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
20015b3e:	bf00      	nop
20015b40:	e002      	b.n	20015b48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
20015b42:	bf00      	nop
20015b44:	e000      	b.n	20015b48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
20015b46:	bf00      	nop
    }

    if (ret == HAL_OK)
20015b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015b4c:	2b00      	cmp	r3, #0
20015b4e:	d10b      	bne.n	20015b68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
20015b50:	4ba1      	ldr	r3, [pc, #644]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20015b54:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
20015b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015b5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
20015b60:	4a9d      	ldr	r2, [pc, #628]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015b62:	430b      	orrs	r3, r1
20015b64:	6593      	str	r3, [r2, #88]	@ 0x58
20015b66:	e003      	b.n	20015b70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
20015b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
20015b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015b74:	e9d3 2300 	ldrd	r2, r3, [r3]
20015b78:	f002 0308 	and.w	r3, r2, #8
20015b7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
20015b80:	2300      	movs	r3, #0
20015b82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
20015b86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
20015b8a:	460b      	mov	r3, r1
20015b8c:	4313      	orrs	r3, r2
20015b8e:	d01e      	beq.n	20015bce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
20015b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20015b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20015b9c:	d10c      	bne.n	20015bb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
20015b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015ba2:	3328      	adds	r3, #40	@ 0x28
20015ba4:	2102      	movs	r1, #2
20015ba6:	4618      	mov	r0, r3
20015ba8:	f002 f912 	bl	20017dd0 <RCCEx_PLL3_Config>
20015bac:	4603      	mov	r3, r0
20015bae:	2b00      	cmp	r3, #0
20015bb0:	d002      	beq.n	20015bb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
20015bb2:	2301      	movs	r3, #1
20015bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
20015bb8:	4b87      	ldr	r3, [pc, #540]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20015bbc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
20015bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20015bc8:	4a83      	ldr	r2, [pc, #524]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015bca:	430b      	orrs	r3, r1
20015bcc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
20015bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
20015bd6:	f002 0310 	and.w	r3, r2, #16
20015bda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
20015bde:	2300      	movs	r3, #0
20015be0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
20015be4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
20015be8:	460b      	mov	r3, r1
20015bea:	4313      	orrs	r3, r2
20015bec:	d01e      	beq.n	20015c2c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
20015bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
20015bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20015bfa:	d10c      	bne.n	20015c16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
20015bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015c00:	3328      	adds	r3, #40	@ 0x28
20015c02:	2102      	movs	r1, #2
20015c04:	4618      	mov	r0, r3
20015c06:	f002 f8e3 	bl	20017dd0 <RCCEx_PLL3_Config>
20015c0a:	4603      	mov	r3, r0
20015c0c:	2b00      	cmp	r3, #0
20015c0e:	d002      	beq.n	20015c16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
20015c10:	2301      	movs	r3, #1
20015c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
20015c16:	4b70      	ldr	r3, [pc, #448]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20015c1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
20015c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
20015c26:	4a6c      	ldr	r2, [pc, #432]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015c28:	430b      	orrs	r3, r1
20015c2a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
20015c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015c30:	e9d3 2300 	ldrd	r2, r3, [r3]
20015c34:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
20015c38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
20015c3c:	2300      	movs	r3, #0
20015c3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
20015c42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
20015c46:	460b      	mov	r3, r1
20015c48:	4313      	orrs	r3, r2
20015c4a:	d03e      	beq.n	20015cca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
20015c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015c50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
20015c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20015c58:	d022      	beq.n	20015ca0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
20015c5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20015c5e:	d81b      	bhi.n	20015c98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
20015c60:	2b00      	cmp	r3, #0
20015c62:	d003      	beq.n	20015c6c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
20015c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20015c68:	d00b      	beq.n	20015c82 <HAL_RCCEx_PeriphCLKConfig+0xf22>
20015c6a:	e015      	b.n	20015c98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20015c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015c70:	3308      	adds	r3, #8
20015c72:	2100      	movs	r1, #0
20015c74:	4618      	mov	r0, r3
20015c76:	f001 fff9 	bl	20017c6c <RCCEx_PLL2_Config>
20015c7a:	4603      	mov	r3, r0
20015c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
20015c80:	e00f      	b.n	20015ca2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
20015c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015c86:	3328      	adds	r3, #40	@ 0x28
20015c88:	2102      	movs	r1, #2
20015c8a:	4618      	mov	r0, r3
20015c8c:	f002 f8a0 	bl	20017dd0 <RCCEx_PLL3_Config>
20015c90:	4603      	mov	r3, r0
20015c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
20015c96:	e004      	b.n	20015ca2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015c98:	2301      	movs	r3, #1
20015c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015c9e:	e000      	b.n	20015ca2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
20015ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
20015ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015ca6:	2b00      	cmp	r3, #0
20015ca8:	d10b      	bne.n	20015cc2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
20015caa:	4b4b      	ldr	r3, [pc, #300]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20015cae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
20015cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
20015cba:	4a47      	ldr	r2, [pc, #284]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015cbc:	430b      	orrs	r3, r1
20015cbe:	6593      	str	r3, [r2, #88]	@ 0x58
20015cc0:	e003      	b.n	20015cca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
20015cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
20015cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015cce:	e9d3 2300 	ldrd	r2, r3, [r3]
20015cd2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
20015cd6:	67bb      	str	r3, [r7, #120]	@ 0x78
20015cd8:	2300      	movs	r3, #0
20015cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
20015cdc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
20015ce0:	460b      	mov	r3, r1
20015ce2:	4313      	orrs	r3, r2
20015ce4:	d03b      	beq.n	20015d5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
20015ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20015cee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
20015cf2:	d01f      	beq.n	20015d34 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
20015cf4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
20015cf8:	d818      	bhi.n	20015d2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
20015cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
20015cfe:	d003      	beq.n	20015d08 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
20015d00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
20015d04:	d007      	beq.n	20015d16 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
20015d06:	e011      	b.n	20015d2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
20015d08:	4b33      	ldr	r3, [pc, #204]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20015d0c:	4a32      	ldr	r2, [pc, #200]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20015d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
20015d14:	e00f      	b.n	20015d36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
20015d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015d1a:	3328      	adds	r3, #40	@ 0x28
20015d1c:	2101      	movs	r1, #1
20015d1e:	4618      	mov	r0, r3
20015d20:	f002 f856 	bl	20017dd0 <RCCEx_PLL3_Config>
20015d24:	4603      	mov	r3, r0
20015d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
20015d2a:	e004      	b.n	20015d36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015d2c:	2301      	movs	r3, #1
20015d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015d32:	e000      	b.n	20015d36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
20015d34:	bf00      	nop
    }

    if (ret == HAL_OK)
20015d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015d3a:	2b00      	cmp	r3, #0
20015d3c:	d10b      	bne.n	20015d56 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
20015d3e:	4b26      	ldr	r3, [pc, #152]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20015d42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
20015d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20015d4e:	4a22      	ldr	r2, [pc, #136]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015d50:	430b      	orrs	r3, r1
20015d52:	6553      	str	r3, [r2, #84]	@ 0x54
20015d54:	e003      	b.n	20015d5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
20015d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
20015d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015d62:	e9d3 2300 	ldrd	r2, r3, [r3]
20015d66:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
20015d6a:	673b      	str	r3, [r7, #112]	@ 0x70
20015d6c:	2300      	movs	r3, #0
20015d6e:	677b      	str	r3, [r7, #116]	@ 0x74
20015d70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
20015d74:	460b      	mov	r3, r1
20015d76:	4313      	orrs	r3, r2
20015d78:	d034      	beq.n	20015de4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
20015d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20015d80:	2b00      	cmp	r3, #0
20015d82:	d003      	beq.n	20015d8c <HAL_RCCEx_PeriphCLKConfig+0x102c>
20015d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20015d88:	d007      	beq.n	20015d9a <HAL_RCCEx_PeriphCLKConfig+0x103a>
20015d8a:	e011      	b.n	20015db0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
20015d8c:	4b12      	ldr	r3, [pc, #72]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20015d90:	4a11      	ldr	r2, [pc, #68]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20015d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
20015d98:	e00e      	b.n	20015db8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
20015d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015d9e:	3308      	adds	r3, #8
20015da0:	2102      	movs	r1, #2
20015da2:	4618      	mov	r0, r3
20015da4:	f001 ff62 	bl	20017c6c <RCCEx_PLL2_Config>
20015da8:	4603      	mov	r3, r0
20015daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
20015dae:	e003      	b.n	20015db8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
20015db0:	2301      	movs	r3, #1
20015db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015db6:	bf00      	nop
    }

    if (ret == HAL_OK)
20015db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015dbc:	2b00      	cmp	r3, #0
20015dbe:	d10d      	bne.n	20015ddc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
20015dc0:	4b05      	ldr	r3, [pc, #20]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20015dc4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
20015dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20015dce:	4a02      	ldr	r2, [pc, #8]	@ (20015dd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
20015dd0:	430b      	orrs	r3, r1
20015dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
20015dd4:	e006      	b.n	20015de4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
20015dd6:	bf00      	nop
20015dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
20015ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
20015de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015de8:	e9d3 2300 	ldrd	r2, r3, [r3]
20015dec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
20015df0:	66bb      	str	r3, [r7, #104]	@ 0x68
20015df2:	2300      	movs	r3, #0
20015df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
20015df6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
20015dfa:	460b      	mov	r3, r1
20015dfc:	4313      	orrs	r3, r2
20015dfe:	d00c      	beq.n	20015e1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
20015e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015e04:	3328      	adds	r3, #40	@ 0x28
20015e06:	2102      	movs	r1, #2
20015e08:	4618      	mov	r0, r3
20015e0a:	f001 ffe1 	bl	20017dd0 <RCCEx_PLL3_Config>
20015e0e:	4603      	mov	r3, r0
20015e10:	2b00      	cmp	r3, #0
20015e12:	d002      	beq.n	20015e1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
20015e14:	2301      	movs	r3, #1
20015e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
20015e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
20015e22:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
20015e26:	663b      	str	r3, [r7, #96]	@ 0x60
20015e28:	2300      	movs	r3, #0
20015e2a:	667b      	str	r3, [r7, #100]	@ 0x64
20015e2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
20015e30:	460b      	mov	r3, r1
20015e32:	4313      	orrs	r3, r2
20015e34:	d038      	beq.n	20015ea8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
20015e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20015e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20015e42:	d018      	beq.n	20015e76 <HAL_RCCEx_PeriphCLKConfig+0x1116>
20015e44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20015e48:	d811      	bhi.n	20015e6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
20015e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20015e4e:	d014      	beq.n	20015e7a <HAL_RCCEx_PeriphCLKConfig+0x111a>
20015e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20015e54:	d80b      	bhi.n	20015e6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
20015e56:	2b00      	cmp	r3, #0
20015e58:	d011      	beq.n	20015e7e <HAL_RCCEx_PeriphCLKConfig+0x111e>
20015e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20015e5e:	d106      	bne.n	20015e6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
20015e60:	4bc3      	ldr	r3, [pc, #780]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20015e64:	4ac2      	ldr	r2, [pc, #776]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20015e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
20015e6c:	e008      	b.n	20015e80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
20015e6e:	2301      	movs	r3, #1
20015e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
20015e74:	e004      	b.n	20015e80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
20015e76:	bf00      	nop
20015e78:	e002      	b.n	20015e80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
20015e7a:	bf00      	nop
20015e7c:	e000      	b.n	20015e80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
20015e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
20015e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015e84:	2b00      	cmp	r3, #0
20015e86:	d10b      	bne.n	20015ea0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
20015e88:	4bb9      	ldr	r3, [pc, #740]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20015e8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
20015e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
20015e98:	4ab5      	ldr	r2, [pc, #724]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015e9a:	430b      	orrs	r3, r1
20015e9c:	6553      	str	r3, [r2, #84]	@ 0x54
20015e9e:	e003      	b.n	20015ea8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
20015ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20015ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
20015ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015eac:	e9d3 2300 	ldrd	r2, r3, [r3]
20015eb0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
20015eb4:	65bb      	str	r3, [r7, #88]	@ 0x58
20015eb6:	2300      	movs	r3, #0
20015eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
20015eba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
20015ebe:	460b      	mov	r3, r1
20015ec0:	4313      	orrs	r3, r2
20015ec2:	d009      	beq.n	20015ed8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
20015ec4:	4baa      	ldr	r3, [pc, #680]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20015ec8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
20015ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20015ed2:	4aa7      	ldr	r2, [pc, #668]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015ed4:	430b      	orrs	r3, r1
20015ed6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
20015ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015edc:	e9d3 2300 	ldrd	r2, r3, [r3]
20015ee0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
20015ee4:	653b      	str	r3, [r7, #80]	@ 0x50
20015ee6:	2300      	movs	r3, #0
20015ee8:	657b      	str	r3, [r7, #84]	@ 0x54
20015eea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
20015eee:	460b      	mov	r3, r1
20015ef0:	4313      	orrs	r3, r2
20015ef2:	d00a      	beq.n	20015f0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
20015ef4:	4b9e      	ldr	r3, [pc, #632]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015ef6:	691b      	ldr	r3, [r3, #16]
20015ef8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
20015efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015f00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
20015f04:	4a9a      	ldr	r2, [pc, #616]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015f06:	430b      	orrs	r3, r1
20015f08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
20015f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
20015f12:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
20015f16:	64bb      	str	r3, [r7, #72]	@ 0x48
20015f18:	2300      	movs	r3, #0
20015f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
20015f1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
20015f20:	460b      	mov	r3, r1
20015f22:	4313      	orrs	r3, r2
20015f24:	d009      	beq.n	20015f3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
20015f26:	4b92      	ldr	r3, [pc, #584]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20015f2a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
20015f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
20015f34:	4a8e      	ldr	r2, [pc, #568]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015f36:	430b      	orrs	r3, r1
20015f38:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
20015f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
20015f42:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
20015f46:	643b      	str	r3, [r7, #64]	@ 0x40
20015f48:	2300      	movs	r3, #0
20015f4a:	647b      	str	r3, [r7, #68]	@ 0x44
20015f4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
20015f50:	460b      	mov	r3, r1
20015f52:	4313      	orrs	r3, r2
20015f54:	d00e      	beq.n	20015f74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
20015f56:	4b86      	ldr	r3, [pc, #536]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015f58:	691b      	ldr	r3, [r3, #16]
20015f5a:	4a85      	ldr	r2, [pc, #532]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015f5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
20015f60:	6113      	str	r3, [r2, #16]
20015f62:	4b83      	ldr	r3, [pc, #524]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015f64:	6919      	ldr	r1, [r3, #16]
20015f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015f6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
20015f6e:	4a80      	ldr	r2, [pc, #512]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015f70:	430b      	orrs	r3, r1
20015f72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
20015f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015f78:	e9d3 2300 	ldrd	r2, r3, [r3]
20015f7c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
20015f80:	63bb      	str	r3, [r7, #56]	@ 0x38
20015f82:	2300      	movs	r3, #0
20015f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
20015f86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
20015f8a:	460b      	mov	r3, r1
20015f8c:	4313      	orrs	r3, r2
20015f8e:	d009      	beq.n	20015fa4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
20015f90:	4b77      	ldr	r3, [pc, #476]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20015f94:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
20015f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20015f9e:	4a74      	ldr	r2, [pc, #464]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015fa0:	430b      	orrs	r3, r1
20015fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
20015fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
20015fac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
20015fb0:	633b      	str	r3, [r7, #48]	@ 0x30
20015fb2:	2300      	movs	r3, #0
20015fb4:	637b      	str	r3, [r7, #52]	@ 0x34
20015fb6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
20015fba:	460b      	mov	r3, r1
20015fbc:	4313      	orrs	r3, r2
20015fbe:	d00a      	beq.n	20015fd6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
20015fc0:	4b6b      	ldr	r3, [pc, #428]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20015fc4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
20015fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20015fd0:	4a67      	ldr	r2, [pc, #412]	@ (20016170 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
20015fd2:	430b      	orrs	r3, r1
20015fd4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
20015fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015fda:	e9d3 2300 	ldrd	r2, r3, [r3]
20015fde:	2100      	movs	r1, #0
20015fe0:	62b9      	str	r1, [r7, #40]	@ 0x28
20015fe2:	f003 0301 	and.w	r3, r3, #1
20015fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
20015fe8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
20015fec:	460b      	mov	r3, r1
20015fee:	4313      	orrs	r3, r2
20015ff0:	d011      	beq.n	20016016 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
20015ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20015ff6:	3308      	adds	r3, #8
20015ff8:	2100      	movs	r1, #0
20015ffa:	4618      	mov	r0, r3
20015ffc:	f001 fe36 	bl	20017c6c <RCCEx_PLL2_Config>
20016000:	4603      	mov	r3, r0
20016002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
20016006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001600a:	2b00      	cmp	r3, #0
2001600c:	d003      	beq.n	20016016 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2001600e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20016012:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
20016016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001601a:	e9d3 2300 	ldrd	r2, r3, [r3]
2001601e:	2100      	movs	r1, #0
20016020:	6239      	str	r1, [r7, #32]
20016022:	f003 0302 	and.w	r3, r3, #2
20016026:	627b      	str	r3, [r7, #36]	@ 0x24
20016028:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
2001602c:	460b      	mov	r3, r1
2001602e:	4313      	orrs	r3, r2
20016030:	d011      	beq.n	20016056 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
20016032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20016036:	3308      	adds	r3, #8
20016038:	2101      	movs	r1, #1
2001603a:	4618      	mov	r0, r3
2001603c:	f001 fe16 	bl	20017c6c <RCCEx_PLL2_Config>
20016040:	4603      	mov	r3, r0
20016042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
20016046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001604a:	2b00      	cmp	r3, #0
2001604c:	d003      	beq.n	20016056 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2001604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20016052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
20016056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001605a:	e9d3 2300 	ldrd	r2, r3, [r3]
2001605e:	2100      	movs	r1, #0
20016060:	61b9      	str	r1, [r7, #24]
20016062:	f003 0304 	and.w	r3, r3, #4
20016066:	61fb      	str	r3, [r7, #28]
20016068:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
2001606c:	460b      	mov	r3, r1
2001606e:	4313      	orrs	r3, r2
20016070:	d011      	beq.n	20016096 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
20016072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20016076:	3308      	adds	r3, #8
20016078:	2102      	movs	r1, #2
2001607a:	4618      	mov	r0, r3
2001607c:	f001 fdf6 	bl	20017c6c <RCCEx_PLL2_Config>
20016080:	4603      	mov	r3, r0
20016082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
20016086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001608a:	2b00      	cmp	r3, #0
2001608c:	d003      	beq.n	20016096 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2001608e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20016092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
20016096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001609a:	e9d3 2300 	ldrd	r2, r3, [r3]
2001609e:	2100      	movs	r1, #0
200160a0:	6139      	str	r1, [r7, #16]
200160a2:	f003 0308 	and.w	r3, r3, #8
200160a6:	617b      	str	r3, [r7, #20]
200160a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
200160ac:	460b      	mov	r3, r1
200160ae:	4313      	orrs	r3, r2
200160b0:	d011      	beq.n	200160d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
200160b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200160b6:	3328      	adds	r3, #40	@ 0x28
200160b8:	2100      	movs	r1, #0
200160ba:	4618      	mov	r0, r3
200160bc:	f001 fe88 	bl	20017dd0 <RCCEx_PLL3_Config>
200160c0:	4603      	mov	r3, r0
200160c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
200160c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200160ca:	2b00      	cmp	r3, #0
200160cc:	d003      	beq.n	200160d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
200160ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
200160d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
200160d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200160da:	e9d3 2300 	ldrd	r2, r3, [r3]
200160de:	2100      	movs	r1, #0
200160e0:	60b9      	str	r1, [r7, #8]
200160e2:	f003 0310 	and.w	r3, r3, #16
200160e6:	60fb      	str	r3, [r7, #12]
200160e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
200160ec:	460b      	mov	r3, r1
200160ee:	4313      	orrs	r3, r2
200160f0:	d011      	beq.n	20016116 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
200160f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
200160f6:	3328      	adds	r3, #40	@ 0x28
200160f8:	2101      	movs	r1, #1
200160fa:	4618      	mov	r0, r3
200160fc:	f001 fe68 	bl	20017dd0 <RCCEx_PLL3_Config>
20016100:	4603      	mov	r3, r0
20016102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
20016106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001610a:	2b00      	cmp	r3, #0
2001610c:	d003      	beq.n	20016116 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2001610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20016112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
20016116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2001611a:	e9d3 2300 	ldrd	r2, r3, [r3]
2001611e:	2100      	movs	r1, #0
20016120:	6039      	str	r1, [r7, #0]
20016122:	f003 0320 	and.w	r3, r3, #32
20016126:	607b      	str	r3, [r7, #4]
20016128:	e9d7 1200 	ldrd	r1, r2, [r7]
2001612c:	460b      	mov	r3, r1
2001612e:	4313      	orrs	r3, r2
20016130:	d011      	beq.n	20016156 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
20016132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
20016136:	3328      	adds	r3, #40	@ 0x28
20016138:	2102      	movs	r1, #2
2001613a:	4618      	mov	r0, r3
2001613c:	f001 fe48 	bl	20017dd0 <RCCEx_PLL3_Config>
20016140:	4603      	mov	r3, r0
20016142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
20016146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
2001614a:	2b00      	cmp	r3, #0
2001614c:	d003      	beq.n	20016156 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2001614e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
20016152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
20016156:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
2001615a:	2b00      	cmp	r3, #0
2001615c:	d101      	bne.n	20016162 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
2001615e:	2300      	movs	r3, #0
20016160:	e000      	b.n	20016164 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
20016162:	2301      	movs	r3, #1
}
20016164:	4618      	mov	r0, r3
20016166:	f507 7794 	add.w	r7, r7, #296	@ 0x128
2001616a:	46bd      	mov	sp, r7
2001616c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20016170:	58024400 	.word	0x58024400

20016174 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20016174:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
20016178:	b08b      	sub	sp, #44	@ 0x2c
2001617a:	af00      	add	r7, sp, #0
2001617c:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
2001617e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20016180:	4aab      	ldr	r2, [pc, #684]	@ (20016430 <HAL_RCCEx_GetPeriphCLKConfig+0x2bc>)
20016182:	f04f 0300 	mov.w	r3, #0
20016186:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
2001618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001618c:	e9d3 2300 	ldrd	r2, r3, [r3]
20016190:	f042 0408 	orr.w	r4, r2, #8
20016194:	461d      	mov	r5, r3
20016196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016198:	e9c3 4500 	strd	r4, r5, [r3]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
2001619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001619e:	e9d3 2300 	ldrd	r2, r3, [r3]
200161a2:	f442 7100 	orr.w	r1, r2, #512	@ 0x200
200161a6:	61b9      	str	r1, [r7, #24]
200161a8:	61fb      	str	r3, [r7, #28]
200161aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200161ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
200161b0:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
200161b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200161b6:	e9d3 2300 	ldrd	r2, r3, [r3]
200161ba:	f442 6180 	orr.w	r1, r2, #1024	@ 0x400
200161be:	6139      	str	r1, [r7, #16]
200161c0:	617b      	str	r3, [r7, #20]
200161c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200161c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
200161c8:	e9c3 1200 	strd	r1, r2, [r3]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
200161cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200161ce:	e9d3 2300 	ldrd	r2, r3, [r3]
200161d2:	f442 6100 	orr.w	r1, r2, #2048	@ 0x800
200161d6:	60b9      	str	r1, [r7, #8]
200161d8:	60fb      	str	r3, [r7, #12]
200161da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200161dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
200161e0:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
200161e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200161e6:	e9d3 2300 	ldrd	r2, r3, [r3]
200161ea:	f042 7100 	orr.w	r1, r2, #33554432	@ 0x2000000
200161ee:	6039      	str	r1, [r7, #0]
200161f0:	607b      	str	r3, [r7, #4]
200161f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200161f4:	e9d7 1200 	ldrd	r1, r2, [r7]
200161f8:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
200161fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200161fe:	e9d3 2300 	ldrd	r2, r3, [r3]
20016202:	f042 5a80 	orr.w	sl, r2, #268435456	@ 0x10000000
20016206:	469b      	mov	fp, r3
20016208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001620a:	e9c3 ab00 	strd	sl, fp, [r3]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
2001620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016210:	e9d3 2300 	ldrd	r2, r3, [r3]
20016214:	f042 5800 	orr.w	r8, r2, #536870912	@ 0x20000000
20016218:	4699      	mov	r9, r3
2001621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001621c:	e9c3 8900 	strd	r8, r9, [r3]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
20016220:	4b84      	ldr	r3, [pc, #528]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20016224:	0d1b      	lsrs	r3, r3, #20
20016226:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
2001622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001622c:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
2001622e:	4b81      	ldr	r3, [pc, #516]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20016232:	f3c3 0308 	ubfx	r3, r3, #0, #9
20016236:	1c5a      	adds	r2, r3, #1
20016238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001623a:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
2001623c:	4b7d      	ldr	r3, [pc, #500]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001623e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20016240:	0e1b      	lsrs	r3, r3, #24
20016242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20016246:	1c5a      	adds	r2, r3, #1
20016248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001624a:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
2001624c:	4b79      	ldr	r3, [pc, #484]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001624e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20016250:	0a5b      	lsrs	r3, r3, #9
20016252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20016256:	1c5a      	adds	r2, r3, #1
20016258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001625a:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
2001625c:	4b75      	ldr	r3, [pc, #468]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20016260:	0c1b      	lsrs	r3, r3, #16
20016262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20016266:	1c5a      	adds	r2, r3, #1
20016268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001626a:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
2001626c:	4b71      	ldr	r3, [pc, #452]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20016270:	0a9b      	lsrs	r3, r3, #10
20016272:	f003 0203 	and.w	r2, r3, #3
20016276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016278:	63da      	str	r2, [r3, #60]	@ 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
2001627a:	4b6e      	ldr	r3, [pc, #440]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2001627e:	0a5b      	lsrs	r3, r3, #9
20016280:	f003 0201 	and.w	r2, r3, #1
20016284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
20016288:	4b6a      	ldr	r3, [pc, #424]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2001628c:	0b1b      	lsrs	r3, r3, #12
2001628e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20016292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016294:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
20016296:	4b67      	ldr	r3, [pc, #412]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2001629a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2001629e:	1c5a      	adds	r2, r3, #1
200162a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200162a2:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
200162a4:	4b63      	ldr	r3, [pc, #396]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200162a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200162a8:	0e1b      	lsrs	r3, r3, #24
200162aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200162ae:	1c5a      	adds	r2, r3, #1
200162b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200162b2:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
200162b4:	4b5f      	ldr	r3, [pc, #380]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200162b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200162b8:	0a5b      	lsrs	r3, r3, #9
200162ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200162be:	1c5a      	adds	r2, r3, #1
200162c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200162c2:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
200162c4:	4b5b      	ldr	r3, [pc, #364]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200162c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200162c8:	0c1b      	lsrs	r3, r3, #16
200162ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200162ce:	1c5a      	adds	r2, r3, #1
200162d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200162d2:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
200162d4:	4b57      	ldr	r3, [pc, #348]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200162d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200162d8:	099b      	lsrs	r3, r3, #6
200162da:	f003 0203 	and.w	r2, r3, #3
200162de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200162e0:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
200162e2:	4b54      	ldr	r3, [pc, #336]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200162e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200162e6:	095b      	lsrs	r3, r3, #5
200162e8:	f003 0201 	and.w	r2, r3, #1
200162ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200162ee:	621a      	str	r2, [r3, #32]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
200162f0:	4b50      	ldr	r3, [pc, #320]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200162f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200162f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
200162f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200162fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
200162fc:	4b4d      	ldr	r3, [pc, #308]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200162fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20016300:	f003 0207 	and.w	r2, r3, #7
20016304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016306:	679a      	str	r2, [r3, #120]	@ 0x78
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
20016308:	4b4a      	ldr	r3, [pc, #296]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001630a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2001630c:	f003 0207 	and.w	r2, r3, #7
20016310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016312:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
20016316:	4b47      	ldr	r3, [pc, #284]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2001631a:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
2001631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
20016324:	4b43      	ldr	r3, [pc, #268]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20016328:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
2001632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001632e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
20016332:	4b40      	ldr	r3, [pc, #256]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20016336:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
2001633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001633c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
20016340:	4b3c      	ldr	r3, [pc, #240]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20016344:	f403 4260 	and.w	r2, r3, #57344	@ 0xe000
20016348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001634a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
2001634e:	4b39      	ldr	r3, [pc, #228]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20016352:	f003 0207 	and.w	r2, r3, #7
20016356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016358:	659a      	str	r2, [r3, #88]	@ 0x58
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
2001635a:	4b36      	ldr	r3, [pc, #216]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001635c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2001635e:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
20016362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016364:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
20016366:	4b33      	ldr	r3, [pc, #204]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2001636a:	f403 0260 	and.w	r2, r3, #14680064	@ 0xe00000
2001636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016370:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
20016374:	4b2f      	ldr	r3, [pc, #188]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20016378:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
2001637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001637e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
20016382:	4b2c      	ldr	r3, [pc, #176]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20016386:	f403 7240 	and.w	r2, r3, #768	@ 0x300
2001638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001638c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
20016390:	4b28      	ldr	r3, [pc, #160]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20016394:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
20016398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001639a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
2001639e:	4b25      	ldr	r3, [pc, #148]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200163a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200163a2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
200163a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200163a8:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
200163aa:	4b22      	ldr	r3, [pc, #136]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200163ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200163ae:	f403 7240 	and.w	r2, r3, #768	@ 0x300
200163b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200163b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
200163b8:	4b1e      	ldr	r3, [pc, #120]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200163ba:	691b      	ldr	r3, [r3, #16]
200163bc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
200163c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200163c2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
200163c6:	4b1b      	ldr	r3, [pc, #108]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200163c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200163ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
200163ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200163d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
200163d4:	4b17      	ldr	r3, [pc, #92]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200163d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200163d8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
200163dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200163de:	675a      	str	r2, [r3, #116]	@ 0x74
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
200163e0:	4b14      	ldr	r3, [pc, #80]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200163e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200163e4:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
200163e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200163ea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
200163ec:	4b11      	ldr	r3, [pc, #68]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200163ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200163f0:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
200163f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200163f6:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
200163f8:	4b0e      	ldr	r3, [pc, #56]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
200163fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200163fc:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
20016400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016402:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
20016404:	4b0b      	ldr	r3, [pc, #44]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20016408:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
2001640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001640e:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
20016410:	4b08      	ldr	r3, [pc, #32]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20016414:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
20016418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001641a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
2001641e:	4b05      	ldr	r3, [pc, #20]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
20016420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20016422:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
20016426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016428:	671a      	str	r2, [r3, #112]	@ 0x70
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
2001642a:	4b02      	ldr	r3, [pc, #8]	@ (20016434 <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
2001642c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2001642e:	e003      	b.n	20016438 <HAL_RCCEx_GetPeriphCLKConfig+0x2c4>
20016430:	c9fff1f7 	.word	0xc9fff1f7
20016434:	58024400 	.word	0x58024400
20016438:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
2001643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001643e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
20016442:	4b14      	ldr	r3, [pc, #80]	@ (20016494 <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
20016444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20016446:	f003 0203 	and.w	r2, r3, #3
2001644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001644c:	649a      	str	r2, [r3, #72]	@ 0x48
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
2001644e:	4b11      	ldr	r3, [pc, #68]	@ (20016494 <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
20016450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20016452:	f003 0230 	and.w	r2, r3, #48	@ 0x30
20016456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016458:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
2001645a:	4b0e      	ldr	r3, [pc, #56]	@ (20016494 <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
2001645c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2001645e:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
20016462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016464:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
20016466:	4b0b      	ldr	r3, [pc, #44]	@ (20016494 <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
20016468:	691b      	ldr	r3, [r3, #16]
2001646a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2001646e:	2b00      	cmp	r3, #0
20016470:	d104      	bne.n	2001647c <HAL_RCCEx_GetPeriphCLKConfig+0x308>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
20016472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20016474:	2200      	movs	r2, #0
20016476:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
2001647a:	e004      	b.n	20016486 <HAL_RCCEx_GetPeriphCLKConfig+0x312>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2001647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2001647e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
20016482:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
20016486:	bf00      	nop
20016488:	372c      	adds	r7, #44	@ 0x2c
2001648a:	46bd      	mov	sp, r7
2001648c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
20016490:	4770      	bx	lr
20016492:	bf00      	nop
20016494:	58024400 	.word	0x58024400

20016498 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
20016498:	b580      	push	{r7, lr}
2001649a:	b090      	sub	sp, #64	@ 0x40
2001649c:	af00      	add	r7, sp, #0
2001649e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
200164a2:	e9d7 2300 	ldrd	r2, r3, [r7]
200164a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
200164aa:	430b      	orrs	r3, r1
200164ac:	f040 8094 	bne.w	200165d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
200164b0:	4b9e      	ldr	r3, [pc, #632]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200164b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200164b4:	f003 0307 	and.w	r3, r3, #7
200164b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
200164ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200164bc:	2b04      	cmp	r3, #4
200164be:	f200 8087 	bhi.w	200165d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
200164c2:	a201      	add	r2, pc, #4	@ (adr r2, 200164c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
200164c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200164c8:	200164dd 	.word	0x200164dd
200164cc:	20016505 	.word	0x20016505
200164d0:	2001652d 	.word	0x2001652d
200164d4:	200165c9 	.word	0x200165c9
200164d8:	20016555 	.word	0x20016555
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
200164dc:	4b93      	ldr	r3, [pc, #588]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200164de:	681b      	ldr	r3, [r3, #0]
200164e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200164e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
200164e8:	d108      	bne.n	200164fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
200164ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
200164ee:	4618      	mov	r0, r3
200164f0:	f001 f826 	bl	20017540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
200164f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200164f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
200164f8:	f000 bd45 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
200164fc:	2300      	movs	r3, #0
200164fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016500:	f000 bd41 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
20016504:	4b89      	ldr	r3, [pc, #548]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
20016506:	681b      	ldr	r3, [r3, #0]
20016508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
2001650c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016510:	d108      	bne.n	20016524 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016512:	f107 0318 	add.w	r3, r7, #24
20016516:	4618      	mov	r0, r3
20016518:	f000 fd6a 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2001651c:	69bb      	ldr	r3, [r7, #24]
2001651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016520:	f000 bd31 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016524:	2300      	movs	r3, #0
20016526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016528:	f000 bd2d 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2001652c:	4b7f      	ldr	r3, [pc, #508]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
2001652e:	681b      	ldr	r3, [r3, #0]
20016530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20016534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016538:	d108      	bne.n	2001654c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2001653a:	f107 030c 	add.w	r3, r7, #12
2001653e:	4618      	mov	r0, r3
20016540:	f000 feaa 	bl	20017298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
20016544:	68fb      	ldr	r3, [r7, #12]
20016546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016548:	f000 bd1d 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
2001654c:	2300      	movs	r3, #0
2001654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016550:	f000 bd19 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
20016554:	4b75      	ldr	r3, [pc, #468]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
20016556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20016558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
2001655c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2001655e:	4b73      	ldr	r3, [pc, #460]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
20016560:	681b      	ldr	r3, [r3, #0]
20016562:	f003 0304 	and.w	r3, r3, #4
20016566:	2b04      	cmp	r3, #4
20016568:	d10c      	bne.n	20016584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
2001656a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2001656c:	2b00      	cmp	r3, #0
2001656e:	d109      	bne.n	20016584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
20016570:	4b6e      	ldr	r3, [pc, #440]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
20016572:	681b      	ldr	r3, [r3, #0]
20016574:	08db      	lsrs	r3, r3, #3
20016576:	f003 0303 	and.w	r3, r3, #3
2001657a:	4a6d      	ldr	r2, [pc, #436]	@ (20016730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
2001657c:	fa22 f303 	lsr.w	r3, r2, r3
20016580:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016582:	e01f      	b.n	200165c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
20016584:	4b69      	ldr	r3, [pc, #420]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
20016586:	681b      	ldr	r3, [r3, #0]
20016588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2001658c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20016590:	d106      	bne.n	200165a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
20016592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20016598:	d102      	bne.n	200165a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2001659a:	4b66      	ldr	r3, [pc, #408]	@ (20016734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
2001659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
2001659e:	e011      	b.n	200165c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
200165a0:	4b62      	ldr	r3, [pc, #392]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200165a2:	681b      	ldr	r3, [r3, #0]
200165a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200165a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
200165ac:	d106      	bne.n	200165bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
200165ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200165b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
200165b4:	d102      	bne.n	200165bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
200165b6:	4b60      	ldr	r3, [pc, #384]	@ (20016738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
200165b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
200165ba:	e003      	b.n	200165c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
200165bc:	2300      	movs	r3, #0
200165be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
200165c0:	f000 bce1 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
200165c4:	f000 bcdf 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
200165c8:	4b5c      	ldr	r3, [pc, #368]	@ (2001673c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
200165ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
200165cc:	f000 bcdb 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
200165d0:	2300      	movs	r3, #0
200165d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
200165d4:	f000 bcd7 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
200165d8:	e9d7 2300 	ldrd	r2, r3, [r7]
200165dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
200165e0:	430b      	orrs	r3, r1
200165e2:	f040 80ad 	bne.w	20016740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
200165e6:	4b51      	ldr	r3, [pc, #324]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200165e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200165ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
200165ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
200165f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200165f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
200165f6:	d056      	beq.n	200166a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
200165f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200165fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
200165fe:	f200 8090 	bhi.w	20016722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
20016602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016604:	2bc0      	cmp	r3, #192	@ 0xc0
20016606:	f000 8088 	beq.w	2001671a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
2001660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2001660c:	2bc0      	cmp	r3, #192	@ 0xc0
2001660e:	f200 8088 	bhi.w	20016722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
20016612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016614:	2b80      	cmp	r3, #128	@ 0x80
20016616:	d032      	beq.n	2001667e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
20016618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2001661a:	2b80      	cmp	r3, #128	@ 0x80
2001661c:	f200 8081 	bhi.w	20016722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
20016620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016622:	2b00      	cmp	r3, #0
20016624:	d003      	beq.n	2001662e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
20016626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016628:	2b40      	cmp	r3, #64	@ 0x40
2001662a:	d014      	beq.n	20016656 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
2001662c:	e079      	b.n	20016722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2001662e:	4b3f      	ldr	r3, [pc, #252]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
20016630:	681b      	ldr	r3, [r3, #0]
20016632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20016636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2001663a:	d108      	bne.n	2001664e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2001663c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20016640:	4618      	mov	r0, r3
20016642:	f000 ff7d 	bl	20017540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
20016646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20016648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2001664a:	f000 bc9c 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
2001664e:	2300      	movs	r3, #0
20016650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016652:	f000 bc98 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
20016656:	4b35      	ldr	r3, [pc, #212]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
20016658:	681b      	ldr	r3, [r3, #0]
2001665a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
2001665e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016662:	d108      	bne.n	20016676 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016664:	f107 0318 	add.w	r3, r7, #24
20016668:	4618      	mov	r0, r3
2001666a:	f000 fcc1 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2001666e:	69bb      	ldr	r3, [r7, #24]
20016670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016672:	f000 bc88 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016676:	2300      	movs	r3, #0
20016678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2001667a:	f000 bc84 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2001667e:	4b2b      	ldr	r3, [pc, #172]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
20016680:	681b      	ldr	r3, [r3, #0]
20016682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20016686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2001668a:	d108      	bne.n	2001669e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2001668c:	f107 030c 	add.w	r3, r7, #12
20016690:	4618      	mov	r0, r3
20016692:	f000 fe01 	bl	20017298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
20016696:	68fb      	ldr	r3, [r7, #12]
20016698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2001669a:	f000 bc74 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
2001669e:	2300      	movs	r3, #0
200166a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
200166a2:	f000 bc70 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
200166a6:	4b21      	ldr	r3, [pc, #132]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200166a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200166aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
200166ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
200166b0:	4b1e      	ldr	r3, [pc, #120]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200166b2:	681b      	ldr	r3, [r3, #0]
200166b4:	f003 0304 	and.w	r3, r3, #4
200166b8:	2b04      	cmp	r3, #4
200166ba:	d10c      	bne.n	200166d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
200166bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200166be:	2b00      	cmp	r3, #0
200166c0:	d109      	bne.n	200166d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
200166c2:	4b1a      	ldr	r3, [pc, #104]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200166c4:	681b      	ldr	r3, [r3, #0]
200166c6:	08db      	lsrs	r3, r3, #3
200166c8:	f003 0303 	and.w	r3, r3, #3
200166cc:	4a18      	ldr	r2, [pc, #96]	@ (20016730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
200166ce:	fa22 f303 	lsr.w	r3, r2, r3
200166d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
200166d4:	e01f      	b.n	20016716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
200166d6:	4b15      	ldr	r3, [pc, #84]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200166d8:	681b      	ldr	r3, [r3, #0]
200166da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200166de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
200166e2:	d106      	bne.n	200166f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
200166e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200166e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
200166ea:	d102      	bne.n	200166f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
200166ec:	4b11      	ldr	r3, [pc, #68]	@ (20016734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
200166ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
200166f0:	e011      	b.n	20016716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
200166f2:	4b0e      	ldr	r3, [pc, #56]	@ (2001672c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
200166f4:	681b      	ldr	r3, [r3, #0]
200166f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200166fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
200166fe:	d106      	bne.n	2001670e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
20016700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016706:	d102      	bne.n	2001670e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
20016708:	4b0b      	ldr	r3, [pc, #44]	@ (20016738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
2001670a:	63fb      	str	r3, [r7, #60]	@ 0x3c
2001670c:	e003      	b.n	20016716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2001670e:	2300      	movs	r3, #0
20016710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
20016712:	f000 bc38 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
20016716:	f000 bc36 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2001671a:	4b08      	ldr	r3, [pc, #32]	@ (2001673c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
2001671c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2001671e:	f000 bc32 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
20016722:	2300      	movs	r3, #0
20016724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016726:	f000 bc2e 	b.w	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
2001672a:	bf00      	nop
2001672c:	58024400 	.word	0x58024400
20016730:	03d09000 	.word	0x03d09000
20016734:	003d0900 	.word	0x003d0900
20016738:	00b71b00 	.word	0x00b71b00
2001673c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
20016740:	e9d7 2300 	ldrd	r2, r3, [r7]
20016744:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
20016748:	430b      	orrs	r3, r1
2001674a:	f040 809c 	bne.w	20016886 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
2001674e:	4b9e      	ldr	r3, [pc, #632]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20016752:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
20016756:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
20016758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2001675a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
2001675e:	d054      	beq.n	2001680a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
20016760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
20016766:	f200 808b 	bhi.w	20016880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
2001676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2001676c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
20016770:	f000 8083 	beq.w	2001687a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
20016774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016776:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
2001677a:	f200 8081 	bhi.w	20016880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
2001677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20016784:	d02f      	beq.n	200167e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
20016786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
2001678c:	d878      	bhi.n	20016880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
2001678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016790:	2b00      	cmp	r3, #0
20016792:	d004      	beq.n	2001679e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
20016794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20016796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
2001679a:	d012      	beq.n	200167c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
2001679c:	e070      	b.n	20016880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2001679e:	4b8a      	ldr	r3, [pc, #552]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
200167a0:	681b      	ldr	r3, [r3, #0]
200167a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200167a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
200167aa:	d107      	bne.n	200167bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
200167ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
200167b0:	4618      	mov	r0, r3
200167b2:	f000 fec5 	bl	20017540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
200167b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200167b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
200167ba:	e3e4      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
200167bc:	2300      	movs	r3, #0
200167be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
200167c0:	e3e1      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
200167c2:	4b81      	ldr	r3, [pc, #516]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
200167c4:	681b      	ldr	r3, [r3, #0]
200167c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200167ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
200167ce:	d107      	bne.n	200167e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
200167d0:	f107 0318 	add.w	r3, r7, #24
200167d4:	4618      	mov	r0, r3
200167d6:	f000 fc0b 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
200167da:	69bb      	ldr	r3, [r7, #24]
200167dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
200167de:	e3d2      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
200167e0:	2300      	movs	r3, #0
200167e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
200167e4:	e3cf      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
200167e6:	4b78      	ldr	r3, [pc, #480]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
200167e8:	681b      	ldr	r3, [r3, #0]
200167ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
200167ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
200167f2:	d107      	bne.n	20016804 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
200167f4:	f107 030c 	add.w	r3, r7, #12
200167f8:	4618      	mov	r0, r3
200167fa:	f000 fd4d 	bl	20017298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
200167fe:	68fb      	ldr	r3, [r7, #12]
20016800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016802:	e3c0      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016804:	2300      	movs	r3, #0
20016806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016808:	e3bd      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2001680a:	4b6f      	ldr	r3, [pc, #444]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
2001680c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2001680e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
20016812:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
20016814:	4b6c      	ldr	r3, [pc, #432]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016816:	681b      	ldr	r3, [r3, #0]
20016818:	f003 0304 	and.w	r3, r3, #4
2001681c:	2b04      	cmp	r3, #4
2001681e:	d10c      	bne.n	2001683a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
20016820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016822:	2b00      	cmp	r3, #0
20016824:	d109      	bne.n	2001683a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
20016826:	4b68      	ldr	r3, [pc, #416]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016828:	681b      	ldr	r3, [r3, #0]
2001682a:	08db      	lsrs	r3, r3, #3
2001682c:	f003 0303 	and.w	r3, r3, #3
20016830:	4a66      	ldr	r2, [pc, #408]	@ (200169cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
20016832:	fa22 f303 	lsr.w	r3, r2, r3
20016836:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016838:	e01e      	b.n	20016878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2001683a:	4b63      	ldr	r3, [pc, #396]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
2001683c:	681b      	ldr	r3, [r3, #0]
2001683e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20016842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20016846:	d106      	bne.n	20016856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
20016848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2001684a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2001684e:	d102      	bne.n	20016856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
20016850:	4b5f      	ldr	r3, [pc, #380]	@ (200169d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
20016852:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016854:	e010      	b.n	20016878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
20016856:	4b5c      	ldr	r3, [pc, #368]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016858:	681b      	ldr	r3, [r3, #0]
2001685a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2001685e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016862:	d106      	bne.n	20016872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
20016864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2001686a:	d102      	bne.n	20016872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2001686c:	4b59      	ldr	r3, [pc, #356]	@ (200169d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
2001686e:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016870:	e002      	b.n	20016878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
20016872:	2300      	movs	r3, #0
20016874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
20016876:	e386      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
20016878:	e385      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2001687a:	4b57      	ldr	r3, [pc, #348]	@ (200169d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2001687c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2001687e:	e382      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
20016880:	2300      	movs	r3, #0
20016882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016884:	e37f      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
20016886:	e9d7 2300 	ldrd	r2, r3, [r7]
2001688a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
2001688e:	430b      	orrs	r3, r1
20016890:	f040 80a7 	bne.w	200169e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
20016894:	4b4c      	ldr	r3, [pc, #304]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20016898:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
2001689c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
2001689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200168a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
200168a4:	d055      	beq.n	20016952 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
200168a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200168a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
200168ac:	f200 8096 	bhi.w	200169dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
200168b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200168b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
200168b6:	f000 8084 	beq.w	200169c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
200168ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200168bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
200168c0:	f200 808c 	bhi.w	200169dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
200168c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200168c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
200168ca:	d030      	beq.n	2001692e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
200168cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200168ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
200168d2:	f200 8083 	bhi.w	200169dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
200168d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200168d8:	2b00      	cmp	r3, #0
200168da:	d004      	beq.n	200168e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
200168dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200168de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
200168e2:	d012      	beq.n	2001690a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
200168e4:	e07a      	b.n	200169dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
200168e6:	4b38      	ldr	r3, [pc, #224]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
200168e8:	681b      	ldr	r3, [r3, #0]
200168ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200168ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
200168f2:	d107      	bne.n	20016904 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
200168f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
200168f8:	4618      	mov	r0, r3
200168fa:	f000 fe21 	bl	20017540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
200168fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20016900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016902:	e340      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016904:	2300      	movs	r3, #0
20016906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016908:	e33d      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2001690a:	4b2f      	ldr	r3, [pc, #188]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
2001690c:	681b      	ldr	r3, [r3, #0]
2001690e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20016912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016916:	d107      	bne.n	20016928 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016918:	f107 0318 	add.w	r3, r7, #24
2001691c:	4618      	mov	r0, r3
2001691e:	f000 fb67 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
20016922:	69bb      	ldr	r3, [r7, #24]
20016924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016926:	e32e      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016928:	2300      	movs	r3, #0
2001692a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2001692c:	e32b      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2001692e:	4b26      	ldr	r3, [pc, #152]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016930:	681b      	ldr	r3, [r3, #0]
20016932:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20016936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2001693a:	d107      	bne.n	2001694c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2001693c:	f107 030c 	add.w	r3, r7, #12
20016940:	4618      	mov	r0, r3
20016942:	f000 fca9 	bl	20017298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
20016946:	68fb      	ldr	r3, [r7, #12]
20016948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2001694a:	e31c      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
2001694c:	2300      	movs	r3, #0
2001694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016950:	e319      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
20016952:	4b1d      	ldr	r3, [pc, #116]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20016956:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
2001695a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2001695c:	4b1a      	ldr	r3, [pc, #104]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
2001695e:	681b      	ldr	r3, [r3, #0]
20016960:	f003 0304 	and.w	r3, r3, #4
20016964:	2b04      	cmp	r3, #4
20016966:	d10c      	bne.n	20016982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
20016968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2001696a:	2b00      	cmp	r3, #0
2001696c:	d109      	bne.n	20016982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2001696e:	4b16      	ldr	r3, [pc, #88]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016970:	681b      	ldr	r3, [r3, #0]
20016972:	08db      	lsrs	r3, r3, #3
20016974:	f003 0303 	and.w	r3, r3, #3
20016978:	4a14      	ldr	r2, [pc, #80]	@ (200169cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
2001697a:	fa22 f303 	lsr.w	r3, r2, r3
2001697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016980:	e01e      	b.n	200169c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
20016982:	4b11      	ldr	r3, [pc, #68]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
20016984:	681b      	ldr	r3, [r3, #0]
20016986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2001698a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2001698e:	d106      	bne.n	2001699e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
20016990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20016996:	d102      	bne.n	2001699e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
20016998:	4b0d      	ldr	r3, [pc, #52]	@ (200169d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
2001699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
2001699c:	e010      	b.n	200169c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2001699e:	4b0a      	ldr	r3, [pc, #40]	@ (200169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
200169a0:	681b      	ldr	r3, [r3, #0]
200169a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200169a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
200169aa:	d106      	bne.n	200169ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
200169ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200169ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
200169b2:	d102      	bne.n	200169ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
200169b4:	4b07      	ldr	r3, [pc, #28]	@ (200169d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
200169b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
200169b8:	e002      	b.n	200169c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
200169ba:	2300      	movs	r3, #0
200169bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
200169be:	e2e2      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
200169c0:	e2e1      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
200169c2:	4b05      	ldr	r3, [pc, #20]	@ (200169d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
200169c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
200169c6:	e2de      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
200169c8:	58024400 	.word	0x58024400
200169cc:	03d09000 	.word	0x03d09000
200169d0:	003d0900 	.word	0x003d0900
200169d4:	00b71b00 	.word	0x00b71b00
200169d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
200169dc:	2300      	movs	r3, #0
200169de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
200169e0:	e2d1      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
200169e2:	e9d7 2300 	ldrd	r2, r3, [r7]
200169e6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
200169ea:	430b      	orrs	r3, r1
200169ec:	f040 809c 	bne.w	20016b28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
200169f0:	4b93      	ldr	r3, [pc, #588]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
200169f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
200169f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
200169f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
200169fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
200169fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20016a00:	d054      	beq.n	20016aac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
20016a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016a04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20016a08:	f200 808b 	bhi.w	20016b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
20016a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016a0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20016a12:	f000 8083 	beq.w	20016b1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
20016a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
20016a1c:	f200 8081 	bhi.w	20016b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
20016a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20016a26:	d02f      	beq.n	20016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
20016a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
20016a2e:	d878      	bhi.n	20016b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
20016a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016a32:	2b00      	cmp	r3, #0
20016a34:	d004      	beq.n	20016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
20016a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
20016a3c:	d012      	beq.n	20016a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
20016a3e:	e070      	b.n	20016b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
20016a40:	4b7f      	ldr	r3, [pc, #508]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016a42:	681b      	ldr	r3, [r3, #0]
20016a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20016a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
20016a4c:	d107      	bne.n	20016a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
20016a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20016a52:	4618      	mov	r0, r3
20016a54:	f000 fd74 	bl	20017540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
20016a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20016a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016a5c:	e293      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016a5e:	2300      	movs	r3, #0
20016a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016a62:	e290      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
20016a64:	4b76      	ldr	r3, [pc, #472]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016a66:	681b      	ldr	r3, [r3, #0]
20016a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20016a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016a70:	d107      	bne.n	20016a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016a72:	f107 0318 	add.w	r3, r7, #24
20016a76:	4618      	mov	r0, r3
20016a78:	f000 faba 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
20016a7c:	69bb      	ldr	r3, [r7, #24]
20016a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016a80:	e281      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016a82:	2300      	movs	r3, #0
20016a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016a86:	e27e      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
20016a88:	4b6d      	ldr	r3, [pc, #436]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016a8a:	681b      	ldr	r3, [r3, #0]
20016a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20016a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016a94:	d107      	bne.n	20016aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
20016a96:	f107 030c 	add.w	r3, r7, #12
20016a9a:	4618      	mov	r0, r3
20016a9c:	f000 fbfc 	bl	20017298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
20016aa0:	68fb      	ldr	r3, [r7, #12]
20016aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016aa4:	e26f      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016aa6:	2300      	movs	r3, #0
20016aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016aaa:	e26c      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
20016aac:	4b64      	ldr	r3, [pc, #400]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20016ab0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
20016ab4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
20016ab6:	4b62      	ldr	r3, [pc, #392]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016ab8:	681b      	ldr	r3, [r3, #0]
20016aba:	f003 0304 	and.w	r3, r3, #4
20016abe:	2b04      	cmp	r3, #4
20016ac0:	d10c      	bne.n	20016adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
20016ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016ac4:	2b00      	cmp	r3, #0
20016ac6:	d109      	bne.n	20016adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
20016ac8:	4b5d      	ldr	r3, [pc, #372]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016aca:	681b      	ldr	r3, [r3, #0]
20016acc:	08db      	lsrs	r3, r3, #3
20016ace:	f003 0303 	and.w	r3, r3, #3
20016ad2:	4a5c      	ldr	r2, [pc, #368]	@ (20016c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
20016ad4:	fa22 f303 	lsr.w	r3, r2, r3
20016ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016ada:	e01e      	b.n	20016b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
20016adc:	4b58      	ldr	r3, [pc, #352]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016ade:	681b      	ldr	r3, [r3, #0]
20016ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20016ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20016ae8:	d106      	bne.n	20016af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
20016aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20016af0:	d102      	bne.n	20016af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
20016af2:	4b55      	ldr	r3, [pc, #340]	@ (20016c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
20016af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016af6:	e010      	b.n	20016b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
20016af8:	4b51      	ldr	r3, [pc, #324]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016afa:	681b      	ldr	r3, [r3, #0]
20016afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20016b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016b04:	d106      	bne.n	20016b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
20016b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016b0c:	d102      	bne.n	20016b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
20016b0e:	4b4f      	ldr	r3, [pc, #316]	@ (20016c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
20016b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016b12:	e002      	b.n	20016b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
20016b14:	2300      	movs	r3, #0
20016b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
20016b18:	e235      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
20016b1a:	e234      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
20016b1c:	4b4c      	ldr	r3, [pc, #304]	@ (20016c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
20016b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016b20:	e231      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
20016b22:	2300      	movs	r3, #0
20016b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016b26:	e22e      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
20016b28:	e9d7 2300 	ldrd	r2, r3, [r7]
20016b2c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
20016b30:	430b      	orrs	r3, r1
20016b32:	f040 808f 	bne.w	20016c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
20016b36:	4b42      	ldr	r3, [pc, #264]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20016b3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
20016b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
20016b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20016b46:	d06b      	beq.n	20016c20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
20016b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20016b4e:	d874      	bhi.n	20016c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
20016b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
20016b56:	d056      	beq.n	20016c06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
20016b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
20016b5e:	d86c      	bhi.n	20016c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
20016b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
20016b66:	d03b      	beq.n	20016be0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
20016b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
20016b6e:	d864      	bhi.n	20016c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
20016b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016b76:	d021      	beq.n	20016bbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
20016b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016b7e:	d85c      	bhi.n	20016c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
20016b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b82:	2b00      	cmp	r3, #0
20016b84:	d004      	beq.n	20016b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
20016b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20016b8c:	d004      	beq.n	20016b98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
20016b8e:	e054      	b.n	20016c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
20016b90:	f7fd ff6e 	bl	20014a70 <HAL_RCC_GetPCLK1Freq>
20016b94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
20016b96:	e1f6      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
20016b98:	4b29      	ldr	r3, [pc, #164]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016b9a:	681b      	ldr	r3, [r3, #0]
20016b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20016ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016ba4:	d107      	bne.n	20016bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016ba6:	f107 0318 	add.w	r3, r7, #24
20016baa:	4618      	mov	r0, r3
20016bac:	f000 fa20 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
20016bb0:	69fb      	ldr	r3, [r7, #28]
20016bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016bb4:	e1e7      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016bb6:	2300      	movs	r3, #0
20016bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016bba:	e1e4      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
20016bbc:	4b20      	ldr	r3, [pc, #128]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016bbe:	681b      	ldr	r3, [r3, #0]
20016bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20016bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016bc8:	d107      	bne.n	20016bda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
20016bca:	f107 030c 	add.w	r3, r7, #12
20016bce:	4618      	mov	r0, r3
20016bd0:	f000 fb62 	bl	20017298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
20016bd4:	693b      	ldr	r3, [r7, #16]
20016bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016bd8:	e1d5      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016bda:	2300      	movs	r3, #0
20016bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016bde:	e1d2      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
20016be0:	4b17      	ldr	r3, [pc, #92]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016be2:	681b      	ldr	r3, [r3, #0]
20016be4:	f003 0304 	and.w	r3, r3, #4
20016be8:	2b04      	cmp	r3, #4
20016bea:	d109      	bne.n	20016c00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
20016bec:	4b14      	ldr	r3, [pc, #80]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016bee:	681b      	ldr	r3, [r3, #0]
20016bf0:	08db      	lsrs	r3, r3, #3
20016bf2:	f003 0303 	and.w	r3, r3, #3
20016bf6:	4a13      	ldr	r2, [pc, #76]	@ (20016c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
20016bf8:	fa22 f303 	lsr.w	r3, r2, r3
20016bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016bfe:	e1c2      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016c00:	2300      	movs	r3, #0
20016c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016c04:	e1bf      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
20016c06:	4b0e      	ldr	r3, [pc, #56]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016c08:	681b      	ldr	r3, [r3, #0]
20016c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20016c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20016c12:	d102      	bne.n	20016c1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
20016c14:	4b0c      	ldr	r3, [pc, #48]	@ (20016c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
20016c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016c18:	e1b5      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016c1a:	2300      	movs	r3, #0
20016c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016c1e:	e1b2      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
20016c20:	4b07      	ldr	r3, [pc, #28]	@ (20016c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
20016c22:	681b      	ldr	r3, [r3, #0]
20016c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20016c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016c2c:	d102      	bne.n	20016c34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
20016c2e:	4b07      	ldr	r3, [pc, #28]	@ (20016c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
20016c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016c32:	e1a8      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016c34:	2300      	movs	r3, #0
20016c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016c38:	e1a5      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
20016c3a:	2300      	movs	r3, #0
20016c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016c3e:	e1a2      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
20016c40:	58024400 	.word	0x58024400
20016c44:	03d09000 	.word	0x03d09000
20016c48:	003d0900 	.word	0x003d0900
20016c4c:	00b71b00 	.word	0x00b71b00
20016c50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
20016c54:	e9d7 2300 	ldrd	r2, r3, [r7]
20016c58:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
20016c5c:	430b      	orrs	r3, r1
20016c5e:	d173      	bne.n	20016d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
20016c60:	4b9c      	ldr	r3, [pc, #624]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20016c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20016c68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
20016c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016c70:	d02f      	beq.n	20016cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
20016c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016c78:	d863      	bhi.n	20016d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
20016c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016c7c:	2b00      	cmp	r3, #0
20016c7e:	d004      	beq.n	20016c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
20016c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20016c86:	d012      	beq.n	20016cae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
20016c88:	e05b      	b.n	20016d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
20016c8a:	4b92      	ldr	r3, [pc, #584]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016c8c:	681b      	ldr	r3, [r3, #0]
20016c8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20016c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016c96:	d107      	bne.n	20016ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016c98:	f107 0318 	add.w	r3, r7, #24
20016c9c:	4618      	mov	r0, r3
20016c9e:	f000 f9a7 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
20016ca2:	69bb      	ldr	r3, [r7, #24]
20016ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016ca6:	e16e      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016ca8:	2300      	movs	r3, #0
20016caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016cac:	e16b      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
20016cae:	4b89      	ldr	r3, [pc, #548]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016cb0:	681b      	ldr	r3, [r3, #0]
20016cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20016cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016cba:	d107      	bne.n	20016ccc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
20016cbc:	f107 030c 	add.w	r3, r7, #12
20016cc0:	4618      	mov	r0, r3
20016cc2:	f000 fae9 	bl	20017298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
20016cc6:	697b      	ldr	r3, [r7, #20]
20016cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016cca:	e15c      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016ccc:	2300      	movs	r3, #0
20016cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016cd0:	e159      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
20016cd2:	4b80      	ldr	r3, [pc, #512]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20016cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
20016cda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
20016cdc:	4b7d      	ldr	r3, [pc, #500]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016cde:	681b      	ldr	r3, [r3, #0]
20016ce0:	f003 0304 	and.w	r3, r3, #4
20016ce4:	2b04      	cmp	r3, #4
20016ce6:	d10c      	bne.n	20016d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
20016ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016cea:	2b00      	cmp	r3, #0
20016cec:	d109      	bne.n	20016d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
20016cee:	4b79      	ldr	r3, [pc, #484]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016cf0:	681b      	ldr	r3, [r3, #0]
20016cf2:	08db      	lsrs	r3, r3, #3
20016cf4:	f003 0303 	and.w	r3, r3, #3
20016cf8:	4a77      	ldr	r2, [pc, #476]	@ (20016ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
20016cfa:	fa22 f303 	lsr.w	r3, r2, r3
20016cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016d00:	e01e      	b.n	20016d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
20016d02:	4b74      	ldr	r3, [pc, #464]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016d04:	681b      	ldr	r3, [r3, #0]
20016d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20016d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20016d0e:	d106      	bne.n	20016d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
20016d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20016d16:	d102      	bne.n	20016d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
20016d18:	4b70      	ldr	r3, [pc, #448]	@ (20016edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
20016d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016d1c:	e010      	b.n	20016d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
20016d1e:	4b6d      	ldr	r3, [pc, #436]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016d20:	681b      	ldr	r3, [r3, #0]
20016d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20016d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016d2a:	d106      	bne.n	20016d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
20016d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20016d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016d32:	d102      	bne.n	20016d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
20016d34:	4b6a      	ldr	r3, [pc, #424]	@ (20016ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
20016d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
20016d38:	e002      	b.n	20016d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
20016d3a:	2300      	movs	r3, #0
20016d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
20016d3e:	e122      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
20016d40:	e121      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
20016d42:	2300      	movs	r3, #0
20016d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016d46:	e11e      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
20016d48:	e9d7 2300 	ldrd	r2, r3, [r7]
20016d4c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
20016d50:	430b      	orrs	r3, r1
20016d52:	d133      	bne.n	20016dbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
20016d54:	4b5f      	ldr	r3, [pc, #380]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20016d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20016d5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
20016d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016d60:	2b00      	cmp	r3, #0
20016d62:	d004      	beq.n	20016d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
20016d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20016d6a:	d012      	beq.n	20016d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
20016d6c:	e023      	b.n	20016db6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
20016d6e:	4b59      	ldr	r3, [pc, #356]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016d70:	681b      	ldr	r3, [r3, #0]
20016d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20016d76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
20016d7a:	d107      	bne.n	20016d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
20016d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20016d80:	4618      	mov	r0, r3
20016d82:	f000 fbdd 	bl	20017540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
20016d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20016d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016d8a:	e0fc      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016d8c:	2300      	movs	r3, #0
20016d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016d90:	e0f9      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
20016d92:	4b50      	ldr	r3, [pc, #320]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016d94:	681b      	ldr	r3, [r3, #0]
20016d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20016d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016d9e:	d107      	bne.n	20016db0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016da0:	f107 0318 	add.w	r3, r7, #24
20016da4:	4618      	mov	r0, r3
20016da6:	f000 f923 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
20016daa:	6a3b      	ldr	r3, [r7, #32]
20016dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016dae:	e0ea      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016db0:	2300      	movs	r3, #0
20016db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016db4:	e0e7      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
20016db6:	2300      	movs	r3, #0
20016db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016dba:	e0e4      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
20016dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
20016dc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
20016dc4:	430b      	orrs	r3, r1
20016dc6:	f040 808d 	bne.w	20016ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
20016dca:	4b42      	ldr	r3, [pc, #264]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20016dce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
20016dd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
20016dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20016dda:	d06b      	beq.n	20016eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
20016ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
20016de2:	d874      	bhi.n	20016ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
20016de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20016dea:	d056      	beq.n	20016e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
20016dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
20016df2:	d86c      	bhi.n	20016ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
20016df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016df6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
20016dfa:	d03b      	beq.n	20016e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
20016dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
20016e02:	d864      	bhi.n	20016ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
20016e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016e0a:	d021      	beq.n	20016e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
20016e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016e12:	d85c      	bhi.n	20016ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
20016e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016e16:	2b00      	cmp	r3, #0
20016e18:	d004      	beq.n	20016e24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
20016e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20016e20:	d004      	beq.n	20016e2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
20016e22:	e054      	b.n	20016ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
20016e24:	f000 f8ce 	bl	20016fc4 <HAL_RCCEx_GetD3PCLK1Freq>
20016e28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
20016e2a:	e0ac      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
20016e2c:	4b29      	ldr	r3, [pc, #164]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016e2e:	681b      	ldr	r3, [r3, #0]
20016e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20016e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016e38:	d107      	bne.n	20016e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016e3a:	f107 0318 	add.w	r3, r7, #24
20016e3e:	4618      	mov	r0, r3
20016e40:	f000 f8d6 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
20016e44:	69fb      	ldr	r3, [r7, #28]
20016e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016e48:	e09d      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016e4a:	2300      	movs	r3, #0
20016e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016e4e:	e09a      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
20016e50:	4b20      	ldr	r3, [pc, #128]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016e52:	681b      	ldr	r3, [r3, #0]
20016e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20016e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016e5c:	d107      	bne.n	20016e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
20016e5e:	f107 030c 	add.w	r3, r7, #12
20016e62:	4618      	mov	r0, r3
20016e64:	f000 fa18 	bl	20017298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
20016e68:	693b      	ldr	r3, [r7, #16]
20016e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016e6c:	e08b      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016e6e:	2300      	movs	r3, #0
20016e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016e72:	e088      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
20016e74:	4b17      	ldr	r3, [pc, #92]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016e76:	681b      	ldr	r3, [r3, #0]
20016e78:	f003 0304 	and.w	r3, r3, #4
20016e7c:	2b04      	cmp	r3, #4
20016e7e:	d109      	bne.n	20016e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
20016e80:	4b14      	ldr	r3, [pc, #80]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016e82:	681b      	ldr	r3, [r3, #0]
20016e84:	08db      	lsrs	r3, r3, #3
20016e86:	f003 0303 	and.w	r3, r3, #3
20016e8a:	4a13      	ldr	r2, [pc, #76]	@ (20016ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
20016e8c:	fa22 f303 	lsr.w	r3, r2, r3
20016e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016e92:	e078      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016e94:	2300      	movs	r3, #0
20016e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016e98:	e075      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
20016e9a:	4b0e      	ldr	r3, [pc, #56]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016e9c:	681b      	ldr	r3, [r3, #0]
20016e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20016ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20016ea6:	d102      	bne.n	20016eae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
20016ea8:	4b0c      	ldr	r3, [pc, #48]	@ (20016edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
20016eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016eac:	e06b      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016eae:	2300      	movs	r3, #0
20016eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016eb2:	e068      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
20016eb4:	4b07      	ldr	r3, [pc, #28]	@ (20016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
20016eb6:	681b      	ldr	r3, [r3, #0]
20016eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20016ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016ec0:	d102      	bne.n	20016ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
20016ec2:	4b07      	ldr	r3, [pc, #28]	@ (20016ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
20016ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016ec6:	e05e      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016ec8:	2300      	movs	r3, #0
20016eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016ecc:	e05b      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
20016ece:	2300      	movs	r3, #0
20016ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016ed2:	e058      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
20016ed4:	58024400 	.word	0x58024400
20016ed8:	03d09000 	.word	0x03d09000
20016edc:	003d0900 	.word	0x003d0900
20016ee0:	00b71b00 	.word	0x00b71b00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
20016ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
20016ee8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
20016eec:	430b      	orrs	r3, r1
20016eee:	d148      	bne.n	20016f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
20016ef0:	4b27      	ldr	r3, [pc, #156]	@ (20016f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
20016ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20016ef4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
20016ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
20016efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016f00:	d02a      	beq.n	20016f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
20016f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
20016f08:	d838      	bhi.n	20016f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
20016f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016f0c:	2b00      	cmp	r3, #0
20016f0e:	d004      	beq.n	20016f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
20016f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20016f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
20016f16:	d00d      	beq.n	20016f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
20016f18:	e030      	b.n	20016f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
20016f1a:	4b1d      	ldr	r3, [pc, #116]	@ (20016f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
20016f1c:	681b      	ldr	r3, [r3, #0]
20016f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20016f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
20016f26:	d102      	bne.n	20016f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
20016f28:	4b1a      	ldr	r3, [pc, #104]	@ (20016f94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
20016f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016f2c:	e02b      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016f2e:	2300      	movs	r3, #0
20016f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016f32:	e028      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
20016f34:	4b16      	ldr	r3, [pc, #88]	@ (20016f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
20016f36:	681b      	ldr	r3, [r3, #0]
20016f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20016f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
20016f40:	d107      	bne.n	20016f52 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
20016f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
20016f46:	4618      	mov	r0, r3
20016f48:	f000 fafa 	bl	20017540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
20016f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20016f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016f50:	e019      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016f52:	2300      	movs	r3, #0
20016f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016f56:	e016      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
20016f58:	4b0d      	ldr	r3, [pc, #52]	@ (20016f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
20016f5a:	681b      	ldr	r3, [r3, #0]
20016f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20016f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
20016f64:	d107      	bne.n	20016f76 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
20016f66:	f107 0318 	add.w	r3, r7, #24
20016f6a:	4618      	mov	r0, r3
20016f6c:	f000 f840 	bl	20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
20016f70:	69fb      	ldr	r3, [r7, #28]
20016f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
20016f74:	e007      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
20016f76:	2300      	movs	r3, #0
20016f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016f7a:	e004      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
20016f7c:	2300      	movs	r3, #0
20016f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
20016f80:	e001      	b.n	20016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
20016f82:	2300      	movs	r3, #0
20016f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
20016f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
20016f88:	4618      	mov	r0, r3
20016f8a:	3740      	adds	r7, #64	@ 0x40
20016f8c:	46bd      	mov	sp, r7
20016f8e:	bd80      	pop	{r7, pc}
20016f90:	58024400 	.word	0x58024400
20016f94:	00b71b00 	.word	0x00b71b00

20016f98 <HAL_RCCEx_GetD1PCLK1Freq>:
  * @note   Each time D1PCLK1 changes, this function must be called to update the
  *         right D1PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D1PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void)
{
20016f98:	b580      	push	{r7, lr}
20016f9a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1PPRE)
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE) >> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
20016f9c:	f7fd fd38 	bl	20014a10 <HAL_RCC_GetHCLKFreq>
20016fa0:	4602      	mov	r2, r0
20016fa2:	4b06      	ldr	r3, [pc, #24]	@ (20016fbc <HAL_RCCEx_GetD1PCLK1Freq+0x24>)
20016fa4:	699b      	ldr	r3, [r3, #24]
20016fa6:	091b      	lsrs	r3, r3, #4
20016fa8:	f003 0307 	and.w	r3, r3, #7
20016fac:	4904      	ldr	r1, [pc, #16]	@ (20016fc0 <HAL_RCCEx_GetD1PCLK1Freq+0x28>)
20016fae:	5ccb      	ldrb	r3, [r1, r3]
20016fb0:	f003 031f 	and.w	r3, r3, #31
20016fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE) >> RCC_CDCFGR1_CDPPRE_Pos] & 0x1FU));
#endif
}
20016fb8:	4618      	mov	r0, r3
20016fba:	bd80      	pop	{r7, pc}
20016fbc:	58024400 	.word	0x58024400
20016fc0:	2001891c 	.word	0x2001891c

20016fc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
20016fc4:	b580      	push	{r7, lr}
20016fc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
20016fc8:	f7fd fd22 	bl	20014a10 <HAL_RCC_GetHCLKFreq>
20016fcc:	4602      	mov	r2, r0
20016fce:	4b06      	ldr	r3, [pc, #24]	@ (20016fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
20016fd0:	6a1b      	ldr	r3, [r3, #32]
20016fd2:	091b      	lsrs	r3, r3, #4
20016fd4:	f003 0307 	and.w	r3, r3, #7
20016fd8:	4904      	ldr	r1, [pc, #16]	@ (20016fec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
20016fda:	5ccb      	ldrb	r3, [r1, r3]
20016fdc:	f003 031f 	and.w	r3, r3, #31
20016fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
20016fe4:	4618      	mov	r0, r3
20016fe6:	bd80      	pop	{r7, pc}
20016fe8:	58024400 	.word	0x58024400
20016fec:	2001891c 	.word	0x2001891c

20016ff0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
20016ff0:	b480      	push	{r7}
20016ff2:	b089      	sub	sp, #36	@ 0x24
20016ff4:	af00      	add	r7, sp, #0
20016ff6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
20016ff8:	4ba1      	ldr	r3, [pc, #644]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
20016ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20016ffc:	f003 0303 	and.w	r3, r3, #3
20017000:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
20017002:	4b9f      	ldr	r3, [pc, #636]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
20017004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20017006:	0b1b      	lsrs	r3, r3, #12
20017008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
2001700c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2001700e:	4b9c      	ldr	r3, [pc, #624]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
20017010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017012:	091b      	lsrs	r3, r3, #4
20017014:	f003 0301 	and.w	r3, r3, #1
20017018:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2001701a:	4b99      	ldr	r3, [pc, #612]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2001701c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2001701e:	08db      	lsrs	r3, r3, #3
20017020:	f3c3 030c 	ubfx	r3, r3, #0, #13
20017024:	693a      	ldr	r2, [r7, #16]
20017026:	fb02 f303 	mul.w	r3, r2, r3
2001702a:	ee07 3a90 	vmov	s15, r3
2001702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
20017036:	697b      	ldr	r3, [r7, #20]
20017038:	2b00      	cmp	r3, #0
2001703a:	f000 8111 	beq.w	20017260 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
2001703e:	69bb      	ldr	r3, [r7, #24]
20017040:	2b02      	cmp	r3, #2
20017042:	f000 8083 	beq.w	2001714c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
20017046:	69bb      	ldr	r3, [r7, #24]
20017048:	2b02      	cmp	r3, #2
2001704a:	f200 80a1 	bhi.w	20017190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
2001704e:	69bb      	ldr	r3, [r7, #24]
20017050:	2b00      	cmp	r3, #0
20017052:	d003      	beq.n	2001705c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
20017054:	69bb      	ldr	r3, [r7, #24]
20017056:	2b01      	cmp	r3, #1
20017058:	d056      	beq.n	20017108 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
2001705a:	e099      	b.n	20017190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2001705c:	4b88      	ldr	r3, [pc, #544]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2001705e:	681b      	ldr	r3, [r3, #0]
20017060:	f003 0320 	and.w	r3, r3, #32
20017064:	2b00      	cmp	r3, #0
20017066:	d02d      	beq.n	200170c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
20017068:	4b85      	ldr	r3, [pc, #532]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2001706a:	681b      	ldr	r3, [r3, #0]
2001706c:	08db      	lsrs	r3, r3, #3
2001706e:	f003 0303 	and.w	r3, r3, #3
20017072:	4a84      	ldr	r2, [pc, #528]	@ (20017284 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
20017074:	fa22 f303 	lsr.w	r3, r2, r3
20017078:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2001707a:	68bb      	ldr	r3, [r7, #8]
2001707c:	ee07 3a90 	vmov	s15, r3
20017080:	eef8 6a67 	vcvt.f32.u32	s13, s15
20017084:	697b      	ldr	r3, [r7, #20]
20017086:	ee07 3a90 	vmov	s15, r3
2001708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2001708e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20017092:	4b7b      	ldr	r3, [pc, #492]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
20017094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20017096:	f3c3 0308 	ubfx	r3, r3, #0, #9
2001709a:	ee07 3a90 	vmov	s15, r3
2001709e:	eef8 6a67 	vcvt.f32.u32	s13, s15
200170a2:	ed97 6a03 	vldr	s12, [r7, #12]
200170a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 20017288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
200170aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
200170ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
200170b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
200170b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
200170ba:	ee67 7a27 	vmul.f32	s15, s14, s15
200170be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
200170c2:	e087      	b.n	200171d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
200170c4:	697b      	ldr	r3, [r7, #20]
200170c6:	ee07 3a90 	vmov	s15, r3
200170ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
200170ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 2001728c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
200170d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200170d6:	4b6a      	ldr	r3, [pc, #424]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
200170d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200170da:	f3c3 0308 	ubfx	r3, r3, #0, #9
200170de:	ee07 3a90 	vmov	s15, r3
200170e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
200170e6:	ed97 6a03 	vldr	s12, [r7, #12]
200170ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 20017288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
200170ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
200170f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
200170f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
200170fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
200170fe:	ee67 7a27 	vmul.f32	s15, s14, s15
20017102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
20017106:	e065      	b.n	200171d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
20017108:	697b      	ldr	r3, [r7, #20]
2001710a:	ee07 3a90 	vmov	s15, r3
2001710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017112:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 20017290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
20017116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2001711a:	4b59      	ldr	r3, [pc, #356]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2001711c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2001711e:	f3c3 0308 	ubfx	r3, r3, #0, #9
20017122:	ee07 3a90 	vmov	s15, r3
20017126:	eef8 6a67 	vcvt.f32.u32	s13, s15
2001712a:	ed97 6a03 	vldr	s12, [r7, #12]
2001712e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 20017288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
20017132:	eec6 7a25 	vdiv.f32	s15, s12, s11
20017136:	ee76 7aa7 	vadd.f32	s15, s13, s15
2001713a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2001713e:	ee77 7aa6 	vadd.f32	s15, s15, s13
20017142:	ee67 7a27 	vmul.f32	s15, s14, s15
20017146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2001714a:	e043      	b.n	200171d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2001714c:	697b      	ldr	r3, [r7, #20]
2001714e:	ee07 3a90 	vmov	s15, r3
20017152:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017156:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 20017294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
2001715a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2001715e:	4b48      	ldr	r3, [pc, #288]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
20017160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20017162:	f3c3 0308 	ubfx	r3, r3, #0, #9
20017166:	ee07 3a90 	vmov	s15, r3
2001716a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2001716e:	ed97 6a03 	vldr	s12, [r7, #12]
20017172:	eddf 5a45 	vldr	s11, [pc, #276]	@ 20017288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
20017176:	eec6 7a25 	vdiv.f32	s15, s12, s11
2001717a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2001717e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20017182:	ee77 7aa6 	vadd.f32	s15, s15, s13
20017186:	ee67 7a27 	vmul.f32	s15, s14, s15
2001718a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2001718e:	e021      	b.n	200171d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
20017190:	697b      	ldr	r3, [r7, #20]
20017192:	ee07 3a90 	vmov	s15, r3
20017196:	eef8 7a67 	vcvt.f32.u32	s15, s15
2001719a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 20017290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2001719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200171a2:	4b37      	ldr	r3, [pc, #220]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
200171a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200171a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
200171aa:	ee07 3a90 	vmov	s15, r3
200171ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
200171b2:	ed97 6a03 	vldr	s12, [r7, #12]
200171b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 20017288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
200171ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
200171be:	ee76 7aa7 	vadd.f32	s15, s13, s15
200171c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
200171c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
200171ca:	ee67 7a27 	vmul.f32	s15, s14, s15
200171ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
200171d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
200171d4:	4b2a      	ldr	r3, [pc, #168]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
200171d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200171d8:	0a5b      	lsrs	r3, r3, #9
200171da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200171de:	ee07 3a90 	vmov	s15, r3
200171e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
200171e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
200171ea:	ee37 7a87 	vadd.f32	s14, s15, s14
200171ee:	edd7 6a07 	vldr	s13, [r7, #28]
200171f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
200171f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
200171fa:	ee17 2a90 	vmov	r2, s15
200171fe:	687b      	ldr	r3, [r7, #4]
20017200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
20017202:	4b1f      	ldr	r3, [pc, #124]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
20017204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20017206:	0c1b      	lsrs	r3, r3, #16
20017208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2001720c:	ee07 3a90 	vmov	s15, r3
20017210:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017214:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
20017218:	ee37 7a87 	vadd.f32	s14, s15, s14
2001721c:	edd7 6a07 	vldr	s13, [r7, #28]
20017220:	eec6 7a87 	vdiv.f32	s15, s13, s14
20017224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
20017228:	ee17 2a90 	vmov	r2, s15
2001722c:	687b      	ldr	r3, [r7, #4]
2001722e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
20017230:	4b13      	ldr	r3, [pc, #76]	@ (20017280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
20017232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20017234:	0e1b      	lsrs	r3, r3, #24
20017236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2001723a:	ee07 3a90 	vmov	s15, r3
2001723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
20017246:	ee37 7a87 	vadd.f32	s14, s15, s14
2001724a:	edd7 6a07 	vldr	s13, [r7, #28]
2001724e:	eec6 7a87 	vdiv.f32	s15, s13, s14
20017252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
20017256:	ee17 2a90 	vmov	r2, s15
2001725a:	687b      	ldr	r3, [r7, #4]
2001725c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
2001725e:	e008      	b.n	20017272 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
20017260:	687b      	ldr	r3, [r7, #4]
20017262:	2200      	movs	r2, #0
20017264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
20017266:	687b      	ldr	r3, [r7, #4]
20017268:	2200      	movs	r2, #0
2001726a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2001726c:	687b      	ldr	r3, [r7, #4]
2001726e:	2200      	movs	r2, #0
20017270:	609a      	str	r2, [r3, #8]
}
20017272:	bf00      	nop
20017274:	3724      	adds	r7, #36	@ 0x24
20017276:	46bd      	mov	sp, r7
20017278:	f85d 7b04 	ldr.w	r7, [sp], #4
2001727c:	4770      	bx	lr
2001727e:	bf00      	nop
20017280:	58024400 	.word	0x58024400
20017284:	03d09000 	.word	0x03d09000
20017288:	46000000 	.word	0x46000000
2001728c:	4c742400 	.word	0x4c742400
20017290:	4a742400 	.word	0x4a742400
20017294:	4b371b00 	.word	0x4b371b00

20017298 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
20017298:	b480      	push	{r7}
2001729a:	b089      	sub	sp, #36	@ 0x24
2001729c:	af00      	add	r7, sp, #0
2001729e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
200172a0:	4ba1      	ldr	r3, [pc, #644]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
200172a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200172a4:	f003 0303 	and.w	r3, r3, #3
200172a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
200172aa:	4b9f      	ldr	r3, [pc, #636]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
200172ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200172ae:	0d1b      	lsrs	r3, r3, #20
200172b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200172b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
200172b6:	4b9c      	ldr	r3, [pc, #624]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
200172b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
200172ba:	0a1b      	lsrs	r3, r3, #8
200172bc:	f003 0301 	and.w	r3, r3, #1
200172c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
200172c2:	4b99      	ldr	r3, [pc, #612]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
200172c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200172c6:	08db      	lsrs	r3, r3, #3
200172c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
200172cc:	693a      	ldr	r2, [r7, #16]
200172ce:	fb02 f303 	mul.w	r3, r2, r3
200172d2:	ee07 3a90 	vmov	s15, r3
200172d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
200172da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
200172de:	697b      	ldr	r3, [r7, #20]
200172e0:	2b00      	cmp	r3, #0
200172e2:	f000 8111 	beq.w	20017508 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
200172e6:	69bb      	ldr	r3, [r7, #24]
200172e8:	2b02      	cmp	r3, #2
200172ea:	f000 8083 	beq.w	200173f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
200172ee:	69bb      	ldr	r3, [r7, #24]
200172f0:	2b02      	cmp	r3, #2
200172f2:	f200 80a1 	bhi.w	20017438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
200172f6:	69bb      	ldr	r3, [r7, #24]
200172f8:	2b00      	cmp	r3, #0
200172fa:	d003      	beq.n	20017304 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
200172fc:	69bb      	ldr	r3, [r7, #24]
200172fe:	2b01      	cmp	r3, #1
20017300:	d056      	beq.n	200173b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
20017302:	e099      	b.n	20017438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
20017304:	4b88      	ldr	r3, [pc, #544]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
20017306:	681b      	ldr	r3, [r3, #0]
20017308:	f003 0320 	and.w	r3, r3, #32
2001730c:	2b00      	cmp	r3, #0
2001730e:	d02d      	beq.n	2001736c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
20017310:	4b85      	ldr	r3, [pc, #532]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
20017312:	681b      	ldr	r3, [r3, #0]
20017314:	08db      	lsrs	r3, r3, #3
20017316:	f003 0303 	and.w	r3, r3, #3
2001731a:	4a84      	ldr	r2, [pc, #528]	@ (2001752c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
2001731c:	fa22 f303 	lsr.w	r3, r2, r3
20017320:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
20017322:	68bb      	ldr	r3, [r7, #8]
20017324:	ee07 3a90 	vmov	s15, r3
20017328:	eef8 6a67 	vcvt.f32.u32	s13, s15
2001732c:	697b      	ldr	r3, [r7, #20]
2001732e:	ee07 3a90 	vmov	s15, r3
20017332:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2001733a:	4b7b      	ldr	r3, [pc, #492]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2001733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2001733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
20017342:	ee07 3a90 	vmov	s15, r3
20017346:	eef8 6a67 	vcvt.f32.u32	s13, s15
2001734a:	ed97 6a03 	vldr	s12, [r7, #12]
2001734e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 20017530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
20017352:	eec6 7a25 	vdiv.f32	s15, s12, s11
20017356:	ee76 7aa7 	vadd.f32	s15, s13, s15
2001735a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2001735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
20017362:	ee67 7a27 	vmul.f32	s15, s14, s15
20017366:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
2001736a:	e087      	b.n	2001747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2001736c:	697b      	ldr	r3, [r7, #20]
2001736e:	ee07 3a90 	vmov	s15, r3
20017372:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017376:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 20017534 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
2001737a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2001737e:	4b6a      	ldr	r3, [pc, #424]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
20017380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20017382:	f3c3 0308 	ubfx	r3, r3, #0, #9
20017386:	ee07 3a90 	vmov	s15, r3
2001738a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2001738e:	ed97 6a03 	vldr	s12, [r7, #12]
20017392:	eddf 5a67 	vldr	s11, [pc, #412]	@ 20017530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
20017396:	eec6 7a25 	vdiv.f32	s15, s12, s11
2001739a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2001739e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
200173a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
200173a6:	ee67 7a27 	vmul.f32	s15, s14, s15
200173aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
200173ae:	e065      	b.n	2001747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
200173b0:	697b      	ldr	r3, [r7, #20]
200173b2:	ee07 3a90 	vmov	s15, r3
200173b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
200173ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 20017538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
200173be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200173c2:	4b59      	ldr	r3, [pc, #356]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
200173c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200173c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
200173ca:	ee07 3a90 	vmov	s15, r3
200173ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
200173d2:	ed97 6a03 	vldr	s12, [r7, #12]
200173d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 20017530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
200173da:	eec6 7a25 	vdiv.f32	s15, s12, s11
200173de:	ee76 7aa7 	vadd.f32	s15, s13, s15
200173e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
200173e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
200173ea:	ee67 7a27 	vmul.f32	s15, s14, s15
200173ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
200173f2:	e043      	b.n	2001747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
200173f4:	697b      	ldr	r3, [r7, #20]
200173f6:	ee07 3a90 	vmov	s15, r3
200173fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
200173fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 2001753c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
20017402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20017406:	4b48      	ldr	r3, [pc, #288]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
20017408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2001740a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2001740e:	ee07 3a90 	vmov	s15, r3
20017412:	eef8 6a67 	vcvt.f32.u32	s13, s15
20017416:	ed97 6a03 	vldr	s12, [r7, #12]
2001741a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 20017530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2001741e:	eec6 7a25 	vdiv.f32	s15, s12, s11
20017422:	ee76 7aa7 	vadd.f32	s15, s13, s15
20017426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2001742a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2001742e:	ee67 7a27 	vmul.f32	s15, s14, s15
20017432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
20017436:	e021      	b.n	2001747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
20017438:	697b      	ldr	r3, [r7, #20]
2001743a:	ee07 3a90 	vmov	s15, r3
2001743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017442:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 20017538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
20017446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2001744a:	4b37      	ldr	r3, [pc, #220]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2001744c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2001744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
20017452:	ee07 3a90 	vmov	s15, r3
20017456:	eef8 6a67 	vcvt.f32.u32	s13, s15
2001745a:	ed97 6a03 	vldr	s12, [r7, #12]
2001745e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 20017530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
20017462:	eec6 7a25 	vdiv.f32	s15, s12, s11
20017466:	ee76 7aa7 	vadd.f32	s15, s13, s15
2001746a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2001746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
20017472:	ee67 7a27 	vmul.f32	s15, s14, s15
20017476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2001747a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2001747c:	4b2a      	ldr	r3, [pc, #168]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2001747e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20017480:	0a5b      	lsrs	r3, r3, #9
20017482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20017486:	ee07 3a90 	vmov	s15, r3
2001748a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2001748e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
20017492:	ee37 7a87 	vadd.f32	s14, s15, s14
20017496:	edd7 6a07 	vldr	s13, [r7, #28]
2001749a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2001749e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
200174a2:	ee17 2a90 	vmov	r2, s15
200174a6:	687b      	ldr	r3, [r7, #4]
200174a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
200174aa:	4b1f      	ldr	r3, [pc, #124]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
200174ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200174ae:	0c1b      	lsrs	r3, r3, #16
200174b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200174b4:	ee07 3a90 	vmov	s15, r3
200174b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
200174bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
200174c0:	ee37 7a87 	vadd.f32	s14, s15, s14
200174c4:	edd7 6a07 	vldr	s13, [r7, #28]
200174c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
200174cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
200174d0:	ee17 2a90 	vmov	r2, s15
200174d4:	687b      	ldr	r3, [r7, #4]
200174d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
200174d8:	4b13      	ldr	r3, [pc, #76]	@ (20017528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
200174da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200174dc:	0e1b      	lsrs	r3, r3, #24
200174de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200174e2:	ee07 3a90 	vmov	s15, r3
200174e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
200174ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
200174ee:	ee37 7a87 	vadd.f32	s14, s15, s14
200174f2:	edd7 6a07 	vldr	s13, [r7, #28]
200174f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
200174fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
200174fe:	ee17 2a90 	vmov	r2, s15
20017502:	687b      	ldr	r3, [r7, #4]
20017504:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
20017506:	e008      	b.n	2001751a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
20017508:	687b      	ldr	r3, [r7, #4]
2001750a:	2200      	movs	r2, #0
2001750c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2001750e:	687b      	ldr	r3, [r7, #4]
20017510:	2200      	movs	r2, #0
20017512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
20017514:	687b      	ldr	r3, [r7, #4]
20017516:	2200      	movs	r2, #0
20017518:	609a      	str	r2, [r3, #8]
}
2001751a:	bf00      	nop
2001751c:	3724      	adds	r7, #36	@ 0x24
2001751e:	46bd      	mov	sp, r7
20017520:	f85d 7b04 	ldr.w	r7, [sp], #4
20017524:	4770      	bx	lr
20017526:	bf00      	nop
20017528:	58024400 	.word	0x58024400
2001752c:	03d09000 	.word	0x03d09000
20017530:	46000000 	.word	0x46000000
20017534:	4c742400 	.word	0x4c742400
20017538:	4a742400 	.word	0x4a742400
2001753c:	4b371b00 	.word	0x4b371b00

20017540 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
20017540:	b480      	push	{r7}
20017542:	b089      	sub	sp, #36	@ 0x24
20017544:	af00      	add	r7, sp, #0
20017546:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
20017548:	4ba0      	ldr	r3, [pc, #640]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2001754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2001754c:	f003 0303 	and.w	r3, r3, #3
20017550:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
20017552:	4b9e      	ldr	r3, [pc, #632]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
20017554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20017556:	091b      	lsrs	r3, r3, #4
20017558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
2001755c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2001755e:	4b9b      	ldr	r3, [pc, #620]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
20017560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017562:	f003 0301 	and.w	r3, r3, #1
20017566:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
20017568:	4b98      	ldr	r3, [pc, #608]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2001756a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2001756c:	08db      	lsrs	r3, r3, #3
2001756e:	f3c3 030c 	ubfx	r3, r3, #0, #13
20017572:	693a      	ldr	r2, [r7, #16]
20017574:	fb02 f303 	mul.w	r3, r2, r3
20017578:	ee07 3a90 	vmov	s15, r3
2001757c:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017580:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
20017584:	697b      	ldr	r3, [r7, #20]
20017586:	2b00      	cmp	r3, #0
20017588:	f000 8111 	beq.w	200177ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
2001758c:	69bb      	ldr	r3, [r7, #24]
2001758e:	2b02      	cmp	r3, #2
20017590:	f000 8083 	beq.w	2001769a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
20017594:	69bb      	ldr	r3, [r7, #24]
20017596:	2b02      	cmp	r3, #2
20017598:	f200 80a1 	bhi.w	200176de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
2001759c:	69bb      	ldr	r3, [r7, #24]
2001759e:	2b00      	cmp	r3, #0
200175a0:	d003      	beq.n	200175aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
200175a2:	69bb      	ldr	r3, [r7, #24]
200175a4:	2b01      	cmp	r3, #1
200175a6:	d056      	beq.n	20017656 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
200175a8:	e099      	b.n	200176de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
200175aa:	4b88      	ldr	r3, [pc, #544]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
200175ac:	681b      	ldr	r3, [r3, #0]
200175ae:	f003 0320 	and.w	r3, r3, #32
200175b2:	2b00      	cmp	r3, #0
200175b4:	d02d      	beq.n	20017612 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
200175b6:	4b85      	ldr	r3, [pc, #532]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
200175b8:	681b      	ldr	r3, [r3, #0]
200175ba:	08db      	lsrs	r3, r3, #3
200175bc:	f003 0303 	and.w	r3, r3, #3
200175c0:	4a83      	ldr	r2, [pc, #524]	@ (200177d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
200175c2:	fa22 f303 	lsr.w	r3, r2, r3
200175c6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
200175c8:	68bb      	ldr	r3, [r7, #8]
200175ca:	ee07 3a90 	vmov	s15, r3
200175ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
200175d2:	697b      	ldr	r3, [r7, #20]
200175d4:	ee07 3a90 	vmov	s15, r3
200175d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
200175dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200175e0:	4b7a      	ldr	r3, [pc, #488]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
200175e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200175e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
200175e8:	ee07 3a90 	vmov	s15, r3
200175ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
200175f0:	ed97 6a03 	vldr	s12, [r7, #12]
200175f4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 200177d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
200175f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
200175fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
20017600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20017604:	ee77 7aa6 	vadd.f32	s15, s15, s13
20017608:	ee67 7a27 	vmul.f32	s15, s14, s15
2001760c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
20017610:	e087      	b.n	20017722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
20017612:	697b      	ldr	r3, [r7, #20]
20017614:	ee07 3a90 	vmov	s15, r3
20017618:	eef8 7a67 	vcvt.f32.u32	s15, s15
2001761c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 200177d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
20017620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20017624:	4b69      	ldr	r3, [pc, #420]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
20017626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20017628:	f3c3 0308 	ubfx	r3, r3, #0, #9
2001762c:	ee07 3a90 	vmov	s15, r3
20017630:	eef8 6a67 	vcvt.f32.u32	s13, s15
20017634:	ed97 6a03 	vldr	s12, [r7, #12]
20017638:	eddf 5a66 	vldr	s11, [pc, #408]	@ 200177d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2001763c:	eec6 7a25 	vdiv.f32	s15, s12, s11
20017640:	ee76 7aa7 	vadd.f32	s15, s13, s15
20017644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20017648:	ee77 7aa6 	vadd.f32	s15, s15, s13
2001764c:	ee67 7a27 	vmul.f32	s15, s14, s15
20017650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
20017654:	e065      	b.n	20017722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
20017656:	697b      	ldr	r3, [r7, #20]
20017658:	ee07 3a90 	vmov	s15, r3
2001765c:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017660:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 200177dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
20017664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20017668:	4b58      	ldr	r3, [pc, #352]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2001766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2001766c:	f3c3 0308 	ubfx	r3, r3, #0, #9
20017670:	ee07 3a90 	vmov	s15, r3
20017674:	eef8 6a67 	vcvt.f32.u32	s13, s15
20017678:	ed97 6a03 	vldr	s12, [r7, #12]
2001767c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 200177d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
20017680:	eec6 7a25 	vdiv.f32	s15, s12, s11
20017684:	ee76 7aa7 	vadd.f32	s15, s13, s15
20017688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2001768c:	ee77 7aa6 	vadd.f32	s15, s15, s13
20017690:	ee67 7a27 	vmul.f32	s15, s14, s15
20017694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
20017698:	e043      	b.n	20017722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2001769a:	697b      	ldr	r3, [r7, #20]
2001769c:	ee07 3a90 	vmov	s15, r3
200176a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
200176a4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 200177e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
200176a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200176ac:	4b47      	ldr	r3, [pc, #284]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
200176ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200176b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
200176b4:	ee07 3a90 	vmov	s15, r3
200176b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
200176bc:	ed97 6a03 	vldr	s12, [r7, #12]
200176c0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 200177d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
200176c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
200176c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
200176cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
200176d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
200176d4:	ee67 7a27 	vmul.f32	s15, s14, s15
200176d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
200176dc:	e021      	b.n	20017722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
200176de:	697b      	ldr	r3, [r7, #20]
200176e0:	ee07 3a90 	vmov	s15, r3
200176e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
200176e8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 200177d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
200176ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200176f0:	4b36      	ldr	r3, [pc, #216]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
200176f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200176f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
200176f8:	ee07 3a90 	vmov	s15, r3
200176fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
20017700:	ed97 6a03 	vldr	s12, [r7, #12]
20017704:	eddf 5a33 	vldr	s11, [pc, #204]	@ 200177d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
20017708:	eec6 7a25 	vdiv.f32	s15, s12, s11
2001770c:	ee76 7aa7 	vadd.f32	s15, s13, s15
20017710:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
20017714:	ee77 7aa6 	vadd.f32	s15, s15, s13
20017718:	ee67 7a27 	vmul.f32	s15, s14, s15
2001771c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
20017720:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
20017722:	4b2a      	ldr	r3, [pc, #168]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
20017724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20017726:	0a5b      	lsrs	r3, r3, #9
20017728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2001772c:	ee07 3a90 	vmov	s15, r3
20017730:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
20017738:	ee37 7a87 	vadd.f32	s14, s15, s14
2001773c:	edd7 6a07 	vldr	s13, [r7, #28]
20017740:	eec6 7a87 	vdiv.f32	s15, s13, s14
20017744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
20017748:	ee17 2a90 	vmov	r2, s15
2001774c:	687b      	ldr	r3, [r7, #4]
2001774e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
20017750:	4b1e      	ldr	r3, [pc, #120]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
20017752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20017754:	0c1b      	lsrs	r3, r3, #16
20017756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2001775a:	ee07 3a90 	vmov	s15, r3
2001775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
20017766:	ee37 7a87 	vadd.f32	s14, s15, s14
2001776a:	edd7 6a07 	vldr	s13, [r7, #28]
2001776e:	eec6 7a87 	vdiv.f32	s15, s13, s14
20017772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
20017776:	ee17 2a90 	vmov	r2, s15
2001777a:	687b      	ldr	r3, [r7, #4]
2001777c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2001777e:	4b13      	ldr	r3, [pc, #76]	@ (200177cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
20017780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20017782:	0e1b      	lsrs	r3, r3, #24
20017784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20017788:	ee07 3a90 	vmov	s15, r3
2001778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
20017790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
20017794:	ee37 7a87 	vadd.f32	s14, s15, s14
20017798:	edd7 6a07 	vldr	s13, [r7, #28]
2001779c:	eec6 7a87 	vdiv.f32	s15, s13, s14
200177a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
200177a4:	ee17 2a90 	vmov	r2, s15
200177a8:	687b      	ldr	r3, [r7, #4]
200177aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
200177ac:	e008      	b.n	200177c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
200177ae:	687b      	ldr	r3, [r7, #4]
200177b0:	2200      	movs	r2, #0
200177b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
200177b4:	687b      	ldr	r3, [r7, #4]
200177b6:	2200      	movs	r2, #0
200177b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
200177ba:	687b      	ldr	r3, [r7, #4]
200177bc:	2200      	movs	r2, #0
200177be:	609a      	str	r2, [r3, #8]
}
200177c0:	bf00      	nop
200177c2:	3724      	adds	r7, #36	@ 0x24
200177c4:	46bd      	mov	sp, r7
200177c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200177ca:	4770      	bx	lr
200177cc:	58024400 	.word	0x58024400
200177d0:	03d09000 	.word	0x03d09000
200177d4:	46000000 	.word	0x46000000
200177d8:	4c742400 	.word	0x4c742400
200177dc:	4a742400 	.word	0x4a742400
200177e0:	4b371b00 	.word	0x4b371b00

200177e4 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System current Core Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
200177e4:	b580      	push	{r7, lr}
200177e6:	b082      	sub	sp, #8
200177e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
200177ea:	f7fc ff97 	bl	2001471c <HAL_RCC_GetSysClockFreq>
200177ee:	4602      	mov	r2, r0
200177f0:	4b10      	ldr	r3, [pc, #64]	@ (20017834 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
200177f2:	699b      	ldr	r3, [r3, #24]
200177f4:	0a1b      	lsrs	r3, r3, #8
200177f6:	f003 030f 	and.w	r3, r3, #15
200177fa:	490f      	ldr	r1, [pc, #60]	@ (20017838 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
200177fc:	5ccb      	ldrb	r3, [r1, r3]
200177fe:	f003 031f 	and.w	r3, r3, #31
20017802:	fa22 f303 	lsr.w	r3, r2, r3
20017806:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
20017808:	4b0a      	ldr	r3, [pc, #40]	@ (20017834 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
2001780a:	699b      	ldr	r3, [r3, #24]
2001780c:	f003 030f 	and.w	r3, r3, #15
20017810:	4a09      	ldr	r2, [pc, #36]	@ (20017838 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
20017812:	5cd3      	ldrb	r3, [r2, r3]
20017814:	f003 031f 	and.w	r3, r3, #31
20017818:	687a      	ldr	r2, [r7, #4]
2001781a:	fa22 f303 	lsr.w	r3, r2, r3
2001781e:	4a07      	ldr	r2, [pc, #28]	@ (2001783c <HAL_RCCEx_GetD1SysClockFreq+0x58>)
20017820:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
20017822:	4a07      	ldr	r2, [pc, #28]	@ (20017840 <HAL_RCCEx_GetD1SysClockFreq+0x5c>)
20017824:	687b      	ldr	r3, [r7, #4]
20017826:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return common_system_clock;
20017828:	687b      	ldr	r3, [r7, #4]
}
2001782a:	4618      	mov	r0, r3
2001782c:	3708      	adds	r7, #8
2001782e:	46bd      	mov	sp, r7
20017830:	bd80      	pop	{r7, pc}
20017832:	bf00      	nop
20017834:	58024400 	.word	0x58024400
20017838:	2001891c 	.word	0x2001891c
2001783c:	200004b4 	.word	0x200004b4
20017840:	200004b0 	.word	0x200004b0

20017844 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
20017844:	b480      	push	{r7}
20017846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
20017848:	4b05      	ldr	r3, [pc, #20]	@ (20017860 <HAL_RCCEx_EnableLSECSS+0x1c>)
2001784a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2001784c:	4a04      	ldr	r2, [pc, #16]	@ (20017860 <HAL_RCCEx_EnableLSECSS+0x1c>)
2001784e:	f043 0320 	orr.w	r3, r3, #32
20017852:	6713      	str	r3, [r2, #112]	@ 0x70
}
20017854:	bf00      	nop
20017856:	46bd      	mov	sp, r7
20017858:	f85d 7b04 	ldr.w	r7, [sp], #4
2001785c:	4770      	bx	lr
2001785e:	bf00      	nop
20017860:	58024400 	.word	0x58024400

20017864 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disables the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
20017864:	b480      	push	{r7}
20017866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
20017868:	4b08      	ldr	r3, [pc, #32]	@ (2001788c <HAL_RCCEx_DisableLSECSS+0x28>)
2001786a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2001786c:	4a07      	ldr	r2, [pc, #28]	@ (2001788c <HAL_RCCEx_DisableLSECSS+0x28>)
2001786e:	f023 0320 	bic.w	r3, r3, #32
20017872:	6713      	str	r3, [r2, #112]	@ 0x70
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
20017874:	4b05      	ldr	r3, [pc, #20]	@ (2001788c <HAL_RCCEx_DisableLSECSS+0x28>)
20017876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
20017878:	4a04      	ldr	r2, [pc, #16]	@ (2001788c <HAL_RCCEx_DisableLSECSS+0x28>)
2001787a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
2001787e:	6613      	str	r3, [r2, #96]	@ 0x60
}
20017880:	bf00      	nop
20017882:	46bd      	mov	sp, r7
20017884:	f85d 7b04 	ldr.w	r7, [sp], #4
20017888:	4770      	bx	lr
2001788a:	bf00      	nop
2001788c:	58024400 	.word	0x58024400

20017890 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on EXTI line 18
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
20017890:	b480      	push	{r7}
20017892:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
20017894:	4b11      	ldr	r3, [pc, #68]	@ (200178dc <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
20017896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20017898:	4a10      	ldr	r2, [pc, #64]	@ (200178dc <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
2001789a:	f043 0320 	orr.w	r3, r3, #32
2001789e:	6713      	str	r3, [r2, #112]	@ 0x70

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
200178a0:	4b0e      	ldr	r3, [pc, #56]	@ (200178dc <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
200178a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
200178a4:	4a0d      	ldr	r2, [pc, #52]	@ (200178dc <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
200178a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
200178aa:	6613      	str	r3, [r2, #96]	@ 0x60

  /* Enable IT on EXTI Line 18 */
#if defined(DUAL_CORE) && defined(CORE_CM4)
  __HAL_RCC_C2_LSECSS_EXTI_ENABLE_IT();
#else
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
200178ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
200178b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
200178b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
200178b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200178bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* DUAL_CORE && CORE_CM4 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
200178c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
200178c4:	681b      	ldr	r3, [r3, #0]
200178c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
200178ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
200178ce:	6013      	str	r3, [r2, #0]
}
200178d0:	bf00      	nop
200178d2:	46bd      	mov	sp, r7
200178d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200178d8:	4770      	bx	lr
200178da:	bf00      	nop
200178dc:	58024400 	.word	0x58024400

200178e0 <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
200178e0:	b480      	push	{r7}
200178e2:	b083      	sub	sp, #12
200178e4:	af00      	add	r7, sp, #0
200178e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
200178e8:	4b06      	ldr	r3, [pc, #24]	@ (20017904 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
200178ea:	691b      	ldr	r3, [r3, #16]
200178ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
200178f0:	4904      	ldr	r1, [pc, #16]	@ (20017904 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
200178f2:	687b      	ldr	r3, [r7, #4]
200178f4:	4313      	orrs	r3, r2
200178f6:	610b      	str	r3, [r1, #16]
}
200178f8:	bf00      	nop
200178fa:	370c      	adds	r7, #12
200178fc:	46bd      	mov	sp, r7
200178fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20017902:	4770      	bx	lr
20017904:	58024400 	.word	0x58024400

20017908 <HAL_RCCEx_KerWakeUpStopCLKConfig>:
  *            @arg RCC_STOP_KERWAKEUPCLOCK_CSI: CSI oscillator selection
  *            @arg RCC_STOP_KERWAKEUPCLOCK_HSI: HSI oscillator selection
  * @retval None
  */
void HAL_RCCEx_KerWakeUpStopCLKConfig(uint32_t WakeUpClk)
{
20017908:	b480      	push	{r7}
2001790a:	b083      	sub	sp, #12
2001790c:	af00      	add	r7, sp, #0
2001790e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_KERWAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_KERWAKEUPSTOP_CLK_CONFIG(WakeUpClk);
20017910:	4b06      	ldr	r3, [pc, #24]	@ (2001792c <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
20017912:	691b      	ldr	r3, [r3, #16]
20017914:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
20017918:	4904      	ldr	r1, [pc, #16]	@ (2001792c <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
2001791a:	687b      	ldr	r3, [r7, #4]
2001791c:	4313      	orrs	r3, r2
2001791e:	610b      	str	r3, [r1, #16]
}
20017920:	bf00      	nop
20017922:	370c      	adds	r7, #12
20017924:	46bd      	mov	sp, r7
20017926:	f85d 7b04 	ldr.w	r7, [sp], #4
2001792a:	4770      	bx	lr
2001792c:	58024400 	.word	0x58024400

20017930 <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
20017930:	b480      	push	{r7}
20017932:	b083      	sub	sp, #12
20017934:	af00      	add	r7, sp, #0
20017936:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
20017938:	4b06      	ldr	r3, [pc, #24]	@ (20017954 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
2001793a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
2001793e:	4905      	ldr	r1, [pc, #20]	@ (20017954 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
20017940:	687b      	ldr	r3, [r7, #4]
20017942:	4313      	orrs	r3, r2
20017944:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
}
20017948:	bf00      	nop
2001794a:	370c      	adds	r7, #12
2001794c:	46bd      	mov	sp, r7
2001794e:	f85d 7b04 	ldr.w	r7, [sp], #4
20017952:	4770      	bx	lr
20017954:	58024400 	.word	0x58024400

20017958 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
20017958:	b580      	push	{r7, lr}
2001795a:	b084      	sub	sp, #16
2001795c:	af00      	add	r7, sp, #0
2001795e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
20017960:	4b26      	ldr	r3, [pc, #152]	@ (200179fc <HAL_RCCEx_CRSConfig+0xa4>)
20017962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
20017966:	4a25      	ldr	r2, [pc, #148]	@ (200179fc <HAL_RCCEx_CRSConfig+0xa4>)
20017968:	f043 0302 	orr.w	r3, r3, #2
2001796c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
20017970:	4b22      	ldr	r3, [pc, #136]	@ (200179fc <HAL_RCCEx_CRSConfig+0xa4>)
20017972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
20017976:	4a21      	ldr	r2, [pc, #132]	@ (200179fc <HAL_RCCEx_CRSConfig+0xa4>)
20017978:	f023 0302 	bic.w	r3, r3, #2
2001797c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
20017980:	f7ea fd38 	bl	200023f4 <HAL_GetREVID>
20017984:	4603      	mov	r3, r0
20017986:	f241 0203 	movw	r2, #4099	@ 0x1003
2001798a:	4293      	cmp	r3, r2
2001798c:	d80b      	bhi.n	200179a6 <HAL_RCCEx_CRSConfig+0x4e>
2001798e:	687b      	ldr	r3, [r7, #4]
20017990:	685b      	ldr	r3, [r3, #4]
20017992:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
20017996:	d106      	bne.n	200179a6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
20017998:	687b      	ldr	r3, [r7, #4]
2001799a:	681a      	ldr	r2, [r3, #0]
2001799c:	687b      	ldr	r3, [r7, #4]
2001799e:	689b      	ldr	r3, [r3, #8]
200179a0:	4313      	orrs	r3, r2
200179a2:	60fb      	str	r3, [r7, #12]
200179a4:	e008      	b.n	200179b8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
200179a6:	687b      	ldr	r3, [r7, #4]
200179a8:	681a      	ldr	r2, [r3, #0]
200179aa:	687b      	ldr	r3, [r7, #4]
200179ac:	685b      	ldr	r3, [r3, #4]
200179ae:	431a      	orrs	r2, r3
200179b0:	687b      	ldr	r3, [r7, #4]
200179b2:	689b      	ldr	r3, [r3, #8]
200179b4:	4313      	orrs	r3, r2
200179b6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
200179b8:	687b      	ldr	r3, [r7, #4]
200179ba:	68db      	ldr	r3, [r3, #12]
200179bc:	68fa      	ldr	r2, [r7, #12]
200179be:	4313      	orrs	r3, r2
200179c0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
200179c2:	687b      	ldr	r3, [r7, #4]
200179c4:	691b      	ldr	r3, [r3, #16]
200179c6:	041b      	lsls	r3, r3, #16
200179c8:	68fa      	ldr	r2, [r7, #12]
200179ca:	4313      	orrs	r3, r2
200179cc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
200179ce:	4a0c      	ldr	r2, [pc, #48]	@ (20017a00 <HAL_RCCEx_CRSConfig+0xa8>)
200179d0:	68fb      	ldr	r3, [r7, #12]
200179d2:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
200179d4:	4b0a      	ldr	r3, [pc, #40]	@ (20017a00 <HAL_RCCEx_CRSConfig+0xa8>)
200179d6:	681b      	ldr	r3, [r3, #0]
200179d8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
200179dc:	687b      	ldr	r3, [r7, #4]
200179de:	695b      	ldr	r3, [r3, #20]
200179e0:	021b      	lsls	r3, r3, #8
200179e2:	4907      	ldr	r1, [pc, #28]	@ (20017a00 <HAL_RCCEx_CRSConfig+0xa8>)
200179e4:	4313      	orrs	r3, r2
200179e6:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
200179e8:	4b05      	ldr	r3, [pc, #20]	@ (20017a00 <HAL_RCCEx_CRSConfig+0xa8>)
200179ea:	681b      	ldr	r3, [r3, #0]
200179ec:	4a04      	ldr	r2, [pc, #16]	@ (20017a00 <HAL_RCCEx_CRSConfig+0xa8>)
200179ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
200179f2:	6013      	str	r3, [r2, #0]
}
200179f4:	bf00      	nop
200179f6:	3710      	adds	r7, #16
200179f8:	46bd      	mov	sp, r7
200179fa:	bd80      	pop	{r7, pc}
200179fc:	58024400 	.word	0x58024400
20017a00:	40008400 	.word	0x40008400

20017a04 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
20017a04:	b480      	push	{r7}
20017a06:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
20017a08:	4b05      	ldr	r3, [pc, #20]	@ (20017a20 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
20017a0a:	681b      	ldr	r3, [r3, #0]
20017a0c:	4a04      	ldr	r2, [pc, #16]	@ (20017a20 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
20017a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20017a12:	6013      	str	r3, [r2, #0]
}
20017a14:	bf00      	nop
20017a16:	46bd      	mov	sp, r7
20017a18:	f85d 7b04 	ldr.w	r7, [sp], #4
20017a1c:	4770      	bx	lr
20017a1e:	bf00      	nop
20017a20:	40008400 	.word	0x40008400

20017a24 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
20017a24:	b480      	push	{r7}
20017a26:	b083      	sub	sp, #12
20017a28:	af00      	add	r7, sp, #0
20017a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != (void *)NULL);

  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
20017a2c:	4b0e      	ldr	r3, [pc, #56]	@ (20017a68 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
20017a2e:	685b      	ldr	r3, [r3, #4]
20017a30:	b29a      	uxth	r2, r3
20017a32:	687b      	ldr	r3, [r7, #4]
20017a34:	601a      	str	r2, [r3, #0]

  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
20017a36:	4b0c      	ldr	r3, [pc, #48]	@ (20017a68 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
20017a38:	681b      	ldr	r3, [r3, #0]
20017a3a:	0a1b      	lsrs	r3, r3, #8
20017a3c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20017a40:	687b      	ldr	r3, [r7, #4]
20017a42:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
20017a44:	4b08      	ldr	r3, [pc, #32]	@ (20017a68 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
20017a46:	689b      	ldr	r3, [r3, #8]
20017a48:	0c1b      	lsrs	r3, r3, #16
20017a4a:	b29a      	uxth	r2, r3
20017a4c:	687b      	ldr	r3, [r7, #4]
20017a4e:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
20017a50:	4b05      	ldr	r3, [pc, #20]	@ (20017a68 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
20017a52:	689b      	ldr	r3, [r3, #8]
20017a54:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
20017a58:	687b      	ldr	r3, [r7, #4]
20017a5a:	60da      	str	r2, [r3, #12]
}
20017a5c:	bf00      	nop
20017a5e:	370c      	adds	r7, #12
20017a60:	46bd      	mov	sp, r7
20017a62:	f85d 7b04 	ldr.w	r7, [sp], #4
20017a66:	4770      	bx	lr
20017a68:	40008400 	.word	0x40008400

20017a6c <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
20017a6c:	b580      	push	{r7, lr}
20017a6e:	b084      	sub	sp, #16
20017a70:	af00      	add	r7, sp, #0
20017a72:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
20017a74:	2300      	movs	r3, #0
20017a76:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Get time-out */
  tickstart = HAL_GetTick();
20017a78:	f7ea fc22 	bl	200022c0 <HAL_GetTick>
20017a7c:	60b8      	str	r0, [r7, #8]

  /* Wait for CRS flag or time-out detection */
  do
  {
    if (Timeout != HAL_MAX_DELAY)
20017a7e:	687b      	ldr	r3, [r7, #4]
20017a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
20017a84:	d00c      	beq.n	20017aa0 <HAL_RCCEx_CRSWaitSynchronization+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
20017a86:	f7ea fc1b 	bl	200022c0 <HAL_GetTick>
20017a8a:	4602      	mov	r2, r0
20017a8c:	68bb      	ldr	r3, [r7, #8]
20017a8e:	1ad3      	subs	r3, r2, r3
20017a90:	687a      	ldr	r2, [r7, #4]
20017a92:	429a      	cmp	r2, r3
20017a94:	d302      	bcc.n	20017a9c <HAL_RCCEx_CRSWaitSynchronization+0x30>
20017a96:	687b      	ldr	r3, [r7, #4]
20017a98:	2b00      	cmp	r3, #0
20017a9a:	d101      	bne.n	20017aa0 <HAL_RCCEx_CRSWaitSynchronization+0x34>
      {
        crsstatus = RCC_CRS_TIMEOUT;
20017a9c:	2301      	movs	r3, #1
20017a9e:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
20017aa0:	4b2a      	ldr	r3, [pc, #168]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017aa2:	689b      	ldr	r3, [r3, #8]
20017aa4:	f003 0301 	and.w	r3, r3, #1
20017aa8:	2b01      	cmp	r3, #1
20017aaa:	d106      	bne.n	20017aba <HAL_RCCEx_CRSWaitSynchronization+0x4e>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
20017aac:	68fb      	ldr	r3, [r7, #12]
20017aae:	f043 0302 	orr.w	r3, r3, #2
20017ab2:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
20017ab4:	4b25      	ldr	r3, [pc, #148]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017ab6:	2201      	movs	r2, #1
20017ab8:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNCWARN flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
20017aba:	4b24      	ldr	r3, [pc, #144]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017abc:	689b      	ldr	r3, [r3, #8]
20017abe:	f003 0302 	and.w	r3, r3, #2
20017ac2:	2b02      	cmp	r3, #2
20017ac4:	d106      	bne.n	20017ad4 <HAL_RCCEx_CRSWaitSynchronization+0x68>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
20017ac6:	68fb      	ldr	r3, [r7, #12]
20017ac8:	f043 0304 	orr.w	r3, r3, #4
20017acc:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
20017ace:	4b1f      	ldr	r3, [pc, #124]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017ad0:	2202      	movs	r2, #2
20017ad2:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS TRIM overflow flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
20017ad4:	4b1d      	ldr	r3, [pc, #116]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017ad6:	689b      	ldr	r3, [r3, #8]
20017ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20017adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20017ae0:	d106      	bne.n	20017af0 <HAL_RCCEx_CRSWaitSynchronization+0x84>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
20017ae2:	68fb      	ldr	r3, [r7, #12]
20017ae4:	f043 0320 	orr.w	r3, r3, #32
20017ae8:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
20017aea:	4b18      	ldr	r3, [pc, #96]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017aec:	2204      	movs	r2, #4
20017aee:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Error flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
20017af0:	4b16      	ldr	r3, [pc, #88]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017af2:	689b      	ldr	r3, [r3, #8]
20017af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20017af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20017afc:	d106      	bne.n	20017b0c <HAL_RCCEx_CRSWaitSynchronization+0xa0>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
20017afe:	68fb      	ldr	r3, [r7, #12]
20017b00:	f043 0308 	orr.w	r3, r3, #8
20017b04:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
20017b06:	4b11      	ldr	r3, [pc, #68]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017b08:	2204      	movs	r2, #4
20017b0a:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNC Missed flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
20017b0c:	4b0f      	ldr	r3, [pc, #60]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017b0e:	689b      	ldr	r3, [r3, #8]
20017b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20017b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20017b18:	d106      	bne.n	20017b28 <HAL_RCCEx_CRSWaitSynchronization+0xbc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
20017b1a:	68fb      	ldr	r3, [r7, #12]
20017b1c:	f043 0310 	orr.w	r3, r3, #16
20017b20:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
20017b22:	4b0a      	ldr	r3, [pc, #40]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017b24:	2204      	movs	r2, #4
20017b26:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Expected SYNC flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
20017b28:	4b08      	ldr	r3, [pc, #32]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017b2a:	689b      	ldr	r3, [r3, #8]
20017b2c:	f003 0308 	and.w	r3, r3, #8
20017b30:	2b08      	cmp	r3, #8
20017b32:	d102      	bne.n	20017b3a <HAL_RCCEx_CRSWaitSynchronization+0xce>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
20017b34:	4b05      	ldr	r3, [pc, #20]	@ (20017b4c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
20017b36:	2208      	movs	r2, #8
20017b38:	60da      	str	r2, [r3, #12]
    }
  }
  while (RCC_CRS_NONE == crsstatus);
20017b3a:	68fb      	ldr	r3, [r7, #12]
20017b3c:	2b00      	cmp	r3, #0
20017b3e:	d09e      	beq.n	20017a7e <HAL_RCCEx_CRSWaitSynchronization+0x12>

  return crsstatus;
20017b40:	68fb      	ldr	r3, [r7, #12]
}
20017b42:	4618      	mov	r0, r3
20017b44:	3710      	adds	r7, #16
20017b46:	46bd      	mov	sp, r7
20017b48:	bd80      	pop	{r7, pc}
20017b4a:	bf00      	nop
20017b4c:	40008400 	.word	0x40008400

20017b50 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
20017b50:	b580      	push	{r7, lr}
20017b52:	b084      	sub	sp, #16
20017b54:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
20017b56:	2300      	movs	r3, #0
20017b58:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
20017b5a:	4b33      	ldr	r3, [pc, #204]	@ (20017c28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
20017b5c:	689b      	ldr	r3, [r3, #8]
20017b5e:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
20017b60:	4b31      	ldr	r3, [pc, #196]	@ (20017c28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
20017b62:	681b      	ldr	r3, [r3, #0]
20017b64:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if (((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
20017b66:	68bb      	ldr	r3, [r7, #8]
20017b68:	f003 0301 	and.w	r3, r3, #1
20017b6c:	2b00      	cmp	r3, #0
20017b6e:	d00a      	beq.n	20017b86 <HAL_RCCEx_CRS_IRQHandler+0x36>
20017b70:	687b      	ldr	r3, [r7, #4]
20017b72:	f003 0301 	and.w	r3, r3, #1
20017b76:	2b00      	cmp	r3, #0
20017b78:	d005      	beq.n	20017b86 <HAL_RCCEx_CRS_IRQHandler+0x36>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
20017b7a:	4b2b      	ldr	r3, [pc, #172]	@ (20017c28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
20017b7c:	2201      	movs	r2, #1
20017b7e:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
20017b80:	f000 f854 	bl	20017c2c <HAL_RCCEx_CRS_SyncOkCallback>
20017b84:	e04b      	b.n	20017c1e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS SYNCWARN flag  */
  else if (((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
20017b86:	68bb      	ldr	r3, [r7, #8]
20017b88:	f003 0302 	and.w	r3, r3, #2
20017b8c:	2b00      	cmp	r3, #0
20017b8e:	d00a      	beq.n	20017ba6 <HAL_RCCEx_CRS_IRQHandler+0x56>
20017b90:	687b      	ldr	r3, [r7, #4]
20017b92:	f003 0302 	and.w	r3, r3, #2
20017b96:	2b00      	cmp	r3, #0
20017b98:	d005      	beq.n	20017ba6 <HAL_RCCEx_CRS_IRQHandler+0x56>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
20017b9a:	4b23      	ldr	r3, [pc, #140]	@ (20017c28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
20017b9c:	2202      	movs	r2, #2
20017b9e:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
20017ba0:	f000 f84b 	bl	20017c3a <HAL_RCCEx_CRS_SyncWarnCallback>
20017ba4:	e03b      	b.n	20017c1e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Expected SYNC flag  */
  else if (((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
20017ba6:	68bb      	ldr	r3, [r7, #8]
20017ba8:	f003 0308 	and.w	r3, r3, #8
20017bac:	2b00      	cmp	r3, #0
20017bae:	d00a      	beq.n	20017bc6 <HAL_RCCEx_CRS_IRQHandler+0x76>
20017bb0:	687b      	ldr	r3, [r7, #4]
20017bb2:	f003 0308 	and.w	r3, r3, #8
20017bb6:	2b00      	cmp	r3, #0
20017bb8:	d005      	beq.n	20017bc6 <HAL_RCCEx_CRS_IRQHandler+0x76>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
20017bba:	4b1b      	ldr	r3, [pc, #108]	@ (20017c28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
20017bbc:	2208      	movs	r2, #8
20017bbe:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
20017bc0:	f000 f842 	bl	20017c48 <HAL_RCCEx_CRS_ExpectedSyncCallback>
20017bc4:	e02b      	b.n	20017c1e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Error flags  */
  else
  {
    if (((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
20017bc6:	68bb      	ldr	r3, [r7, #8]
20017bc8:	f003 0304 	and.w	r3, r3, #4
20017bcc:	2b00      	cmp	r3, #0
20017bce:	d026      	beq.n	20017c1e <HAL_RCCEx_CRS_IRQHandler+0xce>
20017bd0:	687b      	ldr	r3, [r7, #4]
20017bd2:	f003 0304 	and.w	r3, r3, #4
20017bd6:	2b00      	cmp	r3, #0
20017bd8:	d021      	beq.n	20017c1e <HAL_RCCEx_CRS_IRQHandler+0xce>
    {
      if ((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
20017bda:	68bb      	ldr	r3, [r7, #8]
20017bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20017be0:	2b00      	cmp	r3, #0
20017be2:	d003      	beq.n	20017bec <HAL_RCCEx_CRS_IRQHandler+0x9c>
      {
        crserror |= RCC_CRS_SYNCERR;
20017be4:	68fb      	ldr	r3, [r7, #12]
20017be6:	f043 0308 	orr.w	r3, r3, #8
20017bea:	60fb      	str	r3, [r7, #12]
      }
      if ((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
20017bec:	68bb      	ldr	r3, [r7, #8]
20017bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20017bf2:	2b00      	cmp	r3, #0
20017bf4:	d003      	beq.n	20017bfe <HAL_RCCEx_CRS_IRQHandler+0xae>
      {
        crserror |= RCC_CRS_SYNCMISS;
20017bf6:	68fb      	ldr	r3, [r7, #12]
20017bf8:	f043 0310 	orr.w	r3, r3, #16
20017bfc:	60fb      	str	r3, [r7, #12]
      }
      if ((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
20017bfe:	68bb      	ldr	r3, [r7, #8]
20017c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20017c04:	2b00      	cmp	r3, #0
20017c06:	d003      	beq.n	20017c10 <HAL_RCCEx_CRS_IRQHandler+0xc0>
      {
        crserror |= RCC_CRS_TRIMOVF;
20017c08:	68fb      	ldr	r3, [r7, #12]
20017c0a:	f043 0320 	orr.w	r3, r3, #32
20017c0e:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
20017c10:	4b05      	ldr	r3, [pc, #20]	@ (20017c28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
20017c12:	2204      	movs	r2, #4
20017c14:	60da      	str	r2, [r3, #12]

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
20017c16:	68f8      	ldr	r0, [r7, #12]
20017c18:	f000 f81d 	bl	20017c56 <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
20017c1c:	e7ff      	b.n	20017c1e <HAL_RCCEx_CRS_IRQHandler+0xce>
20017c1e:	bf00      	nop
20017c20:	3710      	adds	r7, #16
20017c22:	46bd      	mov	sp, r7
20017c24:	bd80      	pop	{r7, pc}
20017c26:	bf00      	nop
20017c28:	40008400 	.word	0x40008400

20017c2c <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
20017c2c:	b480      	push	{r7}
20017c2e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
20017c30:	bf00      	nop
20017c32:	46bd      	mov	sp, r7
20017c34:	f85d 7b04 	ldr.w	r7, [sp], #4
20017c38:	4770      	bx	lr

20017c3a <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
20017c3a:	b480      	push	{r7}
20017c3c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
20017c3e:	bf00      	nop
20017c40:	46bd      	mov	sp, r7
20017c42:	f85d 7b04 	ldr.w	r7, [sp], #4
20017c46:	4770      	bx	lr

20017c48 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
20017c48:	b480      	push	{r7}
20017c4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
20017c4c:	bf00      	nop
20017c4e:	46bd      	mov	sp, r7
20017c50:	f85d 7b04 	ldr.w	r7, [sp], #4
20017c54:	4770      	bx	lr

20017c56 <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
20017c56:	b480      	push	{r7}
20017c58:	b083      	sub	sp, #12
20017c5a:	af00      	add	r7, sp, #0
20017c5c:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
20017c5e:	bf00      	nop
20017c60:	370c      	adds	r7, #12
20017c62:	46bd      	mov	sp, r7
20017c64:	f85d 7b04 	ldr.w	r7, [sp], #4
20017c68:	4770      	bx	lr
	...

20017c6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
20017c6c:	b580      	push	{r7, lr}
20017c6e:	b084      	sub	sp, #16
20017c70:	af00      	add	r7, sp, #0
20017c72:	6078      	str	r0, [r7, #4]
20017c74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
20017c76:	2300      	movs	r3, #0
20017c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
20017c7a:	4b53      	ldr	r3, [pc, #332]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20017c7e:	f003 0303 	and.w	r3, r3, #3
20017c82:	2b03      	cmp	r3, #3
20017c84:	d101      	bne.n	20017c8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
20017c86:	2301      	movs	r3, #1
20017c88:	e099      	b.n	20017dbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
20017c8a:	4b4f      	ldr	r3, [pc, #316]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017c8c:	681b      	ldr	r3, [r3, #0]
20017c8e:	4a4e      	ldr	r2, [pc, #312]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017c90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
20017c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20017c96:	f7ea fb13 	bl	200022c0 <HAL_GetTick>
20017c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
20017c9c:	e008      	b.n	20017cb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
20017c9e:	f7ea fb0f 	bl	200022c0 <HAL_GetTick>
20017ca2:	4602      	mov	r2, r0
20017ca4:	68bb      	ldr	r3, [r7, #8]
20017ca6:	1ad3      	subs	r3, r2, r3
20017ca8:	2b02      	cmp	r3, #2
20017caa:	d901      	bls.n	20017cb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
20017cac:	2303      	movs	r3, #3
20017cae:	e086      	b.n	20017dbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
20017cb0:	4b45      	ldr	r3, [pc, #276]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017cb2:	681b      	ldr	r3, [r3, #0]
20017cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20017cb8:	2b00      	cmp	r3, #0
20017cba:	d1f0      	bne.n	20017c9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
20017cbc:	4b42      	ldr	r3, [pc, #264]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20017cc0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
20017cc4:	687b      	ldr	r3, [r7, #4]
20017cc6:	681b      	ldr	r3, [r3, #0]
20017cc8:	031b      	lsls	r3, r3, #12
20017cca:	493f      	ldr	r1, [pc, #252]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017ccc:	4313      	orrs	r3, r2
20017cce:	628b      	str	r3, [r1, #40]	@ 0x28
20017cd0:	687b      	ldr	r3, [r7, #4]
20017cd2:	685b      	ldr	r3, [r3, #4]
20017cd4:	3b01      	subs	r3, #1
20017cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
20017cda:	687b      	ldr	r3, [r7, #4]
20017cdc:	689b      	ldr	r3, [r3, #8]
20017cde:	3b01      	subs	r3, #1
20017ce0:	025b      	lsls	r3, r3, #9
20017ce2:	b29b      	uxth	r3, r3
20017ce4:	431a      	orrs	r2, r3
20017ce6:	687b      	ldr	r3, [r7, #4]
20017ce8:	68db      	ldr	r3, [r3, #12]
20017cea:	3b01      	subs	r3, #1
20017cec:	041b      	lsls	r3, r3, #16
20017cee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
20017cf2:	431a      	orrs	r2, r3
20017cf4:	687b      	ldr	r3, [r7, #4]
20017cf6:	691b      	ldr	r3, [r3, #16]
20017cf8:	3b01      	subs	r3, #1
20017cfa:	061b      	lsls	r3, r3, #24
20017cfc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
20017d00:	4931      	ldr	r1, [pc, #196]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d02:	4313      	orrs	r3, r2
20017d04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
20017d06:	4b30      	ldr	r3, [pc, #192]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017d0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
20017d0e:	687b      	ldr	r3, [r7, #4]
20017d10:	695b      	ldr	r3, [r3, #20]
20017d12:	492d      	ldr	r1, [pc, #180]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d14:	4313      	orrs	r3, r2
20017d16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
20017d18:	4b2b      	ldr	r3, [pc, #172]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017d1c:	f023 0220 	bic.w	r2, r3, #32
20017d20:	687b      	ldr	r3, [r7, #4]
20017d22:	699b      	ldr	r3, [r3, #24]
20017d24:	4928      	ldr	r1, [pc, #160]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d26:	4313      	orrs	r3, r2
20017d28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
20017d2a:	4b27      	ldr	r3, [pc, #156]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017d2e:	4a26      	ldr	r2, [pc, #152]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d30:	f023 0310 	bic.w	r3, r3, #16
20017d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
20017d36:	4b24      	ldr	r3, [pc, #144]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
20017d3a:	4b24      	ldr	r3, [pc, #144]	@ (20017dcc <RCCEx_PLL2_Config+0x160>)
20017d3c:	4013      	ands	r3, r2
20017d3e:	687a      	ldr	r2, [r7, #4]
20017d40:	69d2      	ldr	r2, [r2, #28]
20017d42:	00d2      	lsls	r2, r2, #3
20017d44:	4920      	ldr	r1, [pc, #128]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d46:	4313      	orrs	r3, r2
20017d48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
20017d4a:	4b1f      	ldr	r3, [pc, #124]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017d4e:	4a1e      	ldr	r2, [pc, #120]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d50:	f043 0310 	orr.w	r3, r3, #16
20017d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
20017d56:	683b      	ldr	r3, [r7, #0]
20017d58:	2b00      	cmp	r3, #0
20017d5a:	d106      	bne.n	20017d6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
20017d5c:	4b1a      	ldr	r3, [pc, #104]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017d60:	4a19      	ldr	r2, [pc, #100]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
20017d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
20017d68:	e00f      	b.n	20017d8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
20017d6a:	683b      	ldr	r3, [r7, #0]
20017d6c:	2b01      	cmp	r3, #1
20017d6e:	d106      	bne.n	20017d7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
20017d70:	4b15      	ldr	r3, [pc, #84]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017d74:	4a14      	ldr	r2, [pc, #80]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
20017d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
20017d7c:	e005      	b.n	20017d8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
20017d7e:	4b12      	ldr	r3, [pc, #72]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017d82:	4a11      	ldr	r2, [pc, #68]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
20017d88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
20017d8a:	4b0f      	ldr	r3, [pc, #60]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d8c:	681b      	ldr	r3, [r3, #0]
20017d8e:	4a0e      	ldr	r2, [pc, #56]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017d90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
20017d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20017d96:	f7ea fa93 	bl	200022c0 <HAL_GetTick>
20017d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
20017d9c:	e008      	b.n	20017db0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
20017d9e:	f7ea fa8f 	bl	200022c0 <HAL_GetTick>
20017da2:	4602      	mov	r2, r0
20017da4:	68bb      	ldr	r3, [r7, #8]
20017da6:	1ad3      	subs	r3, r2, r3
20017da8:	2b02      	cmp	r3, #2
20017daa:	d901      	bls.n	20017db0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
20017dac:	2303      	movs	r3, #3
20017dae:	e006      	b.n	20017dbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
20017db0:	4b05      	ldr	r3, [pc, #20]	@ (20017dc8 <RCCEx_PLL2_Config+0x15c>)
20017db2:	681b      	ldr	r3, [r3, #0]
20017db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20017db8:	2b00      	cmp	r3, #0
20017dba:	d0f0      	beq.n	20017d9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
20017dbc:	7bfb      	ldrb	r3, [r7, #15]
}
20017dbe:	4618      	mov	r0, r3
20017dc0:	3710      	adds	r7, #16
20017dc2:	46bd      	mov	sp, r7
20017dc4:	bd80      	pop	{r7, pc}
20017dc6:	bf00      	nop
20017dc8:	58024400 	.word	0x58024400
20017dcc:	ffff0007 	.word	0xffff0007

20017dd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
20017dd0:	b580      	push	{r7, lr}
20017dd2:	b084      	sub	sp, #16
20017dd4:	af00      	add	r7, sp, #0
20017dd6:	6078      	str	r0, [r7, #4]
20017dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
20017dda:	2300      	movs	r3, #0
20017ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
20017dde:	4b53      	ldr	r3, [pc, #332]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20017de2:	f003 0303 	and.w	r3, r3, #3
20017de6:	2b03      	cmp	r3, #3
20017de8:	d101      	bne.n	20017dee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
20017dea:	2301      	movs	r3, #1
20017dec:	e099      	b.n	20017f22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
20017dee:	4b4f      	ldr	r3, [pc, #316]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017df0:	681b      	ldr	r3, [r3, #0]
20017df2:	4a4e      	ldr	r2, [pc, #312]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20017df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20017dfa:	f7ea fa61 	bl	200022c0 <HAL_GetTick>
20017dfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
20017e00:	e008      	b.n	20017e14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
20017e02:	f7ea fa5d 	bl	200022c0 <HAL_GetTick>
20017e06:	4602      	mov	r2, r0
20017e08:	68bb      	ldr	r3, [r7, #8]
20017e0a:	1ad3      	subs	r3, r2, r3
20017e0c:	2b02      	cmp	r3, #2
20017e0e:	d901      	bls.n	20017e14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
20017e10:	2303      	movs	r3, #3
20017e12:	e086      	b.n	20017f22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
20017e14:	4b45      	ldr	r3, [pc, #276]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e16:	681b      	ldr	r3, [r3, #0]
20017e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20017e1c:	2b00      	cmp	r3, #0
20017e1e:	d1f0      	bne.n	20017e02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
20017e20:	4b42      	ldr	r3, [pc, #264]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20017e24:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
20017e28:	687b      	ldr	r3, [r7, #4]
20017e2a:	681b      	ldr	r3, [r3, #0]
20017e2c:	051b      	lsls	r3, r3, #20
20017e2e:	493f      	ldr	r1, [pc, #252]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e30:	4313      	orrs	r3, r2
20017e32:	628b      	str	r3, [r1, #40]	@ 0x28
20017e34:	687b      	ldr	r3, [r7, #4]
20017e36:	685b      	ldr	r3, [r3, #4]
20017e38:	3b01      	subs	r3, #1
20017e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
20017e3e:	687b      	ldr	r3, [r7, #4]
20017e40:	689b      	ldr	r3, [r3, #8]
20017e42:	3b01      	subs	r3, #1
20017e44:	025b      	lsls	r3, r3, #9
20017e46:	b29b      	uxth	r3, r3
20017e48:	431a      	orrs	r2, r3
20017e4a:	687b      	ldr	r3, [r7, #4]
20017e4c:	68db      	ldr	r3, [r3, #12]
20017e4e:	3b01      	subs	r3, #1
20017e50:	041b      	lsls	r3, r3, #16
20017e52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
20017e56:	431a      	orrs	r2, r3
20017e58:	687b      	ldr	r3, [r7, #4]
20017e5a:	691b      	ldr	r3, [r3, #16]
20017e5c:	3b01      	subs	r3, #1
20017e5e:	061b      	lsls	r3, r3, #24
20017e60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
20017e64:	4931      	ldr	r1, [pc, #196]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e66:	4313      	orrs	r3, r2
20017e68:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
20017e6a:	4b30      	ldr	r3, [pc, #192]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017e6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
20017e72:	687b      	ldr	r3, [r7, #4]
20017e74:	695b      	ldr	r3, [r3, #20]
20017e76:	492d      	ldr	r1, [pc, #180]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e78:	4313      	orrs	r3, r2
20017e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
20017e7c:	4b2b      	ldr	r3, [pc, #172]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017e80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
20017e84:	687b      	ldr	r3, [r7, #4]
20017e86:	699b      	ldr	r3, [r3, #24]
20017e88:	4928      	ldr	r1, [pc, #160]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e8a:	4313      	orrs	r3, r2
20017e8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
20017e8e:	4b27      	ldr	r3, [pc, #156]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017e92:	4a26      	ldr	r2, [pc, #152]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
20017e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
20017e9a:	4b24      	ldr	r3, [pc, #144]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
20017e9e:	4b24      	ldr	r3, [pc, #144]	@ (20017f30 <RCCEx_PLL3_Config+0x160>)
20017ea0:	4013      	ands	r3, r2
20017ea2:	687a      	ldr	r2, [r7, #4]
20017ea4:	69d2      	ldr	r2, [r2, #28]
20017ea6:	00d2      	lsls	r2, r2, #3
20017ea8:	4920      	ldr	r1, [pc, #128]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017eaa:	4313      	orrs	r3, r2
20017eac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
20017eae:	4b1f      	ldr	r3, [pc, #124]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017eb2:	4a1e      	ldr	r2, [pc, #120]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20017eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
20017eba:	683b      	ldr	r3, [r7, #0]
20017ebc:	2b00      	cmp	r3, #0
20017ebe:	d106      	bne.n	20017ece <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
20017ec0:	4b1a      	ldr	r3, [pc, #104]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017ec4:	4a19      	ldr	r2, [pc, #100]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017ec6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
20017eca:	62d3      	str	r3, [r2, #44]	@ 0x2c
20017ecc:	e00f      	b.n	20017eee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
20017ece:	683b      	ldr	r3, [r7, #0]
20017ed0:	2b01      	cmp	r3, #1
20017ed2:	d106      	bne.n	20017ee2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
20017ed4:	4b15      	ldr	r3, [pc, #84]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017ed8:	4a14      	ldr	r2, [pc, #80]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017eda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
20017ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
20017ee0:	e005      	b.n	20017eee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
20017ee2:	4b12      	ldr	r3, [pc, #72]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20017ee6:	4a11      	ldr	r2, [pc, #68]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017ee8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20017eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
20017eee:	4b0f      	ldr	r3, [pc, #60]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017ef0:	681b      	ldr	r3, [r3, #0]
20017ef2:	4a0e      	ldr	r2, [pc, #56]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20017ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20017efa:	f7ea f9e1 	bl	200022c0 <HAL_GetTick>
20017efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
20017f00:	e008      	b.n	20017f14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
20017f02:	f7ea f9dd 	bl	200022c0 <HAL_GetTick>
20017f06:	4602      	mov	r2, r0
20017f08:	68bb      	ldr	r3, [r7, #8]
20017f0a:	1ad3      	subs	r3, r2, r3
20017f0c:	2b02      	cmp	r3, #2
20017f0e:	d901      	bls.n	20017f14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
20017f10:	2303      	movs	r3, #3
20017f12:	e006      	b.n	20017f22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
20017f14:	4b05      	ldr	r3, [pc, #20]	@ (20017f2c <RCCEx_PLL3_Config+0x15c>)
20017f16:	681b      	ldr	r3, [r3, #0]
20017f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
20017f1c:	2b00      	cmp	r3, #0
20017f1e:	d0f0      	beq.n	20017f02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
20017f20:	7bfb      	ldrb	r3, [r7, #15]
}
20017f22:	4618      	mov	r0, r3
20017f24:	3710      	adds	r7, #16
20017f26:	46bd      	mov	sp, r7
20017f28:	bd80      	pop	{r7, pc}
20017f2a:	bf00      	nop
20017f2c:	58024400 	.word	0x58024400
20017f30:	ffff0007 	.word	0xffff0007

20017f34 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
20017f34:	b580      	push	{r7, lr}
20017f36:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_LSECSS))
20017f38:	4b07      	ldr	r3, [pc, #28]	@ (20017f58 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
20017f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
20017f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
20017f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20017f44:	d105      	bne.n	20017f52 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
20017f46:	4b04      	ldr	r3, [pc, #16]	@ (20017f58 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
20017f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
20017f4c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
20017f4e:	f000 f805 	bl	20017f5c <HAL_RCCEx_LSECSS_Callback>

  }
}
20017f52:	bf00      	nop
20017f54:	bd80      	pop	{r7, pc}
20017f56:	bf00      	nop
20017f58:	58024400 	.word	0x58024400

20017f5c <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
20017f5c:	b480      	push	{r7}
20017f5e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
  */
}
20017f60:	bf00      	nop
20017f62:	46bd      	mov	sp, r7
20017f64:	f85d 7b04 	ldr.w	r7, [sp], #4
20017f68:	4770      	bx	lr
	...

20017f6c <exit>:
20017f6c:	b508      	push	{r3, lr}
20017f6e:	4b06      	ldr	r3, [pc, #24]	@ (20017f88 <exit+0x1c>)
20017f70:	4604      	mov	r4, r0
20017f72:	b113      	cbz	r3, 20017f7a <exit+0xe>
20017f74:	2100      	movs	r1, #0
20017f76:	f3af 8000 	nop.w
20017f7a:	4b04      	ldr	r3, [pc, #16]	@ (20017f8c <exit+0x20>)
20017f7c:	681b      	ldr	r3, [r3, #0]
20017f7e:	b103      	cbz	r3, 20017f82 <exit+0x16>
20017f80:	4798      	blx	r3
20017f82:	4620      	mov	r0, r4
20017f84:	f7e9 fd5c 	bl	20001a40 <_exit>
20017f88:	00000000 	.word	0x00000000
20017f8c:	200006e4 	.word	0x200006e4

20017f90 <std>:
20017f90:	2300      	movs	r3, #0
20017f92:	b510      	push	{r4, lr}
20017f94:	4604      	mov	r4, r0
20017f96:	e9c0 3300 	strd	r3, r3, [r0]
20017f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
20017f9e:	6083      	str	r3, [r0, #8]
20017fa0:	8181      	strh	r1, [r0, #12]
20017fa2:	6643      	str	r3, [r0, #100]	@ 0x64
20017fa4:	81c2      	strh	r2, [r0, #14]
20017fa6:	6183      	str	r3, [r0, #24]
20017fa8:	4619      	mov	r1, r3
20017faa:	2208      	movs	r2, #8
20017fac:	305c      	adds	r0, #92	@ 0x5c
20017fae:	f000 f97c 	bl	200182aa <memset>
20017fb2:	4b0d      	ldr	r3, [pc, #52]	@ (20017fe8 <std+0x58>)
20017fb4:	6263      	str	r3, [r4, #36]	@ 0x24
20017fb6:	4b0d      	ldr	r3, [pc, #52]	@ (20017fec <std+0x5c>)
20017fb8:	62a3      	str	r3, [r4, #40]	@ 0x28
20017fba:	4b0d      	ldr	r3, [pc, #52]	@ (20017ff0 <std+0x60>)
20017fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
20017fbe:	4b0d      	ldr	r3, [pc, #52]	@ (20017ff4 <std+0x64>)
20017fc0:	6323      	str	r3, [r4, #48]	@ 0x30
20017fc2:	4b0d      	ldr	r3, [pc, #52]	@ (20017ff8 <std+0x68>)
20017fc4:	6224      	str	r4, [r4, #32]
20017fc6:	429c      	cmp	r4, r3
20017fc8:	d006      	beq.n	20017fd8 <std+0x48>
20017fca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
20017fce:	4294      	cmp	r4, r2
20017fd0:	d002      	beq.n	20017fd8 <std+0x48>
20017fd2:	33d0      	adds	r3, #208	@ 0xd0
20017fd4:	429c      	cmp	r4, r3
20017fd6:	d105      	bne.n	20017fe4 <std+0x54>
20017fd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
20017fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20017fe0:	f000 ba33 	b.w	2001844a <__retarget_lock_init_recursive>
20017fe4:	bd10      	pop	{r4, pc}
20017fe6:	bf00      	nop
20017fe8:	20018221 	.word	0x20018221
20017fec:	20018247 	.word	0x20018247
20017ff0:	2001827f 	.word	0x2001827f
20017ff4:	200182a3 	.word	0x200182a3
20017ff8:	200005ac 	.word	0x200005ac

20017ffc <stdio_exit_handler>:
20017ffc:	4a02      	ldr	r2, [pc, #8]	@ (20018008 <stdio_exit_handler+0xc>)
20017ffe:	4903      	ldr	r1, [pc, #12]	@ (2001800c <stdio_exit_handler+0x10>)
20018000:	4803      	ldr	r0, [pc, #12]	@ (20018010 <stdio_exit_handler+0x14>)
20018002:	f000 b8ef 	b.w	200181e4 <_fwalk_sglue>
20018006:	bf00      	nop
20018008:	200004c0 	.word	0x200004c0
2001800c:	20018759 	.word	0x20018759
20018010:	200004d0 	.word	0x200004d0

20018014 <cleanup_stdio>:
20018014:	6841      	ldr	r1, [r0, #4]
20018016:	4b0c      	ldr	r3, [pc, #48]	@ (20018048 <cleanup_stdio+0x34>)
20018018:	4299      	cmp	r1, r3
2001801a:	b510      	push	{r4, lr}
2001801c:	4604      	mov	r4, r0
2001801e:	d001      	beq.n	20018024 <cleanup_stdio+0x10>
20018020:	f000 fb9a 	bl	20018758 <_fflush_r>
20018024:	68a1      	ldr	r1, [r4, #8]
20018026:	4b09      	ldr	r3, [pc, #36]	@ (2001804c <cleanup_stdio+0x38>)
20018028:	4299      	cmp	r1, r3
2001802a:	d002      	beq.n	20018032 <cleanup_stdio+0x1e>
2001802c:	4620      	mov	r0, r4
2001802e:	f000 fb93 	bl	20018758 <_fflush_r>
20018032:	68e1      	ldr	r1, [r4, #12]
20018034:	4b06      	ldr	r3, [pc, #24]	@ (20018050 <cleanup_stdio+0x3c>)
20018036:	4299      	cmp	r1, r3
20018038:	d004      	beq.n	20018044 <cleanup_stdio+0x30>
2001803a:	4620      	mov	r0, r4
2001803c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20018040:	f000 bb8a 	b.w	20018758 <_fflush_r>
20018044:	bd10      	pop	{r4, pc}
20018046:	bf00      	nop
20018048:	200005ac 	.word	0x200005ac
2001804c:	20000614 	.word	0x20000614
20018050:	2000067c 	.word	0x2000067c

20018054 <__fp_lock>:
20018054:	b508      	push	{r3, lr}
20018056:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
20018058:	07da      	lsls	r2, r3, #31
2001805a:	d405      	bmi.n	20018068 <__fp_lock+0x14>
2001805c:	898b      	ldrh	r3, [r1, #12]
2001805e:	059b      	lsls	r3, r3, #22
20018060:	d402      	bmi.n	20018068 <__fp_lock+0x14>
20018062:	6d88      	ldr	r0, [r1, #88]	@ 0x58
20018064:	f000 f9f5 	bl	20018452 <__retarget_lock_acquire_recursive>
20018068:	2000      	movs	r0, #0
2001806a:	bd08      	pop	{r3, pc}

2001806c <__fp_unlock>:
2001806c:	b508      	push	{r3, lr}
2001806e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
20018070:	07da      	lsls	r2, r3, #31
20018072:	d405      	bmi.n	20018080 <__fp_unlock+0x14>
20018074:	898b      	ldrh	r3, [r1, #12]
20018076:	059b      	lsls	r3, r3, #22
20018078:	d402      	bmi.n	20018080 <__fp_unlock+0x14>
2001807a:	6d88      	ldr	r0, [r1, #88]	@ 0x58
2001807c:	f000 f9ef 	bl	2001845e <__retarget_lock_release_recursive>
20018080:	2000      	movs	r0, #0
20018082:	bd08      	pop	{r3, pc}

20018084 <global_stdio_init.part.0>:
20018084:	b510      	push	{r4, lr}
20018086:	4b0b      	ldr	r3, [pc, #44]	@ (200180b4 <global_stdio_init.part.0+0x30>)
20018088:	4c0b      	ldr	r4, [pc, #44]	@ (200180b8 <global_stdio_init.part.0+0x34>)
2001808a:	4a0c      	ldr	r2, [pc, #48]	@ (200180bc <global_stdio_init.part.0+0x38>)
2001808c:	601a      	str	r2, [r3, #0]
2001808e:	4620      	mov	r0, r4
20018090:	2200      	movs	r2, #0
20018092:	2104      	movs	r1, #4
20018094:	f7ff ff7c 	bl	20017f90 <std>
20018098:	f104 0068 	add.w	r0, r4, #104	@ 0x68
2001809c:	2201      	movs	r2, #1
2001809e:	2109      	movs	r1, #9
200180a0:	f7ff ff76 	bl	20017f90 <std>
200180a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
200180a8:	2202      	movs	r2, #2
200180aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
200180ae:	2112      	movs	r1, #18
200180b0:	f7ff bf6e 	b.w	20017f90 <std>
200180b4:	200006e4 	.word	0x200006e4
200180b8:	200005ac 	.word	0x200005ac
200180bc:	20017ffd 	.word	0x20017ffd

200180c0 <__sfp_lock_acquire>:
200180c0:	4801      	ldr	r0, [pc, #4]	@ (200180c8 <__sfp_lock_acquire+0x8>)
200180c2:	f000 b9c6 	b.w	20018452 <__retarget_lock_acquire_recursive>
200180c6:	bf00      	nop
200180c8:	200006f3 	.word	0x200006f3

200180cc <__sfp_lock_release>:
200180cc:	4801      	ldr	r0, [pc, #4]	@ (200180d4 <__sfp_lock_release+0x8>)
200180ce:	f000 b9c6 	b.w	2001845e <__retarget_lock_release_recursive>
200180d2:	bf00      	nop
200180d4:	200006f3 	.word	0x200006f3

200180d8 <__sfp>:
200180d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200180da:	4607      	mov	r7, r0
200180dc:	f7ff fff0 	bl	200180c0 <__sfp_lock_acquire>
200180e0:	4b23      	ldr	r3, [pc, #140]	@ (20018170 <__sfp+0x98>)
200180e2:	681b      	ldr	r3, [r3, #0]
200180e4:	b90b      	cbnz	r3, 200180ea <__sfp+0x12>
200180e6:	f7ff ffcd 	bl	20018084 <global_stdio_init.part.0>
200180ea:	4e22      	ldr	r6, [pc, #136]	@ (20018174 <__sfp+0x9c>)
200180ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
200180f0:	3b01      	subs	r3, #1
200180f2:	d50f      	bpl.n	20018114 <__sfp+0x3c>
200180f4:	6835      	ldr	r5, [r6, #0]
200180f6:	2d00      	cmp	r5, #0
200180f8:	d137      	bne.n	2001816a <__sfp+0x92>
200180fa:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
200180fe:	4638      	mov	r0, r7
20018100:	f000 fa1a 	bl	20018538 <_malloc_r>
20018104:	4604      	mov	r4, r0
20018106:	bb28      	cbnz	r0, 20018154 <__sfp+0x7c>
20018108:	6030      	str	r0, [r6, #0]
2001810a:	f7ff ffdf 	bl	200180cc <__sfp_lock_release>
2001810e:	230c      	movs	r3, #12
20018110:	603b      	str	r3, [r7, #0]
20018112:	e01b      	b.n	2001814c <__sfp+0x74>
20018114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
20018118:	b9d5      	cbnz	r5, 20018150 <__sfp+0x78>
2001811a:	4b17      	ldr	r3, [pc, #92]	@ (20018178 <__sfp+0xa0>)
2001811c:	60e3      	str	r3, [r4, #12]
2001811e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
20018122:	6665      	str	r5, [r4, #100]	@ 0x64
20018124:	f000 f991 	bl	2001844a <__retarget_lock_init_recursive>
20018128:	f7ff ffd0 	bl	200180cc <__sfp_lock_release>
2001812c:	e9c4 5501 	strd	r5, r5, [r4, #4]
20018130:	e9c4 5504 	strd	r5, r5, [r4, #16]
20018134:	6025      	str	r5, [r4, #0]
20018136:	61a5      	str	r5, [r4, #24]
20018138:	2208      	movs	r2, #8
2001813a:	4629      	mov	r1, r5
2001813c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
20018140:	f000 f8b3 	bl	200182aa <memset>
20018144:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
20018148:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
2001814c:	4620      	mov	r0, r4
2001814e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20018150:	3468      	adds	r4, #104	@ 0x68
20018152:	e7cd      	b.n	200180f0 <__sfp+0x18>
20018154:	2304      	movs	r3, #4
20018156:	6005      	str	r5, [r0, #0]
20018158:	6043      	str	r3, [r0, #4]
2001815a:	300c      	adds	r0, #12
2001815c:	60a0      	str	r0, [r4, #8]
2001815e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
20018162:	4629      	mov	r1, r5
20018164:	f000 f8a1 	bl	200182aa <memset>
20018168:	6034      	str	r4, [r6, #0]
2001816a:	6836      	ldr	r6, [r6, #0]
2001816c:	e7be      	b.n	200180ec <__sfp+0x14>
2001816e:	bf00      	nop
20018170:	200006e4 	.word	0x200006e4
20018174:	200004c0 	.word	0x200004c0
20018178:	ffff0001 	.word	0xffff0001

2001817c <__sinit>:
2001817c:	b510      	push	{r4, lr}
2001817e:	4604      	mov	r4, r0
20018180:	f7ff ff9e 	bl	200180c0 <__sfp_lock_acquire>
20018184:	6a23      	ldr	r3, [r4, #32]
20018186:	b11b      	cbz	r3, 20018190 <__sinit+0x14>
20018188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2001818c:	f7ff bf9e 	b.w	200180cc <__sfp_lock_release>
20018190:	4b04      	ldr	r3, [pc, #16]	@ (200181a4 <__sinit+0x28>)
20018192:	6223      	str	r3, [r4, #32]
20018194:	4b04      	ldr	r3, [pc, #16]	@ (200181a8 <__sinit+0x2c>)
20018196:	681b      	ldr	r3, [r3, #0]
20018198:	2b00      	cmp	r3, #0
2001819a:	d1f5      	bne.n	20018188 <__sinit+0xc>
2001819c:	f7ff ff72 	bl	20018084 <global_stdio_init.part.0>
200181a0:	e7f2      	b.n	20018188 <__sinit+0xc>
200181a2:	bf00      	nop
200181a4:	20018015 	.word	0x20018015
200181a8:	200006e4 	.word	0x200006e4

200181ac <__fp_lock_all>:
200181ac:	b508      	push	{r3, lr}
200181ae:	f7ff ff87 	bl	200180c0 <__sfp_lock_acquire>
200181b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
200181b6:	4a02      	ldr	r2, [pc, #8]	@ (200181c0 <__fp_lock_all+0x14>)
200181b8:	4902      	ldr	r1, [pc, #8]	@ (200181c4 <__fp_lock_all+0x18>)
200181ba:	2000      	movs	r0, #0
200181bc:	f000 b812 	b.w	200181e4 <_fwalk_sglue>
200181c0:	200004c0 	.word	0x200004c0
200181c4:	20018055 	.word	0x20018055

200181c8 <__fp_unlock_all>:
200181c8:	b508      	push	{r3, lr}
200181ca:	4a04      	ldr	r2, [pc, #16]	@ (200181dc <__fp_unlock_all+0x14>)
200181cc:	4904      	ldr	r1, [pc, #16]	@ (200181e0 <__fp_unlock_all+0x18>)
200181ce:	2000      	movs	r0, #0
200181d0:	f000 f808 	bl	200181e4 <_fwalk_sglue>
200181d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
200181d8:	f7ff bf78 	b.w	200180cc <__sfp_lock_release>
200181dc:	200004c0 	.word	0x200004c0
200181e0:	2001806d 	.word	0x2001806d

200181e4 <_fwalk_sglue>:
200181e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
200181e8:	4607      	mov	r7, r0
200181ea:	4688      	mov	r8, r1
200181ec:	4614      	mov	r4, r2
200181ee:	2600      	movs	r6, #0
200181f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
200181f4:	f1b9 0901 	subs.w	r9, r9, #1
200181f8:	d505      	bpl.n	20018206 <_fwalk_sglue+0x22>
200181fa:	6824      	ldr	r4, [r4, #0]
200181fc:	2c00      	cmp	r4, #0
200181fe:	d1f7      	bne.n	200181f0 <_fwalk_sglue+0xc>
20018200:	4630      	mov	r0, r6
20018202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20018206:	89ab      	ldrh	r3, [r5, #12]
20018208:	2b01      	cmp	r3, #1
2001820a:	d907      	bls.n	2001821c <_fwalk_sglue+0x38>
2001820c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
20018210:	3301      	adds	r3, #1
20018212:	d003      	beq.n	2001821c <_fwalk_sglue+0x38>
20018214:	4629      	mov	r1, r5
20018216:	4638      	mov	r0, r7
20018218:	47c0      	blx	r8
2001821a:	4306      	orrs	r6, r0
2001821c:	3568      	adds	r5, #104	@ 0x68
2001821e:	e7e9      	b.n	200181f4 <_fwalk_sglue+0x10>

20018220 <__sread>:
20018220:	b510      	push	{r4, lr}
20018222:	460c      	mov	r4, r1
20018224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20018228:	f000 f8c0 	bl	200183ac <_read_r>
2001822c:	2800      	cmp	r0, #0
2001822e:	bfab      	itete	ge
20018230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
20018232:	89a3      	ldrhlt	r3, [r4, #12]
20018234:	181b      	addge	r3, r3, r0
20018236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
2001823a:	bfac      	ite	ge
2001823c:	6563      	strge	r3, [r4, #84]	@ 0x54
2001823e:	81a3      	strhlt	r3, [r4, #12]
20018240:	bd10      	pop	{r4, pc}

20018242 <__seofread>:
20018242:	2000      	movs	r0, #0
20018244:	4770      	bx	lr

20018246 <__swrite>:
20018246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2001824a:	461f      	mov	r7, r3
2001824c:	898b      	ldrh	r3, [r1, #12]
2001824e:	05db      	lsls	r3, r3, #23
20018250:	4605      	mov	r5, r0
20018252:	460c      	mov	r4, r1
20018254:	4616      	mov	r6, r2
20018256:	d505      	bpl.n	20018264 <__swrite+0x1e>
20018258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2001825c:	2302      	movs	r3, #2
2001825e:	2200      	movs	r2, #0
20018260:	f000 f892 	bl	20018388 <_lseek_r>
20018264:	89a3      	ldrh	r3, [r4, #12]
20018266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2001826a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
2001826e:	81a3      	strh	r3, [r4, #12]
20018270:	4632      	mov	r2, r6
20018272:	463b      	mov	r3, r7
20018274:	4628      	mov	r0, r5
20018276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2001827a:	f000 b8a9 	b.w	200183d0 <_write_r>

2001827e <__sseek>:
2001827e:	b510      	push	{r4, lr}
20018280:	460c      	mov	r4, r1
20018282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20018286:	f000 f87f 	bl	20018388 <_lseek_r>
2001828a:	1c43      	adds	r3, r0, #1
2001828c:	89a3      	ldrh	r3, [r4, #12]
2001828e:	bf15      	itete	ne
20018290:	6560      	strne	r0, [r4, #84]	@ 0x54
20018292:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
20018296:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
2001829a:	81a3      	strheq	r3, [r4, #12]
2001829c:	bf18      	it	ne
2001829e:	81a3      	strhne	r3, [r4, #12]
200182a0:	bd10      	pop	{r4, pc}

200182a2 <__sclose>:
200182a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
200182a6:	f000 b809 	b.w	200182bc <_close_r>

200182aa <memset>:
200182aa:	4402      	add	r2, r0
200182ac:	4603      	mov	r3, r0
200182ae:	4293      	cmp	r3, r2
200182b0:	d100      	bne.n	200182b4 <memset+0xa>
200182b2:	4770      	bx	lr
200182b4:	f803 1b01 	strb.w	r1, [r3], #1
200182b8:	e7f9      	b.n	200182ae <memset+0x4>
	...

200182bc <_close_r>:
200182bc:	b538      	push	{r3, r4, r5, lr}
200182be:	4d06      	ldr	r5, [pc, #24]	@ (200182d8 <_close_r+0x1c>)
200182c0:	2300      	movs	r3, #0
200182c2:	4604      	mov	r4, r0
200182c4:	4608      	mov	r0, r1
200182c6:	602b      	str	r3, [r5, #0]
200182c8:	f7e9 fbfe 	bl	20001ac8 <_close>
200182cc:	1c43      	adds	r3, r0, #1
200182ce:	d102      	bne.n	200182d6 <_close_r+0x1a>
200182d0:	682b      	ldr	r3, [r5, #0]
200182d2:	b103      	cbz	r3, 200182d6 <_close_r+0x1a>
200182d4:	6023      	str	r3, [r4, #0]
200182d6:	bd38      	pop	{r3, r4, r5, pc}
200182d8:	200006e8 	.word	0x200006e8

200182dc <_reclaim_reent>:
200182dc:	4b29      	ldr	r3, [pc, #164]	@ (20018384 <_reclaim_reent+0xa8>)
200182de:	681b      	ldr	r3, [r3, #0]
200182e0:	4283      	cmp	r3, r0
200182e2:	b570      	push	{r4, r5, r6, lr}
200182e4:	4604      	mov	r4, r0
200182e6:	d04b      	beq.n	20018380 <_reclaim_reent+0xa4>
200182e8:	69c3      	ldr	r3, [r0, #28]
200182ea:	b1ab      	cbz	r3, 20018318 <_reclaim_reent+0x3c>
200182ec:	68db      	ldr	r3, [r3, #12]
200182ee:	b16b      	cbz	r3, 2001830c <_reclaim_reent+0x30>
200182f0:	2500      	movs	r5, #0
200182f2:	69e3      	ldr	r3, [r4, #28]
200182f4:	68db      	ldr	r3, [r3, #12]
200182f6:	5959      	ldr	r1, [r3, r5]
200182f8:	2900      	cmp	r1, #0
200182fa:	d13b      	bne.n	20018374 <_reclaim_reent+0x98>
200182fc:	3504      	adds	r5, #4
200182fe:	2d80      	cmp	r5, #128	@ 0x80
20018300:	d1f7      	bne.n	200182f2 <_reclaim_reent+0x16>
20018302:	69e3      	ldr	r3, [r4, #28]
20018304:	4620      	mov	r0, r4
20018306:	68d9      	ldr	r1, [r3, #12]
20018308:	f000 f8aa 	bl	20018460 <_free_r>
2001830c:	69e3      	ldr	r3, [r4, #28]
2001830e:	6819      	ldr	r1, [r3, #0]
20018310:	b111      	cbz	r1, 20018318 <_reclaim_reent+0x3c>
20018312:	4620      	mov	r0, r4
20018314:	f000 f8a4 	bl	20018460 <_free_r>
20018318:	6961      	ldr	r1, [r4, #20]
2001831a:	b111      	cbz	r1, 20018322 <_reclaim_reent+0x46>
2001831c:	4620      	mov	r0, r4
2001831e:	f000 f89f 	bl	20018460 <_free_r>
20018322:	69e1      	ldr	r1, [r4, #28]
20018324:	b111      	cbz	r1, 2001832c <_reclaim_reent+0x50>
20018326:	4620      	mov	r0, r4
20018328:	f000 f89a 	bl	20018460 <_free_r>
2001832c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
2001832e:	b111      	cbz	r1, 20018336 <_reclaim_reent+0x5a>
20018330:	4620      	mov	r0, r4
20018332:	f000 f895 	bl	20018460 <_free_r>
20018336:	6b61      	ldr	r1, [r4, #52]	@ 0x34
20018338:	b111      	cbz	r1, 20018340 <_reclaim_reent+0x64>
2001833a:	4620      	mov	r0, r4
2001833c:	f000 f890 	bl	20018460 <_free_r>
20018340:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
20018342:	b111      	cbz	r1, 2001834a <_reclaim_reent+0x6e>
20018344:	4620      	mov	r0, r4
20018346:	f000 f88b 	bl	20018460 <_free_r>
2001834a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
2001834c:	b111      	cbz	r1, 20018354 <_reclaim_reent+0x78>
2001834e:	4620      	mov	r0, r4
20018350:	f000 f886 	bl	20018460 <_free_r>
20018354:	6c61      	ldr	r1, [r4, #68]	@ 0x44
20018356:	b111      	cbz	r1, 2001835e <_reclaim_reent+0x82>
20018358:	4620      	mov	r0, r4
2001835a:	f000 f881 	bl	20018460 <_free_r>
2001835e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
20018360:	b111      	cbz	r1, 20018368 <_reclaim_reent+0x8c>
20018362:	4620      	mov	r0, r4
20018364:	f000 f87c 	bl	20018460 <_free_r>
20018368:	6a23      	ldr	r3, [r4, #32]
2001836a:	b14b      	cbz	r3, 20018380 <_reclaim_reent+0xa4>
2001836c:	4620      	mov	r0, r4
2001836e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20018372:	4718      	bx	r3
20018374:	680e      	ldr	r6, [r1, #0]
20018376:	4620      	mov	r0, r4
20018378:	f000 f872 	bl	20018460 <_free_r>
2001837c:	4631      	mov	r1, r6
2001837e:	e7bb      	b.n	200182f8 <_reclaim_reent+0x1c>
20018380:	bd70      	pop	{r4, r5, r6, pc}
20018382:	bf00      	nop
20018384:	200004cc 	.word	0x200004cc

20018388 <_lseek_r>:
20018388:	b538      	push	{r3, r4, r5, lr}
2001838a:	4d07      	ldr	r5, [pc, #28]	@ (200183a8 <_lseek_r+0x20>)
2001838c:	4604      	mov	r4, r0
2001838e:	4608      	mov	r0, r1
20018390:	4611      	mov	r1, r2
20018392:	2200      	movs	r2, #0
20018394:	602a      	str	r2, [r5, #0]
20018396:	461a      	mov	r2, r3
20018398:	f7e9 fbbd 	bl	20001b16 <_lseek>
2001839c:	1c43      	adds	r3, r0, #1
2001839e:	d102      	bne.n	200183a6 <_lseek_r+0x1e>
200183a0:	682b      	ldr	r3, [r5, #0]
200183a2:	b103      	cbz	r3, 200183a6 <_lseek_r+0x1e>
200183a4:	6023      	str	r3, [r4, #0]
200183a6:	bd38      	pop	{r3, r4, r5, pc}
200183a8:	200006e8 	.word	0x200006e8

200183ac <_read_r>:
200183ac:	b538      	push	{r3, r4, r5, lr}
200183ae:	4d07      	ldr	r5, [pc, #28]	@ (200183cc <_read_r+0x20>)
200183b0:	4604      	mov	r4, r0
200183b2:	4608      	mov	r0, r1
200183b4:	4611      	mov	r1, r2
200183b6:	2200      	movs	r2, #0
200183b8:	602a      	str	r2, [r5, #0]
200183ba:	461a      	mov	r2, r3
200183bc:	f7e9 fb4b 	bl	20001a56 <_read>
200183c0:	1c43      	adds	r3, r0, #1
200183c2:	d102      	bne.n	200183ca <_read_r+0x1e>
200183c4:	682b      	ldr	r3, [r5, #0]
200183c6:	b103      	cbz	r3, 200183ca <_read_r+0x1e>
200183c8:	6023      	str	r3, [r4, #0]
200183ca:	bd38      	pop	{r3, r4, r5, pc}
200183cc:	200006e8 	.word	0x200006e8

200183d0 <_write_r>:
200183d0:	b538      	push	{r3, r4, r5, lr}
200183d2:	4d07      	ldr	r5, [pc, #28]	@ (200183f0 <_write_r+0x20>)
200183d4:	4604      	mov	r4, r0
200183d6:	4608      	mov	r0, r1
200183d8:	4611      	mov	r1, r2
200183da:	2200      	movs	r2, #0
200183dc:	602a      	str	r2, [r5, #0]
200183de:	461a      	mov	r2, r3
200183e0:	f7e9 fb56 	bl	20001a90 <_write>
200183e4:	1c43      	adds	r3, r0, #1
200183e6:	d102      	bne.n	200183ee <_write_r+0x1e>
200183e8:	682b      	ldr	r3, [r5, #0]
200183ea:	b103      	cbz	r3, 200183ee <_write_r+0x1e>
200183ec:	6023      	str	r3, [r4, #0]
200183ee:	bd38      	pop	{r3, r4, r5, pc}
200183f0:	200006e8 	.word	0x200006e8

200183f4 <__errno>:
200183f4:	4b01      	ldr	r3, [pc, #4]	@ (200183fc <__errno+0x8>)
200183f6:	6818      	ldr	r0, [r3, #0]
200183f8:	4770      	bx	lr
200183fa:	bf00      	nop
200183fc:	200004cc 	.word	0x200004cc

20018400 <__libc_init_array>:
20018400:	b570      	push	{r4, r5, r6, lr}
20018402:	4d0d      	ldr	r5, [pc, #52]	@ (20018438 <__libc_init_array+0x38>)
20018404:	4c0d      	ldr	r4, [pc, #52]	@ (2001843c <__libc_init_array+0x3c>)
20018406:	1b64      	subs	r4, r4, r5
20018408:	10a4      	asrs	r4, r4, #2
2001840a:	2600      	movs	r6, #0
2001840c:	42a6      	cmp	r6, r4
2001840e:	d109      	bne.n	20018424 <__libc_init_array+0x24>
20018410:	4d0b      	ldr	r5, [pc, #44]	@ (20018440 <__libc_init_array+0x40>)
20018412:	4c0c      	ldr	r4, [pc, #48]	@ (20018444 <__libc_init_array+0x44>)
20018414:	f000 f9ee 	bl	200187f4 <_init>
20018418:	1b64      	subs	r4, r4, r5
2001841a:	10a4      	asrs	r4, r4, #2
2001841c:	2600      	movs	r6, #0
2001841e:	42a6      	cmp	r6, r4
20018420:	d105      	bne.n	2001842e <__libc_init_array+0x2e>
20018422:	bd70      	pop	{r4, r5, r6, pc}
20018424:	f855 3b04 	ldr.w	r3, [r5], #4
20018428:	4798      	blx	r3
2001842a:	3601      	adds	r6, #1
2001842c:	e7ee      	b.n	2001840c <__libc_init_array+0xc>
2001842e:	f855 3b04 	ldr.w	r3, [r5], #4
20018432:	4798      	blx	r3
20018434:	3601      	adds	r6, #1
20018436:	e7f2      	b.n	2001841e <__libc_init_array+0x1e>
20018438:	200004a0 	.word	0x200004a0
2001843c:	200004a0 	.word	0x200004a0
20018440:	200004a0 	.word	0x200004a0
20018444:	200004a4 	.word	0x200004a4

20018448 <__retarget_lock_init>:
20018448:	4770      	bx	lr

2001844a <__retarget_lock_init_recursive>:
2001844a:	4770      	bx	lr

2001844c <__retarget_lock_close>:
2001844c:	4770      	bx	lr

2001844e <__retarget_lock_close_recursive>:
2001844e:	4770      	bx	lr

20018450 <__retarget_lock_acquire>:
20018450:	4770      	bx	lr

20018452 <__retarget_lock_acquire_recursive>:
20018452:	4770      	bx	lr

20018454 <__retarget_lock_try_acquire>:
20018454:	2001      	movs	r0, #1
20018456:	4770      	bx	lr

20018458 <__retarget_lock_try_acquire_recursive>:
20018458:	2001      	movs	r0, #1
2001845a:	4770      	bx	lr

2001845c <__retarget_lock_release>:
2001845c:	4770      	bx	lr

2001845e <__retarget_lock_release_recursive>:
2001845e:	4770      	bx	lr

20018460 <_free_r>:
20018460:	b538      	push	{r3, r4, r5, lr}
20018462:	4605      	mov	r5, r0
20018464:	2900      	cmp	r1, #0
20018466:	d041      	beq.n	200184ec <_free_r+0x8c>
20018468:	f851 3c04 	ldr.w	r3, [r1, #-4]
2001846c:	1f0c      	subs	r4, r1, #4
2001846e:	2b00      	cmp	r3, #0
20018470:	bfb8      	it	lt
20018472:	18e4      	addlt	r4, r4, r3
20018474:	f000 f8e0 	bl	20018638 <__malloc_lock>
20018478:	4a1d      	ldr	r2, [pc, #116]	@ (200184f0 <_free_r+0x90>)
2001847a:	6813      	ldr	r3, [r2, #0]
2001847c:	b933      	cbnz	r3, 2001848c <_free_r+0x2c>
2001847e:	6063      	str	r3, [r4, #4]
20018480:	6014      	str	r4, [r2, #0]
20018482:	4628      	mov	r0, r5
20018484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
20018488:	f000 b8dc 	b.w	20018644 <__malloc_unlock>
2001848c:	42a3      	cmp	r3, r4
2001848e:	d908      	bls.n	200184a2 <_free_r+0x42>
20018490:	6820      	ldr	r0, [r4, #0]
20018492:	1821      	adds	r1, r4, r0
20018494:	428b      	cmp	r3, r1
20018496:	bf01      	itttt	eq
20018498:	6819      	ldreq	r1, [r3, #0]
2001849a:	685b      	ldreq	r3, [r3, #4]
2001849c:	1809      	addeq	r1, r1, r0
2001849e:	6021      	streq	r1, [r4, #0]
200184a0:	e7ed      	b.n	2001847e <_free_r+0x1e>
200184a2:	461a      	mov	r2, r3
200184a4:	685b      	ldr	r3, [r3, #4]
200184a6:	b10b      	cbz	r3, 200184ac <_free_r+0x4c>
200184a8:	42a3      	cmp	r3, r4
200184aa:	d9fa      	bls.n	200184a2 <_free_r+0x42>
200184ac:	6811      	ldr	r1, [r2, #0]
200184ae:	1850      	adds	r0, r2, r1
200184b0:	42a0      	cmp	r0, r4
200184b2:	d10b      	bne.n	200184cc <_free_r+0x6c>
200184b4:	6820      	ldr	r0, [r4, #0]
200184b6:	4401      	add	r1, r0
200184b8:	1850      	adds	r0, r2, r1
200184ba:	4283      	cmp	r3, r0
200184bc:	6011      	str	r1, [r2, #0]
200184be:	d1e0      	bne.n	20018482 <_free_r+0x22>
200184c0:	6818      	ldr	r0, [r3, #0]
200184c2:	685b      	ldr	r3, [r3, #4]
200184c4:	6053      	str	r3, [r2, #4]
200184c6:	4408      	add	r0, r1
200184c8:	6010      	str	r0, [r2, #0]
200184ca:	e7da      	b.n	20018482 <_free_r+0x22>
200184cc:	d902      	bls.n	200184d4 <_free_r+0x74>
200184ce:	230c      	movs	r3, #12
200184d0:	602b      	str	r3, [r5, #0]
200184d2:	e7d6      	b.n	20018482 <_free_r+0x22>
200184d4:	6820      	ldr	r0, [r4, #0]
200184d6:	1821      	adds	r1, r4, r0
200184d8:	428b      	cmp	r3, r1
200184da:	bf04      	itt	eq
200184dc:	6819      	ldreq	r1, [r3, #0]
200184de:	685b      	ldreq	r3, [r3, #4]
200184e0:	6063      	str	r3, [r4, #4]
200184e2:	bf04      	itt	eq
200184e4:	1809      	addeq	r1, r1, r0
200184e6:	6021      	streq	r1, [r4, #0]
200184e8:	6054      	str	r4, [r2, #4]
200184ea:	e7ca      	b.n	20018482 <_free_r+0x22>
200184ec:	bd38      	pop	{r3, r4, r5, pc}
200184ee:	bf00      	nop
200184f0:	200006f8 	.word	0x200006f8

200184f4 <sbrk_aligned>:
200184f4:	b570      	push	{r4, r5, r6, lr}
200184f6:	4e0f      	ldr	r6, [pc, #60]	@ (20018534 <sbrk_aligned+0x40>)
200184f8:	460c      	mov	r4, r1
200184fa:	6831      	ldr	r1, [r6, #0]
200184fc:	4605      	mov	r5, r0
200184fe:	b911      	cbnz	r1, 20018506 <sbrk_aligned+0x12>
20018500:	f000 f966 	bl	200187d0 <_sbrk_r>
20018504:	6030      	str	r0, [r6, #0]
20018506:	4621      	mov	r1, r4
20018508:	4628      	mov	r0, r5
2001850a:	f000 f961 	bl	200187d0 <_sbrk_r>
2001850e:	1c43      	adds	r3, r0, #1
20018510:	d103      	bne.n	2001851a <sbrk_aligned+0x26>
20018512:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
20018516:	4620      	mov	r0, r4
20018518:	bd70      	pop	{r4, r5, r6, pc}
2001851a:	1cc4      	adds	r4, r0, #3
2001851c:	f024 0403 	bic.w	r4, r4, #3
20018520:	42a0      	cmp	r0, r4
20018522:	d0f8      	beq.n	20018516 <sbrk_aligned+0x22>
20018524:	1a21      	subs	r1, r4, r0
20018526:	4628      	mov	r0, r5
20018528:	f000 f952 	bl	200187d0 <_sbrk_r>
2001852c:	3001      	adds	r0, #1
2001852e:	d1f2      	bne.n	20018516 <sbrk_aligned+0x22>
20018530:	e7ef      	b.n	20018512 <sbrk_aligned+0x1e>
20018532:	bf00      	nop
20018534:	200006f4 	.word	0x200006f4

20018538 <_malloc_r>:
20018538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2001853c:	1ccd      	adds	r5, r1, #3
2001853e:	f025 0503 	bic.w	r5, r5, #3
20018542:	3508      	adds	r5, #8
20018544:	2d0c      	cmp	r5, #12
20018546:	bf38      	it	cc
20018548:	250c      	movcc	r5, #12
2001854a:	2d00      	cmp	r5, #0
2001854c:	4606      	mov	r6, r0
2001854e:	db01      	blt.n	20018554 <_malloc_r+0x1c>
20018550:	42a9      	cmp	r1, r5
20018552:	d904      	bls.n	2001855e <_malloc_r+0x26>
20018554:	230c      	movs	r3, #12
20018556:	6033      	str	r3, [r6, #0]
20018558:	2000      	movs	r0, #0
2001855a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2001855e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 20018634 <_malloc_r+0xfc>
20018562:	f000 f869 	bl	20018638 <__malloc_lock>
20018566:	f8d8 3000 	ldr.w	r3, [r8]
2001856a:	461c      	mov	r4, r3
2001856c:	bb44      	cbnz	r4, 200185c0 <_malloc_r+0x88>
2001856e:	4629      	mov	r1, r5
20018570:	4630      	mov	r0, r6
20018572:	f7ff ffbf 	bl	200184f4 <sbrk_aligned>
20018576:	1c43      	adds	r3, r0, #1
20018578:	4604      	mov	r4, r0
2001857a:	d158      	bne.n	2001862e <_malloc_r+0xf6>
2001857c:	f8d8 4000 	ldr.w	r4, [r8]
20018580:	4627      	mov	r7, r4
20018582:	2f00      	cmp	r7, #0
20018584:	d143      	bne.n	2001860e <_malloc_r+0xd6>
20018586:	2c00      	cmp	r4, #0
20018588:	d04b      	beq.n	20018622 <_malloc_r+0xea>
2001858a:	6823      	ldr	r3, [r4, #0]
2001858c:	4639      	mov	r1, r7
2001858e:	4630      	mov	r0, r6
20018590:	eb04 0903 	add.w	r9, r4, r3
20018594:	f000 f91c 	bl	200187d0 <_sbrk_r>
20018598:	4581      	cmp	r9, r0
2001859a:	d142      	bne.n	20018622 <_malloc_r+0xea>
2001859c:	6821      	ldr	r1, [r4, #0]
2001859e:	1a6d      	subs	r5, r5, r1
200185a0:	4629      	mov	r1, r5
200185a2:	4630      	mov	r0, r6
200185a4:	f7ff ffa6 	bl	200184f4 <sbrk_aligned>
200185a8:	3001      	adds	r0, #1
200185aa:	d03a      	beq.n	20018622 <_malloc_r+0xea>
200185ac:	6823      	ldr	r3, [r4, #0]
200185ae:	442b      	add	r3, r5
200185b0:	6023      	str	r3, [r4, #0]
200185b2:	f8d8 3000 	ldr.w	r3, [r8]
200185b6:	685a      	ldr	r2, [r3, #4]
200185b8:	bb62      	cbnz	r2, 20018614 <_malloc_r+0xdc>
200185ba:	f8c8 7000 	str.w	r7, [r8]
200185be:	e00f      	b.n	200185e0 <_malloc_r+0xa8>
200185c0:	6822      	ldr	r2, [r4, #0]
200185c2:	1b52      	subs	r2, r2, r5
200185c4:	d420      	bmi.n	20018608 <_malloc_r+0xd0>
200185c6:	2a0b      	cmp	r2, #11
200185c8:	d917      	bls.n	200185fa <_malloc_r+0xc2>
200185ca:	1961      	adds	r1, r4, r5
200185cc:	42a3      	cmp	r3, r4
200185ce:	6025      	str	r5, [r4, #0]
200185d0:	bf18      	it	ne
200185d2:	6059      	strne	r1, [r3, #4]
200185d4:	6863      	ldr	r3, [r4, #4]
200185d6:	bf08      	it	eq
200185d8:	f8c8 1000 	streq.w	r1, [r8]
200185dc:	5162      	str	r2, [r4, r5]
200185de:	604b      	str	r3, [r1, #4]
200185e0:	4630      	mov	r0, r6
200185e2:	f000 f82f 	bl	20018644 <__malloc_unlock>
200185e6:	f104 000b 	add.w	r0, r4, #11
200185ea:	1d23      	adds	r3, r4, #4
200185ec:	f020 0007 	bic.w	r0, r0, #7
200185f0:	1ac2      	subs	r2, r0, r3
200185f2:	bf1c      	itt	ne
200185f4:	1a1b      	subne	r3, r3, r0
200185f6:	50a3      	strne	r3, [r4, r2]
200185f8:	e7af      	b.n	2001855a <_malloc_r+0x22>
200185fa:	6862      	ldr	r2, [r4, #4]
200185fc:	42a3      	cmp	r3, r4
200185fe:	bf0c      	ite	eq
20018600:	f8c8 2000 	streq.w	r2, [r8]
20018604:	605a      	strne	r2, [r3, #4]
20018606:	e7eb      	b.n	200185e0 <_malloc_r+0xa8>
20018608:	4623      	mov	r3, r4
2001860a:	6864      	ldr	r4, [r4, #4]
2001860c:	e7ae      	b.n	2001856c <_malloc_r+0x34>
2001860e:	463c      	mov	r4, r7
20018610:	687f      	ldr	r7, [r7, #4]
20018612:	e7b6      	b.n	20018582 <_malloc_r+0x4a>
20018614:	461a      	mov	r2, r3
20018616:	685b      	ldr	r3, [r3, #4]
20018618:	42a3      	cmp	r3, r4
2001861a:	d1fb      	bne.n	20018614 <_malloc_r+0xdc>
2001861c:	2300      	movs	r3, #0
2001861e:	6053      	str	r3, [r2, #4]
20018620:	e7de      	b.n	200185e0 <_malloc_r+0xa8>
20018622:	230c      	movs	r3, #12
20018624:	6033      	str	r3, [r6, #0]
20018626:	4630      	mov	r0, r6
20018628:	f000 f80c 	bl	20018644 <__malloc_unlock>
2001862c:	e794      	b.n	20018558 <_malloc_r+0x20>
2001862e:	6005      	str	r5, [r0, #0]
20018630:	e7d6      	b.n	200185e0 <_malloc_r+0xa8>
20018632:	bf00      	nop
20018634:	200006f8 	.word	0x200006f8

20018638 <__malloc_lock>:
20018638:	4801      	ldr	r0, [pc, #4]	@ (20018640 <__malloc_lock+0x8>)
2001863a:	f7ff bf0a 	b.w	20018452 <__retarget_lock_acquire_recursive>
2001863e:	bf00      	nop
20018640:	200006f0 	.word	0x200006f0

20018644 <__malloc_unlock>:
20018644:	4801      	ldr	r0, [pc, #4]	@ (2001864c <__malloc_unlock+0x8>)
20018646:	f7ff bf0a 	b.w	2001845e <__retarget_lock_release_recursive>
2001864a:	bf00      	nop
2001864c:	200006f0 	.word	0x200006f0

20018650 <__sflush_r>:
20018650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
20018654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20018658:	0716      	lsls	r6, r2, #28
2001865a:	4605      	mov	r5, r0
2001865c:	460c      	mov	r4, r1
2001865e:	d454      	bmi.n	2001870a <__sflush_r+0xba>
20018660:	684b      	ldr	r3, [r1, #4]
20018662:	2b00      	cmp	r3, #0
20018664:	dc02      	bgt.n	2001866c <__sflush_r+0x1c>
20018666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
20018668:	2b00      	cmp	r3, #0
2001866a:	dd48      	ble.n	200186fe <__sflush_r+0xae>
2001866c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
2001866e:	2e00      	cmp	r6, #0
20018670:	d045      	beq.n	200186fe <__sflush_r+0xae>
20018672:	2300      	movs	r3, #0
20018674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
20018678:	682f      	ldr	r7, [r5, #0]
2001867a:	6a21      	ldr	r1, [r4, #32]
2001867c:	602b      	str	r3, [r5, #0]
2001867e:	d030      	beq.n	200186e2 <__sflush_r+0x92>
20018680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
20018682:	89a3      	ldrh	r3, [r4, #12]
20018684:	0759      	lsls	r1, r3, #29
20018686:	d505      	bpl.n	20018694 <__sflush_r+0x44>
20018688:	6863      	ldr	r3, [r4, #4]
2001868a:	1ad2      	subs	r2, r2, r3
2001868c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
2001868e:	b10b      	cbz	r3, 20018694 <__sflush_r+0x44>
20018690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
20018692:	1ad2      	subs	r2, r2, r3
20018694:	2300      	movs	r3, #0
20018696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
20018698:	6a21      	ldr	r1, [r4, #32]
2001869a:	4628      	mov	r0, r5
2001869c:	47b0      	blx	r6
2001869e:	1c43      	adds	r3, r0, #1
200186a0:	89a3      	ldrh	r3, [r4, #12]
200186a2:	d106      	bne.n	200186b2 <__sflush_r+0x62>
200186a4:	6829      	ldr	r1, [r5, #0]
200186a6:	291d      	cmp	r1, #29
200186a8:	d82b      	bhi.n	20018702 <__sflush_r+0xb2>
200186aa:	4a2a      	ldr	r2, [pc, #168]	@ (20018754 <__sflush_r+0x104>)
200186ac:	410a      	asrs	r2, r1
200186ae:	07d6      	lsls	r6, r2, #31
200186b0:	d427      	bmi.n	20018702 <__sflush_r+0xb2>
200186b2:	2200      	movs	r2, #0
200186b4:	6062      	str	r2, [r4, #4]
200186b6:	04d9      	lsls	r1, r3, #19
200186b8:	6922      	ldr	r2, [r4, #16]
200186ba:	6022      	str	r2, [r4, #0]
200186bc:	d504      	bpl.n	200186c8 <__sflush_r+0x78>
200186be:	1c42      	adds	r2, r0, #1
200186c0:	d101      	bne.n	200186c6 <__sflush_r+0x76>
200186c2:	682b      	ldr	r3, [r5, #0]
200186c4:	b903      	cbnz	r3, 200186c8 <__sflush_r+0x78>
200186c6:	6560      	str	r0, [r4, #84]	@ 0x54
200186c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
200186ca:	602f      	str	r7, [r5, #0]
200186cc:	b1b9      	cbz	r1, 200186fe <__sflush_r+0xae>
200186ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
200186d2:	4299      	cmp	r1, r3
200186d4:	d002      	beq.n	200186dc <__sflush_r+0x8c>
200186d6:	4628      	mov	r0, r5
200186d8:	f7ff fec2 	bl	20018460 <_free_r>
200186dc:	2300      	movs	r3, #0
200186de:	6363      	str	r3, [r4, #52]	@ 0x34
200186e0:	e00d      	b.n	200186fe <__sflush_r+0xae>
200186e2:	2301      	movs	r3, #1
200186e4:	4628      	mov	r0, r5
200186e6:	47b0      	blx	r6
200186e8:	4602      	mov	r2, r0
200186ea:	1c50      	adds	r0, r2, #1
200186ec:	d1c9      	bne.n	20018682 <__sflush_r+0x32>
200186ee:	682b      	ldr	r3, [r5, #0]
200186f0:	2b00      	cmp	r3, #0
200186f2:	d0c6      	beq.n	20018682 <__sflush_r+0x32>
200186f4:	2b1d      	cmp	r3, #29
200186f6:	d001      	beq.n	200186fc <__sflush_r+0xac>
200186f8:	2b16      	cmp	r3, #22
200186fa:	d11e      	bne.n	2001873a <__sflush_r+0xea>
200186fc:	602f      	str	r7, [r5, #0]
200186fe:	2000      	movs	r0, #0
20018700:	e022      	b.n	20018748 <__sflush_r+0xf8>
20018702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20018706:	b21b      	sxth	r3, r3
20018708:	e01b      	b.n	20018742 <__sflush_r+0xf2>
2001870a:	690f      	ldr	r7, [r1, #16]
2001870c:	2f00      	cmp	r7, #0
2001870e:	d0f6      	beq.n	200186fe <__sflush_r+0xae>
20018710:	0793      	lsls	r3, r2, #30
20018712:	680e      	ldr	r6, [r1, #0]
20018714:	bf08      	it	eq
20018716:	694b      	ldreq	r3, [r1, #20]
20018718:	600f      	str	r7, [r1, #0]
2001871a:	bf18      	it	ne
2001871c:	2300      	movne	r3, #0
2001871e:	eba6 0807 	sub.w	r8, r6, r7
20018722:	608b      	str	r3, [r1, #8]
20018724:	f1b8 0f00 	cmp.w	r8, #0
20018728:	dde9      	ble.n	200186fe <__sflush_r+0xae>
2001872a:	6a21      	ldr	r1, [r4, #32]
2001872c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
2001872e:	4643      	mov	r3, r8
20018730:	463a      	mov	r2, r7
20018732:	4628      	mov	r0, r5
20018734:	47b0      	blx	r6
20018736:	2800      	cmp	r0, #0
20018738:	dc08      	bgt.n	2001874c <__sflush_r+0xfc>
2001873a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2001873e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20018742:	81a3      	strh	r3, [r4, #12]
20018744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20018748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001874c:	4407      	add	r7, r0
2001874e:	eba8 0800 	sub.w	r8, r8, r0
20018752:	e7e7      	b.n	20018724 <__sflush_r+0xd4>
20018754:	dfbffffe 	.word	0xdfbffffe

20018758 <_fflush_r>:
20018758:	b538      	push	{r3, r4, r5, lr}
2001875a:	690b      	ldr	r3, [r1, #16]
2001875c:	4605      	mov	r5, r0
2001875e:	460c      	mov	r4, r1
20018760:	b913      	cbnz	r3, 20018768 <_fflush_r+0x10>
20018762:	2500      	movs	r5, #0
20018764:	4628      	mov	r0, r5
20018766:	bd38      	pop	{r3, r4, r5, pc}
20018768:	b118      	cbz	r0, 20018772 <_fflush_r+0x1a>
2001876a:	6a03      	ldr	r3, [r0, #32]
2001876c:	b90b      	cbnz	r3, 20018772 <_fflush_r+0x1a>
2001876e:	f7ff fd05 	bl	2001817c <__sinit>
20018772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20018776:	2b00      	cmp	r3, #0
20018778:	d0f3      	beq.n	20018762 <_fflush_r+0xa>
2001877a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
2001877c:	07d0      	lsls	r0, r2, #31
2001877e:	d404      	bmi.n	2001878a <_fflush_r+0x32>
20018780:	0599      	lsls	r1, r3, #22
20018782:	d402      	bmi.n	2001878a <_fflush_r+0x32>
20018784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
20018786:	f7ff fe64 	bl	20018452 <__retarget_lock_acquire_recursive>
2001878a:	4628      	mov	r0, r5
2001878c:	4621      	mov	r1, r4
2001878e:	f7ff ff5f 	bl	20018650 <__sflush_r>
20018792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
20018794:	07da      	lsls	r2, r3, #31
20018796:	4605      	mov	r5, r0
20018798:	d4e4      	bmi.n	20018764 <_fflush_r+0xc>
2001879a:	89a3      	ldrh	r3, [r4, #12]
2001879c:	059b      	lsls	r3, r3, #22
2001879e:	d4e1      	bmi.n	20018764 <_fflush_r+0xc>
200187a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
200187a2:	f7ff fe5c 	bl	2001845e <__retarget_lock_release_recursive>
200187a6:	e7dd      	b.n	20018764 <_fflush_r+0xc>

200187a8 <fflush>:
200187a8:	4601      	mov	r1, r0
200187aa:	b920      	cbnz	r0, 200187b6 <fflush+0xe>
200187ac:	4a04      	ldr	r2, [pc, #16]	@ (200187c0 <fflush+0x18>)
200187ae:	4905      	ldr	r1, [pc, #20]	@ (200187c4 <fflush+0x1c>)
200187b0:	4805      	ldr	r0, [pc, #20]	@ (200187c8 <fflush+0x20>)
200187b2:	f7ff bd17 	b.w	200181e4 <_fwalk_sglue>
200187b6:	4b05      	ldr	r3, [pc, #20]	@ (200187cc <fflush+0x24>)
200187b8:	6818      	ldr	r0, [r3, #0]
200187ba:	f7ff bfcd 	b.w	20018758 <_fflush_r>
200187be:	bf00      	nop
200187c0:	200004c0 	.word	0x200004c0
200187c4:	20018759 	.word	0x20018759
200187c8:	200004d0 	.word	0x200004d0
200187cc:	200004cc 	.word	0x200004cc

200187d0 <_sbrk_r>:
200187d0:	b538      	push	{r3, r4, r5, lr}
200187d2:	4d06      	ldr	r5, [pc, #24]	@ (200187ec <_sbrk_r+0x1c>)
200187d4:	2300      	movs	r3, #0
200187d6:	4604      	mov	r4, r0
200187d8:	4608      	mov	r0, r1
200187da:	602b      	str	r3, [r5, #0]
200187dc:	f7e9 fa1c 	bl	20001c18 <_sbrk>
200187e0:	1c43      	adds	r3, r0, #1
200187e2:	d102      	bne.n	200187ea <_sbrk_r+0x1a>
200187e4:	682b      	ldr	r3, [r5, #0]
200187e6:	b103      	cbz	r3, 200187ea <_sbrk_r+0x1a>
200187e8:	6023      	str	r3, [r4, #0]
200187ea:	bd38      	pop	{r3, r4, r5, pc}
200187ec:	200006e8 	.word	0x200006e8

200187f0 <__EH_FRAME_BEGIN__>:
200187f0:	00000000                                ....

200187f4 <_init>:
200187f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200187f6:	bf00      	nop
200187f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200187fa:	bc08      	pop	{r3}
200187fc:	469e      	mov	lr, r3
200187fe:	4770      	bx	lr

20018800 <_fini>:
20018800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20018802:	bf00      	nop
20018804:	bcf8      	pop	{r3, r4, r5, r6, r7}
20018806:	bc08      	pop	{r3}
20018808:	469e      	mov	lr, r3
2001880a:	4770      	bx	lr
